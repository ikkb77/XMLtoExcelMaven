<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<ReportDefinition type="standard">
    <TemplateName>developer-all-issue</TemplateName>
    <TemplatePath>C:\Users\ikkb7\AppData\Local\Fortify\config\AWB-23.2.0\reports\developer-all-issue.xml</TemplatePath>
    <LogoPath>/OT_logo.png</LogoPath>
    <Footnote>Copyright 2023 Open Text.</Footnote>
    <UserName>ikkb7</UserName>
    <ReportSection enabled="true" optionalSubsections="false">
        <Title>Report Overview</Title>
        <SubSection enabled="true">
            <Title>Report Summary</Title>
            <Description>This provides a high level summary of the findings that the analysis produced.  Also includes basic information on the scope of the scan.</Description>
            <Text>On 2024. 1. 2., a source code review was performed over the project code base. 191 files, 9,032 LOC (Executable) were scanned. A total of 934 issues were uncovered during the analysis.  This report provides a comprehensive description of all the types of issues found in this project.  Specific examples and source code are provided for each issue type.</Text>
        </SubSection>
        <SubSection enabled="true">
            <Title>Issue Summary by Fortify Priority Order</Title>
            <Description>A table summarizing the number of issues found and the breakdown of issues in each Fortify Priority Level</Description>
            <IssueListing listing="false" limit="-1">
                <Refinement></Refinement>
                <Chart chartType="table">
                    <Axis>Fortify Priority Order</Axis>
                    <MajorAttribute>Analysis</MajorAttribute>
                    <GroupingSection count="775">
                        <groupTitle>Low</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="77">
                        <groupTitle>Critical</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="64">
                        <groupTitle>High</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="18">
                        <groupTitle>Medium</groupTitle>
                    </GroupingSection>
                </Chart>
            </IssueListing>
        </SubSection>
    </ReportSection>
    <ReportSection enabled="true" optionalSubsections="false">
        <Title>Issue Summary</Title>
        <SubSection enabled="true">
            <Title>Overall number of results</Title>
            <Description>Results count</Description>
            <Text>The scan found 934 issues.</Text>
        </SubSection>
        <SubSection enabled="true">
            <Title>Issues By Category</Title>
            <IssueListing listing="false" limit="-1">
                <Refinement></Refinement>
                <Chart chartType="table">
                    <Axis>Category</Axis>
                    <MajorAttribute>Analysis</MajorAttribute>
                    <GroupingSection count="192">
                        <groupTitle>System Information Leak</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="153">
                        <groupTitle>Poor Error Handling: Overly Broad Catch</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="67">
                        <groupTitle>Poor Logging Practice: Use of a System Output Stream</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="50">
                        <groupTitle>Code Correctness: Constructor Invokes Overridable Function</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="42">
                        <groupTitle>Privacy Violation</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="42">
                        <groupTitle>SQL Injection</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="39">
                        <groupTitle>System Information Leak: Internal</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="32">
                        <groupTitle>Poor Error Handling: Empty Catch Block</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="29">
                        <groupTitle>Cross-Site Scripting: Persistent</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="29">
                        <groupTitle>Password Management: Password in Comment</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="27">
                        <groupTitle>Cross-Site Request Forgery</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="19">
                        <groupTitle>Password Management: Hardcoded Password</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="15">
                        <groupTitle>Hidden Field</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="15">
                        <groupTitle>Poor Error Handling: Overly Broad Throws</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="15">
                        <groupTitle>Unreleased Resource: Streams</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="13">
                        <groupTitle>Unreleased Resource: Database</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="11">
                        <groupTitle>Portability Flaw: Locale Dependent Comparison</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="8">
                        <groupTitle>Access Control: Database</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="8">
                        <groupTitle>Insecure Transport: External Link</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="8">
                        <groupTitle>Null Dereference</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="7">
                        <groupTitle>Denial of Service</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="6">
                        <groupTitle>Axis 2 Misconfiguration: Debug Information</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="6">
                        <groupTitle>Denial of Service: StringBuilder</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="6">
                        <groupTitle>J2EE Bad Practices: Threads</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="6">
                        <groupTitle>Poor Style: Non-final Public Static Field</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="5">
                        <groupTitle>J2EE Bad Practices: getConnection()</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="5">
                        <groupTitle>Password Management: Password in Configuration File</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="5">
                        <groupTitle>Poor Style: Value Never Read</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="4">
                        <groupTitle>Code Correctness: Erroneous String Compare</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="4">
                        <groupTitle>J2EE Bad Practices: Leftover Debug Code</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="4">
                        <groupTitle>Poor Style: Redundant Initialization</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="4">
                        <groupTitle>Weak Cryptographic Hash: Insecure PBE Iteration Count</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="4">
                        <groupTitle>Weak Encryption</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="3">
                        <groupTitle>Dead Code: Expression is Always false</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="3">
                        <groupTitle>J2EE Misconfiguration: Missing Error Handling</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="3">
                        <groupTitle>Privacy Violation: Autocomplete</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="3">
                        <groupTitle>Redundant Null Check</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="3">
                        <groupTitle>System Information Leak: HTML Comment in JSP</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="3">
                        <groupTitle>Unreleased Resource: Sockets</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="2">
                        <groupTitle>Code Correctness: Byte Array to String Conversion</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="2">
                        <groupTitle>Command Injection</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="2">
                        <groupTitle>Dead Code: Unused Method</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="2">
                        <groupTitle>J2EE Misconfiguration: Missing Data Transport Constraint</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="2">
                        <groupTitle>Missing Check for Null Parameter</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="2">
                        <groupTitle>Object Model Violation: Just one of equals() and hashCode() Defined</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="2">
                        <groupTitle>Password Management: Empty Password</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="2">
                        <groupTitle>Race Condition: Static Database Connection</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="2">
                        <groupTitle>Unchecked Return Value</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="2">
                        <groupTitle>Weak Cryptographic Hash</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="2">
                        <groupTitle>Weak Cryptographic Hash: Hardcoded PBE Salt</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="2">
                        <groupTitle>Weak Encryption: Insecure Mode of Operation</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="1">
                        <groupTitle>Dead Code: Expression is Always true</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="1">
                        <groupTitle>Dynamic Code Evaluation: Code Injection</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="1">
                        <groupTitle>Insecure Randomness</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="1">
                        <groupTitle>J2EE Bad Practices: Sockets</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="1">
                        <groupTitle>J2EE Misconfiguration: Excessive Servlet Mappings</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="1">
                        <groupTitle>J2EE Misconfiguration: Excessive Session Timeout</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="1">
                        <groupTitle>J2EE Misconfiguration: Missing Servlet Mapping</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="1">
                        <groupTitle>Missing Check against Null</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="1">
                        <groupTitle>Poor Error Handling: Throw Inside Finally</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="1">
                        <groupTitle>Poor Style: Confusing Naming</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="1">
                        <groupTitle>XML Entity Expansion Injection</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="1">
                        <groupTitle>XML External Entity Injection</groupTitle>
                    </GroupingSection>
                </Chart>
            </IssueListing>
        </SubSection>
    </ReportSection>
    <ReportSection enabled="true" optionalSubsections="true">
        <Title>Results Outline</Title>
        <SubSection enabled="true">
            <Title>Vulnerability Examples by Category</Title>
            <Description>Results summary of all issue categories.  Vulnerability examples are provided by category.</Description>
            <IssueListing listing="true" limit="-1">
                <Refinement></Refinement>
                <Chart chartType="list">
                    <Axis>Category</Axis>
                    <MajorAttribute>Analysis</MajorAttribute>
                    <GroupingSection count="192">
                        <groupTitle>System Information Leak</groupTitle>
                        <MajorAttributeSummary>
                            <MetaInfo>
<Name>Abstract</Name>
<Value>The function doPost() in HammerHead.java reveals system data or debug information by calling printStackTrace() on line 192. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Explanation</Name>
<Value>An information leak occurs when system data or debug information leaves the program through an output stream or logging function.



Example 1: The following code writes an exception to the standard error stream:


try {
    ...
} catch (Exception e) {
    e.printStackTrace();
}


Depending on the system configuration, this information can be dumped to a console, written to a log file, or exposed to a remote user. For example, with scripting mechanisms it is trivial to redirect output information from "Standard error" or "Standard output" into a file or another program. Alternatively, the system that the program runs on could have a remote logging mechanism such as a "syslog" server that sends the logs to a remote device. During development, you have no way of knowing where this information might end up being displayed.

In some cases, the error message provides the attacker with the precise type of attack to which the system is vulnerable. For example, a database error message can reveal that the application is vulnerable to a SQL injection attack. Other error messages can reveal more oblique clues about the system. In Example 1, the leaked information could imply information about the type of operating system, the applications installed on the system, and the amount of care that the administrators have put into configuring the program.

Here is another scenario, specific to the mobile world. Most mobile devices now implement a Near-Field Communication (NFC) protocol for quickly sharing information between devices using radio communication. It works by bringing devices to close proximity or simply having them touch each other. Even though the communication range of NFC is limited to just a few centimeters, eavesdropping, data modification and various other types of attacks are possible, since NFC alone does not ensure secure communication.

Example 2: The Android platform provides support for NFC. The following code creates a message that gets pushed to the other device within the range.

...
public static final String TAG = "NfcActivity";
private static final String DATA_SPLITTER = "__:DATA:__";
private static final String MIME_TYPE = "application/my.applications.mimetype";
...
public NdefMessage createNdefMessage(NfcEvent event) {
    TelephonyManager tm = (TelephonyManager)Context.getSystemService(Context.TELEPHONY_SERVICE);
    String VERSION = tm.getDeviceSoftwareVersion();
    String text = TAG + DATA_SPLITTER + VERSION;
    NdefRecord record = new NdefRecord(NdefRecord.TNF_MIME_MEDIA,
            MIME_TYPE.getBytes(), new byte[0], text.getBytes());
    NdefRecord[] records = { record };
    NdefMessage msg = new NdefMessage(records);
    return msg;
}
...


NFC Data Exchange Format (NDEF) message contains typed data, a URI, or a custom application payload. If the message contains information about the application, such as its name, MIME type, or device software version, this information could be leaked to an eavesdropper. In Example 2, Fortify Static Code Analyzer reports a System Information Leak vulnerability on the return statement.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Recommendations</Name>
<Value>Write error messages with security in mind. In production environments, turn off detailed error information in favor of brief messages. Restrict the generation and storage of detailed output that can help administrators and programmers diagnose problems. Debug traces can sometimes appear in non-obvious places (embedded in comments in the HTML for an error page, for example).

Even brief error messages that do not reveal stack traces or database dumps can potentially aid an attacker. For example, an "Access Denied" message can reveal that a file or user exists on the system.

If you are concerned about leaking system data via NFC on an Android device, you could do one of the following three things. Do not include system data in the messages pushed to other devices in range, encrypt the payload of the message, or establish a secure communication channel at a higher layer.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Tips</Name>
<Value>1. Do not rely on wrapper scripts, corporate IT policy, or quick-thinking system administrators to prevent system information leaks. Write software that is secure on its own.

2. This category of vulnerability does not apply to all types of programs. For example, if your application executes on a client machine where system information is already available to an attacker, or if you print system information only to a trusted log file, you can use Audit Guide to filter out this category from your scan results.</Value>
                            </MetaInfo>
                            <AttributeValue>
<Name>&lt;Unaudited&gt;</Name>
<Count>192</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not an Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Reliability Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Bad Practice</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Suspicious</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Exploitable</Name>
<Count>0</Count>
                            </AttributeValue>
                        </MajorAttributeSummary>
                        <Issue iid="2A0E5C8A8D2080682AAF42D79BC24679" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function login() in Login.java reveals system data or debug information by calling printStackTrace() on line 168. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Login.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/Login.java</FilePath>
<LineStart>168</LineStart>
<Snippet>	{
	    s.setMessage("Error logging in");
	    e.printStackTrace();
	}
</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="542A1F6930BFCE61860BFF17756539E2" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function handleRequest() in Logout.java reveals system data or debug information by calling printStackTrace() on line 71. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Logout.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/Logout.java</FilePath>
<LineStart>71</LineStart>
<Snippet>	{
	    System.out.println("Internal server error");
	    ue1.printStackTrace();
	}
	catch (UnauthorizedException ue2)</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="8E8BA4B0E6CF6803058E507305B358C3" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function doChangeEmployeeProfile_BACKUP() in UpdateProfile.java reveals system data or debug information by calling printStackTrace() on line 302. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>UpdateProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/UpdateProfile.java</FilePath>
<LineStart>302</LineStart>
<Snippet>	    {
		s.setMessage("Error updating employee profile");
		sqle.printStackTrace();
	    }
</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="F5CE104ADE787D309B188DA800E168D9" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function createUserAdminTable() in CreateDB.java reveals system data or debug information by calling printStackTrace() on line 255. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>CreateDB.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/CreateDB.java</FilePath>
<LineStart>255</LineStart>
<Snippet>	{
	    System.out.println("Error creating user admin database");
	    e.printStackTrace();
	}
</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="F8A0BE43919B1CC24D313FC8505FB217" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function main() in CreateDB.java reveals system data or debug information by calling printStackTrace() on line 78. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>CreateDB.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/CreateDB.java</FilePath>
<LineStart>78</LineStart>
<Snippet>	{
	    System.out.println("Driver Manager failed!");
	    e.printStackTrace();
	}
</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="C96F82E5F189CA5A0B7AAB52DD930CAB" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function handleRequest() in SqlStringInjection.java reveals system data or debug information by calling printStackTrace() on line 317. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>SqlStringInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SqlStringInjection.java</FilePath>
<LineStart>317</LineStart>
<Snippet>	{
	    System.out.println("Exception caught: " + e);
	    e.printStackTrace(System.out);
	}
    }</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="71BF097995A06C0A5E79ED93F9DFA30B" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function doPost() in LessonSource.java reveals system data or debug information by calling printStackTrace() on line 93. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>LessonSource.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/LessonSource.java</FilePath>
<LineStart>93</LineStart>
<Snippet>	catch (Throwable t)
	{
	    t.printStackTrace();
	    log("ERROR: " + t);
	}</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="4C58672C07CE0B3888AD33A0CFF3D994" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function handleRequest() in RoleBasedAccessControl.java reveals system data or debug information by calling printStackTrace() on line 338. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>RoleBasedAccessControl.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/RoleBasedAccessControl.java</FilePath>
<LineStart>338</LineStart>
<Snippet>	{
	    System.out.println("Missing parameter");
	    pnfe.printStackTrace();
	    setCurrentAction(s, ERROR_ACTION);
	}</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="3C5D38A41A6EB2D7820B964AB70ED332" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function getEmployeeProfile_BACKUP() in ViewProfile.java reveals system data or debug information by calling printStackTrace() on line 206. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/ViewProfile.java</FilePath>
<LineStart>206</LineStart>
<Snippet>	{
	    s.setMessage("Error getting employee profile");
	    e.printStackTrace();
	}
</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="5C590077BD415569074E3ADC37FB4548" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function createProductTable() in CreateDB.java reveals system data or debug information by calling printStackTrace() on line 203. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>CreateDB.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/CreateDB.java</FilePath>
<LineStart>203</LineStart>
<Snippet>	{
	    System.out.println("Error creating product database");
	    e.printStackTrace();
	}
</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="23B0D96DBFC08A66930F5E2F13D76E31" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function hashMD5() in Encoding.java reveals system data or debug information by calling printStackTrace() on line 646. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Encoding.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/Encoding.java</FilePath>
<LineStart>646</LineStart>
<Snippet>		{
			// it's got to be there
			e.printStackTrace();
		}
		return ( base64Encode( md.digest() ) );</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="95782931E073FCBD728BDF3DA7F39E90" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function createCustomCookieValue() in HttpOnly.java reveals system data or debug information by calling printStackTrace() on line 183. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>HttpOnly.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/HttpOnly.java</FilePath>
<LineStart>183</LineStart>
<Snippet>			
		} catch (Exception e) {
			e.printStackTrace();
		}
		</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="808268520EA61ACECDD3CE502C001181" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function createContent() in LogSpoofing.java reveals system data or debug information by calling printStackTrace() on line 128. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>LogSpoofing.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/LogSpoofing.java</FilePath>
<LineStart>128</LineStart>
<Snippet>	{
	    s.setMessage("Error generating " + this.getClass().getName());
	    e.printStackTrace();
	}
	return ec;</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="1D501737C15AE10645708C25342F008F" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function createStagedContent() in LessonAdapter.java reveals system data or debug information by calling printStackTrace() on line 137. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>LessonAdapter.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/LessonAdapter.java</FilePath>
<LineStart>137</LineStart>
<Snippet>	    s.setMessage("Error generating " + this.getClass().getName());
	    System.out.println(e);
	    e.printStackTrace();
	}
</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="2CDD488F9BB6E1BB829186146B4BA075" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function getEmployeeProfile() in ViewProfile.java reveals system data or debug information by calling printStackTrace() on line 152. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/ViewProfile.java</FilePath>
<LineStart>152</LineStart>
<Snippet>	{
	    s.setMessage("Error getting employee profile");
	    e.printStackTrace();
	}
</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="0A84CFB7DBE148BCA531CBABA1A42650" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function getAllEmployees() in ListStaff.java reveals system data or debug information by calling printStackTrace() on line 115. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ListStaff.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/ListStaff.java</FilePath>
<LineStart>115</LineStart>
<Snippet>	    {
		s.setMessage("Error getting employees");
		sqle.printStackTrace();
	    }
	}</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="0399A1EC2D554723E3929010E2556E8C" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function handleRequest() in Login.java reveals system data or debug information by calling printStackTrace() on line 95. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Login.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/Login.java</FilePath>
<LineStart>95</LineStart>
<Snippet>		{
		    System.out.println("Internal server error");
		    ue1.printStackTrace();
		}
		catch (UnauthorizedException ue2)</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="2A4E10165937706D57A241B308EAA8AE" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function createMessageTable() in CreateDB.java reveals system data or debug information by calling printStackTrace() on line 165. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>CreateDB.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/CreateDB.java</FilePath>
<LineStart>165</LineStart>
<Snippet>	{
	    System.out.println("Error creating message database");
	    e.printStackTrace();
	}
    }</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="7A60E2A9434AE4E21CEEE27DFBE160CF" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function handleRequest_BACKUP() in RoleBasedAccessControl.java reveals system data or debug information by calling printStackTrace() on line 458. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>RoleBasedAccessControl.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/RoleBasedAccessControl.java</FilePath>
<LineStart>458</LineStart>
<Snippet>		// All other errors send the user to the generic error page
		System.out.println("handleRequest() error");
		e.printStackTrace();
		setCurrentAction(s, ERROR_ACTION);
	    }</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="F1BE853B45C96F767817CE6D92D5FC4C" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function createContent() in UserAdminScreen.java reveals system data or debug information by calling printStackTrace() on line 88. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>UserAdminScreen.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/admin/UserAdminScreen.java</FilePath>
<LineStart>88</LineStart>
<Snippet>	{
	    s.setMessage("Error generating " + this.getClass().getName());
	    e.printStackTrace();
	}
</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="7608F03C2C01ADB55C091F61822D3207" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function handleRequest() in SQLInjection.java reveals system data or debug information by calling printStackTrace() on line 367. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>SQLInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/SQLInjection.java</FilePath>
<LineStart>367</LineStart>
<Snippet>		// All other errors send the user to the generic error page
		System.out.println("handleRequest() error");
		e.printStackTrace();
		setCurrentAction(s, ERROR_ACTION);
	    }</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="163B719F69C0908312A41CC536248C81" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function handleRequest() in CrossSiteScripting.java reveals system data or debug information by calling printStackTrace() on line 366. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>CrossSiteScripting.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/CrossSiteScripting.java</FilePath>
<LineStart>366</LineStart>
<Snippet>	    {
		System.out.println("Validation failed");
		ve.printStackTrace();
		setCurrentAction(s, ERROR_ACTION);
	    }</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="E8EF5733799D99324748E618EBE6DC59" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function handleRequest() in JSONInjection.java reveals system data or debug information by calling printStackTrace() on line 98. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>JSONInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/JSONInjection.java</FilePath>
<LineStart>98</LineStart>
<Snippet>	catch (Exception ex)
	{
	    ex.printStackTrace();
	}
</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="21A8BD721CDE61C4EE753B32957EA7C8" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function getNextUID() in UpdateProfile.java reveals system data or debug information by calling printStackTrace() on line 263. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>UpdateProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/UpdateProfile.java</FilePath>
<LineStart>263</LineStart>
<Snippet>	{
	    // TODO Auto-generated catch block
	    e.printStackTrace();
	}
	return uid + 1;</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="EE0D0F6E41CCBAFA3ACD09D5E3B4810A" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function viewWsdl() in SoapRequest.java reveals system data or debug information by calling printStackTrace() on line 273. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>SoapRequest.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SoapRequest.java</FilePath>
<LineStart>273</LineStart>
<Snippet>	{
	    s.setMessage("Error generating " + this.getClass().getName());
	    e.printStackTrace();
	}
</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="B1D0DC02CF0F0466CA099B070DE0D4F7" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function createContent() in ViewDatabase.java reveals system data or debug information by calling printStackTrace() on line 105. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ViewDatabase.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/admin/ViewDatabase.java</FilePath>
<LineStart>105</LineStart>
<Snippet>	{
	    s.setMessage("Error generating " + this.getClass().getName());
	    e.printStackTrace();
	}
</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="DABE998A0B6FAD79EB0991E4EAAC181B" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function createContent() in PathBasedAccessControl.java reveals system data or debug information by calling printStackTrace() on line 217. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>PathBasedAccessControl.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/PathBasedAccessControl.java</FilePath>
<LineStart>217</LineStart>
<Snippet>	{
	    s.setMessage("Error generating " + this.getClass().getName());
	    e.printStackTrace();
	}
</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="E0A0EB22F4A6987698B4EBD02907B826" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function deleteEmployeeProfile_BACKUP() in DeleteProfile.java reveals system data or debug information by calling printStackTrace() on line 155. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>DeleteProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/DeleteProfile.java</FilePath>
<LineStart>155</LineStart>
<Snippet>	{
	    s.setMessage("Error deleting employee profile");
	    e.printStackTrace();
	}
    }</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="EA9B69789F87214E21A83B60748AE677" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function createContent() in XPATHInjection.java reveals system data or debug information by calling printStackTrace() on line 212. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>XPATHInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/XPATHInjection.java</FilePath>
<LineStart>212</LineStart>
<Snippet>	{
	    s.setMessage("Error generating " + this.getClass().getName());
	    e.printStackTrace();
	}
	return ec;</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="A1F3CAB3AF6B424ADC408CBF64AACBA5" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function getEmployeeProfile() in EditProfile.java reveals system data or debug information by calling printStackTrace() on line 131. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/EditProfile.java</FilePath>
<LineStart>131</LineStart>
<Snippet>	{
	    s.setMessage("Error getting employee profile");
	    e.printStackTrace();
	}
</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="3BF075B4B198A249D1BAC3FEB3984E40" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function makeCurrent() in StoredXss.java reveals system data or debug information by calling printStackTrace() on line 274. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>StoredXss.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/StoredXss.java</FilePath>
<LineStart>274</LineStart>
<Snippet>	{
	    s.setMessage("Error generating " + this.getClass().getName());
	    e.printStackTrace();
	}
</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="62FF1026DD549BC6C832899FFA125D79" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function getEmployeeProfile_BACKUP() in ViewProfile.java reveals system data or debug information by calling printStackTrace() on line 220. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/ViewProfile.java</FilePath>
<LineStart>220</LineStart>
<Snippet>	    {
		s.setMessage("Error getting employee profile");
		sqle.printStackTrace();
	    }
	}</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="BF4701C7B0F1C825C65450C4897AB8B7" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function handleRequest() in SQLInjection.java reveals system data or debug information by calling printStackTrace() on line 361. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>SQLInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/SQLInjection.java</FilePath>
<LineStart>361</LineStart>
<Snippet>		s.setMessage("You are not authorized to perform this function");
		System.out.println("Authorization failure");
		ue2.printStackTrace();
	    }
	    catch (Exception e)</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="067B838962D6B799229870C93909DAA7" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function handleRequest() in SilentTransactions.java reveals system data or debug information by calling printStackTrace() on line 117. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>SilentTransactions.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SilentTransactions.java</FilePath>
<LineStart>117</LineStart>
<Snippet>	catch (Exception ex)
	{
	    ex.printStackTrace();
	}
</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="3A34FB4634245DAC8FB32F4AEBABD802" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function handleRequest_BACKUP() in RoleBasedAccessControl.java reveals system data or debug information by calling printStackTrace() on line 432. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>RoleBasedAccessControl.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/RoleBasedAccessControl.java</FilePath>
<LineStart>432</LineStart>
<Snippet>	    {
		System.out.println("Missing parameter");
		pnfe.printStackTrace();
		setCurrentAction(s, ERROR_ACTION);
	    }</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="5F643FA678E744ABB5F223B467A50363" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function getDatabaseConnectionString() in WebSession.java reveals system data or debug information by calling printStackTrace() on line 448. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>WebSession.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/WebSession.java</FilePath>
<LineStart>448</LineStart>
<Snippet>		{
			System.out.println( "Couldn't open database: check web.xml database parameters" );
			e.printStackTrace();
		}
</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="434C02AFB8035E739BE7929C0035BE55" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function sendMessage() in Challenge2Screen.java reveals system data or debug information by calling printStackTrace() on line 729. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Challenge2Screen.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/Challenge2Screen.java</FilePath>
<LineStart>729</LineStart>
<Snippet>	{
	    System.out.println("Couldn't write " + message + " to " + s);
	    e.printStackTrace();
	}
    }</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="1A29C2FBFDD046228D0B134428F51657" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function login() in Login.java reveals system data or debug information by calling printStackTrace() on line 163. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Login.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/Login.java</FilePath>
<LineStart>163</LineStart>
<Snippet>	    {
		s.setMessage("Error logging in");
		sqle.printStackTrace();
	    }
	}</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="F40DFD7D0A6A3177917B8D561E6CDCC9" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function handleRequest_BACKUP() in RoleBasedAccessControl.java reveals system data or debug information by calling printStackTrace() on line 452. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>RoleBasedAccessControl.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/RoleBasedAccessControl.java</FilePath>
<LineStart>452</LineStart>
<Snippet>		System.out.println("Authorization failure");
		setCurrentAction(s, ERROR_ACTION);
		ue2.printStackTrace();
	    }
	    catch (Exception e)</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="FF76220E74EDAE7E4486A521D44AFB49" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function createLoginTable() in CreateDB.java reveals system data or debug information by calling printStackTrace() on line 365. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>CreateDB.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/CreateDB.java</FilePath>
<LineStart>365</LineStart>
<Snippet>	{
	    System.out.println("Error creating user database");
	    e.printStackTrace();
	}
</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="2C6E09CD1E289637CD671775BC99CADE" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function handleRequest() in SQLInjection.java reveals system data or debug information by calling printStackTrace() on line 348. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>SQLInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/SQLInjection.java</FilePath>
<LineStart>348</LineStart>
<Snippet>	    {
		System.out.println("Validation failed");
		ve.printStackTrace();
		setCurrentAction(s, ERROR_ACTION);
	    }</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="1DF65556F09BBF74F1A33163DDB09405" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function getEmployeeProfile_BACKUP() in ViewProfile.java reveals system data or debug information by calling printStackTrace() on line 212. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/ViewProfile.java</FilePath>
<LineStart>212</LineStart>
<Snippet>	{
	    s.setMessage("Error getting employee profile");
	    e.printStackTrace();
	}
</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="E39A9E190CF6A50B4EEB36F90B79EEEE" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function getAllEmployees_BACKUP() in ListStaff.java reveals system data or debug information by calling printStackTrace() on line 163. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ListStaff.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/ListStaff.java</FilePath>
<LineStart>163</LineStart>
<Snippet>	    {
		s.setMessage("Error getting employees");
		sqle.printStackTrace();
	    }
	}</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="348D9FB5ADC466B0BF5C0E5163F660CB" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function createEmployeeProfile() in UpdateProfile.java reveals system data or debug information by calling printStackTrace() on line 345. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>UpdateProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/UpdateProfile.java</FilePath>
<LineStart>345</LineStart>
<Snippet>	    {
		s.setMessage("Error updating employee profile");
		sqle.printStackTrace();
	    }
	}</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="D17F85CED9B5B55047EDD0446A9B17D7" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function getEmployeeProfile() in EditProfile.java reveals system data or debug information by calling printStackTrace() on line 125. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/EditProfile.java</FilePath>
<LineStart>125</LineStart>
<Snippet>	    {
		s.setMessage("Error getting employee profile");
		sqle.printStackTrace();
	    }
	}</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="D8119249773A39CD022B883126F43C24" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function changeEmployeeProfile() in UpdateProfile.java reveals system data or debug information by calling printStackTrace() on line 260. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>UpdateProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/UpdateProfile.java</FilePath>
<LineStart>260</LineStart>
<Snippet>	{
	    s.setMessage("Error updating employee profile");
	    e.printStackTrace();
	}
    }</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="4FDA9B15885A673A877D3550A8CABB1E" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function getEmployeeProfile() in ViewProfile.java reveals system data or debug information by calling printStackTrace() on line 140. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/ViewProfile.java</FilePath>
<LineStart>140</LineStart>
<Snippet>	    {
		s.setMessage("Error getting employee profile");
		sqle.printStackTrace();
	    }
	}</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="94544F7344343065945982F8E21BCE4E" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function makeConnection() in DatabaseUtilities.java reveals system data or debug information by calling printStackTrace() on line 110. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>DatabaseUtilities.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/DatabaseUtilities.java</FilePath>
<LineStart>110</LineStart>
<Snippet>	catch (Exception e)
	{
	    e.printStackTrace();
	    return null;
	}</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="7DEFC09894FCD4141B09E0898E429C4A" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function getAllEmployees_BACKUP() in ListStaff.java reveals system data or debug information by calling printStackTrace() on line 169. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ListStaff.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/ListStaff.java</FilePath>
<LineStart>169</LineStart>
<Snippet>	{
	    s.setMessage("Error getting employees");
	    e.printStackTrace();
	}
</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="D872647971F4264544026202303B0C13" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function handleRequest() in FindProfile.java reveals system data or debug information by calling printStackTrace() on line 121. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>FindProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/FindProfile.java</FilePath>
<LineStart>121</LineStart>
<Snippet>		{
		    System.out.println("Internal server error");
		    ue1.printStackTrace();
		}
		catch (UnauthorizedException ue2)</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="4D29817A94B639966ABCDE67289F0FAB" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function doFilter() in Interceptor.java reveals system data or debug information by calling printStackTrace() on line 110. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Interceptor.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/util/Interceptor.java</FilePath>
<LineStart>110</LineStart>
<Snippet>	catch (UnknownHostException e)
	{
	    e.printStackTrace();

	}</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="7506F4DA48F6F86385C9F1B201CA3849" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function getAllEmployees() in Login.java reveals system data or debug information by calling printStackTrace() on line 252. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Login.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/Login.java</FilePath>
<LineStart>252</LineStart>
<Snippet>	    {
		s.setMessage("Error getting employees");
		sqle.printStackTrace();
	    }
	}</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="D9E6C19FF94A89C45637A61042D0DCF4" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function handleRequest() in RoleBasedAccessControl.java reveals system data or debug information by calling printStackTrace() on line 351. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>RoleBasedAccessControl.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/RoleBasedAccessControl.java</FilePath>
<LineStart>351</LineStart>
<Snippet>	    s.setMessage("Login failed");
	    System.out.println("Authentication failure");
	    ue.printStackTrace();
	}
	catch (UnauthorizedException ue2)</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="8C48CE78706C16033CB0373C60EBF66D" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function createEmployeeProfile() in UpdateProfile.java reveals system data or debug information by calling printStackTrace() on line 315. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>UpdateProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/UpdateProfile.java</FilePath>
<LineStart>315</LineStart>
<Snippet>	    catch (SQLException sqle)
	    {
		sqle.printStackTrace();
		s.setMessage("Error updating employee profile");
	    }</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="DA6AE311765259AD2C01E2BC5A36B04E" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function getEmployeeProfile() in ViewProfile.java reveals system data or debug information by calling printStackTrace() on line 160. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/ViewProfile.java</FilePath>
<LineStart>160</LineStart>
<Snippet>	    {
		s.setMessage("Error getting employee profile");
		sqle.printStackTrace();
	    }
	}</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="BF7CEA65EB8E52B7BA7F9689AD3E7319" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function main() in CreateDB.java reveals system data or debug information by calling printStackTrace() on line 101. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>CreateDB.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/CreateDB.java</FilePath>
<LineStart>101</LineStart>
<Snippet>	catch (SQLException sqle)
	{
	    sqle.printStackTrace();
	}
</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="2AB41AE8E1843F47BA77436620AA16AB" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function handleRequest() in ThreadSafetyProblem.java reveals system data or debug information by calling printStackTrace() on line 217. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ThreadSafetyProblem.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/ThreadSafetyProblem.java</FilePath>
<LineStart>217</LineStart>
<Snippet>	{
	    System.out.println("Exception caught: " + e);
	    e.printStackTrace(System.out);
	}
    }</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="F25983B958BB80B53993CD341D48CED5" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function changeEmployeeProfile_BACKUP() in UpdateProfile.java reveals system data or debug information by calling printStackTrace() on line 230. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>UpdateProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/UpdateProfile.java</FilePath>
<LineStart>230</LineStart>
<Snippet>	    {
		s.setMessage("Error updating employee profile");
		sqle.printStackTrace();
	    }
</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="271C9A6472859F4F33CAACB572549F42" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function getEmployeeProfile() in EditProfile.java reveals system data or debug information by calling printStackTrace() on line 131. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/EditProfile.java</FilePath>
<LineStart>131</LineStart>
<Snippet>	{
	    s.setMessage("Error getting employee profile");
	    e.printStackTrace();
	}
</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="B922D2C153F3FCD70F6920FBA8EF3AE2" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function handleRequest() in SQLInjection.java reveals system data or debug information by calling printStackTrace() on line 355. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>SQLInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/SQLInjection.java</FilePath>
<LineStart>355</LineStart>
<Snippet>		s.setMessage("Login failed");
		System.out.println("Authentication failure");
		ue.printStackTrace();
	    }
	    catch (UnauthorizedException ue2)</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="12A7BB006A4A13923C074307011194B8" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function changeEmployeeProfile_BACKUP() in UpdateProfile.java reveals system data or debug information by calling printStackTrace() on line 237. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>UpdateProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/UpdateProfile.java</FilePath>
<LineStart>237</LineStart>
<Snippet>	{
	    s.setMessage("Error updating employee profile");
	    e.printStackTrace();
	}
    }</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="F0476D607FC7E88A788D476EA7DD55C0" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function login_BACKUP() in Login.java reveals system data or debug information by calling printStackTrace() on line 205. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Login.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/Login.java</FilePath>
<LineStart>205</LineStart>
<Snippet>	    {
		s.setMessage("Error logging in");
		sqle.printStackTrace();
	    }
	}</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="4C653A33A0D6848A352377AB4CBAB1AD" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function getStations() in SqlNumericInjection.java reveals system data or debug information by calling printStackTrace() on line 323. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>SqlNumericInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SqlNumericInjection.java</FilePath>
<LineStart>323</LineStart>
<Snippet>	catch (SQLException sqle)
	{
	    sqle.printStackTrace();
	}
</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="A94731E83EB1AF8526072EA57511AF95" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function createContent() in SummaryReportCardScreen.java reveals system data or debug information by calling printStackTrace() on line 101. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>SummaryReportCardScreen.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/admin/SummaryReportCardScreen.java</FilePath>
<LineStart>101</LineStart>
<Snippet>	catch (Exception e)
	{
	    e.printStackTrace();
	}
</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="705FAE3DBC111FD136600AFD4984E076" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function createContent() in HttpBasics.java reveals system data or debug information by calling printStackTrace() on line 78. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>HttpBasics.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/HttpBasics.java</FilePath>
<LineStart>78</LineStart>
<Snippet>	{
	    s.setMessage("Error generating " + this.getClass().getName());
	    e.printStackTrace();
	}
</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="1483B63B83BB6AA4D820DD9274638C54" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function determineType() in SoapRequest.java reveals system data or debug information by calling printStackTrace() on line 330. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>SoapRequest.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SoapRequest.java</FilePath>
<LineStart>330</LineStart>
<Snippet>	{
	    s.setMessage("Error generating " + this.getClass().getName());
	    e.printStackTrace();
	}
</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="EC550B01611ECF96AB4E36233F98E1DA" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function resetWebPage() in Challenge2Screen.java reveals system data or debug information by calling printStackTrace() on line 441. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Challenge2Screen.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/Challenge2Screen.java</FilePath>
<LineStart>441</LineStart>
<Snippet>	catch (Exception e)
	{
	    e.printStackTrace();
	}
    }</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="EAE355985C5A5A425BE5693E5B2DBE14" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function handleRequest_BACKUP() in RoleBasedAccessControl.java reveals system data or debug information by calling printStackTrace() on line 438. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>RoleBasedAccessControl.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/RoleBasedAccessControl.java</FilePath>
<LineStart>438</LineStart>
<Snippet>	    {
		System.out.println("Validation failed");
		ve.printStackTrace();
		setCurrentAction(s, ERROR_ACTION);
	    }</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="CAF560698F78E62F29FC0CF1F6955816" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function login() in Login.java reveals system data or debug information by calling printStackTrace() on line 169. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Login.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/Login.java</FilePath>
<LineStart>169</LineStart>
<Snippet>	{
	    s.setMessage("Error logging in");
	    e.printStackTrace();
	}
</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="AD7C11D3EB0D8558FDC22AB525483F1A" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function deleteEmployeeProfile_BACKUP() in DeleteProfile.java reveals system data or debug information by calling printStackTrace() on line 149. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>DeleteProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/DeleteProfile.java</FilePath>
<LineStart>149</LineStart>
<Snippet>	    {
		s.setMessage("Error deleting employee profile");
		sqle.printStackTrace();
	    }
	}</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="74C884820E4739861A03F8B6D623275D" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function createContent() in XPATHInjection.java reveals system data or debug information by calling printStackTrace() on line 202. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>XPATHInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/XPATHInjection.java</FilePath>
<LineStart>202</LineStart>
<Snippet>	{
	    s.setMessage("Error generating " + this.getClass().getName());
	    e.printStackTrace();
	}
	catch (IllegalArgumentException e)</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="D2CBE98F96B851D86A2DBB88FA6101B5" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function getAllEmployees() in Login.java reveals system data or debug information by calling printStackTrace() on line 210. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Login.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/Login.java</FilePath>
<LineStart>210</LineStart>
<Snippet>	    {
		s.setMessage("Error getting employees");
		sqle.printStackTrace();
	    }
	}</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="9DE7F1DA6C0A12A6FD5E01E6393AB3DA" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function createContent() in BlindSqlInjection.java reveals system data or debug information by calling printStackTrace() on line 145. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>BlindSqlInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/BlindSqlInjection.java</FilePath>
<LineStart>145</LineStart>
<Snippet>	{
	    s.setMessage("Error generating " + this.getClass().getName());
	    e.printStackTrace();
	}
</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="9566BFFB8B5ACE187FB90DDCEEAC6C17" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function handleRequest() in UpdateProfile.java reveals system data or debug information by calling printStackTrace() on line 130. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>UpdateProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/UpdateProfile.java</FilePath>
<LineStart>130</LineStart>
<Snippet>	    {
		System.out.println("Internal server error");
		ue2.printStackTrace();
	    }
	}</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="450EDF14D048E6125EA598D94E9995C0" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function getUserName() in DefaultLessonAction.java reveals system data or debug information by calling printStackTrace() on line 216. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>DefaultLessonAction.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/DefaultLessonAction.java</FilePath>
<LineStart>216</LineStart>
<Snippet>		{
			s.setMessage( "Error getting user name" );
			e.printStackTrace();
		}
</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="1628D80D60254DD5FE7AF2F02C279A5B" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function getEmployeeProfile_BACKUP() in EditProfile.java reveals system data or debug information by calling printStackTrace() on line 189. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/EditProfile.java</FilePath>
<LineStart>189</LineStart>
<Snippet>	{
	    s.setMessage("Error getting employee profile");
	    e.printStackTrace();
	}
</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="131F17E79F63F981BB3DAA10455F2822" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function createContent() in HiddenFieldTampering.java reveals system data or debug information by calling printStackTrace() on line 165. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>HiddenFieldTampering.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/HiddenFieldTampering.java</FilePath>
<LineStart>165</LineStart>
<Snippet>	{
	    s.setMessage("Error generating " + this.getClass().getName());
	    e.printStackTrace();
	}
</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="9F51D6250F83EF2B7731EF14E7136769" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function createContent() in HttpOnly.java reveals system data or debug information by calling printStackTrace() on line 138. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>HttpOnly.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/HttpOnly.java</FilePath>
<LineStart>138</LineStart>
<Snippet>		{
			s.setMessage( "Error generating " + this.getClass().getName() );
			e.printStackTrace();
		}
</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="031C838BEA3E68948136390E110422AA" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function handleRequest() in CrossSiteScripting.java reveals system data or debug information by calling printStackTrace() on line 373. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>CrossSiteScripting.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/CrossSiteScripting.java</FilePath>
<LineStart>373</LineStart>
<Snippet>		s.setMessage("Login failed");
		System.out.println("Authentication failure");
		ue.printStackTrace();
	    }
	    catch (UnauthorizedException ue2)</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="BF7CEA65EB8E52B7BA7F9689AD3E7318" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function main() in CreateDB.java reveals system data or debug information by calling printStackTrace() on line 126. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>CreateDB.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/CreateDB.java</FilePath>
<LineStart>126</LineStart>
<Snippet>	catch (SQLException sqle)
	{
	    sqle.printStackTrace();
	}
    }</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="C29E60A69A0EFA8B7965E98438EF7399" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function isAuthorized() in DefaultLessonAction.java reveals system data or debug information by calling printStackTrace() on line 278. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>DefaultLessonAction.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/DefaultLessonAction.java</FilePath>
<LineStart>278</LineStart>
<Snippet>		{
			s.setMessage( "Error authorizing" );
			e.printStackTrace();
		}
				</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="7BA6A8A7BD79BE08A61BCA60190284D4" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function findEmployeeProfile() in FindProfile.java reveals system data or debug information by calling printStackTrace() on line 213. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>FindProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/FindProfile.java</FilePath>
<LineStart>213</LineStart>
<Snippet>	    {
		s.setMessage("Error finding employee profile");
		sqle.printStackTrace();
	    }
	}</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="9BCB204A4306E1E6CB007BE7A2EE0468" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function accessWGService() in WSDLScanning.java reveals system data or debug information by calling printStackTrace() on line 159. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>WSDLScanning.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/WSDLScanning.java</FilePath>
<LineStart>159</LineStart>
<Snippet>	catch (ServiceException e)
	{
	    e.printStackTrace();
	}
	catch (Exception e)</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="10D4432215FC1D906CED38AA5E8FCC55" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function doStage2() in BasicAuthentication.java reveals system data or debug information by calling printStackTrace() on line 251. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>BasicAuthentication.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/BasicAuthentication.java</FilePath>
<LineStart>251</LineStart>
<Snippet>	{
	    s.setMessage("Error generating " + this.getClass().getName());
	    e.printStackTrace();
	}
</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="FF10EE5C1C632AD667838979FD8C253C" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function load() in LessonTracker.java reveals system data or debug information by calling printStackTrace() on line 254. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>LessonTracker.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/LessonTracker.java</FilePath>
<LineStart>254</LineStart>
<Snippet>	{
	    System.out.println("Failed to load lesson state for " + screen);
	    e.printStackTrace();
	}
	finally</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="FCD568019EB69AF39AA163B0918E3C7F" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function handleRequest() in Login.java reveals system data or debug information by calling printStackTrace() on line 91. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Login.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/Login.java</FilePath>
<LineStart>91</LineStart>
<Snippet>		{
		    System.out.println("Internal server error");
		    ue1.printStackTrace();
		}
		catch (UnauthorizedException ue2)</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="51602EFB444788618FD1F4B49284D96E" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function login_BACKUP() in Login.java reveals system data or debug information by calling printStackTrace() on line 211. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Login.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/Login.java</FilePath>
<LineStart>211</LineStart>
<Snippet>	{
	    s.setMessage("Error logging in");
	    e.printStackTrace();
	}
</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="B9BF1DFE73632286CCBD9DB579BF1F6C" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function createContent() in ThreadSafetyProblem.java reveals system data or debug information by calling printStackTrace() on line 128. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ThreadSafetyProblem.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/ThreadSafetyProblem.java</FilePath>
<LineStart>128</LineStart>
<Snippet>	{
	    s.setMessage("Error generating " + this.getClass().getName());
	    e.printStackTrace();
	}
</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="34F7DA75494088350E0041164CF31E69" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function handleRequest() in UpdateProfile.java reveals system data or debug information by calling printStackTrace() on line 115. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>UpdateProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/UpdateProfile.java</FilePath>
<LineStart>115</LineStart>
<Snippet>	    {
		System.out.println("Internal server error");
		ue2.printStackTrace();
	    }
	}</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="D60D775DBDAE54DDEBF316C5113E73DC" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function createEmployeeProfile_BACKUP() in UpdateProfile.java reveals system data or debug information by calling printStackTrace() on line 387. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>UpdateProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/UpdateProfile.java</FilePath>
<LineStart>387</LineStart>
<Snippet>	    {
		s.setMessage("Error updating employee profile");
		sqle.printStackTrace();
	    }
	}</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="35E084BA77E09CEA853C2E8B67EC5A90" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function findEmployeeProfile() in FindProfile.java reveals system data or debug information by calling printStackTrace() on line 219. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>FindProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/FindProfile.java</FilePath>
<LineStart>219</LineStart>
<Snippet>	{
	    s.setMessage("Error finding employee profile");
	    e.printStackTrace();
	}
</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="5C63D969F93AD4F6406AD4E5C137651D" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function doHTTPSplitting() in HttpSplitting.java reveals system data or debug information by calling printStackTrace() on line 137. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>HttpSplitting.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/HttpSplitting.java</FilePath>
<LineStart>137</LineStart>
<Snippet>	{
	    s.setMessage("Error generating " + this.getClass().getName());
	    e.printStackTrace();
	}
	return (ec);</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="7A4AD89F74574F83E5609198EF01BDC2" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function getEmployeeProfile() in ViewProfile.java reveals system data or debug information by calling printStackTrace() on line 146. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/ViewProfile.java</FilePath>
<LineStart>146</LineStart>
<Snippet>	{
	    s.setMessage("Error getting employee profile");
	    e.printStackTrace();
	}
</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="F570B583EF594B28853E556BE72B33B8" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function createContent() in ReflectedXSS.java reveals system data or debug information by calling printStackTrace() on line 222. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ReflectedXSS.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/ReflectedXSS.java</FilePath>
<LineStart>222</LineStart>
<Snippet>	{
	    s.setMessage("Error generating " + this.getClass().getName());
	    e.printStackTrace();
	}
	return (ec);</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="6C9B74DBF9AFC6C9F7143AA58F624D58" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function main() in WebgoatProperties.java reveals system data or debug information by calling printStackTrace() on line 122. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>WebgoatProperties.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/WebgoatProperties.java</FilePath>
<LineStart>122</LineStart>
<Snippet>	{
	    System.out.println("Error loading properties");
	    e.printStackTrace();
	}
	System.out.println(properties.getProperty("CommandInjection.category"));</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="E8DC3D6ED853BCA5483F2920F6C6F78F" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function makeCurrent() in CSRF.java reveals system data or debug information by calling printStackTrace() on line 275. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>CSRF.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CSRF.java</FilePath>
<LineStart>275</LineStart>
<Snippet>		{
			s.setMessage( "Error generating " + this.getClass().getName() );
			e.printStackTrace();
		}
</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="93CD6DEBF68343122976265824799022" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function createUserDataTable() in CreateDB.java reveals system data or debug information by calling printStackTrace() on line 307. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>CreateDB.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/CreateDB.java</FilePath>
<LineStart>307</LineStart>
<Snippet>	{
	    System.out.println("Error creating user database");
	    e.printStackTrace();
	}
</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="4D29817A94B639966ABCDE67289F0FAA" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function doFilter() in Interceptor.java reveals system data or debug information by calling printStackTrace() on line 115. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Interceptor.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/util/Interceptor.java</FilePath>
<LineStart>115</LineStart>
<Snippet>	catch (IOException e)
	{
	    e.printStackTrace();
	}
	finally</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="A74A9A8AC3B36246B6F2AAA5700D66AC" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function getEmployeeProfile_BACKUP() in EditProfile.java reveals system data or debug information by calling printStackTrace() on line 192. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/EditProfile.java</FilePath>
<LineStart>192</LineStart>
<Snippet>	{
	    s.setMessage("Error getting employee profile");
	    e.printStackTrace();
	}
</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="A8A03FD3342B94A6241E845EEB5873DD" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function createContent() in WeakSessionID.java reveals system data or debug information by calling printStackTrace() on line 138. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>WeakSessionID.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/WeakSessionID.java</FilePath>
<LineStart>138</LineStart>
<Snippet>	{
	    s.setMessage("Error generating " + this.getClass().getName());
	    e.printStackTrace();
	}
</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="8F8078791C5A9942DFCEEC021779672F" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function createContent() in Encoding.java reveals system data or debug information by calling printStackTrace() on line 459. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Encoding.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/Encoding.java</FilePath>
<LineStart>459</LineStart>
<Snippet>			s.setMessage( "Error generating " + this.getClass().getName() );

			e.printStackTrace();

		}</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="9BCB204A4306E1E6CB007BE7A2EE0467" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function accessWGService() in WSDLScanning.java reveals system data or debug information by calling printStackTrace() on line 163. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>WSDLScanning.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/WSDLScanning.java</FilePath>
<LineStart>163</LineStart>
<Snippet>	catch (Exception e)
	{
	    e.printStackTrace();
	}
	return null;</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="94BC2CB125163422C63F4E162F0FF0CB" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function handleRequest() in CrossSiteScripting.java reveals system data or debug information by calling printStackTrace() on line 360. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>CrossSiteScripting.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/CrossSiteScripting.java</FilePath>
<LineStart>360</LineStart>
<Snippet>	    {
		System.out.println("Missing parameter");
		pnfe.printStackTrace();
		setCurrentAction(s, ERROR_ACTION);
	    }</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="E4EB3C3CC86A124D05029C605EAFE89D" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function handleRequest() in UpdateProfile.java reveals system data or debug information by calling printStackTrace() on line 125. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>UpdateProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/UpdateProfile.java</FilePath>
<LineStart>125</LineStart>
<Snippet>	    {
		System.out.println("Internal server error");
		ue1.printStackTrace();
	    }
	    catch (UnauthorizedException ue2)</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="BCA2815261DDE9801EF85E500931CC3B" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function handleRequest() in SqlNumericInjection.java reveals system data or debug information by calling printStackTrace() on line 401. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>SqlNumericInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SqlNumericInjection.java</FilePath>
<LineStart>401</LineStart>
<Snippet>	{
	    System.out.println("Exception caught: " + e);
	    e.printStackTrace(System.out);
	}
    }</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="D1157449ECBB492F0958DEFDB268BDCE" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function getEmployeeProfile() in ViewProfile.java reveals system data or debug information by calling printStackTrace() on line 166. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/ViewProfile.java</FilePath>
<LineStart>166</LineStart>
<Snippet>	{
	    s.setMessage("Error getting employee profile");
	    e.printStackTrace();
	}
</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="4955E5682DB1F23BC21B272890D9F5DD" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function handleRequest() in XMLInjection.java reveals system data or debug information by calling printStackTrace() on line 128. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>XMLInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/XMLInjection.java</FilePath>
<LineStart>128</LineStart>
<Snippet>	catch (Exception ex)
	{
	    ex.printStackTrace();
	}
</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="15A52F2B4AB4C9974369F7251DBFB23C" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function getAllEmployees() in Login.java reveals system data or debug information by calling printStackTrace() on line 258. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Login.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/Login.java</FilePath>
<LineStart>258</LineStart>
<Snippet>	{
	    s.setMessage("Error getting employees");
	    e.printStackTrace();
	}
</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="160F81FA3700C4ACF05278016D591DEE" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function createContent() in CommandInjection.java reveals system data or debug information by calling printStackTrace() on line 211. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>CommandInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CommandInjection.java</FilePath>
<LineStart>211</LineStart>
<Snippet>	{
	    s.setMessage("Error generating " + this.getClass().getName());
	    e.printStackTrace();
	}
</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="0010C1C949B6B1146790E9BA51866F0D" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function handleRequest() in CrossSiteScripting.java reveals system data or debug information by calling printStackTrace() on line 379. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>CrossSiteScripting.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/CrossSiteScripting.java</FilePath>
<LineStart>379</LineStart>
<Snippet>		s.setMessage("You are not authorized to perform this function");
		System.out.println("Authorization failure");
		ue2.printStackTrace();
	    }
	    catch (Exception e)</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="390CC7C47C215AE245AA7F18DFBC4FEA" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function handleRequest() in RoleBasedAccessControl.java reveals system data or debug information by calling printStackTrace() on line 344. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>RoleBasedAccessControl.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/RoleBasedAccessControl.java</FilePath>
<LineStart>344</LineStart>
<Snippet>	{
	    System.out.println("Validation failed");
	    ve.printStackTrace();
	    setCurrentAction(s, ERROR_ACTION);
	}</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="8BD6B7903C38236E8FA6C3B3480A6A40" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function getEmployeeProfile_BACKUP() in EditProfile.java reveals system data or debug information by calling printStackTrace() on line 186. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/EditProfile.java</FilePath>
<LineStart>186</LineStart>
<Snippet>	    {
		s.setMessage("Error getting employee profile");
		sqle.printStackTrace();
	    }
	}</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="D9886F39472E4FB32B12FB9ED7A42A23" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function Course() in Course.java reveals system data or debug information by calling printStackTrace() on line 72. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Course.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/Course.java</FilePath>
<LineStart>72</LineStart>
<Snippet>		{
		    System.out.println("Error loading WebGoat properties");
		    e.printStackTrace();
		}
    }</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="9523285F3B0BA5E8E91C4E11492A65D6" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function getAllEmployees_BACKUP() in ListStaff.java reveals system data or debug information by calling printStackTrace() on line 163. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ListStaff.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/ListStaff.java</FilePath>
<LineStart>163</LineStart>
<Snippet>	    {
		s.setMessage("Error getting employees");
		sqle.printStackTrace();
	    }
	}</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="AB0F9C0F0179DC45DB936C0CAB702657" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function doStage1() in BasicAuthentication.java reveals system data or debug information by calling printStackTrace() on line 160. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>BasicAuthentication.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/BasicAuthentication.java</FilePath>
<LineStart>160</LineStart>
<Snippet>	{
	    s.setMessage("Error generating " + this.getClass().getName());
	    e.printStackTrace();
	}
</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="81034BADE3549CFFE651854181BA6561" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function isAuthorizedForEmployee() in DefaultLessonAction.java reveals system data or debug information by calling printStackTrace() on line 326. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>DefaultLessonAction.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/DefaultLessonAction.java</FilePath>
<LineStart>326</LineStart>
<Snippet>		{
			s.setMessage( "Error authorizing" );
			e.printStackTrace();
		}
		</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="AFC4AB32F20D390E9F9D1EC215C5F28B" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function refreshDB() in RefreshDBScreen.java reveals system data or debug information by calling printStackTrace() on line 169. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>RefreshDBScreen.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/admin/RefreshDBScreen.java</FilePath>
<LineStart>169</LineStart>
<Snippet>	    s.setMessage("Error refreshing database "
		    + this.getClass().getName());
	    e.printStackTrace();
	}
    }</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="F0AF230D6D4B8FD61D448F00098EF862" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function getFileMethod() in AbstractLesson.java reveals system data or debug information by calling printStackTrace() on line 423. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>AbstractLesson.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/AbstractLesson.java</FilePath>
<LineStart>423</LineStart>
<Snippet>	{
	    System.out.println(e);
	    e.printStackTrace();
	}
</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="F8A0BE43919B1CC24D313FC8505FB218" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function main() in CreateDB.java reveals system data or debug information by calling printStackTrace() on line 63. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>CreateDB.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/CreateDB.java</FilePath>
<LineStart>63</LineStart>
<Snippet>	{
	    System.out.println("Failed to load DB driver");
	    e.printStackTrace();
	}
</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="F320CD0D64400B8E8CD55AB226B1808C" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function createContent() in WeakAuthenticationCookie.java reveals system data or debug information by calling printStackTrace() on line 197. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>WeakAuthenticationCookie.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/WeakAuthenticationCookie.java</FilePath>
<LineStart>197</LineStart>
<Snippet>	{
	    s.setMessage("Error generating " + this.getClass().getName());
	    e.printStackTrace();
	}
</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="784F6C1C531B36F70C18F0DABF1C7DCA" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function handleRequest_BACKUP() in RoleBasedAccessControl.java reveals system data or debug information by calling printStackTrace() on line 445. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>RoleBasedAccessControl.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/RoleBasedAccessControl.java</FilePath>
<LineStart>445</LineStart>
<Snippet>		s.setMessage("Login failed");
		System.out.println("Authentication failure");
		ue.printStackTrace();
	    }
	    catch (UnauthorizedException ue2)</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="B98B6B12E7E2107A2C5FB412E8074669" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function doPost() in HammerHead.java reveals system data or debug information by calling printStackTrace() on line 192. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>HammerHead.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/HammerHead.java</FilePath>
<LineStart>192</LineStart>
<Snippet>	catch (Throwable t)
	{
	    t.printStackTrace();
	    log("ERROR: " + t);
	    screen = new ErrorScreen(mySession, t);</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="047AD488FEFFFA0C26F978A64B811539" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function main() in Encoding.java reveals system data or debug information by calling printStackTrace() on line 774. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Encoding.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/Encoding.java</FilePath>
<LineStart>774</LineStart>
<Snippet>		catch ( Exception e )
		{
			e.printStackTrace();
		}
	}</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="05B7CDDF96E7DFE39C750A2146B40FF2" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function changeEmployeeProfile() in UpdateProfile.java reveals system data or debug information by calling printStackTrace() on line 181. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>UpdateProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/UpdateProfile.java</FilePath>
<LineStart>181</LineStart>
<Snippet>	    {
		s.setMessage("Error updating employee profile");
		sqle.printStackTrace();
	    }
</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="820D9127C18956E39B7BFD623247D3DA" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function handleRequest() in UpdateProfile.java reveals system data or debug information by calling printStackTrace() on line 110. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>UpdateProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/UpdateProfile.java</FilePath>
<LineStart>110</LineStart>
<Snippet>	    {
		System.out.println("Internal server error");
		ue1.printStackTrace();
	    }
	    catch (UnauthorizedException ue2)</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="D613F7CF5C9DCE819D72E14B4C1612FB" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function isAuthorized() in AbstractLesson.java reveals system data or debug information by calling printStackTrace() on line 807. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>AbstractLesson.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/AbstractLesson.java</FilePath>
<LineStart>807</LineStart>
<Snippet>	    {
		s.setMessage("Error authorizing");
		sqle.printStackTrace();
	    }
	}</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="D7EA539980EA0892CA2126A54762616A" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function doPost() in HammerHead.java reveals system data or debug information by calling printStackTrace() on line 204. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>HammerHead.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/HammerHead.java</FilePath>
<LineStart>204</LineStart>
<Snippet>	    catch (Throwable thr)
	    {
		thr.printStackTrace();
		log(request, "Could not write error screen: "
			+ thr.getMessage());</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="52AB825BF8B0D376878A2332E3C287FB" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function isAuthorized() in AbstractLesson.java reveals system data or debug information by calling printStackTrace() on line 813. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>AbstractLesson.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/AbstractLesson.java</FilePath>
<LineStart>813</LineStart>
<Snippet>	{
	    s.setMessage("Error authorizing");
	    e.printStackTrace();
	}
	return authorized;</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="F2A3B37C92D64B9A4D3A13851DF8D76E" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function createContent() in ProductsAdminScreen.java reveals system data or debug information by calling printStackTrace() on line 88. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ProductsAdminScreen.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/admin/ProductsAdminScreen.java</FilePath>
<LineStart>88</LineStart>
<Snippet>	{
	    s.setMessage("Error generating " + this.getClass().getName());
	    e.printStackTrace();
	}
</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="FC52535F6E6C764EA9B84AD5EA60A650" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function createContent() in JavaScriptValidation.java reveals system data or debug information by calling printStackTrace() on line 259. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>JavaScriptValidation.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/JavaScriptValidation.java</FilePath>
<LineStart>259</LineStart>
<Snippet>	{
	    s.setMessage("Error generating " + this.getClass().getName());
	    e.printStackTrace();
	}
</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="B5DBB03F9B63EAF24FDBFAEEDA0E29E2" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function createContent() in RefreshDBScreen.java reveals system data or debug information by calling printStackTrace() on line 99. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>RefreshDBScreen.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/admin/RefreshDBScreen.java</FilePath>
<LineStart>99</LineStart>
<Snippet>	{
	    s.setMessage("Error generating " + this.getClass().getName());
	    e.printStackTrace();
	}
</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="FC1E4C3D52D781762C0317B5BBFBAA8F" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function getEmployeeProfile_BACKUP() in ViewProfile.java reveals system data or debug information by calling printStackTrace() on line 206. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/ViewProfile.java</FilePath>
<LineStart>206</LineStart>
<Snippet>	    {
		s.setMessage("Error getting employee profile");
		sqle.printStackTrace();
	    }
	}</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="9BCB204A4306E1E6CB007BE7A2EE0469" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function accessWGService() in WSDLScanning.java reveals system data or debug information by calling printStackTrace() on line 155. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>WSDLScanning.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/WSDLScanning.java</FilePath>
<LineStart>155</LineStart>
<Snippet>	catch (RemoteException e)
	{
	    e.printStackTrace();
	}
	catch (ServiceException e)</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="DC355E945A033F5571B6641B8C9BE798" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function handleRequest() in FindProfile.java reveals system data or debug information by calling printStackTrace() on line 89. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>FindProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/FindProfile.java</FilePath>
<LineStart>89</LineStart>
<Snippet>		{
		    System.out.println("Internal server error");
		    ue2.printStackTrace();
		}
	    }</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="6848A018EE47A64FCA5A0F716FFE688A" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function handleRequest() in CrossSiteScripting.java reveals system data or debug information by calling printStackTrace() on line 385. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>CrossSiteScripting.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/CrossSiteScripting.java</FilePath>
<LineStart>385</LineStart>
<Snippet>		// All other errors send the user to the generic error page
		System.out.println("handleRequest() error");
		e.printStackTrace();
		setCurrentAction(s, ERROR_ACTION);
	    }</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="AD77F23B2F560ACFD13DFB3502BC039A" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function createContent() in DOS_Login.java reveals system data or debug information by calling printStackTrace() on line 172. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>DOS_Login.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/DOS_Login.java</FilePath>
<LineStart>172</LineStart>
<Snippet>	    {
		ec.addElement(new P().addElement(sqle.getMessage()));
		sqle.printStackTrace();
	    }
	}</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="A43277672E8AE03DDDA5863F1377295E" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function handleRequest() in DeleteProfile.java reveals system data or debug information by calling printStackTrace() on line 86. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>DeleteProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/DeleteProfile.java</FilePath>
<LineStart>86</LineStart>
<Snippet>	    {
		System.out.println("Internal server error");
		ue2.printStackTrace();
	    }
	}</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="8F523C6484F562CF74E05CFD919CB035" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function login() in Login.java reveals system data or debug information by calling printStackTrace() on line 162. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Login.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/Login.java</FilePath>
<LineStart>162</LineStart>
<Snippet>	    {
		s.setMessage("Error logging in");
		sqle.printStackTrace();
	    }
	}</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="7865EB7B5AC47B29248E8C5025A008B0" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function handleRequest() in Login.java reveals system data or debug information by calling printStackTrace() on line 96. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Login.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/Login.java</FilePath>
<LineStart>96</LineStart>
<Snippet>		{
		    System.out.println("Internal server error");
		    ue2.printStackTrace();
		}
	    }</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="791A891A76696CCE5590E44AE11A9C91" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function readFromURL() in AbstractLesson.java reveals system data or debug information by calling printStackTrace() on line 1045. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>AbstractLesson.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/AbstractLesson.java</FilePath>
<LineStart>1045</LineStart>
<Snippet>	{
	    System.out.println(e);
	    e.printStackTrace();
	}
</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="91E288900A767B8B3AC64CB500252086" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function changeEmployeeProfile() in UpdateProfile.java reveals system data or debug information by calling printStackTrace() on line 188. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>UpdateProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/UpdateProfile.java</FilePath>
<LineStart>188</LineStart>
<Snippet>	{
	    s.setMessage("Error updating employee profile");
	    e.printStackTrace();
	}
    }</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="181A204DA906FACB0A0455C47657CF13" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function changeEmployeeProfile() in UpdateProfile.java reveals system data or debug information by calling printStackTrace() on line 253. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>UpdateProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/UpdateProfile.java</FilePath>
<LineStart>253</LineStart>
<Snippet>	    {
		s.setMessage("Error updating employee profile");
		sqle.printStackTrace();
	    }
</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="65081290A748CDED3B8C7556ECE0F677" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function createEmployeeProfile() in UpdateProfile.java reveals system data or debug information by calling printStackTrace() on line 321. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>UpdateProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/UpdateProfile.java</FilePath>
<LineStart>321</LineStart>
<Snippet>	catch (Exception e)
	{
	    e.printStackTrace();
	    s.setMessage("Error updating employee profile");
	}</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="DD063791D0680D5C9FF93F0599D7712B" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function getAllEmployees_BACKUP() in ListStaff.java reveals system data or debug information by calling printStackTrace() on line 169. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ListStaff.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/ListStaff.java</FilePath>
<LineStart>169</LineStart>
<Snippet>	{
	    s.setMessage("Error getting employees");
	    e.printStackTrace();
	}
</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="58FD40089E718B766C6FA96FD22C8D81" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function getUserName() in DefaultLessonAction.java reveals system data or debug information by calling printStackTrace() on line 210. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>DefaultLessonAction.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/DefaultLessonAction.java</FilePath>
<LineStart>210</LineStart>
<Snippet>			{
				s.setMessage( "Error getting user name" );
				sqle.printStackTrace();
			}
		}</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="8CFD6F3F11F1F76C099AC5ACA733778E" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function getAllEmployees() in ListStaff.java reveals system data or debug information by calling printStackTrace() on line 121. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ListStaff.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/ListStaff.java</FilePath>
<LineStart>121</LineStart>
<Snippet>	{
	    s.setMessage("Error getting employees");
	    e.printStackTrace();
	}
</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="2509DC39A77F6D65BBCF8ACCFF657FFE" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function doPost() in LessonSource.java reveals system data or debug information by calling printStackTrace() on line 104. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>LessonSource.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/LessonSource.java</FilePath>
<LineStart>104</LineStart>
<Snippet>	    catch (Throwable thr)
	    {
		thr.printStackTrace();
		log(request, "Could not write error screen: "
			+ thr.getMessage());</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="BD4FADFC5F19C155B261ECC46F46E82D" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function getEmployeeProfile() in EditProfile.java reveals system data or debug information by calling printStackTrace() on line 125. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/EditProfile.java</FilePath>
<LineStart>125</LineStart>
<Snippet>	    {
		s.setMessage("Error getting employee profile");
		sqle.printStackTrace();
	    }
	}</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="E8F7B8415D904326CE5A76C29F60DD94" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function handleRequest() in FindProfile.java reveals system data or debug information by calling printStackTrace() on line 84. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>FindProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/FindProfile.java</FilePath>
<LineStart>84</LineStart>
<Snippet>		{
		    System.out.println("Internal server error");
		    ue1.printStackTrace();
		}
		catch (UnauthorizedException ue2)</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="8E895F72A0E053B9527EBDA1C3B8F849" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function handleRequest() in Logout.java reveals system data or debug information by calling printStackTrace() on line 76. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Logout.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/Logout.java</FilePath>
<LineStart>76</LineStart>
<Snippet>	{
	    System.out.println("Internal server error");
	    ue2.printStackTrace();
	}
</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="4F0DE05D9365625B7CCD08D58B128F2D" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function hashSHA() in Encoding.java reveals system data or debug information by calling printStackTrace() on line 672. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Encoding.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/Encoding.java</FilePath>
<LineStart>672</LineStart>
<Snippet>		{
			// it's got to be there
			e.printStackTrace();
		}
		return ( base64Encode( md.digest() ) );</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="2CBD712DEF62123F610AA40637D8643F" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function getEmployeeProfile_BACKUP() in ViewProfile.java reveals system data or debug information by calling printStackTrace() on line 226. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/ViewProfile.java</FilePath>
<LineStart>226</LineStart>
<Snippet>	{
	    s.setMessage("Error getting employee profile");
	    e.printStackTrace();
	}
</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="D76FD51A11E5483E308232F0748769C5" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function getFileText() in AbstractLesson.java reveals system data or debug information by calling printStackTrace() on line 479. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>AbstractLesson.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/AbstractLesson.java</FilePath>
<LineStart>479</LineStart>
<Snippet>	{
	    System.out.println(e);
	    e.printStackTrace();
	}
</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="9173282D79F380158CB220AE42554726" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function getStackTrace() in ErrorScreen.java reveals system data or debug information by calling printStackTrace() on line 258. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ErrorScreen.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ErrorScreen.java</FilePath>
<LineStart>258</LineStart>
<Snippet>		ByteArrayOutputStream bytes = new ByteArrayOutputStream();
		PrintWriter writer = new PrintWriter( bytes, true );
		t.printStackTrace( writer );

		return ( bytes.toString() );</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="D91B3091E8E264DF8C6FF60BC35600BA" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function isDefaced() in Challenge2Screen.java reveals system data or debug information by calling printStackTrace() on line 390. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Challenge2Screen.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/Challenge2Screen.java</FilePath>
<LineStart>390</LineStart>
<Snippet>	catch (Exception e)
	{
	    e.printStackTrace();
	}
	return defaced;</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="0278C28651A419EA7D7D5DB87A1FB695" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function handleRequest() in Login.java reveals system data or debug information by calling printStackTrace() on line 100. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Login.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/Login.java</FilePath>
<LineStart>100</LineStart>
<Snippet>		{
		    System.out.println("Internal server error");
		    ue2.printStackTrace();
		}
	    }</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="3F6FFF90338B5D7AD8036C3213B71E6F" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function isAuthorizedForEmployee() in DefaultLessonAction.java reveals system data or debug information by calling printStackTrace() on line 320. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>DefaultLessonAction.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/DefaultLessonAction.java</FilePath>
<LineStart>320</LineStart>
<Snippet>			{
				s.setMessage( "Error authorizing" );
				sqle.printStackTrace();
			}
		}</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="4808FFAF7D3634E85349E16A6E77465F" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function findEmployeeProfile() in FindProfile.java reveals system data or debug information by calling printStackTrace() on line 181. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>FindProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/FindProfile.java</FilePath>
<LineStart>181</LineStart>
<Snippet>	    {
		s.setMessage("Error finding employee profile");
		sqle.printStackTrace();
	    }
	}</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="95DE204D0F2739B96963DADDC6173ABA" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function injectableQuery() in SqlNumericInjection.java reveals system data or debug information by calling printStackTrace() on line 162. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>SqlNumericInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SqlNumericInjection.java</FilePath>
<LineStart>162</LineStart>
<Snippet>	{
	    s.setMessage("Error generating " + this.getClass().getName());
	    e.printStackTrace();
	}
</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="9EA2F7ECE0EB7F2DFEA0C97602F3136D" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function createContent() in DOMInjection.java reveals system data or debug information by calling printStackTrace() on line 92. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>DOMInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/DOMInjection.java</FilePath>
<LineStart>92</LineStart>
<Snippet>	{
	    s.setMessage("Error generating " + this.getClass().getName());
	    e.printStackTrace();
	}
</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="578089EE6998BD5FC900CA94A6F4B9F9" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function getAllEmployees() in Login.java reveals system data or debug information by calling printStackTrace() on line 216. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Login.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/Login.java</FilePath>
<LineStart>216</LineStart>
<Snippet>	{
	    s.setMessage("Error getting employees");
	    e.printStackTrace();
	}
</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="7D6003CBCB0DCF48E600ED712C83AABF" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function injectableQuery() in SqlStringInjection.java reveals system data or debug information by calling printStackTrace() on line 152. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>SqlStringInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SqlStringInjection.java</FilePath>
<LineStart>152</LineStart>
<Snippet>	{
	    s.setMessage("Error generating " + this.getClass().getName());
	    e.printStackTrace();
	}
</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="30BA3110C9C99222B1E03052176CC477" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function getAllEmployees() in ListStaff.java reveals system data or debug information by calling printStackTrace() on line 115. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ListStaff.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/ListStaff.java</FilePath>
<LineStart>115</LineStart>
<Snippet>	    {
		s.setMessage("Error getting employees");
		sqle.printStackTrace();
	    }
	}</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="74C884820E4739861A03F8B6D623275C" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function createContent() in XPATHInjection.java reveals system data or debug information by calling printStackTrace() on line 207. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>XPATHInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/XPATHInjection.java</FilePath>
<LineStart>207</LineStart>
<Snippet>	{
	    s.setMessage("Error generating " + this.getClass().getName());
	    e.printStackTrace();
	}
	catch (XPathExpressionException e)</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="3DDF4C741AC3A01CBE48D925C7B3268F" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function createEmployeeProfile() in UpdateProfile.java reveals system data or debug information by calling printStackTrace() on line 351. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>UpdateProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/UpdateProfile.java</FilePath>
<LineStart>351</LineStart>
<Snippet>	{
	    s.setMessage("Error updating employee profile");
	    e.printStackTrace();
	}
    }</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="125F01FC217C384431D1097619DF9AD9" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function handleRequest() in BlindSqlInjection.java reveals system data or debug information by calling printStackTrace() on line 344. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>BlindSqlInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/BlindSqlInjection.java</FilePath>
<LineStart>344</LineStart>
<Snippet>	{
	    System.out.println("Exception caught: " + e);
	    e.printStackTrace(System.out);
	}
    }</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="D9077301391A2AB9CFF320A0941B7299" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function doChangeEmployeeProfile_BACKUP() in UpdateProfile.java reveals system data or debug information by calling printStackTrace() on line 309. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>UpdateProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/UpdateProfile.java</FilePath>
<LineStart>309</LineStart>
<Snippet>	{
	    s.setMessage("Error updating employee profile");
	    e.printStackTrace();
	}
    }</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="92A45ABC6BEBD81AF05D783F150A01FD" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function handleRequest() in RoleBasedAccessControl.java reveals system data or debug information by calling printStackTrace() on line 358. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>RoleBasedAccessControl.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/RoleBasedAccessControl.java</FilePath>
<LineStart>358</LineStart>
<Snippet>	    System.out.println("Authorization failure");
	    setCurrentAction(s, ERROR_ACTION);
	    ue2.printStackTrace();
	}
	catch (Exception e)</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="D13CCAFA47C75F58C2F9560901CDDCA9" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function handleRequest() in SQLInjection.java reveals system data or debug information by calling printStackTrace() on line 342. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>SQLInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/SQLInjection.java</FilePath>
<LineStart>342</LineStart>
<Snippet>	    {
		System.out.println("Missing parameter");
		pnfe.printStackTrace();
		setCurrentAction(s, ERROR_ACTION);
	    }</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="52C8ADF9D15390304DD17CB7F9DC8B02" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function deleteEmployeeProfile() in DeleteProfile.java reveals system data or debug information by calling printStackTrace() on line 120. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>DeleteProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/DeleteProfile.java</FilePath>
<LineStart>120</LineStart>
<Snippet>	    {
		s.setMessage("Error deleting employee profile");
		sqle.printStackTrace();
	    }
	}</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="2B04DD17B5D46FB70C0FD974CE08F0CD" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function createContent() in WsSAXInjection.java reveals system data or debug information by calling printStackTrace() on line 166. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>WsSAXInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/WsSAXInjection.java</FilePath>
<LineStart>166</LineStart>
<Snippet>	{
	    s.setMessage("Error generating " + this.getClass().getName());
	    e.printStackTrace();
	}
	return (ec);</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="10D794BC1E42F40B8C7789FAB6124876" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function isAuthorized() in DefaultLessonAction.java reveals system data or debug information by calling printStackTrace() on line 272. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>DefaultLessonAction.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/DefaultLessonAction.java</FilePath>
<LineStart>272</LineStart>
<Snippet>			{
				s.setMessage( "Error authorizing" );
				sqle.printStackTrace();
			}
		}</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="51D7D308BD3345DCA7B15A0BEB7EBE70" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function createContent() in AccessControlMatrix.java reveals system data or debug information by calling printStackTrace() on line 114. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>AccessControlMatrix.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/AccessControlMatrix.java</FilePath>
<LineStart>114</LineStart>
<Snippet>		{
		    s.setMessage("Error generating " + this.getClass().getName());
		    e.printStackTrace();
		}
	</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="F7FD358E0D1F0374731F1FA9D063D96F" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function handleRequest() in FindProfile.java reveals system data or debug information by calling printStackTrace() on line 126. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>FindProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/FindProfile.java</FilePath>
<LineStart>126</LineStart>
<Snippet>		{
		    System.out.println("Internal server error");
		    ue2.printStackTrace();
		}
	    }</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="ABD8BC13CE60A8E57DCFA6DABD7C58FD" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function createContent() in TraceXSS.java reveals system data or debug information by calling printStackTrace() on line 223. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>TraceXSS.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/TraceXSS.java</FilePath>
<LineStart>223</LineStart>
<Snippet>	{
	    s.setMessage("Error generating " + this.getClass().getName());
	    e.printStackTrace();
	}
	return (ec);</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="CD805D9C1A798A2C4DDC3D19F51A75BC" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function handleRequest() in RoleBasedAccessControl.java reveals system data or debug information by calling printStackTrace() on line 364. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>RoleBasedAccessControl.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/RoleBasedAccessControl.java</FilePath>
<LineStart>364</LineStart>
<Snippet>	    // All other errors send the user to the generic error page
	    System.out.println("handleRequest() error");
	    e.printStackTrace();
	    setCurrentAction(s, ERROR_ACTION);
	}</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="96AF7220DB83AEDCBF2DD2A39C114AF0" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function getEmployeeProfile() in ViewProfile.java reveals system data or debug information by calling printStackTrace() on line 146. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/ViewProfile.java</FilePath>
<LineStart>146</LineStart>
<Snippet>	    {
		s.setMessage("Error getting employee profile");
		sqle.printStackTrace();
	    }
	}</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="D9A6AE2AC85C0E39449C242C052F302B" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function createEmployeeProfile_BACKUP() in UpdateProfile.java reveals system data or debug information by calling printStackTrace() on line 393. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>UpdateProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/UpdateProfile.java</FilePath>
<LineStart>393</LineStart>
<Snippet>	{
	    s.setMessage("Error updating employee profile");
	    e.printStackTrace();
	}
    }</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="96C276DAF9BB2936A2F0FEB3DA40763A" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function getNextUID() in UpdateProfile.java reveals system data or debug information by calling printStackTrace() on line 257. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>UpdateProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/UpdateProfile.java</FilePath>
<LineStart>257</LineStart>
<Snippet>	catch (SQLException sqle)
	{
	    sqle.printStackTrace();
	    s.setMessage("Error updating employee profile");
	}</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="A35E8449693CFFD71A5DF12FFDCBA587" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function getEmployeeProfile_BACKUP() in EditProfile.java reveals system data or debug information by calling printStackTrace() on line 183. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/EditProfile.java</FilePath>
<LineStart>183</LineStart>
<Snippet>	    {
		s.setMessage("Error getting employee profile");
		sqle.printStackTrace();
	    }
	}</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="0C519A9DA8C7ECBC38BFA1BFE8776F64" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function createContent() in WSDLScanning.java reveals system data or debug information by calling printStackTrace() on line 264. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>WSDLScanning.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/WSDLScanning.java</FilePath>
<LineStart>264</LineStart>
<Snippet>	{
	    s.setMessage("Error generating " + this.getClass().getName());
	    e.printStackTrace();
	}
	return (ec);</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="53B038E0AE5B68AA1F4A9E8507FB4AAC" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function parameterizedQuery() in SqlNumericInjection.java reveals system data or debug information by calling printStackTrace() on line 242. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>SqlNumericInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SqlNumericInjection.java</FilePath>
<LineStart>242</LineStart>
<Snippet>	{
	    s.setMessage("Error generating " + this.getClass().getName());
	    e.printStackTrace();
	}
</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="8C48CE78706C16033CB0373C60EBF66E" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function createEmployeeProfile() in UpdateProfile.java reveals system data or debug information by calling printStackTrace() on line 299. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>UpdateProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/UpdateProfile.java</FilePath>
<LineStart>299</LineStart>
<Snippet>	    catch (SQLException sqle)
	    {
		sqle.printStackTrace();
		s.setMessage("Error updating employee profile");
	    }</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="3D85ED8EA02BD2FB40285F67BE1CDE88" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function createWeatherDataTable() in CreateDB.java reveals system data or debug information by calling printStackTrace() on line 406. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>CreateDB.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/CreateDB.java</FilePath>
<LineStart>406</LineStart>
<Snippet>	{
	    System.out.println("Error creating weather database");
	    e.printStackTrace();
	}
</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="435FCB107394C1B62FA1D1B941C914E7" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function getEmployeeProfile_BACKUP() in ViewProfile.java reveals system data or debug information by calling printStackTrace() on line 200. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/ViewProfile.java</FilePath>
<LineStart>200</LineStart>
<Snippet>	    {
		s.setMessage("Error getting employee profile");
		sqle.printStackTrace();
	    }
	}</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="29F8047D0743AF3156E0715069C95333" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function deleteEmployeeProfile() in DeleteProfile.java reveals system data or debug information by calling printStackTrace() on line 126. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>DeleteProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/DeleteProfile.java</FilePath>
<LineStart>126</LineStart>
<Snippet>	{
	    s.setMessage("Error deleting employee profile");
	    e.printStackTrace();
	}
    }</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="25742E56A92040D260B30A6926B06A6C" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function createContent() in WsSqlInjection.java reveals system data or debug information by calling printStackTrace() on line 219. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>WsSqlInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/WsSqlInjection.java</FilePath>
<LineStart>219</LineStart>
<Snippet>	{
	    s.setMessage("Error generating " + this.getClass().getName());
	    e.printStackTrace();
	}
	return (ec);</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="5FEF0BF8E504E8EEB64A4B64E33D7339" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function createContent() in UncheckedEmail.java reveals system data or debug information by calling printStackTrace() on line 196. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>UncheckedEmail.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/UncheckedEmail.java</FilePath>
<LineStart>196</LineStart>
<Snippet>	{
	    s.setMessage("Error generating " + this.getClass().getName());
	    e.printStackTrace();
	}
	return (ec);</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="8B01FD5075A32F5302CF5236E389A97E" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function handleRequest() in DeleteProfile.java reveals system data or debug information by calling printStackTrace() on line 81. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>DeleteProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/DeleteProfile.java</FilePath>
<LineStart>81</LineStart>
<Snippet>	    {
		System.out.println("Internal server error");
		ue1.printStackTrace();
	    }
	    catch (UnauthorizedException ue2)</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="B227CC5643407A75A63DAD656CCB9DC6" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function findEmployeeProfile() in FindProfile.java reveals system data or debug information by calling printStackTrace() on line 187. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>FindProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/FindProfile.java</FilePath>
<LineStart>187</LineStart>
<Snippet>	{
	    s.setMessage("Error finding employee profile");
	    e.printStackTrace();
	}
</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="F816B701BF42B2D5F9B436A63C987F2E" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function getAllEmployees() in ListStaff.java reveals system data or debug information by calling printStackTrace() on line 121. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ListStaff.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/ListStaff.java</FilePath>
<LineStart>121</LineStart>
<Snippet>	{
	    s.setMessage("Error getting employees");
	    e.printStackTrace();
	}
</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="72460759C5B6E978E5FE283EAEEC81F3" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function parameterizedQuery() in SqlStringInjection.java reveals system data or debug information by calling printStackTrace() on line 222. The information revealed by printStackTrace() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>SqlStringInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SqlStringInjection.java</FilePath>
<LineStart>222</LineStart>
<Snippet>	{
	    s.setMessage("Error generating " + this.getClass().getName());
	    e.printStackTrace();
	}
</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                    </GroupingSection>
                    <GroupingSection count="153">
                        <groupTitle>Poor Error Handling: Overly Broad Catch</groupTitle>
                        <MajorAttributeSummary>
                            <MetaInfo>
<Name>Abstract</Name>
<Value>The catch block at HammerHead.java line 190 handles a broad swath of exceptions,  potentially trapping dissimilar issues or problems that should not be dealt with at this point in the program.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Explanation</Name>
<Value>Multiple catch blocks can get repetitive, but "condensing" catch blocks by catching a high-level class such as Exception can obscure exceptions that deserve special treatment or that should not be caught at this point in the program. Catching an overly broad exception essentially defeats the purpose of Java's typed exceptions, and can become particularly dangerous if the program grows and begins to throw new types of exceptions. The new exception types will not receive any attention.

Example: The following code excerpt handles three types of exceptions in an identical fashion.


  try {
    doExchange();
  }
  catch (IOException e) {
    logger.error("doExchange failed", e);
  }
  catch (InvocationTargetException e) {
    logger.error("doExchange failed", e);
  }
  catch (SQLException e) {
    logger.error("doExchange failed", e);
  }


At first blush, it may seem preferable to deal with these exceptions in a single catch block, as follows:


  try {
    doExchange();
  }
  catch (Exception e) {
    logger.error("doExchange failed", e);
  }


However, if doExchange() is modified to throw a new type of exception that should be handled in some different kind of way, the broad catch block will prevent the compiler from pointing out the situation. Further, the new catch block will now also handle exceptions derived from RuntimeException such as ClassCastException, and NullPointerException, which is not the programmer's intent.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Recommendations</Name>
<Value>Do not catch broad exception classes such as Exception, Throwable, Error, or RuntimeException except at the very top level of the program or thread.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Tips</Name>
<Value>1. The Fortify Secure Coding Rulepacks will not flag an overly broad catch block if the catch block in question immediately throws a new exception.</Value>
                            </MetaInfo>
                            <AttributeValue>
<Name>&lt;Unaudited&gt;</Name>
<Count>153</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not an Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Reliability Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Bad Practice</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Suspicious</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Exploitable</Name>
<Count>0</Count>
                            </AttributeValue>
                        </MajorAttributeSummary>
                        <Issue iid="984E5F526523991AAC57FE2EB26CA793" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The catch block at ReflectedXSS.java line 219 handles a broad swath of exceptions,  potentially trapping dissimilar issues or problems that should not be dealt with at this point in the program.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ReflectedXSS.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/ReflectedXSS.java</FilePath>
<LineStart>219</LineStart>
<Snippet>	    ec.addElement(new HR().setWidth("90%"));
	}
	catch (Exception e)
	{
	    s.setMessage("Error generating " + this.getClass().getName());</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="358503EE2CA8B429E77997BFD409A3EF" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The catch block at ListStaff.java line 118 handles a broad swath of exceptions,  potentially trapping dissimilar issues or problems that should not be dealt with at this point in the program.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ListStaff.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/ListStaff.java</FilePath>
<LineStart>118</LineStart>
<Snippet>	    }
	}
	catch (Exception e)
	{
	    s.setMessage("Error getting employees");</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="E68C10C62E833D5263B1BE22DEBC293C" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The catch block at FailOpenAuthentication.java line 83 handles a broad swath of exceptions,  potentially trapping dissimilar issues or problems that should not be dealt with at this point in the program.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>FailOpenAuthentication.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/FailOpenAuthentication.java</FilePath>
<LineStart>83</LineStart>
<Snippet>		}
	    }
	    catch (Exception e)
	    {
		// The parameter was omitted. set fail open status complete</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="C58ACAE261FF9F31934D450BE5DF500D" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The catch block at HttpBasics.java line 75 handles a broad swath of exceptions,  potentially trapping dissimilar issues or problems that should not be dealt with at this point in the program.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>HttpBasics.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/HttpBasics.java</FilePath>
<LineStart>75</LineStart>
<Snippet>	    ec.addElement(b);
	}
	catch (Exception e)
	{
	    s.setMessage("Error generating " + this.getClass().getName());</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="5A9D126865093070DDD009C5657A5A6A" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The catch block at ViewProfile.java line 209 handles a broad swath of exceptions,  potentially trapping dissimilar issues or problems that should not be dealt with at this point in the program.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/ViewProfile.java</FilePath>
<LineStart>209</LineStart>
<Snippet>	    }
	}
	catch (Exception e)
	{
	    s.setMessage("Error getting employee profile");</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="A7BD3B00DCB3D00E5497B3C4ACFBC6F8" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The catch block at SqlNumericInjection.java line 239 handles a broad swath of exceptions,  potentially trapping dissimilar issues or problems that should not be dealt with at this point in the program.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>SqlNumericInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SqlNumericInjection.java</FilePath>
<LineStart>239</LineStart>
<Snippet>	    }
	}
	catch (Exception e)
	{
	    s.setMessage("Error generating " + this.getClass().getName());</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="4E13753D22B01B4D5318B21836B06C79" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The catch block at UpdateProfile.java line 306 handles a broad swath of exceptions,  potentially trapping dissimilar issues or problems that should not be dealt with at this point in the program.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>UpdateProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/UpdateProfile.java</FilePath>
<LineStart>306</LineStart>
<Snippet>
	}
	catch (Exception e)
	{
	    s.setMessage("Error updating employee profile");</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="3235E1BD2F0BD60BA0E7CDB6310F389A" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The catch block at PathBasedAccessControl.java line 205 handles a broad swath of exceptions,  potentially trapping dissimilar issues or problems that should not be dealt with at this point in the program.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>PathBasedAccessControl.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/PathBasedAccessControl.java</FilePath>
<LineStart>205</LineStart>
<Snippet>				    "&amp;lt;").replaceAll("&lt;(r|u|t)", "&amp;lt;$1")));
		}
		catch (Exception e)
		{
		    ec.addElement(new BR());</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="41C3BF30B478B855DCE389C81F960289" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The catch block at Encoding.java line 550 handles a broad swath of exceptions,  potentially trapping dissimilar issues or problems that should not be dealt with at this point in the program.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Encoding.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/Encoding.java</FilePath>
<LineStart>550</LineStart>
<Snippet>		}

		catch ( Exception e )
		{
</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="4B71BE263D2C30F4382BA95ABABD7167" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The catch block at SqlStringInjection.java line 314 handles a broad swath of exceptions,  potentially trapping dissimilar issues or problems that should not be dealt with at this point in the program.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>SqlStringInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SqlStringInjection.java</FilePath>
<LineStart>314</LineStart>
<Snippet>	    }
	}
	catch (Exception e)
	{
	    System.out.println("Exception caught: " + e);</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="5EDC8D3BF676FC245E95014BBFF008C6" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The catch block at Challenge2Screen.java line 388 handles a broad swath of exceptions,  potentially trapping dissimilar issues or problems that should not be dealt with at this point in the program.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Challenge2Screen.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/Challenge2Screen.java</FilePath>
<LineStart>388</LineStart>
<Snippet>	    defaced = (!origText.equals(defacedText));
	}
	catch (Exception e)
	{
	    e.printStackTrace();</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="10131C2F14189C00AA15A9FBE3C17ED9" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The catch block at WebSession.java line 1027 handles a broad swath of exceptions,  potentially trapping dissimilar issues or problems that should not be dealt with at this point in the program.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>WebSession.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/WebSession.java</FilePath>
<LineStart>1027</LineStart>
<Snippet>			}
		}
		catch ( Exception e )
		{
		}</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="AE917003118457AD84906DF5A42B4703" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The catch block at BasicAuthentication.java line 248 handles a broad swath of exceptions,  potentially trapping dissimilar issues or problems that should not be dealt with at this point in the program.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>BasicAuthentication.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/BasicAuthentication.java</FilePath>
<LineStart>248</LineStart>
<Snippet>
	}
	catch (Exception e)
	{
	    s.setMessage("Error generating " + this.getClass().getName());</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="29C463E05D17C443C05EB197B4AD6F18" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The catch block at ParameterParser.java line 428 handles a broad swath of exceptions,  potentially trapping dissimilar issues or problems that should not be dealt with at this point in the program.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>428</LineStart>
<Snippet>			}
		    }
		    catch (Exception e)
		    {
			valid = false;</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="300D602DF2E3D166982F55C07DEE6D12" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The catch block at UpdateProfile.java line 185 handles a broad swath of exceptions,  potentially trapping dissimilar issues or problems that should not be dealt with at this point in the program.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>UpdateProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/UpdateProfile.java</FilePath>
<LineStart>185</LineStart>
<Snippet>
	}
	catch (Exception e)
	{
	    s.setMessage("Error updating employee profile");</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="D489E6517AF3169DA7E6B8EBC1FAACBB" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The catch block at BlindSqlInjection.java line 341 handles a broad swath of exceptions,  potentially trapping dissimilar issues or problems that should not be dealt with at this point in the program.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>BlindSqlInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/BlindSqlInjection.java</FilePath>
<LineStart>341</LineStart>
<Snippet>	    }
	}
	catch (Exception e)
	{
	    System.out.println("Exception caught: " + e);</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="716F20939BD142EC3DA7D851F0B10B0C" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The catch block at HammerHead.java line 202 handles a broad swath of exceptions,  potentially trapping dissimilar issues or problems that should not be dealt with at this point in the program.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>HammerHead.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/HammerHead.java</FilePath>
<LineStart>202</LineStart>
<Snippet>		this.writeScreen(screen, response);
	    }
	    catch (Throwable thr)
	    {
		thr.printStackTrace();</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="BCEB93E3F660C12BFB6E4E3997560F66" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The catch block at ViewProfile.java line 203 handles a broad swath of exceptions,  potentially trapping dissimilar issues or problems that should not be dealt with at this point in the program.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/ViewProfile.java</FilePath>
<LineStart>203</LineStart>
<Snippet>	    }
	}
	catch (Exception e)
	{
	    s.setMessage("Error getting employee profile");</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="6868841028A93E88618D4938359688B8" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The catch block at LessonAdapter.java line 101 handles a broad swath of exceptions,  potentially trapping dissimilar issues or problems that should not be dealt with at this point in the program.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>LessonAdapter.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/LessonAdapter.java</FilePath>
<LineStart>101</LineStart>
<Snippet>		ec.addElement(pre);
	    }
	    catch (Exception e)
	    {}
	}</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="76EB0FFF299797C5585CEE9AE40C0639" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The catch block at WSDLScanning.java line 261 handles a broad swath of exceptions,  potentially trapping dissimilar issues or problems that should not be dealt with at this point in the program.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>WSDLScanning.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/WSDLScanning.java</FilePath>
<LineStart>261</LineStart>
<Snippet>	    //            accessWGService("WSDLScanning", "getCreditCard", "acct_num", new Integer(101));
	}
	catch (Exception e)
	{
	    s.setMessage("Error generating " + this.getClass().getName());</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="9287B8235867E5F04449855E60444BE5" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The catch block at HammerHead.java line 190 handles a broad swath of exceptions,  potentially trapping dissimilar issues or problems that should not be dealt with at this point in the program.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>HammerHead.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/HammerHead.java</FilePath>
<LineStart>190</LineStart>
<Snippet>		    request, response);
	}
	catch (Throwable t)
	{
	    t.printStackTrace();</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="95305C2FB8B376A1BAE2E30F8CB39C3A" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The catch block at BlindSqlInjection.java line 142 handles a broad swath of exceptions,  potentially trapping dissimilar issues or problems that should not be dealt with at this point in the program.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>BlindSqlInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/BlindSqlInjection.java</FilePath>
<LineStart>142</LineStart>
<Snippet>	    }
	}
	catch (Exception e)
	{
	    s.setMessage("Error generating " + this.getClass().getName());</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="9493DF9C5B07B90B1B6F9FB2865676D5" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The catch block at ViewDatabase.java line 102 handles a broad swath of exceptions,  potentially trapping dissimilar issues or problems that should not be dealt with at this point in the program.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ViewDatabase.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/admin/ViewDatabase.java</FilePath>
<LineStart>102</LineStart>
<Snippet>	    }
	}
	catch (Exception e)
	{
	    s.setMessage("Error generating " + this.getClass().getName());</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="18BB709AC92269C70311B414BF7A920B" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The catch block at Challenge2Screen.java line 346 handles a broad swath of exceptions,  potentially trapping dissimilar issues or problems that should not be dealt with at this point in the program.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Challenge2Screen.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/Challenge2Screen.java</FilePath>
<LineStart>346</LineStart>
<Snippet>		ec.addElement(t);
	    }
	    catch (Exception e)
	    {
		ec</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="BC8647CB9B226FE34C83F775142C45C5" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The catch block at HttpOnly.java line 135 handles a broad swath of exceptions,  potentially trapping dissimilar issues or problems that should not be dealt with at this point in the program.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>HttpOnly.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/HttpOnly.java</FilePath>
<LineStart>135</LineStart>
<Snippet>			ec.addElement(makeContent(s));
		}
		catch ( Exception e )
		{
			s.setMessage( "Error generating " + this.getClass().getName() );</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="76D39C527921E5D9BD42CA8CB6EAD80D" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The catch block at StoredXss.java line 361 handles a broad swath of exceptions,  potentially trapping dissimilar issues or problems that should not be dealt with at this point in the program.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>StoredXss.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/StoredXss.java</FilePath>
<LineStart>361</LineStart>
<Snippet>	    }
	}
	catch (Exception e)
	{
	    s.setMessage("Error while getting message list.");</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="FB7119AF63972CBB51F6D50AADC41469" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The catch block at ParameterParser.java line 882 handles a broad swath of exceptions,  potentially trapping dissimilar issues or problems that should not be dealt with at this point in the program.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>882</LineStart>
<Snippet>	    return getRegexParameter(name, regexpattern);
	}
	catch (Exception e)
	{
	    //System.out.println("Exception occured in defined pattern match");</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="CCA80F9E2661DACC74E02549AFDA676F" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The catch block at ParameterParser.java line 298 handles a broad swath of exceptions,  potentially trapping dissimilar issues or problems that should not be dealt with at this point in the program.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>298</LineStart>
<Snippet>	    return getDoubleParameter(name);
	}
	catch (Exception e)
	{
	    return def;</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="20367431E7F8E26A17FE6BF64C1E276F" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The catch block at FailOpenAuthentication.java line 120 handles a broad swath of exceptions,  potentially trapping dissimilar issues or problems that should not be dealt with at this point in the program.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>FailOpenAuthentication.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/FailOpenAuthentication.java</FilePath>
<LineStart>120</LineStart>
<Snippet>	    }
	}
	catch (Exception e)
	{
	    s.setMessage("Error generating " + this.getClass().getName());</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="98EDAD12C6C20E28675A944C40E8E80F" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The catch block at Challenge2Screen.java line 265 handles a broad swath of exceptions,  potentially trapping dissimilar issues or problems that should not be dealt with at this point in the program.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Challenge2Screen.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/Challenge2Screen.java</FilePath>
<LineStart>265</LineStart>
<Snippet>	    }
	}
	catch (Exception e)
	{
	    s.setMessage("An error occurred in the woods");</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="275CDA90647F690F2043ADAFE265B7CF" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The catch block at Login.java line 166 handles a broad swath of exceptions,  potentially trapping dissimilar issues or problems that should not be dealt with at this point in the program.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Login.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/Login.java</FilePath>
<LineStart>166</LineStart>
<Snippet>	    }
	}
	catch (Exception e)
	{
	    s.setMessage("Error logging in");</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="D58A606520620F421FCABBBCDB8D9797" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The catch block at TraceXSS.java line 220 handles a broad swath of exceptions,  potentially trapping dissimilar issues or problems that should not be dealt with at this point in the program.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>TraceXSS.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/TraceXSS.java</FilePath>
<LineStart>220</LineStart>
<Snippet>	    ec.addElement(new HR().setWidth("90%"));
	}
	catch (Exception e)
	{
	    s.setMessage("Error generating " + this.getClass().getName());</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="36FB2DEBC9DD7242221D279784A38B7E" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The catch block at LessonTracker.java line 403 handles a broad swath of exceptions,  potentially trapping dissimilar issues or problems that should not be dealt with at this point in the program.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>LessonTracker.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/LessonTracker.java</FilePath>
<LineStart>403</LineStart>
<Snippet>		out.close();
	    }
	    catch (Exception e)
	    {}
	}</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="12A3C0D6E4EA75F33DE7C546E7279315" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The catch block at ParameterParser.java line 752 handles a broad swath of exceptions,  potentially trapping dissimilar issues or problems that should not be dealt with at this point in the program.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>752</LineStart>
<Snippet>	    return getSubParameter(first, next);
	}
	catch (Exception e)
	{
	    return def;</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="3BB2C747275BC799D81C708B2765F12B" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The catch block at DefaultLessonAction.java line 275 handles a broad swath of exceptions,  potentially trapping dissimilar issues or problems that should not be dealt with at this point in the program.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>DefaultLessonAction.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/DefaultLessonAction.java</FilePath>
<LineStart>275</LineStart>
<Snippet>			}
		}
		catch ( Exception e )
		{
			s.setMessage( "Error authorizing" );</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="70C1FE9843AD1B95EC5BA6B8293D37AE" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The catch block at StoredXss.java line 271 handles a broad swath of exceptions,  potentially trapping dissimilar issues or problems that should not be dealt with at this point in the program.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>StoredXss.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/StoredXss.java</FilePath>
<LineStart>271</LineStart>
<Snippet>	    }
	}
	catch (Exception e)
	{
	    s.setMessage("Error generating " + this.getClass().getName());</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="AA8DBACBFCC199ED626C489F3B49112B" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The catch block at DatabaseUtilities.java line 108 handles a broad swath of exceptions,  potentially trapping dissimilar issues or problems that should not be dealt with at this point in the program.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>DatabaseUtilities.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/DatabaseUtilities.java</FilePath>
<LineStart>108</LineStart>
<Snippet>	    }
	}
	catch (Exception e)
	{
	    e.printStackTrace();</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="D75CB48AB39051455878AB36BCC6F38B" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The catch block at ParameterParser.java line 120 handles a broad swath of exceptions,  potentially trapping dissimilar issues or problems that should not be dealt with at this point in the program.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>120</LineStart>
<Snippet>	    return getBooleanParameter(name);
	}
	catch (Exception e)
	{
	    return def;</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="8CE8D0654EA83CB302F32B1691465589" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The catch block at ListStaff.java line 166 handles a broad swath of exceptions,  potentially trapping dissimilar issues or problems that should not be dealt with at this point in the program.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ListStaff.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/ListStaff.java</FilePath>
<LineStart>166</LineStart>
<Snippet>	    }
	}
	catch (Exception e)
	{
	    s.setMessage("Error getting employees");</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="26B381B2F394F03B51B6003B7A7A46B1" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The catch block at SqlStringInjection.java line 219 handles a broad swath of exceptions,  potentially trapping dissimilar issues or problems that should not be dealt with at this point in the program.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>SqlStringInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SqlStringInjection.java</FilePath>
<LineStart>219</LineStart>
<Snippet>	    }
	}
	catch (Exception e)
	{
	    s.setMessage("Error generating " + this.getClass().getName());</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="6D3B3E1175A5ECA94F8F860C7A2A7D0A" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The catch block at Login.java line 255 handles a broad swath of exceptions,  potentially trapping dissimilar issues or problems that should not be dealt with at this point in the program.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Login.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/Login.java</FilePath>
<LineStart>255</LineStart>
<Snippet>	    }
	}
	catch (Exception e)
	{
	    s.setMessage("Error getting employees");</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="552839BB1DB3EA7443664E7E62ADD640" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The catch block at Challenge2Screen.java line 726 handles a broad swath of exceptions,  potentially trapping dissimilar issues or problems that should not be dealt with at this point in the program.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Challenge2Screen.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/Challenge2Screen.java</FilePath>
<LineStart>726</LineStart>
<Snippet>	    osw.write(message);
	}
	catch (Exception e)
	{
	    System.out.println("Couldn't write " + message + " to " + s);</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="8A373C74A1CD9DD2FC0BC301264BFC6E" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The catch block at LessonTracker.java line 262 handles a broad swath of exceptions,  potentially trapping dissimilar issues or problems that should not be dealt with at this point in the program.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>LessonTracker.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/LessonTracker.java</FilePath>
<LineStart>262</LineStart>
<Snippet>		in.close();
	    }
	    catch (Exception e)
	    {}
	}</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="D04E1D780C872C137C59ECCF6156AD5F" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The catch block at ParameterParser.java line 223 handles a broad swath of exceptions,  potentially trapping dissimilar issues or problems that should not be dealt with at this point in the program.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>223</LineStart>
<Snippet>	    return getCharParameter(name);
	}
	catch (Exception e)
	{
	    return def;</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="FFBD16BA1B908F2CA2E4EDF4EA5166E0" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The catch block at SoapRequest.java line 327 handles a broad swath of exceptions,  potentially trapping dissimilar issues or problems that should not be dealt with at this point in the program.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>SoapRequest.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SoapRequest.java</FilePath>
<LineStart>327</LineStart>
<Snippet>	    // ec.addElement( new P().addElement( pnfe.getMessage() ) );
	}
	catch (Exception e)
	{
	    s.setMessage("Error generating " + this.getClass().getName());</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="A6464CC9E6215BB25259B213F6CFDDE0" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The catch block at ParameterParser.java line 521 handles a broad swath of exceptions,  potentially trapping dissimilar issues or problems that should not be dealt with at this point in the program.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>521</LineStart>
<Snippet>	    return getLongParameter(name);
	}
	catch (Exception e)
	{
	    return def;</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="B9277DEF6F44EC28CE4A7C369F0CD44D" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The catch block at ParameterParser.java line 610 handles a broad swath of exceptions,  potentially trapping dissimilar issues or problems that should not be dealt with at this point in the program.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>610</LineStart>
<Snippet>	    return getRawParameter(name);
	}
	catch (Exception e)
	{
	    return def;</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="D28301FD8631DD232DF5C74066577BE3" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The catch block at UpdateProfile.java line 348 handles a broad swath of exceptions,  potentially trapping dissimilar issues or problems that should not be dealt with at this point in the program.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>UpdateProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/UpdateProfile.java</FilePath>
<LineStart>348</LineStart>
<Snippet>	    }
	}
	catch (Exception e)
	{
	    s.setMessage("Error updating employee profile");</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="54948CA0DC168EAA53F9D99070E20866" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The catch block at UserTracker.java line 133 handles a broad swath of exceptions,  potentially trapping dissimilar issues or problems that should not be dealt with at this point in the program.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>UserTracker.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/UserTracker.java</FilePath>
<LineStart>133</LineStart>
<Snippet>		usersDB.close();
	    }
	    catch (Exception e)
	    {}
	    return allUsers;</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="604163308FAF703C9E1A6A5AEE5DEB5F" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The catch block at HtmlClues.java line 117 handles a broad swath of exceptions,  potentially trapping dissimilar issues or problems that should not be dealt with at this point in the program.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>HtmlClues.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/HtmlClues.java</FilePath>
<LineStart>117</LineStart>
<Snippet>	    }
	}
	catch (Exception e)
	{
	    s.setMessage("Error generating " + this.getClass().getName());</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="37084DEC65252402B97ADF6ED6030A72" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The catch block at SqlNumericInjection.java line 159 handles a broad swath of exceptions,  potentially trapping dissimilar issues or problems that should not be dealt with at this point in the program.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>SqlNumericInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SqlNumericInjection.java</FilePath>
<LineStart>159</LineStart>
<Snippet>	    }
	}
	catch (Exception e)
	{
	    s.setMessage("Error generating " + this.getClass().getName());</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="DBE15934EC88CA59FC8C923675999EBE" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The catch block at Encoding.java line 934 handles a broad swath of exceptions,  potentially trapping dissimilar issues or problems that should not be dealt with at this point in the program.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Encoding.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/Encoding.java</FilePath>
<LineStart>934</LineStart>
<Snippet>			return ( URLDecoder.decode( str, "UTF-8" ) );
		}
		catch ( Exception e )
		{
			return ( "Decoding error" );</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="8DEA089B4BF38501CA6FF3F367300C30" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The catch block at EditProfile.java line 128 handles a broad swath of exceptions,  potentially trapping dissimilar issues or problems that should not be dealt with at this point in the program.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/EditProfile.java</FilePath>
<LineStart>128</LineStart>
<Snippet>	    }
	}
	catch (Exception e)
	{
	    s.setMessage("Error getting employee profile");</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="AF7F2EF4AE486291468997DEAB8B7089" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The catch block at WeakAuthenticationCookie.java line 194 handles a broad swath of exceptions,  potentially trapping dissimilar issues or problems that should not be dealt with at this point in the program.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>WeakAuthenticationCookie.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/WeakAuthenticationCookie.java</FilePath>
<LineStart>194</LineStart>
<Snippet>	    }
	}
	catch (Exception e)
	{
	    s.setMessage("Error generating " + this.getClass().getName());</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="BDC56F48BC90D0C9DA8A30A996E807CA" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The catch block at SqlStringInjection.java line 149 handles a broad swath of exceptions,  potentially trapping dissimilar issues or problems that should not be dealt with at this point in the program.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>SqlStringInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SqlStringInjection.java</FilePath>
<LineStart>149</LineStart>
<Snippet>	    }
	}
	catch (Exception e)
	{
	    s.setMessage("Error generating " + this.getClass().getName());</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="5404F953C6AE612359A6D88E3907AB93" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The catch block at WeakSessionID.java line 135 handles a broad swath of exceptions,  potentially trapping dissimilar issues or problems that should not be dealt with at this point in the program.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>WeakSessionID.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/WeakSessionID.java</FilePath>
<LineStart>135</LineStart>
<Snippet>	    }
	}
	catch (Exception e)
	{
	    s.setMessage("Error generating " + this.getClass().getName());</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="8EA05C5039B429E1E9B8537FA7EE060F" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The catch block at Exec.java line 431 handles a broad swath of exceptions,  potentially trapping dissimilar issues or problems that should not be dealt with at this point in the program.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Exec.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/util/Exec.java</FilePath>
<LineStart>431</LineStart>
<Snippet>	    results.setInterrupted();
	}
	catch (Throwable t)
	{
	    results.setThrowable(t);</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="2B2093BCC5A531B757B132257F9136D5" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The catch block at CrossSiteScripting.java line 381 handles a broad swath of exceptions,  potentially trapping dissimilar issues or problems that should not be dealt with at this point in the program.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>CrossSiteScripting.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/CrossSiteScripting.java</FilePath>
<LineStart>381</LineStart>
<Snippet>		ue2.printStackTrace();
	    }
	    catch (Exception e)
	    {
		// All other errors send the user to the generic error page</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="B7E8E8A93D9F1684BE61D5ED89B5C4B6" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The catch block at HttpSplitting.java line 235 handles a broad swath of exceptions,  potentially trapping dissimilar issues or problems that should not be dealt with at this point in the program.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>HttpSplitting.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/HttpSplitting.java</FilePath>
<LineStart>235</LineStart>
<Snippet>	    }
	}
	catch (Exception ex)
	{
	    ec.addElement(new P().addElement(ex.getMessage()));</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="D0655A36F396B3342192A45C3E486005" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The catch block at UpdateProfile.java line 319 handles a broad swath of exceptions,  potentially trapping dissimilar issues or problems that should not be dealt with at this point in the program.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>UpdateProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/UpdateProfile.java</FilePath>
<LineStart>319</LineStart>
<Snippet>	    }
	}
	catch (Exception e)
	{
	    e.printStackTrace();</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="439EC3A59CF99A26C4EB33C316AD6216" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The catch block at DeleteProfile.java line 123 handles a broad swath of exceptions,  potentially trapping dissimilar issues or problems that should not be dealt with at this point in the program.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>DeleteProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/DeleteProfile.java</FilePath>
<LineStart>123</LineStart>
<Snippet>	    }
	}
	catch (Exception e)
	{
	    s.setMessage("Error deleting employee profile");</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="5F5F0A755A3B03410C7BDF0188445C5C" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The catch block at CSRF.java line 100 handles a broad swath of exceptions,  potentially trapping dissimilar issues or problems that should not be dealt with at this point in the program.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>CSRF.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CSRF.java</FilePath>
<LineStart>100</LineStart>
<Snippet>			statement.executeQuery();
		}
		catch ( Exception e )
		{
			// ignore the empty resultset on the insert.  There are a few more SQL Injection errors</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="B7FA41764770FFADC9E67F82AD278F72" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The catch block at SummaryReportCardScreen.java line 99 handles a broad swath of exceptions,  potentially trapping dissimilar issues or problems that should not be dealt with at this point in the program.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>SummaryReportCardScreen.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/admin/SummaryReportCardScreen.java</FilePath>
<LineStart>99</LineStart>
<Snippet>	    }
	}
	catch (Exception e)
	{
	    e.printStackTrace();</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="3B1885933FB78BB851CA35EB1CB53797" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The catch block at ViewProfile.java line 143 handles a broad swath of exceptions,  potentially trapping dissimilar issues or problems that should not be dealt with at this point in the program.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/ViewProfile.java</FilePath>
<LineStart>143</LineStart>
<Snippet>	    }
	}
	catch (Exception e)
	{
	    s.setMessage("Error getting employee profile");</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="48B5E6339D876122EB95781108CA9FEA" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The catch block at ParameterParser.java line 859 handles a broad swath of exceptions,  potentially trapping dissimilar issues or problems that should not be dealt with at this point in the program.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>859</LineStart>
<Snippet>	    return getWordParameter(name);
	}
	catch (Exception e)
	{
	    return def;</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="DDC85F586AE1E733BD704941FA16BB75" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The catch block at BasicAuthentication.java line 157 handles a broad swath of exceptions,  potentially trapping dissimilar issues or problems that should not be dealt with at this point in the program.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>BasicAuthentication.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/BasicAuthentication.java</FilePath>
<LineStart>157</LineStart>
<Snippet>
	}
	catch (Exception e)
	{
	    s.setMessage("Error generating " + this.getClass().getName());</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="C220995374D2578FC2393DAD1C1EE57F" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The catch block at AbstractLesson.java line 476 handles a broad swath of exceptions,  potentially trapping dissimilar issues or problems that should not be dealt with at this point in the program.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>AbstractLesson.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/AbstractLesson.java</FilePath>
<LineStart>476</LineStart>
<Snippet>	    reader.close();
	}
	catch (Exception e)
	{
	    System.out.println(e);</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="741671ABDDF1E8940DDCC3B77DCA33B2" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The catch block at ParameterParser.java line 672 handles a broad swath of exceptions,  potentially trapping dissimilar issues or problems that should not be dealt with at this point in the program.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>672</LineStart>
<Snippet>	    return getShortParameter(name);
	}
	catch (Exception e)
	{
	    return def;</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="D8F6A57AFFB224274D67BEAAC783FD9B" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The catch block at CSRF.java line 199 handles a broad swath of exceptions,  potentially trapping dissimilar issues or problems that should not be dealt with at this point in the program.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>CSRF.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CSRF.java</FilePath>
<LineStart>199</LineStart>
<Snippet>			}
		}
		catch ( Exception e )
		{
			s.setMessage( "Error while getting message list." );</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="8805E92BF7121E17D91424C15D5A8D85" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The catch block at ParameterParser.java line 179 handles a broad swath of exceptions,  potentially trapping dissimilar issues or problems that should not be dealt with at this point in the program.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>179</LineStart>
<Snippet>	    return getByteParameter(name);
	}
	catch (Exception e)
	{
	    return def;</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="DBEF342ED812D30C8CDD2669367A9ED5" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The catch block at ParameterParser.java line 141 handles a broad swath of exceptions,  potentially trapping dissimilar issues or problems that should not be dealt with at this point in the program.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>141</LineStart>
<Snippet>	    return new Boolean(getSubParameter(first, next)).booleanValue();
	}
	catch (Exception e)
	{
	    return def;</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="49575C1A7D4A21EF30A1E31931AA89C5" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The catch block at SilentTransactions.java line 115 handles a broad swath of exceptions,  potentially trapping dissimilar issues or problems that should not be dealt with at this point in the program.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>SilentTransactions.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SilentTransactions.java</FilePath>
<LineStart>115</LineStart>
<Snippet>	    }
	}
	catch (Exception ex)
	{
	    ex.printStackTrace();</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="26D61725E0288E369BF8C06FCA484A17" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The catch block at UpdateProfile.java line 234 handles a broad swath of exceptions,  potentially trapping dissimilar issues or problems that should not be dealt with at this point in the program.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>UpdateProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/UpdateProfile.java</FilePath>
<LineStart>234</LineStart>
<Snippet>
	}
	catch (Exception e)
	{
	    s.setMessage("Error updating employee profile");</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="8DA2775F6B2F084EB3A0A72744F3C92A" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The catch block at EditProfile.java line 189 handles a broad swath of exceptions,  potentially trapping dissimilar issues or problems that should not be dealt with at this point in the program.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/EditProfile.java</FilePath>
<LineStart>189</LineStart>
<Snippet>	    }
	}
	catch (Exception e)
	{
	    s.setMessage("Error getting employee profile");</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="AE93665D20F756B705E08F3B47EAF2FD" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The catch block at RoleBasedAccessControl.java line 360 handles a broad swath of exceptions,  potentially trapping dissimilar issues or problems that should not be dealt with at this point in the program.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>RoleBasedAccessControl.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/RoleBasedAccessControl.java</FilePath>
<LineStart>360</LineStart>
<Snippet>	    ue2.printStackTrace();
	}
	catch (Exception e)
	{
	    // All other errors send the user to the generic error page</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="7791650C0DB986C1B869C3692ACDFE1A" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The catch block at HiddenFieldTampering.java line 162 handles a broad swath of exceptions,  potentially trapping dissimilar issues or problems that should not be dealt with at this point in the program.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>HiddenFieldTampering.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/HiddenFieldTampering.java</FilePath>
<LineStart>162</LineStart>
<Snippet>	    }
	}
	catch (Exception e)
	{
	    s.setMessage("Error generating " + this.getClass().getName());</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="4EDE1EDA647B18100E0B1C09A4204894" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The catch block at UserTracker.java line 161 handles a broad swath of exceptions,  potentially trapping dissimilar issues or problems that should not be dealt with at this point in the program.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>UserTracker.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/UserTracker.java</FilePath>
<LineStart>161</LineStart>
<Snippet>
	    }
	    catch (Exception e)
	    {}
	}</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="3F64B43C4AC4C83E664764AFDEE9CFDE" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The catch block at ThreadSafetyProblem.java line 214 handles a broad swath of exceptions,  potentially trapping dissimilar issues or problems that should not be dealt with at this point in the program.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ThreadSafetyProblem.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/ThreadSafetyProblem.java</FilePath>
<LineStart>214</LineStart>
<Snippet>	    }
	}
	catch (Exception e)
	{
	    System.out.println("Exception caught: " + e);</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="609F381F774B667AAE72B969E0806A02" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The catch block at ViewProfile.java line 149 handles a broad swath of exceptions,  potentially trapping dissimilar issues or problems that should not be dealt with at this point in the program.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/ViewProfile.java</FilePath>
<LineStart>149</LineStart>
<Snippet>	    }
	}
	catch (Exception e)
	{
	    s.setMessage("Error getting employee profile");</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="9C573AD37AC4F2A01014A23E4ADBC2EB" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The catch block at ThreadSafetyProblem.java line 125 handles a broad swath of exceptions,  potentially trapping dissimilar issues or problems that should not be dealt with at this point in the program.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ThreadSafetyProblem.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/ThreadSafetyProblem.java</FilePath>
<LineStart>125</LineStart>
<Snippet>
	}
	catch (Exception e)
	{
	    s.setMessage("Error generating " + this.getClass().getName());</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="D63131F31FE82F69D54AC3ABC8AE0EC5" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The catch block at WsSqlInjection.java line 216 handles a broad swath of exceptions,  potentially trapping dissimilar issues or problems that should not be dealt with at this point in the program.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>WsSqlInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/WsSqlInjection.java</FilePath>
<LineStart>216</LineStart>
<Snippet>	    getLessonTracker(s).setCompleted(completed);
	}
	catch (Exception e)
	{
	    s.setMessage("Error generating " + this.getClass().getName());</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="375E6CCD89473DA94BDC098CF3A3603C" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The catch block at LessonTracker.java line 251 handles a broad swath of exceptions,  potentially trapping dissimilar issues or problems that should not be dealt with at this point in the program.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>LessonTracker.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/LessonTracker.java</FilePath>
<LineStart>251</LineStart>
<Snippet>	    // Normal if the lesson has not been accessed yet.
	}
	catch (Exception e)
	{
	    System.out.println("Failed to load lesson state for " + screen);</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="BD9736D56D79C0070F7BB4F2BFCD9BD0" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The catch block at Encoding.java line 955 handles a broad swath of exceptions,  potentially trapping dissimilar issues or problems that should not be dealt with at this point in the program.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Encoding.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/Encoding.java</FilePath>
<LineStart>955</LineStart>
<Snippet>			return ( URLEncoder.encode( str, "UTF-8" ) );
		}
		catch ( Exception e )
		{
			return ( "Encoding error" );</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="0D21FE1F66EB9E91642AD25EEC02E023" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The catch block at ListStaff.java line 118 handles a broad swath of exceptions,  potentially trapping dissimilar issues or problems that should not be dealt with at this point in the program.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ListStaff.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/ListStaff.java</FilePath>
<LineStart>118</LineStart>
<Snippet>	    }
	}
	catch (Exception e)
	{
	    s.setMessage("Error getting employees");</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="A0CE41B228462993FF0DFB6269F8E2B8" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The catch block at UserAdminScreen.java line 85 handles a broad swath of exceptions,  potentially trapping dissimilar issues or problems that should not be dealt with at this point in the program.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>UserAdminScreen.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/admin/UserAdminScreen.java</FilePath>
<LineStart>85</LineStart>
<Snippet>	    }
	}
	catch (Exception e)
	{
	    s.setMessage("Error generating " + this.getClass().getName());</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="92B84FA0707795055FAD3546532D0C73" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The catch block at DOMInjection.java line 89 handles a broad swath of exceptions,  potentially trapping dissimilar issues or problems that should not be dealt with at this point in the program.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>DOMInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/DOMInjection.java</FilePath>
<LineStart>89</LineStart>
<Snippet>	    }
	}
	catch (Exception e)
	{
	    s.setMessage("Error generating " + this.getClass().getName());</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="3B78149D3EED3A2287336A674636C22F" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The catch block at LessonAdapter.java line 307 handles a broad swath of exceptions,  potentially trapping dissimilar issues or problems that should not be dealt with at this point in the program.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>LessonAdapter.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/LessonAdapter.java</FilePath>
<LineStart>307</LineStart>
<Snippet>	    }
	}
	catch (Exception e)
	{}
</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="041BF6103B1126BD1BBA51F5F686610D" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The catch block at ParameterParser.java line 356 handles a broad swath of exceptions,  potentially trapping dissimilar issues or problems that should not be dealt with at this point in the program.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>356</LineStart>
<Snippet>	    return getIPParameter(name);
	}
	catch (Exception e)
	{
	    return def;</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="77B5A27C842546B3787E9F84A3572696" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The catch block at WSDLScanning.java line 232 handles a broad swath of exceptions,  potentially trapping dissimilar issues or problems that should not be dealt with at this point in the program.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>WSDLScanning.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/WSDLScanning.java</FilePath>
<LineStart>232</LineStart>
<Snippet>	    ec.addElement(new P().addElement(t));
	}
	catch (Exception e)
	{
</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="66A9073F511859CAEC9FCB973C05A526" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The catch block at ErrorScreen.java line 107 handles a broad swath of exceptions,  potentially trapping dissimilar issues or problems that should not be dealt with at this point in the program.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ErrorScreen.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ErrorScreen.java</FilePath>
<LineStart>107</LineStart>
<Snippet>				s.setCurrentScreen( s.getCourse().getFirstLesson().getScreenId() );
			}
			catch ( Throwable t )
			{
				s.setCurrentScreen( WebSession.WELCOME );</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="DD7385386D83E879B6909F5046F2076E" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The catch block at FindProfile.java line 184 handles a broad swath of exceptions,  potentially trapping dissimilar issues or problems that should not be dealt with at this point in the program.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>FindProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/FindProfile.java</FilePath>
<LineStart>184</LineStart>
<Snippet>	    }
	}
	catch (Exception e)
	{
	    s.setMessage("Error finding employee profile");</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="E2B0465C1B6BCFCD5AFCD1EFDC997BDE" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The catch block at Encoding.java line 913 handles a broad swath of exceptions,  potentially trapping dissimilar issues or problems that should not be dealt with at this point in the program.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Encoding.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/Encoding.java</FilePath>
<LineStart>913</LineStart>
<Snippet>			return ( new String( bbuf.array() ) );
		}
		catch ( Exception e )
		{
			return ( "Encoding problem" );</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="9267A3AAD0C3DD40BA2262300F97C92E" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The catch block at Challenge2Screen.java line 439 handles a broad swath of exceptions,  potentially trapping dissimilar issues or problems that should not be dealt with at this point in the program.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Challenge2Screen.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/Challenge2Screen.java</FilePath>
<LineStart>439</LineStart>
<Snippet>	    //			System.out.println("webgoat_guest replaced: " + getFileText( new BufferedReader( new FileReader( defacedpath ) ), false ) );
	}
	catch (Exception e)
	{
	    e.printStackTrace();</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="DB8F3E91532A6F71FF70D8A8874CC1A9" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The catch block at UncheckedEmail.java line 193 handles a broad swath of exceptions,  potentially trapping dissimilar issues or problems that should not be dealt with at this point in the program.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>UncheckedEmail.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/UncheckedEmail.java</FilePath>
<LineStart>193</LineStart>
<Snippet>	    }
	}
	catch (Exception e)
	{
	    s.setMessage("Error generating " + this.getClass().getName());</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="756943D3566AC87A7A38437C5D1EDABC" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The catch block at LessonAdapter.java line 133 handles a broad swath of exceptions,  potentially trapping dissimilar issues or problems that should not be dealt with at this point in the program.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>LessonAdapter.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/LessonAdapter.java</FilePath>
<LineStart>133</LineStart>
<Snippet>	    }
	}
	catch (Exception e)
	{
	    s.setMessage("Error generating " + this.getClass().getName());</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="6BD031214A37D53AFC41BA00EC52B150" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The catch block at JSONInjection.java line 96 handles a broad swath of exceptions,  potentially trapping dissimilar issues or problems that should not be dealt with at this point in the program.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>JSONInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/JSONInjection.java</FilePath>
<LineStart>96</LineStart>
<Snippet>	    }
	}
	catch (Exception ex)
	{
	    ex.printStackTrace();</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="C1FDE144BC2EC7DD9DBC1E4FA555675B" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The catch block at ParameterParser.java line 731 handles a broad swath of exceptions,  potentially trapping dissimilar issues or problems that should not be dealt with at this point in the program.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>731</LineStart>
<Snippet>	    return getStringParameter(name);
	}
	catch (Exception e)
	{
	    return def;</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="36D55642027CE31090EBA5A3D3DB39F8" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The catch block at AbstractLesson.java line 810 handles a broad swath of exceptions,  potentially trapping dissimilar issues or problems that should not be dealt with at this point in the program.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>AbstractLesson.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/AbstractLesson.java</FilePath>
<LineStart>810</LineStart>
<Snippet>	    }
	}
	catch (Exception e)
	{
	    s.setMessage("Error authorizing");</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="1DCEFC1AF9A28D90A07A21857D423261" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The catch block at AbstractLesson.java line 1042 handles a broad swath of exceptions,  potentially trapping dissimilar issues or problems that should not be dealt with at this point in the program.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>AbstractLesson.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/AbstractLesson.java</FilePath>
<LineStart>1042</LineStart>
<Snippet>	    reader.close();
	}
	catch (Exception e)
	{
	    System.out.println(e);</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="855540D968F27335E501D94DDAC62262" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The catch block at Course.java line 377 handles a broad swath of exceptions,  potentially trapping dissimilar issues or problems that should not be dealt with at this point in the program.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Course.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/Course.java</FilePath>
<LineStart>377</LineStart>
<Snippet>    				}
    			}
    			catch (Exception e)
    			{
    				//System.out.println("Warning: " + e.getMessage());</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="381CD8B4B67C189ED7DD84BFA273CAC0" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The catch block at LessonSource.java line 91 handles a broad swath of exceptions,  potentially trapping dissimilar issues or problems that should not be dealt with at this point in the program.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>LessonSource.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/LessonSource.java</FilePath>
<LineStart>91</LineStart>
<Snippet>	    lesson.getLessonTracker(session).setViewedSource(true);
	}
	catch (Throwable t)
	{
	    t.printStackTrace();</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="AD3057D621A23E010FD6FA93E38C2A55" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The catch block at SQLInjection.java line 363 handles a broad swath of exceptions,  potentially trapping dissimilar issues or problems that should not be dealt with at this point in the program.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>SQLInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/SQLInjection.java</FilePath>
<LineStart>363</LineStart>
<Snippet>		ue2.printStackTrace();
	    }
	    catch (Exception e)
	    {
		// All other errors send the user to the generic error page</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="83052081E1308414B49D6751B206011B" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The catch block at ViewProfile.java line 163 handles a broad swath of exceptions,  potentially trapping dissimilar issues or problems that should not be dealt with at this point in the program.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/ViewProfile.java</FilePath>
<LineStart>163</LineStart>
<Snippet>	    }
	}
	catch (Exception e)
	{
	    s.setMessage("Error getting employee profile");</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="264124A061697D27C6C39371CD3E4442" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The catch block at ViewProfile.java line 223 handles a broad swath of exceptions,  potentially trapping dissimilar issues or problems that should not be dealt with at this point in the program.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/ViewProfile.java</FilePath>
<LineStart>223</LineStart>
<Snippet>	    }
	}
	catch (Exception e)
	{
	    s.setMessage("Error getting employee profile");</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="0D9DAF652DC731796588707B181336F3" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The catch block at ListStaff.java line 166 handles a broad swath of exceptions,  potentially trapping dissimilar issues or problems that should not be dealt with at this point in the program.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ListStaff.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/ListStaff.java</FilePath>
<LineStart>166</LineStart>
<Snippet>	    }
	}
	catch (Exception e)
	{
	    s.setMessage("Error getting employees");</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="4FE0BE01618542AC048D5D2F29660F0E" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The catch block at PathBasedAccessControl.java line 214 handles a broad swath of exceptions,  potentially trapping dissimilar issues or problems that should not be dealt with at this point in the program.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>PathBasedAccessControl.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/PathBasedAccessControl.java</FilePath>
<LineStart>214</LineStart>
<Snippet>	    }
	}
	catch (Exception e)
	{
	    s.setMessage("Error generating " + this.getClass().getName());</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="1B4C8724B554916262DCBE717AAB9314" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The catch block at CommandInjection.java line 208 handles a broad swath of exceptions,  potentially trapping dissimilar issues or problems that should not be dealt with at this point in the program.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>CommandInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CommandInjection.java</FilePath>
<LineStart>208</LineStart>
<Snippet>	    }
	}
	catch (Exception e)
	{
	    s.setMessage("Error generating " + this.getClass().getName());</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="CF594E0CF79B7C3FA87FBD348CC03AA7" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The catch block at EditProfile.java line 128 handles a broad swath of exceptions,  potentially trapping dissimilar issues or problems that should not be dealt with at this point in the program.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/EditProfile.java</FilePath>
<LineStart>128</LineStart>
<Snippet>	    }
	}
	catch (Exception e)
	{
	    s.setMessage("Error getting employee profile");</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="C7D1EB1ADCB567D23DD9F023A71DB3F2" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The catch block at WSDLScanning.java line 293 handles a broad swath of exceptions,  potentially trapping dissimilar issues or problems that should not be dealt with at this point in the program.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>WSDLScanning.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/WSDLScanning.java</FilePath>
<LineStart>293</LineStart>
<Snippet>	    {}
	}
	catch (Exception e)
	{}
	return null;</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="4D8304A765717F80C3133D7426A70265" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The catch block at SoapRequest.java line 270 handles a broad swath of exceptions,  potentially trapping dissimilar issues or problems that should not be dealt with at this point in the program.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>SoapRequest.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SoapRequest.java</FilePath>
<LineStart>270</LineStart>
<Snippet>	    // ec.addElement( new P().addElement( pnfe.getMessage() ) );
	}
	catch (Exception e)
	{
	    s.setMessage("Error generating " + this.getClass().getName());</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="0A79E6C3C0B77328E59F107BE70A0092" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The catch block at ParameterParser.java line 484 handles a broad swath of exceptions,  potentially trapping dissimilar issues or problems that should not be dealt with at this point in the program.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>484</LineStart>
<Snippet>	    return getIntParameter(name);
	}
	catch (Exception e)
	{
	    return def;</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="74E7221786D423C031CA5781E1A2054F" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The catch block at AccessControlMatrix.java line 111 handles a broad swath of exceptions,  potentially trapping dissimilar issues or problems that should not be dealt with at this point in the program.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>AccessControlMatrix.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/AccessControlMatrix.java</FilePath>
<LineStart>111</LineStart>
<Snippet>		    }
		}
		catch (Exception e)
		{
		    s.setMessage("Error generating " + this.getClass().getName());</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="41CB11DF63FB7E10B9F227139376BEF3" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The catch block at EditProfile.java line 186 handles a broad swath of exceptions,  potentially trapping dissimilar issues or problems that should not be dealt with at this point in the program.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/EditProfile.java</FilePath>
<LineStart>186</LineStart>
<Snippet>	    }
	}
	catch (Exception e)
	{
	    s.setMessage("Error getting employee profile");</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="FBCA15B99115484B4757D2BCF1269357" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The catch block at ProductsAdminScreen.java line 85 handles a broad swath of exceptions,  potentially trapping dissimilar issues or problems that should not be dealt with at this point in the program.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ProductsAdminScreen.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/admin/ProductsAdminScreen.java</FilePath>
<LineStart>85</LineStart>
<Snippet>	    }
	}
	catch (Exception e)
	{
	    s.setMessage("Error generating " + this.getClass().getName());</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="14023FB6FB4AF35406CC15BAF8A5F709" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The catch block at XMLInjection.java line 126 handles a broad swath of exceptions,  potentially trapping dissimilar issues or problems that should not be dealt with at this point in the program.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>XMLInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/XMLInjection.java</FilePath>
<LineStart>126</LineStart>
<Snippet>	    }
	}
	catch (Exception ex)
	{
	    ex.printStackTrace();</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="78749C5C7A8D189B06CAD56469067B08" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The catch block at Encoding.java line 506 handles a broad swath of exceptions,  potentially trapping dissimilar issues or problems that should not be dealt with at this point in the program.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Encoding.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/Encoding.java</FilePath>
<LineStart>506</LineStart>
<Snippet>		}

		catch ( Exception e )
		{
</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="AA3B788BFEB9F1DD68513034709CBE02" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The catch block at Encoding.java line 454 handles a broad swath of exceptions,  potentially trapping dissimilar issues or problems that should not be dealt with at this point in the program.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Encoding.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/Encoding.java</FilePath>
<LineStart>454</LineStart>
<Snippet>		}

		catch ( Exception e )
		{
</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="F48D5DEEC1573C683F07A9D2D75FA9B3" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The catch block at DefaultLessonAction.java line 323 handles a broad swath of exceptions,  potentially trapping dissimilar issues or problems that should not be dealt with at this point in the program.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>DefaultLessonAction.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/DefaultLessonAction.java</FilePath>
<LineStart>323</LineStart>
<Snippet>			}
		}
		catch ( Exception e )
		{
			s.setMessage( "Error authorizing" );</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="C2500FB1E8426400AEEF72456022E47E" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The catch block at Encoding.java line 888 handles a broad swath of exceptions,  potentially trapping dissimilar issues or problems that should not be dealt with at this point in the program.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Encoding.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/Encoding.java</FilePath>
<LineStart>888</LineStart>
<Snippet>			return ( cbuf.toString() );
		}
		catch ( Exception e )
		{
			return ( "Encoding problem" );</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="D81216C32FEB194871179B1432869592" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The catch block at StoredXss.java line 110 handles a broad swath of exceptions,  potentially trapping dissimilar issues or problems that should not be dealt with at this point in the program.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>StoredXss.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/StoredXss.java</FilePath>
<LineStart>110</LineStart>
<Snippet>	    statement.executeQuery();
	}
	catch (Exception e)
	{
	    // ignore the empty resultset on the insert.  There are a few more SQL Injection errors</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="161A3C0DD6C36778637931D9C7360ECF" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The catch block at FindProfile.java line 216 handles a broad swath of exceptions,  potentially trapping dissimilar issues or problems that should not be dealt with at this point in the program.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>FindProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/FindProfile.java</FilePath>
<LineStart>216</LineStart>
<Snippet>	    }
	}
	catch (Exception e)
	{
	    s.setMessage("Error finding employee profile");</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="381CD8B4B67C189ED7DD84BFA273CAC1" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The catch block at LessonSource.java line 102 handles a broad swath of exceptions,  potentially trapping dissimilar issues or problems that should not be dealt with at this point in the program.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>LessonSource.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/LessonSource.java</FilePath>
<LineStart>102</LineStart>
<Snippet>		this.writeSource(source, response);
	    }
	    catch (Throwable thr)
	    {
		thr.printStackTrace();</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="E584A4835A67DAD177EC7069A30FADDD" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The catch block at ReportCardScreen.java line 87 handles a broad swath of exceptions,  potentially trapping dissimilar issues or problems that should not be dealt with at this point in the program.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ReportCardScreen.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/admin/ReportCardScreen.java</FilePath>
<LineStart>87</LineStart>
<Snippet>	    }
	}
	catch (Exception e)
	{}
</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="42A6BC814DCB1C75C4714EC0B947BBBD" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The catch block at ParameterParser.java line 261 handles a broad swath of exceptions,  potentially trapping dissimilar issues or problems that should not be dealt with at this point in the program.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>261</LineStart>
<Snippet>	    return getClassNameParameter(name);
	}
	catch (Exception e)
	{
	    return def;</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="49C20BD305A9B295DFA2813C4585C7E4" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The catch block at WSDLScanning.java line 161 handles a broad swath of exceptions,  potentially trapping dissimilar issues or problems that should not be dealt with at this point in the program.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>WSDLScanning.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/WSDLScanning.java</FilePath>
<LineStart>161</LineStart>
<Snippet>	    e.printStackTrace();
	}
	catch (Exception e)
	{
	    e.printStackTrace();</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="6410A73F40624B0A23EAE7A10ADA7B74" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The catch block at DefaultLessonAction.java line 213 handles a broad swath of exceptions,  potentially trapping dissimilar issues or problems that should not be dealt with at this point in the program.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>DefaultLessonAction.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/DefaultLessonAction.java</FilePath>
<LineStart>213</LineStart>
<Snippet>			}
		}
		catch ( Exception e )
		{
			s.setMessage( "Error getting user name" );</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="1BED702DBBEF5F1704FE7FED8DA8E40B" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The catch block at JavaScriptValidation.java line 256 handles a broad swath of exceptions,  potentially trapping dissimilar issues or problems that should not be dealt with at this point in the program.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>JavaScriptValidation.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/JavaScriptValidation.java</FilePath>
<LineStart>256</LineStart>
<Snippet>	}

	catch (Exception e)
	{
	    s.setMessage("Error generating " + this.getClass().getName());</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="0901502DA54CC1A1B18743C69378FA2F" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The catch block at RoleBasedAccessControl.java line 454 handles a broad swath of exceptions,  potentially trapping dissimilar issues or problems that should not be dealt with at this point in the program.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>RoleBasedAccessControl.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/RoleBasedAccessControl.java</FilePath>
<LineStart>454</LineStart>
<Snippet>		ue2.printStackTrace();
	    }
	    catch (Exception e)
	    {
		// All other errors send the user to the generic error page</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="D745B6780F7B2F483FE1E27D9C594BB3" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The catch block at SoapRequest.java line 431 handles a broad swath of exceptions,  potentially trapping dissimilar issues or problems that should not be dealt with at this point in the program.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>SoapRequest.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SoapRequest.java</FilePath>
<LineStart>431</LineStart>
<Snippet>	    {}
	}
	catch (Exception e)
	{}
	return null;</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="EB92F67E399A4E5FCA06368DD06A311D" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The catch block at DOS_Login.java line 175 handles a broad swath of exceptions,  potentially trapping dissimilar issues or problems that should not be dealt with at this point in the program.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>DOS_Login.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/DOS_Login.java</FilePath>
<LineStart>175</LineStart>
<Snippet>	    }
	}
	catch (Exception e)
	{
	    s.setMessage("Error generating " + this.getClass().getName());</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="2FC1ADCBCA06CE9C9D8DE3827ACBC8FA" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The catch block at UpdateProfile.java line 257 handles a broad swath of exceptions,  potentially trapping dissimilar issues or problems that should not be dealt with at this point in the program.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>UpdateProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/UpdateProfile.java</FilePath>
<LineStart>257</LineStart>
<Snippet>
	}
	catch (Exception e)
	{
	    s.setMessage("Error updating employee profile");</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="A64E1F8926C64A637FEFD0DF8A62EE5E" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The catch block at Login.java line 208 handles a broad swath of exceptions,  potentially trapping dissimilar issues or problems that should not be dealt with at this point in the program.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Login.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/Login.java</FilePath>
<LineStart>208</LineStart>
<Snippet>	    }
	}
	catch (Exception e)
	{
	    s.setMessage("Error logging in");</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="810BD4DB55A85AAE019AD93AC0997ACF" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The catch block at Login.java line 213 handles a broad swath of exceptions,  potentially trapping dissimilar issues or problems that should not be dealt with at this point in the program.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Login.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/Login.java</FilePath>
<LineStart>213</LineStart>
<Snippet>	    }
	}
	catch (Exception e)
	{
	    s.setMessage("Error getting employees");</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="AEF2EDAAAE6853C8D769C509280F174E" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The catch block at UpdateProfile.java line 390 handles a broad swath of exceptions,  potentially trapping dissimilar issues or problems that should not be dealt with at this point in the program.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>UpdateProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/UpdateProfile.java</FilePath>
<LineStart>390</LineStart>
<Snippet>	    }
	}
	catch (Exception e)
	{
	    s.setMessage("Error updating employee profile");</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="E3575E637EB98390E2E8457FC840D23C" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The catch block at WebSession.java line 445 handles a broad swath of exceptions,  potentially trapping dissimilar issues or problems that should not be dealt with at this point in the program.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>WebSession.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/WebSession.java</FilePath>
<LineStart>445</LineStart>
<Snippet>			return realConnectionString;
		}
		catch ( Exception e )
		{
			System.out.println( "Couldn't open database: check web.xml database parameters" );</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="ECB1D7A86EAC9FB582841881E6E71F93" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The catch block at Encoding.java line 1010 handles a broad swath of exceptions,  potentially trapping dissimilar issues or problems that should not be dealt with at this point in the program.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Encoding.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/Encoding.java</FilePath>
<LineStart>1010</LineStart>
<Snippet>			return new String( xor( decoded, userKey ) );
		}
		catch ( Exception e )
		{
			return "String not XOR encoded.";</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="D75BA4D3DDE9F72907374515D94B516E" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The catch block at WsSAXInjection.java line 163 handles a broad swath of exceptions,  potentially trapping dissimilar issues or problems that should not be dealt with at this point in the program.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>WsSAXInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/WsSAXInjection.java</FilePath>
<LineStart>163</LineStart>
<Snippet>	    }
	}
	catch (Exception e)
	{
	    s.setMessage("Error generating " + this.getClass().getName());</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="CB094AD5FC328713B7A53060674B2FD6" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The catch block at WsSqlInjection.java line 246 handles a broad swath of exceptions,  potentially trapping dissimilar issues or problems that should not be dealt with at this point in the program.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>WsSqlInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/WsSqlInjection.java</FilePath>
<LineStart>246</LineStart>
<Snippet>	    {}
	}
	catch (Exception e)
	{}
	return null;</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="6247BD61D21610E73C95D7091B51A31D" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The catch block at AbstractLesson.java line 420 handles a broad swath of exceptions,  potentially trapping dissimilar issues or problems that should not be dealt with at this point in the program.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>AbstractLesson.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/AbstractLesson.java</FilePath>
<LineStart>420</LineStart>
<Snippet>	    reader.close();
	}
	catch (Exception e)
	{
	    System.out.println(e);</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="40AB32E93D2D1ECAD676906248995A01" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The catch block at ParameterParser.java line 335 handles a broad swath of exceptions,  potentially trapping dissimilar issues or problems that should not be dealt with at this point in the program.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>335</LineStart>
<Snippet>	    return getFloatParameter(name);
	}
	catch (Exception e)
	{
	    return def;</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="3C0086D3A147C59ABE802666EFCD2A3A" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The catch block at Exec.java line 242 handles a broad swath of exceptions,  potentially trapping dissimilar issues or problems that should not be dealt with at this point in the program.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Exec.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/util/Exec.java</FilePath>
<LineStart>242</LineStart>
<Snippet>	    results.setInterrupted();
	}
	catch (Throwable t)
	{
	    results.setThrowable(t);</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="7F33A8AB8CDA5FD020433380AC3DB7D3" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The catch block at AbstractLesson.java line 903 handles a broad swath of exceptions,  potentially trapping dissimilar issues or problems that should not be dealt with at this point in the program.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>AbstractLesson.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/AbstractLesson.java</FilePath>
<LineStart>903</LineStart>
<Snippet>		    false));
	}
	catch (Exception e)
	{
	    s.setMessage("Couldn't read HTTP request");</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="E840309A0C2C9BAB18F93D662D01E1F6" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The catch block at Login.java line 165 handles a broad swath of exceptions,  potentially trapping dissimilar issues or problems that should not be dealt with at this point in the program.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Login.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/Login.java</FilePath>
<LineStart>165</LineStart>
<Snippet>	    }
	}
	catch (Exception e)
	{
	    s.setMessage("Error logging in");</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="CF048E88905EF9415D39C94C16B59D71" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The catch block at RefreshDBScreen.java line 165 handles a broad swath of exceptions,  potentially trapping dissimilar issues or problems that should not be dealt with at this point in the program.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>RefreshDBScreen.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/admin/RefreshDBScreen.java</FilePath>
<LineStart>165</LineStart>
<Snippet>	    System.out.println("Successfully refreshed the database.");
	}
	catch (Exception e)
	{
	    s.setMessage("Error refreshing database "</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="A779E940407F8077AE84E33545306346" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The catch block at AbstractLesson.java line 571 handles a broad swath of exceptions,  potentially trapping dissimilar issues or problems that should not be dealt with at this point in the program.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>AbstractLesson.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/AbstractLesson.java</FilePath>
<LineStart>571</LineStart>
<Snippet>
	}
	catch (Exception e)
	{
	    // s.setMessage( "Could not find lesson plan for " +</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="BAB7A4F16185BF786F8CED54933248B4" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The catch block at RefreshDBScreen.java line 96 handles a broad swath of exceptions,  potentially trapping dissimilar issues or problems that should not be dealt with at this point in the program.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>RefreshDBScreen.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/admin/RefreshDBScreen.java</FilePath>
<LineStart>96</LineStart>
<Snippet>	    }
	}
	catch (Exception e)
	{
	    s.setMessage("Error generating " + this.getClass().getName());</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="8A9C2AEF79FD5061AB4F9694927E8CA3" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The catch block at DeleteProfile.java line 152 handles a broad swath of exceptions,  potentially trapping dissimilar issues or problems that should not be dealt with at this point in the program.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>DeleteProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/DeleteProfile.java</FilePath>
<LineStart>152</LineStart>
<Snippet>	    }
	}
	catch (Exception e)
	{
	    s.setMessage("Error deleting employee profile");</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="5AB5D5DAFA7B18E0B0F36A1A2C64E1BF" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The catch block at BackDoors.java line 134 handles a broad swath of exceptions,  potentially trapping dissimilar issues or problems that should not be dealt with at this point in the program.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>BackDoors.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/BackDoors.java</FilePath>
<LineStart>134</LineStart>
<Snippet>	    }
	}
	catch (Exception ex)
	{
	    ec.addElement(new PRE(ex.getMessage()));</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="63F54D773B6561907974E90962DD28C1" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The catch block at HttpSplitting.java line 134 handles a broad swath of exceptions,  potentially trapping dissimilar issues or problems that should not be dealt with at this point in the program.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>HttpSplitting.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/HttpSplitting.java</FilePath>
<LineStart>134</LineStart>
<Snippet>	    }
	}
	catch (Exception e)
	{
	    s.setMessage("Error generating " + this.getClass().getName());</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="6B7C6A8E3740379251E89308CDFD7B5C" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The catch block at HttpOnly.java line 182 handles a broad swath of exceptions,  potentially trapping dissimilar issues or problems that should not be dealt with at this point in the program.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>HttpOnly.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/HttpOnly.java</FilePath>
<LineStart>182</LineStart>
<Snippet>			original = value;
			
		} catch (Exception e) {
			e.printStackTrace();
		}</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="4A988E6CCF0F7F51B41D9977BDEEAFC9" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The catch block at LessonTracker.java line 391 handles a broad swath of exceptions,  potentially trapping dissimilar issues or problems that should not be dealt with at this point in the program.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>LessonTracker.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/LessonTracker.java</FilePath>
<LineStart>391</LineStart>
<Snippet>	    lessonProperties.store(out, s.getUserName());
	}
	catch (Exception e)
	{
	    // what do we want to do,  I think nothing.</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="D620F026E15344731176C0B3215BC472" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The catch block at SqlNumericInjection.java line 398 handles a broad swath of exceptions,  potentially trapping dissimilar issues or problems that should not be dealt with at this point in the program.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>SqlNumericInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SqlNumericInjection.java</FilePath>
<LineStart>398</LineStart>
<Snippet>	    }
	}
	catch (Exception e)
	{
	    System.out.println("Exception caught: " + e);</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="81DFC5CE3C92427364D747B77899E1E3" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The catch block at CSRF.java line 272 handles a broad swath of exceptions,  potentially trapping dissimilar issues or problems that should not be dealt with at this point in the program.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>CSRF.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CSRF.java</FilePath>
<LineStart>272</LineStart>
<Snippet>
		}
		catch ( Exception e )
		{
			s.setMessage( "Error generating " + this.getClass().getName() );</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                    </GroupingSection>
                    <GroupingSection count="67">
                        <groupTitle>Poor Logging Practice: Use of a System Output Stream</groupTitle>
                        <MajorAttributeSummary>
                            <MetaInfo>
<Name>Abstract</Name>
<Value>Using println() rather than a dedicated logging facility makes it difficult to monitor the program behavior.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Explanation</Name>
<Value>Example 1: The first Java program that a developer learns to write is the following:


public class MyClass
  ...
    System.out.println("hello world");
  ...
}


While most programmers go on to learn many nuances and subtleties about Java, a surprising number hang on to this first lesson and never give up on writing messages to standard output using System.out.println().

The problem is that writing directly to standard output or standard error is often used as an unstructured form of logging. Structured logging facilities provide features like logging levels, uniform formatting, a logger identifier, timestamps, and, perhaps most critically, the ability to direct the log messages to the right place. When the use of system output streams is jumbled together with the code that uses loggers properly, the result is often a well-kept log that is missing critical information.

Developers widely accept the need for structured logging, but many continue to use system output streams in their "pre-production" development. If the code you are reviewing is past the initial phases of development, use of System.out or System.err may indicate an oversight in the move to a structured logging system.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Recommendations</Name>
<Value>Use a Java logging facility rather than System.out or System.err.

Example 2: For example, you can rewrite the "hello world" program in Example 1 using log4j as follows:


import org.apache.log4j.Logger;
import org.apache.log4j.BasicConfigurator;

public class MyClass {
  private final static Logger logger =
            Logger.getLogger(MyClass.class);

  ...
    BasicConfigurator.configure();
    logger.info("hello world");
  ...
}
</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Tips</Name>
<Value>1. Fortify Static Code Analyzer makes an exception for using System.out or System.err in main() and methods in the call hierarchy of main() and does not report such occurrences as Poor Logging Practice: Use of a System Output Stream issues.</Value>
                            </MetaInfo>
                            <AttributeValue>
<Name>&lt;Unaudited&gt;</Name>
<Count>67</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not an Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Reliability Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Bad Practice</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Suspicious</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Exploitable</Name>
<Count>0</Count>
                            </AttributeValue>
                        </MajorAttributeSummary>
                        <Issue iid="BCF58879E79AE8584B05808D3717D695" ruleID="F972FE42-6C15-47D2-BD5C-448166A574C2">
                            <Category>Poor Logging Practice: Use of a System Output Stream</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>Using println() rather than a dedicated logging facility makes it difficult to monitor the program behavior.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>FindProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/FindProfile.java</FilePath>
<LineStart>83</LineStart>
<Snippet>		catch (UnauthenticatedException ue1)
		{
		    System.out.println("Internal server error");
		    ue1.printStackTrace();
		}</Snippet>
<TargetFunction>FunctionCall: println()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="EE7AE2072A8D4995E05B1786939A2F45" ruleID="F972FE42-6C15-47D2-BD5C-448166A574C2">
                            <Category>Poor Logging Practice: Use of a System Output Stream</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>Using println() rather than a dedicated logging facility makes it difficult to monitor the program behavior.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>LessonTracker.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/LessonTracker.java</FilePath>
<LineStart>394</LineStart>
<Snippet>	{
	    // what do we want to do,  I think nothing.
	    System.out.println("Warning User data for " + s.getUserName()
		    + " will not persist");
	}</Snippet>
<TargetFunction>FunctionCall: println()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="6091B70236449E72F5879686A6C6E367" ruleID="F972FE42-6C15-47D2-BD5C-448166A574C2">
                            <Category>Poor Logging Practice: Use of a System Output Stream</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>Using println() rather than a dedicated logging facility makes it difficult to monitor the program behavior.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>RoleBasedAccessControl.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/RoleBasedAccessControl.java</FilePath>
<LineStart>350</LineStart>
<Snippet>	{
	    s.setMessage("Login failed");
	    System.out.println("Authentication failure");
	    ue.printStackTrace();
	}</Snippet>
<TargetFunction>FunctionCall: println()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="0E6279C9E608A3A89C7C8A984E3B8B1C" ruleID="F972FE42-6C15-47D2-BD5C-448166A574C2">
                            <Category>Poor Logging Practice: Use of a System Output Stream</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>Using println() rather than a dedicated logging facility makes it difficult to monitor the program behavior.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>RoleBasedAccessControl.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/RoleBasedAccessControl.java</FilePath>
<LineStart>437</LineStart>
<Snippet>	    catch (ValidationException ve)
	    {
		System.out.println("Validation failed");
		ve.printStackTrace();
		setCurrentAction(s, ERROR_ACTION);</Snippet>
<TargetFunction>FunctionCall: println()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="82A6475511AF948F15616E194B3E6AF7" ruleID="F972FE42-6C15-47D2-BD5C-448166A574C2">
                            <Category>Poor Logging Practice: Use of a System Output Stream</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>Using println() rather than a dedicated logging facility makes it difficult to monitor the program behavior.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>CommandInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CommandInjection.java</FilePath>
<LineStart>306</LineStart>
<Snippet>    private Element exec(WebSession s, String command, String args)
    {
	System.out.println("Executing OS command: '" + command
		+ "' with args: '" + args + "'");
	ExecResults er = Exec.execSimple(command, args);</Snippet>
<TargetFunction>FunctionCall: println()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="5B12314F7293BC2EEC2FD70D360A6089" ruleID="F972FE42-6C15-47D2-BD5C-448166A574C2">
                            <Category>Poor Logging Practice: Use of a System Output Stream</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>Using println() rather than a dedicated logging facility makes it difficult to monitor the program behavior.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>AbstractLesson.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/AbstractLesson.java</FilePath>
<LineStart>960</LineStart>
<Snippet>	catch (IOException e)
	{
	    System.out.println("reading file EXCEPTION: " + filename);
	    s.setMessage("Could not find source file");
	}</Snippet>
<TargetFunction>FunctionCall: println()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="3C5B5D4171D615B9EF83503EE63462CD" ruleID="F972FE42-6C15-47D2-BD5C-448166A574C2">
                            <Category>Poor Logging Practice: Use of a System Output Stream</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>Using println() rather than a dedicated logging facility makes it difficult to monitor the program behavior.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Logout.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/Logout.java</FilePath>
<LineStart>70</LineStart>
<Snippet>	catch (UnauthenticatedException ue1)
	{
	    System.out.println("Internal server error");
	    ue1.printStackTrace();
	}</Snippet>
<TargetFunction>FunctionCall: println()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="2798E867B1404BD55BB1C83A37DF0B5C" ruleID="F972FE42-6C15-47D2-BD5C-448166A574C2">
                            <Category>Poor Logging Practice: Use of a System Output Stream</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>Using println() rather than a dedicated logging facility makes it difficult to monitor the program behavior.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>AbstractLesson.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/AbstractLesson.java</FilePath>
<LineStart>478</LineStart>
<Snippet>	catch (Exception e)
	{
	    System.out.println(e);
	    e.printStackTrace();
	}</Snippet>
<TargetFunction>FunctionCall: println()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="E413776BE4160E277DA345DEB43F87E5" ruleID="F972FE42-6C15-47D2-BD5C-448166A574C2">
                            <Category>Poor Logging Practice: Use of a System Output Stream</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>Using println() rather than a dedicated logging facility makes it difficult to monitor the program behavior.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>AbstractLesson.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/AbstractLesson.java</FilePath>
<LineStart>422</LineStart>
<Snippet>	catch (Exception e)
	{
	    System.out.println(e);
	    e.printStackTrace();
	}</Snippet>
<TargetFunction>FunctionCall: println()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="467434D9F1297B568842CF006B088CBD" ruleID="F972FE42-6C15-47D2-BD5C-448166A574C2">
                            <Category>Poor Logging Practice: Use of a System Output Stream</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>Using println() rather than a dedicated logging facility makes it difficult to monitor the program behavior.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>WebSession.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/WebSession.java</FilePath>
<LineStart>447</LineStart>
<Snippet>		catch ( Exception e )
		{
			System.out.println( "Couldn't open database: check web.xml database parameters" );
			e.printStackTrace();
		}</Snippet>
<TargetFunction>FunctionCall: println()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="B3C83361599738961A888DB0393A83B2" ruleID="F972FE42-6C15-47D2-BD5C-448166A574C2">
                            <Category>Poor Logging Practice: Use of a System Output Stream</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>Using println() rather than a dedicated logging facility makes it difficult to monitor the program behavior.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>LessonTracker.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/LessonTracker.java</FilePath>
<LineStart>253</LineStart>
<Snippet>	catch (Exception e)
	{
	    System.out.println("Failed to load lesson state for " + screen);
	    e.printStackTrace();
	}</Snippet>
<TargetFunction>FunctionCall: println()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="616242600187EB6521CC9E7A8BC2041A" ruleID="F972FE42-6C15-47D2-BD5C-448166A574C2">
                            <Category>Poor Logging Practice: Use of a System Output Stream</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>Using println() rather than a dedicated logging facility makes it difficult to monitor the program behavior.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>HammerHead.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/HammerHead.java</FilePath>
<LineStart>307</LineStart>
<Snippet>		+ request.getRemoteAddr() + " | " + message;
	log(output);
	System.out.println(output);
    }</Snippet>
<TargetFunction>FunctionCall: println()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="D4AE96426FC631AB9233B90414110135" ruleID="F972FE42-6C15-47D2-BD5C-448166A574C2">
                            <Category>Poor Logging Practice: Use of a System Output Stream</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>Using println() rather than a dedicated logging facility makes it difficult to monitor the program behavior.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>SQLInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/SQLInjection.java</FilePath>
<LineStart>360</LineStart>
<Snippet>	    {
		s.setMessage("You are not authorized to perform this function");
		System.out.println("Authorization failure");
		ue2.printStackTrace();
	    }</Snippet>
<TargetFunction>FunctionCall: println()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="A9034464FA6672A3BD27D9C6CF21EBCE" ruleID="F972FE42-6C15-47D2-BD5C-448166A574C2">
                            <Category>Poor Logging Practice: Use of a System Output Stream</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>Using println() rather than a dedicated logging facility makes it difficult to monitor the program behavior.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>FindProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/FindProfile.java</FilePath>
<LineStart>125</LineStart>
<Snippet>		catch (UnauthorizedException ue2)
		{
		    System.out.println("Internal server error");
		    ue2.printStackTrace();
		}</Snippet>
<TargetFunction>FunctionCall: println()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="CFD9EA3E4CA47EF7227ADDF1F7AF6D96" ruleID="F972FE42-6C15-47D2-BD5C-448166A574C2">
                            <Category>Poor Logging Practice: Use of a System Output Stream</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>Using println() rather than a dedicated logging facility makes it difficult to monitor the program behavior.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>RoleBasedAccessControl.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/RoleBasedAccessControl.java</FilePath>
<LineStart>457</LineStart>
<Snippet>	    {
		// All other errors send the user to the generic error page
		System.out.println("handleRequest() error");
		e.printStackTrace();
		setCurrentAction(s, ERROR_ACTION);</Snippet>
<TargetFunction>FunctionCall: println()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="4D42DCAF0A8F504CB9D3F8D36FB0747C" ruleID="F972FE42-6C15-47D2-BD5C-448166A574C2">
                            <Category>Poor Logging Practice: Use of a System Output Stream</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>Using println() rather than a dedicated logging facility makes it difficult to monitor the program behavior.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>SQLInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/SQLInjection.java</FilePath>
<LineStart>347</LineStart>
<Snippet>	    catch (ValidationException ve)
	    {
		System.out.println("Validation failed");
		ve.printStackTrace();
		setCurrentAction(s, ERROR_ACTION);</Snippet>
<TargetFunction>FunctionCall: println()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="EF33CFB3A56FDED88A0DC2F69C48F47E" ruleID="F972FE42-6C15-47D2-BD5C-448166A574C2">
                            <Category>Poor Logging Practice: Use of a System Output Stream</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>Using println() rather than a dedicated logging facility makes it difficult to monitor the program behavior.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>SqlStringInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SqlStringInjection.java</FilePath>
<LineStart>316</LineStart>
<Snippet>	catch (Exception e)
	{
	    System.out.println("Exception caught: " + e);
	    e.printStackTrace(System.out);
	}</Snippet>
<TargetFunction>FunctionCall: println()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="740F5B241D5F4A9A9570CDA309368F78" ruleID="F972FE42-6C15-47D2-BD5C-448166A574C2">
                            <Category>Poor Logging Practice: Use of a System Output Stream</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>Using println() rather than a dedicated logging facility makes it difficult to monitor the program behavior.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>HammerHead.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/HammerHead.java</FilePath>
<LineStart>246</LineStart>
<Snippet>	    Object value = session.getAttribute(name);
	    System.out.println("Name: " + name);
	    System.out.println("Value: " + value);
	}
    }</Snippet>
<TargetFunction>FunctionCall: println()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="94A247653D76C6BA23C0DA95B0B9F58A" ruleID="F972FE42-6C15-47D2-BD5C-448166A574C2">
                            <Category>Poor Logging Practice: Use of a System Output Stream</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>Using println() rather than a dedicated logging facility makes it difficult to monitor the program behavior.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>DeleteProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/DeleteProfile.java</FilePath>
<LineStart>85</LineStart>
<Snippet>	    catch (UnauthorizedException ue2)
	    {
		System.out.println("Internal server error");
		ue2.printStackTrace();
	    }</Snippet>
<TargetFunction>FunctionCall: println()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="E373102D0022EC464544A53AA638D8AE" ruleID="F972FE42-6C15-47D2-BD5C-448166A574C2">
                            <Category>Poor Logging Practice: Use of a System Output Stream</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>Using println() rather than a dedicated logging facility makes it difficult to monitor the program behavior.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>LessonAdapter.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/LessonAdapter.java</FilePath>
<LineStart>136</LineStart>
<Snippet>	{
	    s.setMessage("Error generating " + this.getClass().getName());
	    System.out.println(e);
	    e.printStackTrace();
	}</Snippet>
<TargetFunction>FunctionCall: println()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="C9B7F179D1AC7212CFA1CDE9DF86E255" ruleID="F972FE42-6C15-47D2-BD5C-448166A574C2">
                            <Category>Poor Logging Practice: Use of a System Output Stream</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>Using println() rather than a dedicated logging facility makes it difficult to monitor the program behavior.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>RoleBasedAccessControl.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/RoleBasedAccessControl.java</FilePath>
<LineStart>337</LineStart>
<Snippet>	catch (ParameterNotFoundException pnfe)
	{
	    System.out.println("Missing parameter");
	    pnfe.printStackTrace();
	    setCurrentAction(s, ERROR_ACTION);</Snippet>
<TargetFunction>FunctionCall: println()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="6587080D7FB5505E64703340990CD7E5" ruleID="F972FE42-6C15-47D2-BD5C-448166A574C2">
                            <Category>Poor Logging Practice: Use of a System Output Stream</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>Using println() rather than a dedicated logging facility makes it difficult to monitor the program behavior.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ThreadSafetyProblem.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/ThreadSafetyProblem.java</FilePath>
<LineStart>216</LineStart>
<Snippet>	catch (Exception e)
	{
	    System.out.println("Exception caught: " + e);
	    e.printStackTrace(System.out);
	}</Snippet>
<TargetFunction>FunctionCall: println()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="7497B4CA2446070F8A20CEA85B7891EC" ruleID="F972FE42-6C15-47D2-BD5C-448166A574C2">
                            <Category>Poor Logging Practice: Use of a System Output Stream</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>Using println() rather than a dedicated logging facility makes it difficult to monitor the program behavior.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>CrossSiteScripting.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/CrossSiteScripting.java</FilePath>
<LineStart>378</LineStart>
<Snippet>	    {
		s.setMessage("You are not authorized to perform this function");
		System.out.println("Authorization failure");
		ue2.printStackTrace();
	    }</Snippet>
<TargetFunction>FunctionCall: println()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="A1F814E46DEA399046361471B58469B8" ruleID="F972FE42-6C15-47D2-BD5C-448166A574C2">
                            <Category>Poor Logging Practice: Use of a System Output Stream</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>Using println() rather than a dedicated logging facility makes it difficult to monitor the program behavior.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>WebSession.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/WebSession.java</FilePath>
<LineStart>801</LineStart>
<Snippet>	public void openLessonSession(AbstractLesson lesson)
	{
		System.out.println("Opening new lesson session for lesson " + lesson);
		LessonSession lessonSession = new LessonSession();
		lessonSessions.put(lesson, lessonSession);</Snippet>
<TargetFunction>FunctionCall: println()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="AC0F9A7230F292396DB97EB2A516A386" ruleID="F972FE42-6C15-47D2-BD5C-448166A574C2">
                            <Category>Poor Logging Practice: Use of a System Output Stream</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>Using println() rather than a dedicated logging facility makes it difficult to monitor the program behavior.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>UpdateProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/UpdateProfile.java</FilePath>
<LineStart>114</LineStart>
<Snippet>	    catch (UnauthorizedException ue2)
	    {
		System.out.println("Internal server error");
		ue2.printStackTrace();
	    }</Snippet>
<TargetFunction>FunctionCall: println()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="581829F965BDE48E7653FE512D66E973" ruleID="F972FE42-6C15-47D2-BD5C-448166A574C2">
                            <Category>Poor Logging Practice: Use of a System Output Stream</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>Using println() rather than a dedicated logging facility makes it difficult to monitor the program behavior.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Course.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/Course.java</FilePath>
<LineStart>71</LineStart>
<Snippet>		catch (IOException e)
		{
		    System.out.println("Error loading WebGoat properties");
		    e.printStackTrace();
		}</Snippet>
<TargetFunction>FunctionCall: println()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="9E765B5484C0C82B8FEBD880328601E5" ruleID="F972FE42-6C15-47D2-BD5C-448166A574C2">
                            <Category>Poor Logging Practice: Use of a System Output Stream</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>Using println() rather than a dedicated logging facility makes it difficult to monitor the program behavior.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>CrossSiteScripting.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/CrossSiteScripting.java</FilePath>
<LineStart>365</LineStart>
<Snippet>	    catch (ValidationException ve)
	    {
		System.out.println("Validation failed");
		ve.printStackTrace();
		setCurrentAction(s, ERROR_ACTION);</Snippet>
<TargetFunction>FunctionCall: println()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="DC18E4D591F712457703E9700EBB45CB" ruleID="F972FE42-6C15-47D2-BD5C-448166A574C2">
                            <Category>Poor Logging Practice: Use of a System Output Stream</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>Using println() rather than a dedicated logging facility makes it difficult to monitor the program behavior.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>WebSession.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/WebSession.java</FilePath>
<LineStart>441</LineStart>
<Snippet>			System.out.println( "PATH: " + path );
			String realConnectionString = databaseConnectionString.replaceAll( "PATH", path );
			System.out.println( "Database Connection String: " + realConnectionString );

			return realConnectionString;</Snippet>
<TargetFunction>FunctionCall: println()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="24F968FC44C3A42824EBB499109F1928" ruleID="F972FE42-6C15-47D2-BD5C-448166A574C2">
                            <Category>Poor Logging Practice: Use of a System Output Stream</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>Using println() rather than a dedicated logging facility makes it difficult to monitor the program behavior.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>SqlNumericInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SqlNumericInjection.java</FilePath>
<LineStart>400</LineStart>
<Snippet>	catch (Exception e)
	{
	    System.out.println("Exception caught: " + e);
	    e.printStackTrace(System.out);
	}</Snippet>
<TargetFunction>FunctionCall: println()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="8E090D528362A5DCAA43DAF3734CF853" ruleID="F972FE42-6C15-47D2-BD5C-448166A574C2">
                            <Category>Poor Logging Practice: Use of a System Output Stream</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>Using println() rather than a dedicated logging facility makes it difficult to monitor the program behavior.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>WebSession.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/WebSession.java</FilePath>
<LineStart>988</LineStart>
<Snippet>		if ( myParser.getRawParameter( LOGOUT, null ) != null )
		{
			System.out.println( "Logout " + request.getUserPrincipal() );
			eatCookies();
			request.getSession().invalidate();</Snippet>
<TargetFunction>FunctionCall: println()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="B21140A80A8554DEA5A9E530B261CCEA" ruleID="F972FE42-6C15-47D2-BD5C-448166A574C2">
                            <Category>Poor Logging Practice: Use of a System Output Stream</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>Using println() rather than a dedicated logging facility makes it difficult to monitor the program behavior.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>RoleBasedAccessControl.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/RoleBasedAccessControl.java</FilePath>
<LineStart>363</LineStart>
<Snippet>	{
	    // All other errors send the user to the generic error page
	    System.out.println("handleRequest() error");
	    e.printStackTrace();
	    setCurrentAction(s, ERROR_ACTION);</Snippet>
<TargetFunction>FunctionCall: println()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="D3FA80DE416C223BD1F99A31A8842EB4" ruleID="F972FE42-6C15-47D2-BD5C-448166A574C2">
                            <Category>Poor Logging Practice: Use of a System Output Stream</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>Using println() rather than a dedicated logging facility makes it difficult to monitor the program behavior.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>AbstractLesson.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/AbstractLesson.java</FilePath>
<LineStart>1044</LineStart>
<Snippet>	catch (Exception e)
	{
	    System.out.println(e);
	    e.printStackTrace();
	}</Snippet>
<TargetFunction>FunctionCall: println()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="9B173D6306268755E45C2AC1323FBE1B" ruleID="F972FE42-6C15-47D2-BD5C-448166A574C2">
                            <Category>Poor Logging Practice: Use of a System Output Stream</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>Using println() rather than a dedicated logging facility makes it difficult to monitor the program behavior.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ErrorScreen.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ErrorScreen.java</FilePath>
<LineStart>159</LineStart>
<Snippet>	protected Element createContent( WebSession s )
	{
		System.out.println( "errorscreen createContent Error:" + this.error + " message:" + this.message );

		Element content;</Snippet>
<TargetFunction>FunctionCall: println()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="071779713D48448C5D8964A8EB880584" ruleID="F972FE42-6C15-47D2-BD5C-448166A574C2">
                            <Category>Poor Logging Practice: Use of a System Output Stream</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>Using println() rather than a dedicated logging facility makes it difficult to monitor the program behavior.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Login.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/Login.java</FilePath>
<LineStart>94</LineStart>
<Snippet>		catch (UnauthenticatedException ue1)
		{
		    System.out.println("Internal server error");
		    ue1.printStackTrace();
		}</Snippet>
<TargetFunction>FunctionCall: println()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="10B37D67517B94D61AFCAFD961B76B84" ruleID="F972FE42-6C15-47D2-BD5C-448166A574C2">
                            <Category>Poor Logging Practice: Use of a System Output Stream</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>Using println() rather than a dedicated logging facility makes it difficult to monitor the program behavior.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>CommandInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CommandInjection.java</FilePath>
<LineStart>285</LineStart>
<Snippet>    private String exec(WebSession s, String[] command)
    {
	System.out.println("Executing OS command: " + Arrays.asList(command));
	ExecResults er = Exec.execSimple(command);
	if (!er.getError())</Snippet>
<TargetFunction>FunctionCall: println()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="D71A061BF26FF0600602106B96F6A1FE" ruleID="F972FE42-6C15-47D2-BD5C-448166A574C2">
                            <Category>Poor Logging Practice: Use of a System Output Stream</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>Using println() rather than a dedicated logging facility makes it difficult to monitor the program behavior.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>WebSession.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/WebSession.java</FilePath>
<LineStart>1112</LineStart>
<Snippet>	private void restartLesson(int lessonId)
	{
		System.out.println("Restarting lesson: " + getLesson(lessonId));
		getCurrentLesson().getLessonTracker( this ).setStage(1);
		getCurrentLesson().getLessonTracker( this ).setCompleted(false);</Snippet>
<TargetFunction>FunctionCall: println()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="BCF58879E79AE8584B05808D3717D696" ruleID="F972FE42-6C15-47D2-BD5C-448166A574C2">
                            <Category>Poor Logging Practice: Use of a System Output Stream</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>Using println() rather than a dedicated logging facility makes it difficult to monitor the program behavior.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>FindProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/FindProfile.java</FilePath>
<LineStart>88</LineStart>
<Snippet>		catch (UnauthorizedException ue2)
		{
		    System.out.println("Internal server error");
		    ue2.printStackTrace();
		}</Snippet>
<TargetFunction>FunctionCall: println()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="33D73E12EBA0BB8CE8A1706BB4486340" ruleID="F972FE42-6C15-47D2-BD5C-448166A574C2">
                            <Category>Poor Logging Practice: Use of a System Output Stream</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>Using println() rather than a dedicated logging facility makes it difficult to monitor the program behavior.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>DatabaseUtilities.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/DatabaseUtilities.java</FilePath>
<LineStart>95</LineStart>
<Snippet>	    {
		dbName = dbName.concat("webgoat.mdb");
		System.out.println("DBName: " + dbName);
		Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
		return DriverManager</Snippet>
<TargetFunction>FunctionCall: println()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="5E18F199AE9FE0D38996D9D8C4FD067C" ruleID="F972FE42-6C15-47D2-BD5C-448166A574C2">
                            <Category>Poor Logging Practice: Use of a System Output Stream</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>Using println() rather than a dedicated logging facility makes it difficult to monitor the program behavior.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>UpdateProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/UpdateProfile.java</FilePath>
<LineStart>124</LineStart>
<Snippet>	    catch (UnauthenticatedException ue1)
	    {
		System.out.println("Internal server error");
		ue1.printStackTrace();
	    }</Snippet>
<TargetFunction>FunctionCall: println()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="D2DF51C4B5AC23E635DD118FF1D1AE70" ruleID="F972FE42-6C15-47D2-BD5C-448166A574C2">
                            <Category>Poor Logging Practice: Use of a System Output Stream</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>Using println() rather than a dedicated logging facility makes it difficult to monitor the program behavior.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>SQLInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/SQLInjection.java</FilePath>
<LineStart>341</LineStart>
<Snippet>	    catch (ParameterNotFoundException pnfe)
	    {
		System.out.println("Missing parameter");
		pnfe.printStackTrace();
		setCurrentAction(s, ERROR_ACTION);</Snippet>
<TargetFunction>FunctionCall: println()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="5BE36D33F9C1C8BBFCCF0A004F3C7018" ruleID="F972FE42-6C15-47D2-BD5C-448166A574C2">
                            <Category>Poor Logging Practice: Use of a System Output Stream</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>Using println() rather than a dedicated logging facility makes it difficult to monitor the program behavior.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>WebSession.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/WebSession.java</FilePath>
<LineStart>283</LineStart>
<Snippet>		// FIXME: hack to save context for web service calls
		DatabaseUtilities.servletContextRealPath = context.getRealPath("/");
		System.out.println("Context Path: " + DatabaseUtilities.servletContextRealPath);
		// FIXME: need to solve concurrency problem here -- make tables for this user
		if ( !databaseBuilt )</Snippet>
<TargetFunction>FunctionCall: println()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="162021CF920600D31D9E8E71C85BFD1B" ruleID="F972FE42-6C15-47D2-BD5C-448166A574C2">
                            <Category>Poor Logging Practice: Use of a System Output Stream</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>Using println() rather than a dedicated logging facility makes it difficult to monitor the program behavior.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>RefreshDBScreen.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/admin/RefreshDBScreen.java</FilePath>
<LineStart>163</LineStart>
<Snippet>	    CreateDB db = new CreateDB();
	    db.makeDB(connection);
	    System.out.println("Successfully refreshed the database.");
	}
	catch (Exception e)</Snippet>
<TargetFunction>FunctionCall: println()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="3C5B5D4171D615B9EF83503EE63462CE" ruleID="F972FE42-6C15-47D2-BD5C-448166A574C2">
                            <Category>Poor Logging Practice: Use of a System Output Stream</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>Using println() rather than a dedicated logging facility makes it difficult to monitor the program behavior.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Logout.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/Logout.java</FilePath>
<LineStart>75</LineStart>
<Snippet>	catch (UnauthorizedException ue2)
	{
	    System.out.println("Internal server error");
	    ue2.printStackTrace();
	}</Snippet>
<TargetFunction>FunctionCall: println()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="A9034464FA6672A3BD27D9C6CF21EBCD" ruleID="F972FE42-6C15-47D2-BD5C-448166A574C2">
                            <Category>Poor Logging Practice: Use of a System Output Stream</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>Using println() rather than a dedicated logging facility makes it difficult to monitor the program behavior.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>FindProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/FindProfile.java</FilePath>
<LineStart>120</LineStart>
<Snippet>		catch (UnauthenticatedException ue1)
		{
		    System.out.println("Internal server error");
		    ue1.printStackTrace();
		}</Snippet>
<TargetFunction>FunctionCall: println()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="AC0F9A7230F292396DB97EB2A516A385" ruleID="F972FE42-6C15-47D2-BD5C-448166A574C2">
                            <Category>Poor Logging Practice: Use of a System Output Stream</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>Using println() rather than a dedicated logging facility makes it difficult to monitor the program behavior.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>UpdateProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/UpdateProfile.java</FilePath>
<LineStart>109</LineStart>
<Snippet>	    catch (UnauthenticatedException ue1)
	    {
		System.out.println("Internal server error");
		ue1.printStackTrace();
	    }</Snippet>
<TargetFunction>FunctionCall: println()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="B88FDD8287BB577B70DFE67F2AAEE3C2" ruleID="F972FE42-6C15-47D2-BD5C-448166A574C2">
                            <Category>Poor Logging Practice: Use of a System Output Stream</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>Using println() rather than a dedicated logging facility makes it difficult to monitor the program behavior.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>CommandInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CommandInjection.java</FilePath>
<LineStart>87</LineStart>
<Snippet>		index = index + 1;
		int helpFileLen = helpFile.length() - 1; // subtract 1 for the closing quote
		System.out.println("Command = ["
			+ helpFile.substring(index, helpFileLen).trim()
				.toLowerCase() + "]");</Snippet>
<TargetFunction>FunctionCall: println()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="B6C204130C1FB4DFCC47D77ECD714450" ruleID="F972FE42-6C15-47D2-BD5C-448166A574C2">
                            <Category>Poor Logging Practice: Use of a System Output Stream</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>Using println() rather than a dedicated logging facility makes it difficult to monitor the program behavior.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>RoleBasedAccessControl.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/RoleBasedAccessControl.java</FilePath>
<LineStart>356</LineStart>
<Snippet>	{
	    s.setMessage("You are not authorized to perform this function");
	    System.out.println("Authorization failure");
	    setCurrentAction(s, ERROR_ACTION);
	    ue2.printStackTrace();</Snippet>
<TargetFunction>FunctionCall: println()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="94A247653D76C6BA23C0DA95B0B9F589" ruleID="F972FE42-6C15-47D2-BD5C-448166A574C2">
                            <Category>Poor Logging Practice: Use of a System Output Stream</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>Using println() rather than a dedicated logging facility makes it difficult to monitor the program behavior.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>DeleteProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/DeleteProfile.java</FilePath>
<LineStart>80</LineStart>
<Snippet>	    catch (UnauthenticatedException ue1)
	    {
		System.out.println("Internal server error");
		ue1.printStackTrace();
	    }</Snippet>
<TargetFunction>FunctionCall: println()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="5E18F199AE9FE0D38996D9D8C4FD067D" ruleID="F972FE42-6C15-47D2-BD5C-448166A574C2">
                            <Category>Poor Logging Practice: Use of a System Output Stream</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>Using println() rather than a dedicated logging facility makes it difficult to monitor the program behavior.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>UpdateProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/UpdateProfile.java</FilePath>
<LineStart>129</LineStart>
<Snippet>	    catch (UnauthorizedException ue2)
	    {
		System.out.println("Internal server error");
		ue2.printStackTrace();
	    }</Snippet>
<TargetFunction>FunctionCall: println()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="2806D3EF407F7C893F96EE8C84DDD240" ruleID="F972FE42-6C15-47D2-BD5C-448166A574C2">
                            <Category>Poor Logging Practice: Use of a System Output Stream</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>Using println() rather than a dedicated logging facility makes it difficult to monitor the program behavior.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>SQLInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/SQLInjection.java</FilePath>
<LineStart>354</LineStart>
<Snippet>	    {
		s.setMessage("Login failed");
		System.out.println("Authentication failure");
		ue.printStackTrace();
	    }</Snippet>
<TargetFunction>FunctionCall: println()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="B6275BE3EBF5E16522B5AFFFEC6B51FD" ruleID="F972FE42-6C15-47D2-BD5C-448166A574C2">
                            <Category>Poor Logging Practice: Use of a System Output Stream</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>Using println() rather than a dedicated logging facility makes it difficult to monitor the program behavior.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>WebSession.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/WebSession.java</FilePath>
<LineStart>1089</LineStart>
<Snippet>		if ( isHackedAdmin )
		{
			System.out.println("Hacked admin");
			hasHackedHackableAdmin = true;
		}</Snippet>
<TargetFunction>FunctionCall: println()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="F375DBFDFA2BC8DCDD24BD986C69B90C" ruleID="F972FE42-6C15-47D2-BD5C-448166A574C2">
                            <Category>Poor Logging Practice: Use of a System Output Stream</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>Using println() rather than a dedicated logging facility makes it difficult to monitor the program behavior.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Challenge2Screen.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/Challenge2Screen.java</FilePath>
<LineStart>728</LineStart>
<Snippet>	catch (Exception e)
	{
	    System.out.println("Couldn't write " + message + " to " + s);
	    e.printStackTrace();
	}</Snippet>
<TargetFunction>FunctionCall: println()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="848E5AB128D12AD7A3735689CBD6E750" ruleID="F972FE42-6C15-47D2-BD5C-448166A574C2">
                            <Category>Poor Logging Practice: Use of a System Output Stream</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>Using println() rather than a dedicated logging facility makes it difficult to monitor the program behavior.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>RoleBasedAccessControl.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/RoleBasedAccessControl.java</FilePath>
<LineStart>343</LineStart>
<Snippet>	catch (ValidationException ve)
	{
	    System.out.println("Validation failed");
	    ve.printStackTrace();
	    setCurrentAction(s, ERROR_ACTION);</Snippet>
<TargetFunction>FunctionCall: println()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="635FE899485F703DE0A9EF3FDC1FB18E" ruleID="F972FE42-6C15-47D2-BD5C-448166A574C2">
                            <Category>Poor Logging Practice: Use of a System Output Stream</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>Using println() rather than a dedicated logging facility makes it difficult to monitor the program behavior.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>BlindSqlInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/BlindSqlInjection.java</FilePath>
<LineStart>343</LineStart>
<Snippet>	catch (Exception e)
	{
	    System.out.println("Exception caught: " + e);
	    e.printStackTrace(System.out);
	}</Snippet>
<TargetFunction>FunctionCall: println()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="0234F9BD308F70B7720049C1AC563A47" ruleID="F972FE42-6C15-47D2-BD5C-448166A574C2">
                            <Category>Poor Logging Practice: Use of a System Output Stream</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>Using println() rather than a dedicated logging facility makes it difficult to monitor the program behavior.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>RoleBasedAccessControl.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/RoleBasedAccessControl.java</FilePath>
<LineStart>450</LineStart>
<Snippet>	    {
		s.setMessage("You are not authorized to perform this function");
		System.out.println("Authorization failure");
		setCurrentAction(s, ERROR_ACTION);
		ue2.printStackTrace();</Snippet>
<TargetFunction>FunctionCall: println()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="071779713D48448C5D8964A8EB880585" ruleID="F972FE42-6C15-47D2-BD5C-448166A574C2">
                            <Category>Poor Logging Practice: Use of a System Output Stream</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>Using println() rather than a dedicated logging facility makes it difficult to monitor the program behavior.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Login.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/Login.java</FilePath>
<LineStart>99</LineStart>
<Snippet>		catch (UnauthorizedException ue2)
		{
		    System.out.println("Internal server error");
		    ue2.printStackTrace();
		}</Snippet>
<TargetFunction>FunctionCall: println()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="2B28697295130E0E9596D8E2F8D8C1B2" ruleID="F972FE42-6C15-47D2-BD5C-448166A574C2">
                            <Category>Poor Logging Practice: Use of a System Output Stream</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>Using println() rather than a dedicated logging facility makes it difficult to monitor the program behavior.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>WebSession.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/WebSession.java</FilePath>
<LineStart>439</LineStart>
<Snippet>		{
			String path = context.getRealPath( "/database" ).replace( '\\', '/' );
			System.out.println( "PATH: " + path );
			String realConnectionString = databaseConnectionString.replaceAll( "PATH", path );
			System.out.println( "Database Connection String: " + realConnectionString );</Snippet>
<TargetFunction>FunctionCall: println()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="A9147AF6D0B3C0F21317AACF1EB28D32" ruleID="F972FE42-6C15-47D2-BD5C-448166A574C2">
                            <Category>Poor Logging Practice: Use of a System Output Stream</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>Using println() rather than a dedicated logging facility makes it difficult to monitor the program behavior.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>CrossSiteScripting.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/CrossSiteScripting.java</FilePath>
<LineStart>372</LineStart>
<Snippet>	    {
		s.setMessage("Login failed");
		System.out.println("Authentication failure");
		ue.printStackTrace();
	    }</Snippet>
<TargetFunction>FunctionCall: println()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="8D532A349AF19BDE1F086067626CDC84" ruleID="F972FE42-6C15-47D2-BD5C-448166A574C2">
                            <Category>Poor Logging Practice: Use of a System Output Stream</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>Using println() rather than a dedicated logging facility makes it difficult to monitor the program behavior.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>SQLInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/SQLInjection.java</FilePath>
<LineStart>366</LineStart>
<Snippet>	    {
		// All other errors send the user to the generic error page
		System.out.println("handleRequest() error");
		e.printStackTrace();
		setCurrentAction(s, ERROR_ACTION);</Snippet>
<TargetFunction>FunctionCall: println()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="2406F0F7506F4327443FD975B836CB65" ruleID="F972FE42-6C15-47D2-BD5C-448166A574C2">
                            <Category>Poor Logging Practice: Use of a System Output Stream</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>Using println() rather than a dedicated logging facility makes it difficult to monitor the program behavior.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>CrossSiteScripting.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/CrossSiteScripting.java</FilePath>
<LineStart>359</LineStart>
<Snippet>	    catch (ParameterNotFoundException pnfe)
	    {
		System.out.println("Missing parameter");
		pnfe.printStackTrace();
		setCurrentAction(s, ERROR_ACTION);</Snippet>
<TargetFunction>FunctionCall: println()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="6A916620ECA642E88669EAFFDEAD4781" ruleID="F972FE42-6C15-47D2-BD5C-448166A574C2">
                            <Category>Poor Logging Practice: Use of a System Output Stream</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>Using println() rather than a dedicated logging facility makes it difficult to monitor the program behavior.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>RoleBasedAccessControl.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/RoleBasedAccessControl.java</FilePath>
<LineStart>431</LineStart>
<Snippet>	    catch (ParameterNotFoundException pnfe)
	    {
		System.out.println("Missing parameter");
		pnfe.printStackTrace();
		setCurrentAction(s, ERROR_ACTION);</Snippet>
<TargetFunction>FunctionCall: println()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="85D7846F84F575458FB183B74A4F3AD0" ruleID="F972FE42-6C15-47D2-BD5C-448166A574C2">
                            <Category>Poor Logging Practice: Use of a System Output Stream</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>Using println() rather than a dedicated logging facility makes it difficult to monitor the program behavior.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>CrossSiteScripting.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/CrossSiteScripting.java</FilePath>
<LineStart>384</LineStart>
<Snippet>	    {
		// All other errors send the user to the generic error page
		System.out.println("handleRequest() error");
		e.printStackTrace();
		setCurrentAction(s, ERROR_ACTION);</Snippet>
<TargetFunction>FunctionCall: println()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="AA02F70D43073F180474686A6D9926E0" ruleID="F972FE42-6C15-47D2-BD5C-448166A574C2">
                            <Category>Poor Logging Practice: Use of a System Output Stream</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>Using println() rather than a dedicated logging facility makes it difficult to monitor the program behavior.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>RoleBasedAccessControl.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/RoleBasedAccessControl.java</FilePath>
<LineStart>444</LineStart>
<Snippet>	    {
		s.setMessage("Login failed");
		System.out.println("Authentication failure");
		ue.printStackTrace();
	    }</Snippet>
<TargetFunction>FunctionCall: println()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="10DC775033884F9BB1343DDED94F152B" ruleID="F972FE42-6C15-47D2-BD5C-448166A574C2">
                            <Category>Poor Logging Practice: Use of a System Output Stream</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>Using println() rather than a dedicated logging facility makes it difficult to monitor the program behavior.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>CommandInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CommandInjection.java</FilePath>
<LineStart>264</LineStart>
<Snippet>    private String exec(WebSession s, String command)
    {
	System.out.println("Executing OS command: " + command);
	ExecResults er = Exec.execSimple(command);
	if ((command.indexOf("&amp;") != -1 || command.indexOf(";") != -1)</Snippet>
<TargetFunction>FunctionCall: println()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="A5C6030B921325DF8D8515310FB2389A" ruleID="F972FE42-6C15-47D2-BD5C-448166A574C2">
                            <Category>Poor Logging Practice: Use of a System Output Stream</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>Using println() rather than a dedicated logging facility makes it difficult to monitor the program behavior.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Login.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/Login.java</FilePath>
<LineStart>90</LineStart>
<Snippet>		catch (UnauthenticatedException ue1)
		{
		    System.out.println("Internal server error");
		    ue1.printStackTrace();
		}</Snippet>
<TargetFunction>FunctionCall: println()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="A5C6030B921325DF8D8515310FB2389B" ruleID="F972FE42-6C15-47D2-BD5C-448166A574C2">
                            <Category>Poor Logging Practice: Use of a System Output Stream</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>Using println() rather than a dedicated logging facility makes it difficult to monitor the program behavior.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Login.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/Login.java</FilePath>
<LineStart>95</LineStart>
<Snippet>		catch (UnauthorizedException ue2)
		{
		    System.out.println("Internal server error");
		    ue2.printStackTrace();
		}</Snippet>
<TargetFunction>FunctionCall: println()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="2503D31650A7A22A06C0CED35BE37A2F" ruleID="F972FE42-6C15-47D2-BD5C-448166A574C2">
                            <Category>Poor Logging Practice: Use of a System Output Stream</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>Using println() rather than a dedicated logging facility makes it difficult to monitor the program behavior.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>HammerHead.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/HammerHead.java</FilePath>
<LineStart>245</LineStart>
<Snippet>	    String name = (String) enumerator.nextElement();
	    Object value = session.getAttribute(name);
	    System.out.println("Name: " + name);
	    System.out.println("Value: " + value);
	}</Snippet>
<TargetFunction>FunctionCall: println()</TargetFunction>
                            </Primary>
                        </Issue>
                    </GroupingSection>
                    <GroupingSection count="50">
                        <groupTitle>Code Correctness: Constructor Invokes Overridable Function</groupTitle>
                        <MajorAttributeSummary>
                            <MetaInfo>
<Name>Abstract</Name>
<Value>A constructor of CrossSiteScripting in CrossSiteScripting.java on line 157 calls a function that can be overridden by an attacker.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Explanation</Name>
<Value>When a constructor calls an overridable function, it may allow an attacker to access the this reference prior to the object being fully initialized, which can in turn lead to a vulnerability.

Example 1: The following calls a method that can be overridden.


  ...
  class User {
    private String username;
    private boolean valid;
    public User(String username, String password){
      this.username = username;
      this.valid = validateUser(username, password);
    }
    public boolean validateUser(String username, String password){
      //validate user is real and can authenticate
      ...
    }
    public final boolean isValid(){
      return valid;
    }
  }


Since the function validateUser and the class are not final, it means that they can be overridden, and then initializing a variable to the subclass that overrides this function would allow bypassing of the validateUser functionality. For example:


  ...
  class Attacker extends User{
    public Attacker(String username, String password){
      super(username, password);
    }
    public boolean validateUser(String username, String password){
      return true;
    }
  }
  ...
  class MainClass{
    public static void main(String[] args){
      User hacker = new Attacker("Evil", "Hacker");
      if (hacker.isValid()){
        System.out.println("Attack successful!");
      }else{
        System.out.println("Attack failed");
      }
    }
  }


The code in Example 1 prints "Attack successful!", since the Attacker class overrides the validateUser() function that is called from the constructor of the superclass User, and Java will first look in the subclass for functions called from the constructor.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Recommendations</Name>
<Value>Constructors should not call functions that can be overridden, either by specifying them as final, or specifying the class as final. Alternatively if this code is only ever needed in the constructor, the private access specifier can be used, or the logic could be placed directly into the constructor of the superclass.

Example 2: The following makes the class final to prevent the function from being overridden elsewhere.


  ...
  final class User {
    private String username;
    private boolean valid;
    public User(String username, String password){
      this.username = username;
      this.valid = validateUser(username, password);
    }
    private boolean validateUser(String username, String password){
      //validate user is real and can authenticate
      ...
    }
    public final boolean isValid(){
      return valid;
    }
  }


This example specifies the class as final, so that it cannot be subclassed, and changes the validateUser() function to private, since it is not needed elsewhere in this application. This is programming defensively, since at a later date it may be decided that the User class needs to be subclassed, which would result in this vulnerability reappearing if the validateUser() function was not set to private.</Value>
                            </MetaInfo>
                            <AttributeValue>
<Name>&lt;Unaudited&gt;</Name>
<Count>50</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not an Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Reliability Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Bad Practice</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Suspicious</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Exploitable</Name>
<Count>0</Count>
                            </AttributeValue>
                        </MajorAttributeSummary>
                        <Issue iid="82621CFD29147E47E261EC7B13859322" ruleID="95ACE7A2-BF14-4254-AFD3-22769C5FDC5F">
                            <Category>Code Correctness: Constructor Invokes Overridable Function</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>A constructor of RoleBasedAccessControl in RoleBasedAccessControl.java on line 150 calls a function that can be overridden by an attacker.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>RoleBasedAccessControl.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/RoleBasedAccessControl.java</FilePath>
<LineStart>150</LineStart>
<Snippet>    {
	String myClassName = parseClassName(this.getClass().getName());
	registerAction(new ListStaff(this, myClassName, LISTSTAFF_ACTION));
	registerAction(new SearchStaff(this, myClassName, SEARCHSTAFF_ACTION));
	registerAction(new ViewProfile(this, myClassName, VIEWPROFILE_ACTION));</Snippet>
<TargetFunction>FunctionCall: registerAction()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="5F64A45B48464CBE4AE7D4572D0A3E68" ruleID="95ACE7A2-BF14-4254-AFD3-22769C5FDC5F">
                            <Category>Code Correctness: Constructor Invokes Overridable Function</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>A constructor of CrossSiteScripting in CrossSiteScripting.java on line 171 calls a function that can be overridden by an attacker.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>CrossSiteScripting.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/CrossSiteScripting.java</FilePath>
<LineStart>171</LineStart>
<Snippet>		getAction(VIEWPROFILE_ACTION)));
	registerAction(new UpdateProfile(this, myClassName,
		UPDATEPROFILE_ACTION, getAction(VIEWPROFILE_ACTION)));
	registerAction(new DeleteProfile(this, myClassName,
		DELETEPROFILE_ACTION, getAction(LISTSTAFF_ACTION)));</Snippet>
<TargetFunction>FunctionCall: getAction()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="9EB26A211AFC63CE112B5498BE88E7B6" ruleID="95ACE7A2-BF14-4254-AFD3-22769C5FDC5F">
                            <Category>Code Correctness: Constructor Invokes Overridable Function</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>A constructor of WelcomeScreen in WelcomeScreen.java on line 56 calls a function that can be overridden by an attacker.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>WelcomeScreen.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/WelcomeScreen.java</FilePath>
<LineStart>56</LineStart>
<Snippet>    public WelcomeScreen(WebSession s)
    {
	setup(s);
    }
</Snippet>
<TargetFunction>FunctionCall: setup()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="D01E8C3B3A9A446059B04DB981440B22" ruleID="95ACE7A2-BF14-4254-AFD3-22769C5FDC5F">
                            <Category>Code Correctness: Constructor Invokes Overridable Function</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>A constructor of CrossSiteScripting in CrossSiteScripting.java on line 157 calls a function that can be overridden by an attacker.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>CrossSiteScripting.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/CrossSiteScripting.java</FilePath>
<LineStart>157</LineStart>
<Snippet>    {
	String myClassName = parseClassName(this.getClass().getName());
	registerAction(new ListStaff(this, myClassName, LISTSTAFF_ACTION));
	registerAction(new SearchStaff(this, myClassName, SEARCHSTAFF_ACTION));
	registerAction(new ViewProfile(this, myClassName, VIEWPROFILE_ACTION));</Snippet>
<TargetFunction>FunctionCall: registerAction()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="C99BF6F7C13B6FEC09F7DFC731777E3E" ruleID="95ACE7A2-BF14-4254-AFD3-22769C5FDC5F">
                            <Category>Code Correctness: Constructor Invokes Overridable Function</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>A constructor of SQLInjection in SQLInjection.java on line 173 calls a function that can be overridden by an attacker.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>SQLInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/SQLInjection.java</FilePath>
<LineStart>173</LineStart>
<Snippet>	registerAction(new FindProfile(this, myClassName, FINDPROFILE_ACTION,
		getAction(VIEWPROFILE_ACTION)));
	registerAction(new UpdateProfile(this, myClassName,
		UPDATEPROFILE_ACTION, getAction(VIEWPROFILE_ACTION)));
	registerAction(new DeleteProfile(this, myClassName,</Snippet>
<TargetFunction>FunctionCall: registerAction()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="82621CFD29147E47E261EC7B1385932A" ruleID="95ACE7A2-BF14-4254-AFD3-22769C5FDC5F">
                            <Category>Code Correctness: Constructor Invokes Overridable Function</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>A constructor of RoleBasedAccessControl in RoleBasedAccessControl.java on line 163 calls a function that can be overridden by an attacker.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>RoleBasedAccessControl.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/RoleBasedAccessControl.java</FilePath>
<LineStart>163</LineStart>
<Snippet>	registerAction(new FindProfile(this, myClassName, FINDPROFILE_ACTION,
		getAction(VIEWPROFILE_ACTION)));
	registerAction(new UpdateProfile(this, myClassName,
		UPDATEPROFILE_ACTION, getAction(VIEWPROFILE_ACTION)));
	registerAction(new DeleteProfile(this, myClassName,</Snippet>
<TargetFunction>FunctionCall: registerAction()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="D01E8C3B3A9A446059B04DB981440B25" ruleID="95ACE7A2-BF14-4254-AFD3-22769C5FDC5F">
                            <Category>Code Correctness: Constructor Invokes Overridable Function</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>A constructor of CrossSiteScripting in CrossSiteScripting.java on line 160 calls a function that can be overridden by an attacker.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>CrossSiteScripting.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/CrossSiteScripting.java</FilePath>
<LineStart>160</LineStart>
<Snippet>	registerAction(new SearchStaff(this, myClassName, SEARCHSTAFF_ACTION));
	registerAction(new ViewProfile(this, myClassName, VIEWPROFILE_ACTION));
	registerAction(new EditProfile(this, myClassName, EDITPROFILE_ACTION));
	registerAction(new EditProfile(this, myClassName, CREATEPROFILE_ACTION));
</Snippet>
<TargetFunction>FunctionCall: registerAction()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="C99BF6F7C13B6FEC09F7DFC731777E38" ruleID="95ACE7A2-BF14-4254-AFD3-22769C5FDC5F">
                            <Category>Code Correctness: Constructor Invokes Overridable Function</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>A constructor of SQLInjection in SQLInjection.java on line 162 calls a function that can be overridden by an attacker.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>SQLInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/SQLInjection.java</FilePath>
<LineStart>162</LineStart>
<Snippet>	registerAction(new ListStaff(this, myClassName, LISTSTAFF_ACTION));
	registerAction(new SearchStaff(this, myClassName, SEARCHSTAFF_ACTION));
	registerAction(new ViewProfile(this, myClassName, VIEWPROFILE_ACTION));
	registerAction(new EditProfile(this, myClassName, EDITPROFILE_ACTION));
	registerAction(new EditProfile(this, myClassName, CREATEPROFILE_ACTION));</Snippet>
<TargetFunction>FunctionCall: registerAction()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="1FDE9E3D6EDDBB6E6F626A695AFDE1A1" ruleID="95ACE7A2-BF14-4254-AFD3-22769C5FDC5F">
                            <Category>Code Correctness: Constructor Invokes Overridable Function</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>A constructor of CrossSiteScripting in CrossSiteScripting.java on line 165 calls a function that can be overridden by an attacker.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>CrossSiteScripting.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/CrossSiteScripting.java</FilePath>
<LineStart>165</LineStart>
<Snippet>	// These actions are special in that they chain to other actions.
	registerAction(new Login(this, myClassName, LOGIN_ACTION,
		getAction(LISTSTAFF_ACTION)));
	registerAction(new Logout(this, myClassName, LOGOUT_ACTION,
		getAction(LOGIN_ACTION)));</Snippet>
<TargetFunction>FunctionCall: getAction()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="C99BF6F7C13B6FEC09F7DFC731777E3B" ruleID="95ACE7A2-BF14-4254-AFD3-22769C5FDC5F">
                            <Category>Code Correctness: Constructor Invokes Overridable Function</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>A constructor of SQLInjection in SQLInjection.java on line 167 calls a function that can be overridden by an attacker.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>SQLInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/SQLInjection.java</FilePath>
<LineStart>167</LineStart>
<Snippet>
	// These actions are special in that they chain to other actions.
	registerAction(new Login(this, myClassName, LOGIN_ACTION,
		getAction(LISTSTAFF_ACTION)));
	registerAction(new Logout(this, myClassName, LOGOUT_ACTION,</Snippet>
<TargetFunction>FunctionCall: registerAction()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="8725A59F95BE9B010DF3FD808D928D84" ruleID="95ACE7A2-BF14-4254-AFD3-22769C5FDC5F">
                            <Category>Code Correctness: Constructor Invokes Overridable Function</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>A constructor of SQLInjection in SQLInjection.java on line 176 calls a function that can be overridden by an attacker.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>SQLInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/SQLInjection.java</FilePath>
<LineStart>176</LineStart>
<Snippet>		UPDATEPROFILE_ACTION, getAction(VIEWPROFILE_ACTION)));
	registerAction(new DeleteProfile(this, myClassName,
		DELETEPROFILE_ACTION, getAction(LISTSTAFF_ACTION)));
    }
</Snippet>
<TargetFunction>FunctionCall: getAction()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="D0C33A4795D7223ED6321112B01A9031" ruleID="95ACE7A2-BF14-4254-AFD3-22769C5FDC5F">
                            <Category>Code Correctness: Constructor Invokes Overridable Function</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>A constructor of RoleBasedAccessControl in RoleBasedAccessControl.java on line 158 calls a function that can be overridden by an attacker.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>RoleBasedAccessControl.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/RoleBasedAccessControl.java</FilePath>
<LineStart>158</LineStart>
<Snippet>	// These actions are special in that they chain to other actions.
	registerAction(new Login(this, myClassName, LOGIN_ACTION,
		getAction(LISTSTAFF_ACTION)));
	registerAction(new Logout(this, myClassName, LOGOUT_ACTION,
		getAction(LOGIN_ACTION)));</Snippet>
<TargetFunction>FunctionCall: getAction()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="82621CFD29147E47E261EC7B13859327" ruleID="95ACE7A2-BF14-4254-AFD3-22769C5FDC5F">
                            <Category>Code Correctness: Constructor Invokes Overridable Function</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>A constructor of RoleBasedAccessControl in RoleBasedAccessControl.java on line 157 calls a function that can be overridden by an attacker.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>RoleBasedAccessControl.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/RoleBasedAccessControl.java</FilePath>
<LineStart>157</LineStart>
<Snippet>
	// These actions are special in that they chain to other actions.
	registerAction(new Login(this, myClassName, LOGIN_ACTION,
		getAction(LISTSTAFF_ACTION)));
	registerAction(new Logout(this, myClassName, LOGOUT_ACTION,</Snippet>
<TargetFunction>FunctionCall: registerAction()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="A56A07CF6FDD4FAD1BDF963C5B41357F" ruleID="95ACE7A2-BF14-4254-AFD3-22769C5FDC5F">
                            <Category>Code Correctness: Constructor Invokes Overridable Function</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>A constructor of RoleBasedAccessControl in RoleBasedAccessControl.java on line 162 calls a function that can be overridden by an attacker.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>RoleBasedAccessControl.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/RoleBasedAccessControl.java</FilePath>
<LineStart>162</LineStart>
<Snippet>		getAction(LOGIN_ACTION)));
	registerAction(new FindProfile(this, myClassName, FINDPROFILE_ACTION,
		getAction(VIEWPROFILE_ACTION)));
	registerAction(new UpdateProfile(this, myClassName,
		UPDATEPROFILE_ACTION, getAction(VIEWPROFILE_ACTION)));</Snippet>
<TargetFunction>FunctionCall: getAction()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="82621CFD29147E47E261EC7B13859328" ruleID="95ACE7A2-BF14-4254-AFD3-22769C5FDC5F">
                            <Category>Code Correctness: Constructor Invokes Overridable Function</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>A constructor of RoleBasedAccessControl in RoleBasedAccessControl.java on line 159 calls a function that can be overridden by an attacker.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>RoleBasedAccessControl.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/RoleBasedAccessControl.java</FilePath>
<LineStart>159</LineStart>
<Snippet>	registerAction(new Login(this, myClassName, LOGIN_ACTION,
		getAction(LISTSTAFF_ACTION)));
	registerAction(new Logout(this, myClassName, LOGOUT_ACTION,
		getAction(LOGIN_ACTION)));
	registerAction(new FindProfile(this, myClassName, FINDPROFILE_ACTION,</Snippet>
<TargetFunction>FunctionCall: registerAction()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="D01E8C3B3A9A446059B04DB981440B27" ruleID="95ACE7A2-BF14-4254-AFD3-22769C5FDC5F">
                            <Category>Code Correctness: Constructor Invokes Overridable Function</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>A constructor of CrossSiteScripting in CrossSiteScripting.java on line 164 calls a function that can be overridden by an attacker.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>CrossSiteScripting.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/CrossSiteScripting.java</FilePath>
<LineStart>164</LineStart>
<Snippet>
	// These actions are special in that they chain to other actions.
	registerAction(new Login(this, myClassName, LOGIN_ACTION,
		getAction(LISTSTAFF_ACTION)));
	registerAction(new Logout(this, myClassName, LOGOUT_ACTION,</Snippet>
<TargetFunction>FunctionCall: registerAction()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="5F64A45B48464CBE4AE7D4572D0A3E67" ruleID="95ACE7A2-BF14-4254-AFD3-22769C5FDC5F">
                            <Category>Code Correctness: Constructor Invokes Overridable Function</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>A constructor of CrossSiteScripting in CrossSiteScripting.java on line 169 calls a function that can be overridden by an attacker.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>CrossSiteScripting.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/CrossSiteScripting.java</FilePath>
<LineStart>169</LineStart>
<Snippet>		getAction(LOGIN_ACTION)));
	registerAction(new FindProfile(this, myClassName, FINDPROFILE_ACTION,
		getAction(VIEWPROFILE_ACTION)));
	registerAction(new UpdateProfile(this, myClassName,
		UPDATEPROFILE_ACTION, getAction(VIEWPROFILE_ACTION)));</Snippet>
<TargetFunction>FunctionCall: getAction()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="D01E8C3B3A9A446059B04DB981440B24" ruleID="95ACE7A2-BF14-4254-AFD3-22769C5FDC5F">
                            <Category>Code Correctness: Constructor Invokes Overridable Function</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>A constructor of CrossSiteScripting in CrossSiteScripting.java on line 159 calls a function that can be overridden by an attacker.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>CrossSiteScripting.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/CrossSiteScripting.java</FilePath>
<LineStart>159</LineStart>
<Snippet>	registerAction(new ListStaff(this, myClassName, LISTSTAFF_ACTION));
	registerAction(new SearchStaff(this, myClassName, SEARCHSTAFF_ACTION));
	registerAction(new ViewProfile(this, myClassName, VIEWPROFILE_ACTION));
	registerAction(new EditProfile(this, myClassName, EDITPROFILE_ACTION));
	registerAction(new EditProfile(this, myClassName, CREATEPROFILE_ACTION));</Snippet>
<TargetFunction>FunctionCall: registerAction()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="C99BF6F7C13B6FEC09F7DFC731777E36" ruleID="95ACE7A2-BF14-4254-AFD3-22769C5FDC5F">
                            <Category>Code Correctness: Constructor Invokes Overridable Function</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>A constructor of SQLInjection in SQLInjection.java on line 160 calls a function that can be overridden by an attacker.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>SQLInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/SQLInjection.java</FilePath>
<LineStart>160</LineStart>
<Snippet>    {
	String myClassName = parseClassName(this.getClass().getName());
	registerAction(new ListStaff(this, myClassName, LISTSTAFF_ACTION));
	registerAction(new SearchStaff(this, myClassName, SEARCHSTAFF_ACTION));
	registerAction(new ViewProfile(this, myClassName, VIEWPROFILE_ACTION));</Snippet>
<TargetFunction>FunctionCall: registerAction()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="82621CFD29147E47E261EC7B1385932B" ruleID="95ACE7A2-BF14-4254-AFD3-22769C5FDC5F">
                            <Category>Code Correctness: Constructor Invokes Overridable Function</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>A constructor of RoleBasedAccessControl in RoleBasedAccessControl.java on line 165 calls a function that can be overridden by an attacker.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>RoleBasedAccessControl.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/RoleBasedAccessControl.java</FilePath>
<LineStart>165</LineStart>
<Snippet>	registerAction(new UpdateProfile(this, myClassName,
		UPDATEPROFILE_ACTION, getAction(VIEWPROFILE_ACTION)));
	registerAction(new DeleteProfile(this, myClassName,
		DELETEPROFILE_ACTION, getAction(LISTSTAFF_ACTION)));
    }</Snippet>
<TargetFunction>FunctionCall: registerAction()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="C99BF6F7C13B6FEC09F7DFC731777E3D" ruleID="95ACE7A2-BF14-4254-AFD3-22769C5FDC5F">
                            <Category>Code Correctness: Constructor Invokes Overridable Function</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>A constructor of SQLInjection in SQLInjection.java on line 171 calls a function that can be overridden by an attacker.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>SQLInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/SQLInjection.java</FilePath>
<LineStart>171</LineStart>
<Snippet>	registerAction(new Logout(this, myClassName, LOGOUT_ACTION,
		getAction(LOGIN_ACTION)));
	registerAction(new FindProfile(this, myClassName, FINDPROFILE_ACTION,
		getAction(VIEWPROFILE_ACTION)));
	registerAction(new UpdateProfile(this, myClassName,</Snippet>
<TargetFunction>FunctionCall: registerAction()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="C99BF6F7C13B6FEC09F7DFC731777E39" ruleID="95ACE7A2-BF14-4254-AFD3-22769C5FDC5F">
                            <Category>Code Correctness: Constructor Invokes Overridable Function</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>A constructor of SQLInjection in SQLInjection.java on line 163 calls a function that can be overridden by an attacker.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>SQLInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/SQLInjection.java</FilePath>
<LineStart>163</LineStart>
<Snippet>	registerAction(new SearchStaff(this, myClassName, SEARCHSTAFF_ACTION));
	registerAction(new ViewProfile(this, myClassName, VIEWPROFILE_ACTION));
	registerAction(new EditProfile(this, myClassName, EDITPROFILE_ACTION));
	registerAction(new EditProfile(this, myClassName, CREATEPROFILE_ACTION));
</Snippet>
<TargetFunction>FunctionCall: registerAction()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="D01E8C3B3A9A446059B04DB981440B26" ruleID="95ACE7A2-BF14-4254-AFD3-22769C5FDC5F">
                            <Category>Code Correctness: Constructor Invokes Overridable Function</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>A constructor of CrossSiteScripting in CrossSiteScripting.java on line 161 calls a function that can be overridden by an attacker.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>CrossSiteScripting.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/CrossSiteScripting.java</FilePath>
<LineStart>161</LineStart>
<Snippet>	registerAction(new ViewProfile(this, myClassName, VIEWPROFILE_ACTION));
	registerAction(new EditProfile(this, myClassName, EDITPROFILE_ACTION));
	registerAction(new EditProfile(this, myClassName, CREATEPROFILE_ACTION));

	// These actions are special in that they chain to other actions.</Snippet>
<TargetFunction>FunctionCall: registerAction()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="82621CFD29147E47E261EC7B13859325" ruleID="95ACE7A2-BF14-4254-AFD3-22769C5FDC5F">
                            <Category>Code Correctness: Constructor Invokes Overridable Function</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>A constructor of RoleBasedAccessControl in RoleBasedAccessControl.java on line 153 calls a function that can be overridden by an attacker.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>RoleBasedAccessControl.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/RoleBasedAccessControl.java</FilePath>
<LineStart>153</LineStart>
<Snippet>	registerAction(new SearchStaff(this, myClassName, SEARCHSTAFF_ACTION));
	registerAction(new ViewProfile(this, myClassName, VIEWPROFILE_ACTION));
	registerAction(new EditProfile(this, myClassName, EDITPROFILE_ACTION));
	registerAction(new EditProfile(this, myClassName, CREATEPROFILE_ACTION));
</Snippet>
<TargetFunction>FunctionCall: registerAction()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="C99BF6F7C13B6FEC09F7DFC731777E3F" ruleID="95ACE7A2-BF14-4254-AFD3-22769C5FDC5F">
                            <Category>Code Correctness: Constructor Invokes Overridable Function</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>A constructor of SQLInjection in SQLInjection.java on line 175 calls a function that can be overridden by an attacker.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>SQLInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/SQLInjection.java</FilePath>
<LineStart>175</LineStart>
<Snippet>	registerAction(new UpdateProfile(this, myClassName,
		UPDATEPROFILE_ACTION, getAction(VIEWPROFILE_ACTION)));
	registerAction(new DeleteProfile(this, myClassName,
		DELETEPROFILE_ACTION, getAction(LISTSTAFF_ACTION)));
    }</Snippet>
<TargetFunction>FunctionCall: registerAction()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="F8FD4793598B75E0D14B7EB3DE0C8D38" ruleID="95ACE7A2-BF14-4254-AFD3-22769C5FDC5F">
                            <Category>Code Correctness: Constructor Invokes Overridable Function</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>A constructor of ErrorScreen in ErrorScreen.java on line 92 calls a function that can be overridden by an attacker.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ErrorScreen.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ErrorScreen.java</FilePath>
<LineStart>92</LineStart>
<Snippet>	{
		this.message = msg;
		fixCurrentScreen( s );
		setup( s );
	}</Snippet>
<TargetFunction>FunctionCall: fixCurrentScreen()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="C99BF6F7C13B6FEC09F7DFC731777E3C" ruleID="95ACE7A2-BF14-4254-AFD3-22769C5FDC5F">
                            <Category>Code Correctness: Constructor Invokes Overridable Function</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>A constructor of SQLInjection in SQLInjection.java on line 169 calls a function that can be overridden by an attacker.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>SQLInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/SQLInjection.java</FilePath>
<LineStart>169</LineStart>
<Snippet>	registerAction(new Login(this, myClassName, LOGIN_ACTION,
		getAction(LISTSTAFF_ACTION)));
	registerAction(new Logout(this, myClassName, LOGOUT_ACTION,
		getAction(LOGIN_ACTION)));
	registerAction(new FindProfile(this, myClassName, FINDPROFILE_ACTION,</Snippet>
<TargetFunction>FunctionCall: registerAction()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="8725A59F95BE9B010DF3FD808D928D83" ruleID="95ACE7A2-BF14-4254-AFD3-22769C5FDC5F">
                            <Category>Code Correctness: Constructor Invokes Overridable Function</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>A constructor of SQLInjection in SQLInjection.java on line 168 calls a function that can be overridden by an attacker.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>SQLInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/SQLInjection.java</FilePath>
<LineStart>168</LineStart>
<Snippet>	// These actions are special in that they chain to other actions.
	registerAction(new Login(this, myClassName, LOGIN_ACTION,
		getAction(LISTSTAFF_ACTION)));
	registerAction(new Logout(this, myClassName, LOGOUT_ACTION,
		getAction(LOGIN_ACTION)));</Snippet>
<TargetFunction>FunctionCall: getAction()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="82621CFD29147E47E261EC7B13859326" ruleID="95ACE7A2-BF14-4254-AFD3-22769C5FDC5F">
                            <Category>Code Correctness: Constructor Invokes Overridable Function</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>A constructor of RoleBasedAccessControl in RoleBasedAccessControl.java on line 154 calls a function that can be overridden by an attacker.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>RoleBasedAccessControl.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/RoleBasedAccessControl.java</FilePath>
<LineStart>154</LineStart>
<Snippet>	registerAction(new ViewProfile(this, myClassName, VIEWPROFILE_ACTION));
	registerAction(new EditProfile(this, myClassName, EDITPROFILE_ACTION));
	registerAction(new EditProfile(this, myClassName, CREATEPROFILE_ACTION));

	// These actions are special in that they chain to other actions.</Snippet>
<TargetFunction>FunctionCall: registerAction()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="C99BF6F7C13B6FEC09F7DFC731777E3A" ruleID="95ACE7A2-BF14-4254-AFD3-22769C5FDC5F">
                            <Category>Code Correctness: Constructor Invokes Overridable Function</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>A constructor of SQLInjection in SQLInjection.java on line 164 calls a function that can be overridden by an attacker.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>SQLInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/SQLInjection.java</FilePath>
<LineStart>164</LineStart>
<Snippet>	registerAction(new ViewProfile(this, myClassName, VIEWPROFILE_ACTION));
	registerAction(new EditProfile(this, myClassName, EDITPROFILE_ACTION));
	registerAction(new EditProfile(this, myClassName, CREATEPROFILE_ACTION));

	// These actions are special in that they chain to other actions.</Snippet>
<TargetFunction>FunctionCall: registerAction()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="A138B7F310FDE910A3D1F1B11151FDAF" ruleID="95ACE7A2-BF14-4254-AFD3-22769C5FDC5F">
                            <Category>Code Correctness: Constructor Invokes Overridable Function</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>A constructor of SQLInjection in SQLInjection.java on line 170 calls a function that can be overridden by an attacker.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>SQLInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/SQLInjection.java</FilePath>
<LineStart>170</LineStart>
<Snippet>		getAction(LISTSTAFF_ACTION)));
	registerAction(new Logout(this, myClassName, LOGOUT_ACTION,
		getAction(LOGIN_ACTION)));
	registerAction(new FindProfile(this, myClassName, FINDPROFILE_ACTION,
		getAction(VIEWPROFILE_ACTION)));</Snippet>
<TargetFunction>FunctionCall: getAction()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="1FDE9E3D6EDDBB6E6F626A695AFDE1A2" ruleID="95ACE7A2-BF14-4254-AFD3-22769C5FDC5F">
                            <Category>Code Correctness: Constructor Invokes Overridable Function</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>A constructor of CrossSiteScripting in CrossSiteScripting.java on line 173 calls a function that can be overridden by an attacker.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>CrossSiteScripting.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/CrossSiteScripting.java</FilePath>
<LineStart>173</LineStart>
<Snippet>		UPDATEPROFILE_ACTION, getAction(VIEWPROFILE_ACTION)));
	registerAction(new DeleteProfile(this, myClassName,
		DELETEPROFILE_ACTION, getAction(LISTSTAFF_ACTION)));
    }
</Snippet>
<TargetFunction>FunctionCall: getAction()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="D74D17E5EB5B12FC0EA3717D996A25F8" ruleID="95ACE7A2-BF14-4254-AFD3-22769C5FDC5F">
                            <Category>Code Correctness: Constructor Invokes Overridable Function</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>A constructor of RoleBasedAccessControl in RoleBasedAccessControl.java on line 160 calls a function that can be overridden by an attacker.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>RoleBasedAccessControl.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/RoleBasedAccessControl.java</FilePath>
<LineStart>160</LineStart>
<Snippet>		getAction(LISTSTAFF_ACTION)));
	registerAction(new Logout(this, myClassName, LOGOUT_ACTION,
		getAction(LOGIN_ACTION)));
	registerAction(new FindProfile(this, myClassName, FINDPROFILE_ACTION,
		getAction(VIEWPROFILE_ACTION)));</Snippet>
<TargetFunction>FunctionCall: getAction()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="B8B6C94D90ECF3F100474A005A43A0ED" ruleID="95ACE7A2-BF14-4254-AFD3-22769C5FDC5F">
                            <Category>Code Correctness: Constructor Invokes Overridable Function</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>A constructor of ErrorScreen in ErrorScreen.java on line 78 calls a function that can be overridden by an attacker.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ErrorScreen.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ErrorScreen.java</FilePath>
<LineStart>78</LineStart>
<Snippet>	{
		this.error = t;
		fixCurrentScreen( s );
		setup( s );
	}</Snippet>
<TargetFunction>FunctionCall: fixCurrentScreen()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="C99BF6F7C13B6FEC09F7DFC731777E37" ruleID="95ACE7A2-BF14-4254-AFD3-22769C5FDC5F">
                            <Category>Code Correctness: Constructor Invokes Overridable Function</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>A constructor of SQLInjection in SQLInjection.java on line 161 calls a function that can be overridden by an attacker.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>SQLInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/SQLInjection.java</FilePath>
<LineStart>161</LineStart>
<Snippet>	String myClassName = parseClassName(this.getClass().getName());
	registerAction(new ListStaff(this, myClassName, LISTSTAFF_ACTION));
	registerAction(new SearchStaff(this, myClassName, SEARCHSTAFF_ACTION));
	registerAction(new ViewProfile(this, myClassName, VIEWPROFILE_ACTION));
	registerAction(new EditProfile(this, myClassName, EDITPROFILE_ACTION));</Snippet>
<TargetFunction>FunctionCall: registerAction()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="82621CFD29147E47E261EC7B13859324" ruleID="95ACE7A2-BF14-4254-AFD3-22769C5FDC5F">
                            <Category>Code Correctness: Constructor Invokes Overridable Function</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>A constructor of RoleBasedAccessControl in RoleBasedAccessControl.java on line 152 calls a function that can be overridden by an attacker.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>RoleBasedAccessControl.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/RoleBasedAccessControl.java</FilePath>
<LineStart>152</LineStart>
<Snippet>	registerAction(new ListStaff(this, myClassName, LISTSTAFF_ACTION));
	registerAction(new SearchStaff(this, myClassName, SEARCHSTAFF_ACTION));
	registerAction(new ViewProfile(this, myClassName, VIEWPROFILE_ACTION));
	registerAction(new EditProfile(this, myClassName, EDITPROFILE_ACTION));
	registerAction(new EditProfile(this, myClassName, CREATEPROFILE_ACTION));</Snippet>
<TargetFunction>FunctionCall: registerAction()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="A56A07CF6FDD4FAD1BDF963C5B413580" ruleID="95ACE7A2-BF14-4254-AFD3-22769C5FDC5F">
                            <Category>Code Correctness: Constructor Invokes Overridable Function</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>A constructor of RoleBasedAccessControl in RoleBasedAccessControl.java on line 164 calls a function that can be overridden by an attacker.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>RoleBasedAccessControl.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/RoleBasedAccessControl.java</FilePath>
<LineStart>164</LineStart>
<Snippet>		getAction(VIEWPROFILE_ACTION)));
	registerAction(new UpdateProfile(this, myClassName,
		UPDATEPROFILE_ACTION, getAction(VIEWPROFILE_ACTION)));
	registerAction(new DeleteProfile(this, myClassName,
		DELETEPROFILE_ACTION, getAction(LISTSTAFF_ACTION)));</Snippet>
<TargetFunction>FunctionCall: getAction()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="82621CFD29147E47E261EC7B13859329" ruleID="95ACE7A2-BF14-4254-AFD3-22769C5FDC5F">
                            <Category>Code Correctness: Constructor Invokes Overridable Function</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>A constructor of RoleBasedAccessControl in RoleBasedAccessControl.java on line 161 calls a function that can be overridden by an attacker.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>RoleBasedAccessControl.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/RoleBasedAccessControl.java</FilePath>
<LineStart>161</LineStart>
<Snippet>	registerAction(new Logout(this, myClassName, LOGOUT_ACTION,
		getAction(LOGIN_ACTION)));
	registerAction(new FindProfile(this, myClassName, FINDPROFILE_ACTION,
		getAction(VIEWPROFILE_ACTION)));
	registerAction(new UpdateProfile(this, myClassName,</Snippet>
<TargetFunction>FunctionCall: registerAction()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="D01E8C3B3A9A446059B04DB981440B2B" ruleID="95ACE7A2-BF14-4254-AFD3-22769C5FDC5F">
                            <Category>Code Correctness: Constructor Invokes Overridable Function</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>A constructor of CrossSiteScripting in CrossSiteScripting.java on line 172 calls a function that can be overridden by an attacker.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>CrossSiteScripting.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/CrossSiteScripting.java</FilePath>
<LineStart>172</LineStart>
<Snippet>	registerAction(new UpdateProfile(this, myClassName,
		UPDATEPROFILE_ACTION, getAction(VIEWPROFILE_ACTION)));
	registerAction(new DeleteProfile(this, myClassName,
		DELETEPROFILE_ACTION, getAction(LISTSTAFF_ACTION)));
    }</Snippet>
<TargetFunction>FunctionCall: registerAction()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="94BAB3D8E34131F20FBF0CD9E44EE1E5" ruleID="95ACE7A2-BF14-4254-AFD3-22769C5FDC5F">
                            <Category>Code Correctness: Constructor Invokes Overridable Function</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>A constructor of CrossSiteScripting in CrossSiteScripting.java on line 167 calls a function that can be overridden by an attacker.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>CrossSiteScripting.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/CrossSiteScripting.java</FilePath>
<LineStart>167</LineStart>
<Snippet>		getAction(LISTSTAFF_ACTION)));
	registerAction(new Logout(this, myClassName, LOGOUT_ACTION,
		getAction(LOGIN_ACTION)));
	registerAction(new FindProfile(this, myClassName, FINDPROFILE_ACTION,
		getAction(VIEWPROFILE_ACTION)));</Snippet>
<TargetFunction>FunctionCall: getAction()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="82621CFD29147E47E261EC7B13859323" ruleID="95ACE7A2-BF14-4254-AFD3-22769C5FDC5F">
                            <Category>Code Correctness: Constructor Invokes Overridable Function</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>A constructor of RoleBasedAccessControl in RoleBasedAccessControl.java on line 151 calls a function that can be overridden by an attacker.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>RoleBasedAccessControl.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/RoleBasedAccessControl.java</FilePath>
<LineStart>151</LineStart>
<Snippet>	String myClassName = parseClassName(this.getClass().getName());
	registerAction(new ListStaff(this, myClassName, LISTSTAFF_ACTION));
	registerAction(new SearchStaff(this, myClassName, SEARCHSTAFF_ACTION));
	registerAction(new ViewProfile(this, myClassName, VIEWPROFILE_ACTION));
	registerAction(new EditProfile(this, myClassName, EDITPROFILE_ACTION));</Snippet>
<TargetFunction>FunctionCall: registerAction()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="D01E8C3B3A9A446059B04DB981440B28" ruleID="95ACE7A2-BF14-4254-AFD3-22769C5FDC5F">
                            <Category>Code Correctness: Constructor Invokes Overridable Function</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>A constructor of CrossSiteScripting in CrossSiteScripting.java on line 166 calls a function that can be overridden by an attacker.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>CrossSiteScripting.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/CrossSiteScripting.java</FilePath>
<LineStart>166</LineStart>
<Snippet>	registerAction(new Login(this, myClassName, LOGIN_ACTION,
		getAction(LISTSTAFF_ACTION)));
	registerAction(new Logout(this, myClassName, LOGOUT_ACTION,
		getAction(LOGIN_ACTION)));
	registerAction(new FindProfile(this, myClassName, FINDPROFILE_ACTION,</Snippet>
<TargetFunction>FunctionCall: registerAction()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="D01E8C3B3A9A446059B04DB981440B2A" ruleID="95ACE7A2-BF14-4254-AFD3-22769C5FDC5F">
                            <Category>Code Correctness: Constructor Invokes Overridable Function</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>A constructor of CrossSiteScripting in CrossSiteScripting.java on line 170 calls a function that can be overridden by an attacker.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>CrossSiteScripting.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/CrossSiteScripting.java</FilePath>
<LineStart>170</LineStart>
<Snippet>	registerAction(new FindProfile(this, myClassName, FINDPROFILE_ACTION,
		getAction(VIEWPROFILE_ACTION)));
	registerAction(new UpdateProfile(this, myClassName,
		UPDATEPROFILE_ACTION, getAction(VIEWPROFILE_ACTION)));
	registerAction(new DeleteProfile(this, myClassName,</Snippet>
<TargetFunction>FunctionCall: registerAction()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="3B3F9A4D12136F630117D7F1BF2CF95C" ruleID="95ACE7A2-BF14-4254-AFD3-22769C5FDC5F">
                            <Category>Code Correctness: Constructor Invokes Overridable Function</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>A constructor of ErrorScreen in ErrorScreen.java on line 93 calls a function that can be overridden by an attacker.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ErrorScreen.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ErrorScreen.java</FilePath>
<LineStart>93</LineStart>
<Snippet>		this.message = msg;
		fixCurrentScreen( s );
		setup( s );
	}
</Snippet>
<TargetFunction>FunctionCall: setup()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="BA1BCCA52750408653E16ED8DD1555C1" ruleID="95ACE7A2-BF14-4254-AFD3-22769C5FDC5F">
                            <Category>Code Correctness: Constructor Invokes Overridable Function</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>A constructor of ErrorScreen in ErrorScreen.java on line 79 calls a function that can be overridden by an attacker.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ErrorScreen.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ErrorScreen.java</FilePath>
<LineStart>79</LineStart>
<Snippet>		this.error = t;
		fixCurrentScreen( s );
		setup( s );
	}
</Snippet>
<TargetFunction>FunctionCall: setup()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="07F2625B9C5895A77FB7CBB5BCDA7772" ruleID="95ACE7A2-BF14-4254-AFD3-22769C5FDC5F">
                            <Category>Code Correctness: Constructor Invokes Overridable Function</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>A constructor of SQLInjection in SQLInjection.java on line 172 calls a function that can be overridden by an attacker.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>SQLInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/SQLInjection.java</FilePath>
<LineStart>172</LineStart>
<Snippet>		getAction(LOGIN_ACTION)));
	registerAction(new FindProfile(this, myClassName, FINDPROFILE_ACTION,
		getAction(VIEWPROFILE_ACTION)));
	registerAction(new UpdateProfile(this, myClassName,
		UPDATEPROFILE_ACTION, getAction(VIEWPROFILE_ACTION)));</Snippet>
<TargetFunction>FunctionCall: getAction()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="D0C33A4795D7223ED6321112B01A9032" ruleID="95ACE7A2-BF14-4254-AFD3-22769C5FDC5F">
                            <Category>Code Correctness: Constructor Invokes Overridable Function</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>A constructor of RoleBasedAccessControl in RoleBasedAccessControl.java on line 166 calls a function that can be overridden by an attacker.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>RoleBasedAccessControl.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/RoleBasedAccessControl.java</FilePath>
<LineStart>166</LineStart>
<Snippet>		UPDATEPROFILE_ACTION, getAction(VIEWPROFILE_ACTION)));
	registerAction(new DeleteProfile(this, myClassName,
		DELETEPROFILE_ACTION, getAction(LISTSTAFF_ACTION)));
    }
</Snippet>
<TargetFunction>FunctionCall: getAction()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="D01E8C3B3A9A446059B04DB981440B23" ruleID="95ACE7A2-BF14-4254-AFD3-22769C5FDC5F">
                            <Category>Code Correctness: Constructor Invokes Overridable Function</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>A constructor of CrossSiteScripting in CrossSiteScripting.java on line 158 calls a function that can be overridden by an attacker.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>CrossSiteScripting.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/CrossSiteScripting.java</FilePath>
<LineStart>158</LineStart>
<Snippet>	String myClassName = parseClassName(this.getClass().getName());
	registerAction(new ListStaff(this, myClassName, LISTSTAFF_ACTION));
	registerAction(new SearchStaff(this, myClassName, SEARCHSTAFF_ACTION));
	registerAction(new ViewProfile(this, myClassName, VIEWPROFILE_ACTION));
	registerAction(new EditProfile(this, myClassName, EDITPROFILE_ACTION));</Snippet>
<TargetFunction>FunctionCall: registerAction()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="D01E8C3B3A9A446059B04DB981440B29" ruleID="95ACE7A2-BF14-4254-AFD3-22769C5FDC5F">
                            <Category>Code Correctness: Constructor Invokes Overridable Function</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>A constructor of CrossSiteScripting in CrossSiteScripting.java on line 168 calls a function that can be overridden by an attacker.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>CrossSiteScripting.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/CrossSiteScripting.java</FilePath>
<LineStart>168</LineStart>
<Snippet>	registerAction(new Logout(this, myClassName, LOGOUT_ACTION,
		getAction(LOGIN_ACTION)));
	registerAction(new FindProfile(this, myClassName, FINDPROFILE_ACTION,
		getAction(VIEWPROFILE_ACTION)));
	registerAction(new UpdateProfile(this, myClassName,</Snippet>
<TargetFunction>FunctionCall: registerAction()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="07F2625B9C5895A77FB7CBB5BCDA7773" ruleID="95ACE7A2-BF14-4254-AFD3-22769C5FDC5F">
                            <Category>Code Correctness: Constructor Invokes Overridable Function</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>A constructor of SQLInjection in SQLInjection.java on line 174 calls a function that can be overridden by an attacker.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>SQLInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/SQLInjection.java</FilePath>
<LineStart>174</LineStart>
<Snippet>		getAction(VIEWPROFILE_ACTION)));
	registerAction(new UpdateProfile(this, myClassName,
		UPDATEPROFILE_ACTION, getAction(VIEWPROFILE_ACTION)));
	registerAction(new DeleteProfile(this, myClassName,
		DELETEPROFILE_ACTION, getAction(LISTSTAFF_ACTION)));</Snippet>
<TargetFunction>FunctionCall: getAction()</TargetFunction>
                            </Primary>
                        </Issue>
                    </GroupingSection>
                    <GroupingSection count="42">
                        <groupTitle>Privacy Violation</groupTitle>
                        <MajorAttributeSummary>
                            <MetaInfo>
<Name>Abstract</Name>
<Value>The method ParameterNotFoundException() in ParameterNotFoundException.java mishandles confidential information, which can compromise user privacy and is often illegal.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Explanation</Name>
<Value>Privacy violations occur when:

1. Private user information enters the program.

2. The data is written to an external location, such as the console, file system, or network.


Example 1: The following code contains a logging statement that tracks the records added to a database by storing the contents in a log file.


pass = getPassword();
...
dbmsLog.println(id+":"+pass+":"+type+":"+tstamp);


The code in Example 1 logs a plain text password to the file system. Although many developers trust the file system as a safe storage location for data, it should not be trusted implicitly, particularly when privacy is a concern.

Privacy is one of the biggest concerns in the mobile world for a couple of reasons. One of them is a much higher chance of device loss. The other has to do with inter-process communication between mobile applications. With mobile platforms, applications are downloaded from various sources and are run alongside each other on the same device. The likelihood of running a piece of malware next to a banking application is high, which is why application authors need to be careful about what information they include in messages addressed to other applications running on the device. Sensitive information should never be part of inter-process communication between mobile applications.

Example 2: The following code reads username and password for a given site from an Android WebView store and broadcasts them to all the registered receivers.

...
webview.setWebViewClient(new WebViewClient() {
  public void onReceivedHttpAuthRequest(WebView view,
        HttpAuthHandler handler, String host, String realm) {
    String[] credentials = view.getHttpAuthUsernamePassword(host, realm);
    String username = credentials[0];
    String password = credentials[1];
    Intent i = new Intent();
    i.setAction("SEND_CREDENTIALS");
    i.putExtra("username", username);
    i.putExtra("password", password);
    view.getContext().sendBroadcast(i);
  }
});
...


This example demonstrates several problems. First of all, by default, WebView credentials are stored in plain text and are not hashed. If a user has a rooted device (or uses an emulator), they can read stored passwords for given sites. Second, plain text credentials are broadcast to all the registered receivers, which means that any receiver registered to listen to intents with the SEND_CREDENTIALS action will receive the message. The broadcast is not even protected with a permission to limit the number of recipients, although in this case we do not recommend using permissions as a fix.

Private data can enter a program in a variety of ways:

- Directly from the user in the form of a password or personal information

- Accessed from a database or other data store by the application

- Indirectly from a partner or other third party

Typically, in the context of the mobile environment, this private information includes (along with passwords, SSNs, and other general personal information):

- Location

- Cell phone number

- Serial numbers and device IDs

- Network Operator information

- Voicemail information


Sometimes data that is not labeled as private can have a privacy implication in a different context. For example, student identification numbers are usually not considered private because there is no explicit and publicly-available mapping to an individual student's personal information. However, if a school generates identification numbers based on student social security numbers, then the identification numbers should be considered private.

Security and privacy concerns often seem to compete with each other. From a security perspective, you should record all important operations so that any anomalous activity can later be identified. However, when private data is involved, this practice can create risk.

Although there are many ways in which private data can be handled unsafely, a common risk stems from misplaced trust. Programmers often trust the operating environment in which a program runs, and therefore believe that it is acceptable to store private information on the file system, in the registry, or in other locally-controlled resources. However, even if access to certain resources is restricted, this does not guarantee that the individuals who do have access can be trusted. For example, in 2004, an unscrupulous employee at AOL sold approximately 92 million private customer email addresses to a spammer marketing an offshore gambling web site [1].

In response to such high-profile exploits, the collection and management of private data is becoming increasingly regulated. Depending on its location, the type of business it conducts, and the nature of any private data it handles, an organization may be required to comply with one or more of the following federal and state regulations:

- Safe Harbor Privacy Framework [3]

- Gramm-Leach Bliley Act (GLBA) [4]

- Health Insurance Portability and Accountability Act (HIPAA) [5]

- California SB-1386 [6]

Despite these regulations, privacy violations continue to occur with alarming frequency.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Recommendations</Name>
<Value>When security and privacy demands clash, privacy should usually be given the higher priority. To accomplish this and still maintain required security information, cleanse any private information before it exits the program.

To enforce good privacy management, develop and strictly adhere to internal privacy guidelines. The guidelines should specifically describe how an application should handle private data. If your organization is regulated by federal or state law, ensure that your privacy guidelines are sufficiently strenuous to meet the legal requirements. Even if your organization is not regulated, you must protect private information or risk losing customer confidence.

The best policy with respect to private data is to minimize its exposure. Applications, processes, and employees should not be granted access to any private data unless the access is required for the tasks that they are to perform. Just as the principle of least privilege dictates that no operation should be performed with more than the necessary privileges, access to private data should be restricted to the smallest possible group.

For mobile applications, make sure they never communicate any sensitive data to other applications running on the device. When private data needs to be stored, it should always be encrypted. For Android, as well as any other platform that uses SQLite database, SQLCipher is a good alternative. SQLCipher is an extension to the SQLite database that provides transparent 256-bit AES encryption of database files. Thus, credentials can be stored in an encrypted database.

Example 3: The following code demonstrates how to integrate SQLCipher into an Android application after downloading the necessary binaries, and store credentials into the database file.

import net.sqlcipher.database.SQLiteDatabase;
...
  SQLiteDatabase.loadLibs(this);
  File dbFile = getDatabasePath("credentials.db");
  dbFile.mkdirs();
  dbFile.delete();
  SQLiteDatabase db = SQLiteDatabase.openOrCreateDatabase(dbFile, "credentials", null);
  db.execSQL("create table credentials(u, p)");
  db.execSQL("insert into credentials(u, p) values(?, ?)", new Object[]{username, password});
...


Note that references to android.database.sqlite.SQLiteDatabase are substituted with those of net.sqlcipher.database.SQLiteDatabase.

To enable encryption on the WebView store, you must recompile WebKit with the sqlcipher.so library.

Example 4: The following code reads username and password for a given site from an Android WebView store and instead of broadcasting them to all the registered receivers, it only broadcasts internally so that the broadcast is only seen by other parts of the same application.

...
webview.setWebViewClient(new WebViewClient() {
  public void onReceivedHttpAuthRequest(WebView view,
        HttpAuthHandler handler, String host, String realm) {
    String[] credentials = view.getHttpAuthUsernamePassword(host, realm);
    String username = credentials[0];
    String password = credentials[1];
    Intent i = new Intent();
    i.setAction("SEND_CREDENTIALS");
    i.putExtra("username", username);
    i.putExtra("password", password);
    LocalBroadcastManager.getInstance(view.getContext()).sendBroadcast(i);
  }
});
...
</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Tips</Name>
<Value>1. As part of any thorough audit for privacy violations, ensure that custom rules are written to identify all sources of private or otherwise sensitive information entering the program. Most sources of private data cannot be identified automatically. Without custom rules, your check for privacy violations is likely to be substantially incomplete.

2. You can use the Fortify Java Annotations FortifyPassword, FortifyNotPassword, FortifyPrivate, and FortifyNotPrivate to indicate which fields and variables represent passwords and private data.

3. A number of modern web frameworks provide mechanisms to perform user input validation (including Struts and Spring MVC). To highlight the unvalidated sources of input, Fortify Secure Coding Rulepacks dynamically re-prioritize the issues Fortify Static Code Analyzer reports by lowering their probability of exploit and providing pointers to the supporting evidence whenever the framework validation mechanism is in use. We refer to this feature as Context-Sensitive Ranking. To further assist the Fortify user with the auditing process, the Fortify Software Security Research group makes available the Data Validation project template that groups the issues into folders based on the validation mechanism applied to their source of input.</Value>
                            </MetaInfo>
                            <AttributeValue>
<Name>&lt;Unaudited&gt;</Name>
<Count>42</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not an Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Reliability Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Bad Practice</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Suspicious</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Exploitable</Name>
<Count>0</Count>
                            </AttributeValue>
                        </MajorAttributeSummary>
                        <Issue iid="7BE7D98946A7E8421C7A0322CF9FA691" ruleID="10951BF4-F239-4F1D-8ADB-B12DE560960F">
                            <Category>Privacy Violation</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>The method getStringParameter() in ParameterParser.java mishandles confidential information, which can compromise user privacy and is often illegal.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>699</LineStart>
<Snippet>	else if (values[0].length() == 0)
	{
	    throw new ParameterNotFoundException(name + " was empty");
	}
	else</Snippet>
<TargetFunction>org.owasp.webgoat.session.ParameterNotFoundException.ParameterNotFoundException()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Login.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/Login.java</FilePath>
<LineStart>78</LineStart>
<Snippet>		    RoleBasedAccessControl.EMPLOYEE_ID);
	    String password = s.getParser().getStringParameter(
		    RoleBasedAccessControl.PASSWORD);

	    // Attempt authentication</Snippet>
<TargetFunction>Read org.owasp.webgoat.lessons.RoleBasedAccessControl.RoleBasedAccessControl.PASSWORD()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="1D17CC1C85766D6D159A75DB22247288" ruleID="10951BF4-F239-4F1D-8ADB-B12DE560960F">
                            <Category>Privacy Violation</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>The method getRawParameter() in ParameterParser.java mishandles confidential information, which can compromise user privacy and is often illegal.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>635</LineStart>
<Snippet>	else if (values[0].length() == 0)
	{
	    throw new ParameterNotFoundException(name + " was empty");
	}
</Snippet>
<TargetFunction>org.owasp.webgoat.session.ParameterNotFoundException.ParameterNotFoundException()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Login.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/Login.java</FilePath>
<LineStart>272</LineStart>
<Snippet>		    SQLInjection.EMPLOYEE_ID);
	    String password = s.getParser().getRawParameter(
		    SQLInjection.PASSWORD);
	    switch (getStage(s))
	    {</Snippet>
<TargetFunction>Read org.owasp.webgoat.lessons.SQLInjection.SQLInjection.PASSWORD()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="74041EDF8320D2D6B8B66462C981A066" ruleID="10951BF4-F239-4F1D-8ADB-B12DE560960F">
                            <Category>Privacy Violation</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>The method getRawParameter() in ParameterParser.java mishandles confidential information, which can compromise user privacy and is often illegal.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>635</LineStart>
<Snippet>	else if (values[0].length() == 0)
	{
	    throw new ParameterNotFoundException(name + " was empty");
	}
</Snippet>
<TargetFunction>org.owasp.webgoat.session.ParameterNotFoundException.ParameterNotFoundException()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>FailOpenAuthentication.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/FailOpenAuthentication.java</FilePath>
<LineStart>73</LineStart>
<Snippet>	    {
		username = s.getParser().getRawParameter(USERNAME);
		password = s.getParser().getRawParameter(PASSWORD);

		// if credentials are bad, send the login page</Snippet>
<TargetFunction>Read org.owasp.webgoat.lessons.WeakAuthenticationCookie.PASSWORD()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="D5C76C17C5FE92CA3F31722313D1D577" ruleID="10951BF4-F239-4F1D-8ADB-B12DE560960F">
                            <Category>Privacy Violation</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>The method ParameterNotFoundException() in ParameterNotFoundException.java mishandles confidential information, which can compromise user privacy and is often illegal.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ParameterNotFoundException.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterNotFoundException.java</FilePath>
<LineStart>54</LineStart>
<Snippet>    public ParameterNotFoundException(String s)
    {
	super(s);
    }
}</Snippet>
<TargetFunction>java.lang.Exception.Exception()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>WeakSessionID.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/WeakSessionID.java</FilePath>
<LineStart>232</LineStart>
<Snippet>	try
	{
	    password = s.getParser().getStringParameter(PASSWORD);
	}
	catch (ParameterNotFoundException pnfe)</Snippet>
<TargetFunction>Read org.owasp.webgoat.lessons.WeakSessionID.PASSWORD()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="234F492B9FA93BEC5CB835B914E130C3" ruleID="10951BF4-F239-4F1D-8ADB-B12DE560960F">
                            <Category>Privacy Violation</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>The method getStringParameter() in ParameterParser.java mishandles confidential information, which can compromise user privacy and is often illegal.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>695</LineStart>
<Snippet>	if (values == null)
	{
	    throw new ParameterNotFoundException(name + " not found");
	}
	else if (values[0].length() == 0)</Snippet>
<TargetFunction>org.owasp.webgoat.session.ParameterNotFoundException.ParameterNotFoundException()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Login.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/Login.java</FilePath>
<LineStart>78</LineStart>
<Snippet>		    RoleBasedAccessControl.EMPLOYEE_ID);
	    String password = s.getParser().getStringParameter(
		    RoleBasedAccessControl.PASSWORD);

	    // Attempt authentication</Snippet>
<TargetFunction>Read org.owasp.webgoat.lessons.RoleBasedAccessControl.RoleBasedAccessControl.PASSWORD()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="31BE6343A0D2F95463E6967907F465AE" ruleID="10951BF4-F239-4F1D-8ADB-B12DE560960F">
                            <Category>Privacy Violation</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>The method ParameterNotFoundException() in ParameterNotFoundException.java mishandles confidential information, which can compromise user privacy and is often illegal.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ParameterNotFoundException.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterNotFoundException.java</FilePath>
<LineStart>54</LineStart>
<Snippet>    public ParameterNotFoundException(String s)
    {
	super(s);
    }
}</Snippet>
<TargetFunction>java.lang.Exception.Exception()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>FailOpenAuthentication.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/FailOpenAuthentication.java</FilePath>
<LineStart>73</LineStart>
<Snippet>	    {
		username = s.getParser().getRawParameter(USERNAME);
		password = s.getParser().getRawParameter(PASSWORD);

		// if credentials are bad, send the login page</Snippet>
<TargetFunction>Read org.owasp.webgoat.lessons.WeakAuthenticationCookie.PASSWORD()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="8FD35C8F85AA13C33B6A545EEDAC5D5D" ruleID="10951BF4-F239-4F1D-8ADB-B12DE560960F">
                            <Category>Privacy Violation</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>The method ParameterNotFoundException() in ParameterNotFoundException.java mishandles confidential information, which can compromise user privacy and is often illegal.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ParameterNotFoundException.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterNotFoundException.java</FilePath>
<LineStart>54</LineStart>
<Snippet>    public ParameterNotFoundException(String s)
    {
	super(s);
    }
}</Snippet>
<TargetFunction>java.lang.Exception.Exception()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>UpdateProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/UpdateProfile.java</FilePath>
<LineStart>95</LineStart>
<Snippet>		    RoleBasedAccessControl.CCN);
	    int ccnLimit = s.getParser().getIntParameter(
		    RoleBasedAccessControl.CCN_LIMIT);
	    String disciplinaryActionDate = s.getParser().getStringParameter(
		    RoleBasedAccessControl.DISCIPLINARY_DATE);</Snippet>
<TargetFunction>Read org.owasp.webgoat.lessons.RoleBasedAccessControl.RoleBasedAccessControl.CCN_LIMIT()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="0377CACDE1F4A610BEF25E9911551213" ruleID="10951BF4-F239-4F1D-8ADB-B12DE560960F">
                            <Category>Privacy Violation</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>The method getRawParameter() in ParameterParser.java mishandles confidential information, which can compromise user privacy and is often illegal.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>631</LineStart>
<Snippet>	if (values == null)
	{
	    throw new ParameterNotFoundException(name + " not found");
	}
	else if (values[0].length() == 0)</Snippet>
<TargetFunction>org.owasp.webgoat.session.ParameterNotFoundException.ParameterNotFoundException()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Login.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/Login.java</FilePath>
<LineStart>272</LineStart>
<Snippet>		    SQLInjection.EMPLOYEE_ID);
	    String password = s.getParser().getRawParameter(
		    SQLInjection.PASSWORD);
	    switch (getStage(s))
	    {</Snippet>
<TargetFunction>Read org.owasp.webgoat.lessons.SQLInjection.SQLInjection.PASSWORD()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="3E10B89B5E2952BF0112AAF5A6B60C5C" ruleID="10951BF4-F239-4F1D-8ADB-B12DE560960F">
                            <Category>Privacy Violation</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>The method getStringParameter() in ParameterParser.java mishandles confidential information, which can compromise user privacy and is often illegal.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>695</LineStart>
<Snippet>	if (values == null)
	{
	    throw new ParameterNotFoundException(name + " not found");
	}
	else if (values[0].length() == 0)</Snippet>
<TargetFunction>org.owasp.webgoat.session.ParameterNotFoundException.ParameterNotFoundException()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>WeakSessionID.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/WeakSessionID.java</FilePath>
<LineStart>232</LineStart>
<Snippet>	try
	{
	    password = s.getParser().getStringParameter(PASSWORD);
	}
	catch (ParameterNotFoundException pnfe)</Snippet>
<TargetFunction>Read org.owasp.webgoat.lessons.WeakSessionID.PASSWORD()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="089FB0E4C27C4DFE845FE47E11FFE34F" ruleID="10951BF4-F239-4F1D-8ADB-B12DE560960F">
                            <Category>Privacy Violation</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>The method getStringParameter() in ParameterParser.java mishandles confidential information, which can compromise user privacy and is often illegal.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>699</LineStart>
<Snippet>	else if (values[0].length() == 0)
	{
	    throw new ParameterNotFoundException(name + " was empty");
	}
	else</Snippet>
<TargetFunction>org.owasp.webgoat.session.ParameterNotFoundException.ParameterNotFoundException()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>UpdateProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/UpdateProfile.java</FilePath>
<LineStart>93</LineStart>
<Snippet>		    RoleBasedAccessControl.SALARY);
	    String ccn = s.getParser().getStringParameter(
		    RoleBasedAccessControl.CCN);
	    int ccnLimit = s.getParser().getIntParameter(
		    RoleBasedAccessControl.CCN_LIMIT);</Snippet>
<TargetFunction>Read org.owasp.webgoat.lessons.RoleBasedAccessControl.RoleBasedAccessControl.CCN()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="CCF6FB905F08BCDAE1AD9CC2C1DAD709" ruleID="10951BF4-F239-4F1D-8ADB-B12DE560960F">
                            <Category>Privacy Violation</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>The method getRawParameter() in ParameterParser.java mishandles confidential information, which can compromise user privacy and is often illegal.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>631</LineStart>
<Snippet>	if (values == null)
	{
	    throw new ParameterNotFoundException(name + " not found");
	}
	else if (values[0].length() == 0)</Snippet>
<TargetFunction>org.owasp.webgoat.session.ParameterNotFoundException.ParameterNotFoundException()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>DOS_Login.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/DOS_Login.java</FilePath>
<LineStart>89</LineStart>
<Snippet>	    String password = "";
	    username = s.getParser().getRawParameter(USERNAME);
	    password = s.getParser().getRawParameter(PASSWORD);

	    // don;t allow user name from other lessons.  it would be too simple.</Snippet>
<TargetFunction>Read org.owasp.webgoat.lessons.DOS_Login.PASSWORD()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="CB29631933C8B9549C2F18F0A8BA7440" ruleID="10951BF4-F239-4F1D-8ADB-B12DE560960F">
                            <Category>Privacy Violation</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>The method getStringParameter() in ParameterParser.java mishandles confidential information, which can compromise user privacy and is often illegal.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>695</LineStart>
<Snippet>	if (values == null)
	{
	    throw new ParameterNotFoundException(name + " not found");
	}
	else if (values[0].length() == 0)</Snippet>
<TargetFunction>org.owasp.webgoat.session.ParameterNotFoundException.ParameterNotFoundException()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Challenge2Screen.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/Challenge2Screen.java</FilePath>
<LineStart>151</LineStart>
<Snippet>
	String username = s.getParser().getStringParameter(USERNAME, "");
	String password = s.getParser().getStringParameter(PASSWORD, "");

	if (username.equals(user) &amp;&amp; password.equals(pass))</Snippet>
<TargetFunction>Read org.owasp.webgoat.lessons.Challenge2Screen.PASSWORD()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="6A53F0B8A0211B3999F8E0DFAA5FA0C2" ruleID="10951BF4-F239-4F1D-8ADB-B12DE560960F">
                            <Category>Privacy Violation</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>The method getStringParameter() in ParameterParser.java mishandles confidential information, which can compromise user privacy and is often illegal.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>699</LineStart>
<Snippet>	else if (values[0].length() == 0)
	{
	    throw new ParameterNotFoundException(name + " was empty");
	}
	else</Snippet>
<TargetFunction>org.owasp.webgoat.session.ParameterNotFoundException.ParameterNotFoundException()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Challenge2Screen.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/Challenge2Screen.java</FilePath>
<LineStart>151</LineStart>
<Snippet>
	String username = s.getParser().getStringParameter(USERNAME, "");
	String password = s.getParser().getStringParameter(PASSWORD, "");

	if (username.equals(user) &amp;&amp; password.equals(pass))</Snippet>
<TargetFunction>Read org.owasp.webgoat.lessons.Challenge2Screen.PASSWORD()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="3E0608F1FDEE4BB9F5EBA611961CA367" ruleID="10951BF4-F239-4F1D-8ADB-B12DE560960F">
                            <Category>Privacy Violation</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>The method getStringParameter() in ParameterParser.java mishandles confidential information, which can compromise user privacy and is often illegal.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>695</LineStart>
<Snippet>	if (values == null)
	{
	    throw new ParameterNotFoundException(name + " not found");
	}
	else if (values[0].length() == 0)</Snippet>
<TargetFunction>org.owasp.webgoat.session.ParameterNotFoundException.ParameterNotFoundException()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>UpdateProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/UpdateProfile.java</FilePath>
<LineStart>77</LineStart>
<Snippet>		    RoleBasedAccessControl.LAST_NAME);
	    String ssn = s.getParser().getStringParameter(
		    RoleBasedAccessControl.SSN);
	    String title = s.getParser().getStringParameter(
		    RoleBasedAccessControl.TITLE);</Snippet>
<TargetFunction>Read org.owasp.webgoat.lessons.RoleBasedAccessControl.RoleBasedAccessControl.SSN()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="BA702E0AA648996AE8C3D20995234418" ruleID="10951BF4-F239-4F1D-8ADB-B12DE560960F">
                            <Category>Privacy Violation</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>The method getStringParameter() in ParameterParser.java mishandles confidential information, which can compromise user privacy and is often illegal.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>699</LineStart>
<Snippet>	else if (values[0].length() == 0)
	{
	    throw new ParameterNotFoundException(name + " was empty");
	}
	else</Snippet>
<TargetFunction>org.owasp.webgoat.session.ParameterNotFoundException.ParameterNotFoundException()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>WeakAuthenticationCookie.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/WeakAuthenticationCookie.java</FilePath>
<LineStart>127</LineStart>
<Snippet>    {
	String username = s.getParser().getStringParameter(USERNAME, "");
	String password = s.getParser().getStringParameter(PASSWORD, "");

	if ((username.length() &gt; 0) &amp;&amp; (password.length() &gt; 0))</Snippet>
<TargetFunction>Read org.owasp.webgoat.lessons.WeakAuthenticationCookie.PASSWORD()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="4D6F5C54F83CEC6C7689E5E34BA02A74" ruleID="10951BF4-F239-4F1D-8ADB-B12DE560960F">
                            <Category>Privacy Violation</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>The method ParameterNotFoundException() in ParameterNotFoundException.java mishandles confidential information, which can compromise user privacy and is often illegal.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ParameterNotFoundException.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterNotFoundException.java</FilePath>
<LineStart>54</LineStart>
<Snippet>    public ParameterNotFoundException(String s)
    {
	super(s);
    }
}</Snippet>
<TargetFunction>java.lang.Exception.Exception()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Login.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/Login.java</FilePath>
<LineStart>272</LineStart>
<Snippet>		    SQLInjection.EMPLOYEE_ID);
	    String password = s.getParser().getRawParameter(
		    SQLInjection.PASSWORD);
	    switch (getStage(s))
	    {</Snippet>
<TargetFunction>Read org.owasp.webgoat.lessons.SQLInjection.SQLInjection.PASSWORD()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="767FC201B2B8CC97B04C92814C3D8820" ruleID="10951BF4-F239-4F1D-8ADB-B12DE560960F">
                            <Category>Privacy Violation</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>The method ParameterNotFoundException() in ParameterNotFoundException.java mishandles confidential information, which can compromise user privacy and is often illegal.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ParameterNotFoundException.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterNotFoundException.java</FilePath>
<LineStart>54</LineStart>
<Snippet>    public ParameterNotFoundException(String s)
    {
	super(s);
    }
}</Snippet>
<TargetFunction>java.lang.Exception.Exception()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Login.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/Login.java</FilePath>
<LineStart>78</LineStart>
<Snippet>		    RoleBasedAccessControl.EMPLOYEE_ID);
	    String password = s.getParser().getStringParameter(
		    RoleBasedAccessControl.PASSWORD);

	    // Attempt authentication</Snippet>
<TargetFunction>Read org.owasp.webgoat.lessons.RoleBasedAccessControl.RoleBasedAccessControl.PASSWORD()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="57FA7046BC7D07B612A460B6E68E9B03" ruleID="10951BF4-F239-4F1D-8ADB-B12DE560960F">
                            <Category>Privacy Violation</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>The method getRawParameter() in ParameterParser.java mishandles confidential information, which can compromise user privacy and is often illegal.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>631</LineStart>
<Snippet>	if (values == null)
	{
	    throw new ParameterNotFoundException(name + " not found");
	}
	else if (values[0].length() == 0)</Snippet>
<TargetFunction>org.owasp.webgoat.session.ParameterNotFoundException.ParameterNotFoundException()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>WsSAXInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/WsSAXInjection.java</FilePath>
<LineStart>149</LineStart>
<Snippet>	    ec.addElement(makeInputLine(s));

	    password = s.getParser().getRawParameter(PASSWORD, null);

	    PRE pre = new PRE();</Snippet>
<TargetFunction>Read org.owasp.webgoat.lessons.WsSAXInjection.PASSWORD()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="486B21E65ED03BDE62D69C141662A3CD" ruleID="10951BF4-F239-4F1D-8ADB-B12DE560960F">
                            <Category>Privacy Violation</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>The method getStringParameter() in ParameterParser.java mishandles confidential information, which can compromise user privacy and is often illegal.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>699</LineStart>
<Snippet>	else if (values[0].length() == 0)
	{
	    throw new ParameterNotFoundException(name + " was empty");
	}
	else</Snippet>
<TargetFunction>org.owasp.webgoat.session.ParameterNotFoundException.ParameterNotFoundException()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>UpdateProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/UpdateProfile.java</FilePath>
<LineStart>77</LineStart>
<Snippet>		    RoleBasedAccessControl.LAST_NAME);
	    String ssn = s.getParser().getStringParameter(
		    RoleBasedAccessControl.SSN);
	    String title = s.getParser().getStringParameter(
		    RoleBasedAccessControl.TITLE);</Snippet>
<TargetFunction>Read org.owasp.webgoat.lessons.RoleBasedAccessControl.RoleBasedAccessControl.SSN()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="6C721EF2E9704C4C94BFC11574CF04AD" ruleID="10951BF4-F239-4F1D-8ADB-B12DE560960F">
                            <Category>Privacy Violation</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>The method ParameterNotFoundException() in ParameterNotFoundException.java mishandles confidential information, which can compromise user privacy and is often illegal.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ParameterNotFoundException.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterNotFoundException.java</FilePath>
<LineStart>54</LineStart>
<Snippet>    public ParameterNotFoundException(String s)
    {
	super(s);
    }
}</Snippet>
<TargetFunction>java.lang.Exception.Exception()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Challenge2Screen.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/Challenge2Screen.java</FilePath>
<LineStart>151</LineStart>
<Snippet>
	String username = s.getParser().getStringParameter(USERNAME, "");
	String password = s.getParser().getStringParameter(PASSWORD, "");

	if (username.equals(user) &amp;&amp; password.equals(pass))</Snippet>
<TargetFunction>Read org.owasp.webgoat.lessons.Challenge2Screen.PASSWORD()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="53B8608CDA8C228F8DC4AECB84BBEEBD" ruleID="10951BF4-F239-4F1D-8ADB-B12DE560960F">
                            <Category>Privacy Violation</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>The method getStringParameter() in ParameterParser.java mishandles confidential information, which can compromise user privacy and is often illegal.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>699</LineStart>
<Snippet>	else if (values[0].length() == 0)
	{
	    throw new ParameterNotFoundException(name + " was empty");
	}
	else</Snippet>
<TargetFunction>org.owasp.webgoat.session.ParameterNotFoundException.ParameterNotFoundException()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>UpdateProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/UpdateProfile.java</FilePath>
<LineStart>95</LineStart>
<Snippet>		    RoleBasedAccessControl.CCN);
	    int ccnLimit = s.getParser().getIntParameter(
		    RoleBasedAccessControl.CCN_LIMIT);
	    String disciplinaryActionDate = s.getParser().getStringParameter(
		    RoleBasedAccessControl.DISCIPLINARY_DATE);</Snippet>
<TargetFunction>Read org.owasp.webgoat.lessons.RoleBasedAccessControl.RoleBasedAccessControl.CCN_LIMIT()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="4C152E7D555F91D3A6EAFEC6063DFA6B" ruleID="10951BF4-F239-4F1D-8ADB-B12DE560960F">
                            <Category>Privacy Violation</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>The method getRawParameter() in ParameterParser.java mishandles confidential information, which can compromise user privacy and is often illegal.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>631</LineStart>
<Snippet>	if (values == null)
	{
	    throw new ParameterNotFoundException(name + " not found");
	}
	else if (values[0].length() == 0)</Snippet>
<TargetFunction>org.owasp.webgoat.session.ParameterNotFoundException.ParameterNotFoundException()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>FailOpenAuthentication.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/FailOpenAuthentication.java</FilePath>
<LineStart>73</LineStart>
<Snippet>	    {
		username = s.getParser().getRawParameter(USERNAME);
		password = s.getParser().getRawParameter(PASSWORD);

		// if credentials are bad, send the login page</Snippet>
<TargetFunction>Read org.owasp.webgoat.lessons.WeakAuthenticationCookie.PASSWORD()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="BED13FB389450D63713AE49D474E2840" ruleID="10951BF4-F239-4F1D-8ADB-B12DE560960F">
                            <Category>Privacy Violation</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>The method getRawParameter() in ParameterParser.java mishandles confidential information, which can compromise user privacy and is often illegal.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>635</LineStart>
<Snippet>	else if (values[0].length() == 0)
	{
	    throw new ParameterNotFoundException(name + " was empty");
	}
</Snippet>
<TargetFunction>org.owasp.webgoat.session.ParameterNotFoundException.ParameterNotFoundException()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>WsSAXInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/WsSAXInjection.java</FilePath>
<LineStart>149</LineStart>
<Snippet>	    ec.addElement(makeInputLine(s));

	    password = s.getParser().getRawParameter(PASSWORD, null);

	    PRE pre = new PRE();</Snippet>
<TargetFunction>Read org.owasp.webgoat.lessons.WsSAXInjection.PASSWORD()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="13AE22C88661F95BF75681BE4BF98F12" ruleID="10951BF4-F239-4F1D-8ADB-B12DE560960F">
                            <Category>Privacy Violation</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>The method ParameterNotFoundException() in ParameterNotFoundException.java mishandles confidential information, which can compromise user privacy and is often illegal.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ParameterNotFoundException.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterNotFoundException.java</FilePath>
<LineStart>54</LineStart>
<Snippet>    public ParameterNotFoundException(String s)
    {
	super(s);
    }
}</Snippet>
<TargetFunction>java.lang.Exception.Exception()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>UpdateProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/UpdateProfile.java</FilePath>
<LineStart>77</LineStart>
<Snippet>		    RoleBasedAccessControl.LAST_NAME);
	    String ssn = s.getParser().getStringParameter(
		    RoleBasedAccessControl.SSN);
	    String title = s.getParser().getStringParameter(
		    RoleBasedAccessControl.TITLE);</Snippet>
<TargetFunction>Read org.owasp.webgoat.lessons.RoleBasedAccessControl.RoleBasedAccessControl.SSN()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="50934B47CAF8C39533054827417ABCDA" ruleID="10951BF4-F239-4F1D-8ADB-B12DE560960F">
                            <Category>Privacy Violation</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>The method getRawParameter() in ParameterParser.java mishandles confidential information, which can compromise user privacy and is often illegal.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>631</LineStart>
<Snippet>	if (values == null)
	{
	    throw new ParameterNotFoundException(name + " not found");
	}
	else if (values[0].length() == 0)</Snippet>
<TargetFunction>org.owasp.webgoat.session.ParameterNotFoundException.ParameterNotFoundException()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>HtmlClues.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/HtmlClues.java</FilePath>
<LineStart>80</LineStart>
<Snippet>    {
	String username = s.getParser().getRawParameter(USERNAME, "");
	String password = s.getParser().getRawParameter(PASSWORD, "");

	//&lt;START_OMIT_SOURCE&gt;</Snippet>
<TargetFunction>Read org.owasp.webgoat.lessons.HtmlClues.PASSWORD()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="14A1B567247BF568D0D344ACA37916A4" ruleID="10951BF4-F239-4F1D-8ADB-B12DE560960F">
                            <Category>Privacy Violation</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>The method getRawParameter() in ParameterParser.java mishandles confidential information, which can compromise user privacy and is often illegal.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>635</LineStart>
<Snippet>	else if (values[0].length() == 0)
	{
	    throw new ParameterNotFoundException(name + " was empty");
	}
</Snippet>
<TargetFunction>org.owasp.webgoat.session.ParameterNotFoundException.ParameterNotFoundException()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>DOS_Login.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/DOS_Login.java</FilePath>
<LineStart>89</LineStart>
<Snippet>	    String password = "";
	    username = s.getParser().getRawParameter(USERNAME);
	    password = s.getParser().getRawParameter(PASSWORD);

	    // don;t allow user name from other lessons.  it would be too simple.</Snippet>
<TargetFunction>Read org.owasp.webgoat.lessons.DOS_Login.PASSWORD()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="B5A6AD2192A37A873428D8DFB306F716" ruleID="10951BF4-F239-4F1D-8ADB-B12DE560960F">
                            <Category>Privacy Violation</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>The method getStringParameter() in ParameterParser.java mishandles confidential information, which can compromise user privacy and is often illegal.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>695</LineStart>
<Snippet>	if (values == null)
	{
	    throw new ParameterNotFoundException(name + " not found");
	}
	else if (values[0].length() == 0)</Snippet>
<TargetFunction>org.owasp.webgoat.session.ParameterNotFoundException.ParameterNotFoundException()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>UpdateProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/UpdateProfile.java</FilePath>
<LineStart>93</LineStart>
<Snippet>		    RoleBasedAccessControl.SALARY);
	    String ccn = s.getParser().getStringParameter(
		    RoleBasedAccessControl.CCN);
	    int ccnLimit = s.getParser().getIntParameter(
		    RoleBasedAccessControl.CCN_LIMIT);</Snippet>
<TargetFunction>Read org.owasp.webgoat.lessons.RoleBasedAccessControl.RoleBasedAccessControl.CCN()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="5E69A727A231CD8ECF1311C4DABF86BD" ruleID="10951BF4-F239-4F1D-8ADB-B12DE560960F">
                            <Category>Privacy Violation</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>The method ParameterNotFoundException() in ParameterNotFoundException.java mishandles confidential information, which can compromise user privacy and is often illegal.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ParameterNotFoundException.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterNotFoundException.java</FilePath>
<LineStart>54</LineStart>
<Snippet>    public ParameterNotFoundException(String s)
    {
	super(s);
    }
}</Snippet>
<TargetFunction>java.lang.Exception.Exception()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>UpdateProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/UpdateProfile.java</FilePath>
<LineStart>93</LineStart>
<Snippet>		    RoleBasedAccessControl.SALARY);
	    String ccn = s.getParser().getStringParameter(
		    RoleBasedAccessControl.CCN);
	    int ccnLimit = s.getParser().getIntParameter(
		    RoleBasedAccessControl.CCN_LIMIT);</Snippet>
<TargetFunction>Read org.owasp.webgoat.lessons.RoleBasedAccessControl.RoleBasedAccessControl.CCN()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="0F9075FB829A58EDC38EE064182D0933" ruleID="10951BF4-F239-4F1D-8ADB-B12DE560960F">
                            <Category>Privacy Violation</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>The method getStringParameter() in ParameterParser.java mishandles confidential information, which can compromise user privacy and is often illegal.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>699</LineStart>
<Snippet>	else if (values[0].length() == 0)
	{
	    throw new ParameterNotFoundException(name + " was empty");
	}
	else</Snippet>
<TargetFunction>org.owasp.webgoat.session.ParameterNotFoundException.ParameterNotFoundException()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>WeakSessionID.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/WeakSessionID.java</FilePath>
<LineStart>232</LineStart>
<Snippet>	try
	{
	    password = s.getParser().getStringParameter(PASSWORD);
	}
	catch (ParameterNotFoundException pnfe)</Snippet>
<TargetFunction>Read org.owasp.webgoat.lessons.WeakSessionID.PASSWORD()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="653BC22E0B18298FA822AEA15C8DD8A6" ruleID="10951BF4-F239-4F1D-8ADB-B12DE560960F">
                            <Category>Privacy Violation</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>The method ParameterNotFoundException() in ParameterNotFoundException.java mishandles confidential information, which can compromise user privacy and is often illegal.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ParameterNotFoundException.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterNotFoundException.java</FilePath>
<LineStart>54</LineStart>
<Snippet>    public ParameterNotFoundException(String s)
    {
	super(s);
    }
}</Snippet>
<TargetFunction>java.lang.Exception.Exception()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>XPATHInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/XPATHInjection.java</FilePath>
<LineStart>142</LineStart>
<Snippet>	    }

	    String password = s.getParser().getRawParameter(PASSWORD, "");
	    if (password == null || password.length() == 0)
	    {</Snippet>
<TargetFunction>Read org.owasp.webgoat.lessons.XPATHInjection.PASSWORD()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="7EDA4AB335E028B1A7620351353D9541" ruleID="10951BF4-F239-4F1D-8ADB-B12DE560960F">
                            <Category>Privacy Violation</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>The method ParameterNotFoundException() in ParameterNotFoundException.java mishandles confidential information, which can compromise user privacy and is often illegal.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ParameterNotFoundException.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterNotFoundException.java</FilePath>
<LineStart>54</LineStart>
<Snippet>    public ParameterNotFoundException(String s)
    {
	super(s);
    }
}</Snippet>
<TargetFunction>java.lang.Exception.Exception()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>DOS_Login.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/DOS_Login.java</FilePath>
<LineStart>89</LineStart>
<Snippet>	    String password = "";
	    username = s.getParser().getRawParameter(USERNAME);
	    password = s.getParser().getRawParameter(PASSWORD);

	    // don;t allow user name from other lessons.  it would be too simple.</Snippet>
<TargetFunction>Read org.owasp.webgoat.lessons.DOS_Login.PASSWORD()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="69836F0C6868D3255303F4FBDCA94B26" ruleID="10951BF4-F239-4F1D-8ADB-B12DE560960F">
                            <Category>Privacy Violation</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>The method getRawParameter() in ParameterParser.java mishandles confidential information, which can compromise user privacy and is often illegal.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>631</LineStart>
<Snippet>	if (values == null)
	{
	    throw new ParameterNotFoundException(name + " not found");
	}
	else if (values[0].length() == 0)</Snippet>
<TargetFunction>org.owasp.webgoat.session.ParameterNotFoundException.ParameterNotFoundException()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>XPATHInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/XPATHInjection.java</FilePath>
<LineStart>142</LineStart>
<Snippet>	    }

	    String password = s.getParser().getRawParameter(PASSWORD, "");
	    if (password == null || password.length() == 0)
	    {</Snippet>
<TargetFunction>Read org.owasp.webgoat.lessons.XPATHInjection.PASSWORD()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="CCCF2E26645D21ACE4F17192CB10D1D6" ruleID="10951BF4-F239-4F1D-8ADB-B12DE560960F">
                            <Category>Privacy Violation</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>The method getRawParameter() in ParameterParser.java mishandles confidential information, which can compromise user privacy and is often illegal.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>635</LineStart>
<Snippet>	else if (values[0].length() == 0)
	{
	    throw new ParameterNotFoundException(name + " was empty");
	}
</Snippet>
<TargetFunction>org.owasp.webgoat.session.ParameterNotFoundException.ParameterNotFoundException()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>XPATHInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/XPATHInjection.java</FilePath>
<LineStart>142</LineStart>
<Snippet>	    }

	    String password = s.getParser().getRawParameter(PASSWORD, "");
	    if (password == null || password.length() == 0)
	    {</Snippet>
<TargetFunction>Read org.owasp.webgoat.lessons.XPATHInjection.PASSWORD()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="4663FD29543DC990B07C1AD5A92A1AD5" ruleID="10951BF4-F239-4F1D-8ADB-B12DE560960F">
                            <Category>Privacy Violation</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>The method getStringParameter() in ParameterParser.java mishandles confidential information, which can compromise user privacy and is often illegal.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>695</LineStart>
<Snippet>	if (values == null)
	{
	    throw new ParameterNotFoundException(name + " not found");
	}
	else if (values[0].length() == 0)</Snippet>
<TargetFunction>org.owasp.webgoat.session.ParameterNotFoundException.ParameterNotFoundException()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>WeakAuthenticationCookie.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/WeakAuthenticationCookie.java</FilePath>
<LineStart>127</LineStart>
<Snippet>    {
	String username = s.getParser().getStringParameter(USERNAME, "");
	String password = s.getParser().getStringParameter(PASSWORD, "");

	if ((username.length() &gt; 0) &amp;&amp; (password.length() &gt; 0))</Snippet>
<TargetFunction>Read org.owasp.webgoat.lessons.WeakAuthenticationCookie.PASSWORD()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="BBDD7E47BFA6F4D3D884A16F93DACDCE" ruleID="10951BF4-F239-4F1D-8ADB-B12DE560960F">
                            <Category>Privacy Violation</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>The method ParameterNotFoundException() in ParameterNotFoundException.java mishandles confidential information, which can compromise user privacy and is often illegal.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ParameterNotFoundException.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterNotFoundException.java</FilePath>
<LineStart>54</LineStart>
<Snippet>    public ParameterNotFoundException(String s)
    {
	super(s);
    }
}</Snippet>
<TargetFunction>java.lang.Exception.Exception()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>WeakAuthenticationCookie.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/WeakAuthenticationCookie.java</FilePath>
<LineStart>127</LineStart>
<Snippet>    {
	String username = s.getParser().getStringParameter(USERNAME, "");
	String password = s.getParser().getStringParameter(PASSWORD, "");

	if ((username.length() &gt; 0) &amp;&amp; (password.length() &gt; 0))</Snippet>
<TargetFunction>Read org.owasp.webgoat.lessons.WeakAuthenticationCookie.PASSWORD()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="287000CB289F94A2D000C2135A46B8E1" ruleID="10951BF4-F239-4F1D-8ADB-B12DE560960F">
                            <Category>Privacy Violation</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>The method ParameterNotFoundException() in ParameterNotFoundException.java mishandles confidential information, which can compromise user privacy and is often illegal.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ParameterNotFoundException.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterNotFoundException.java</FilePath>
<LineStart>54</LineStart>
<Snippet>    public ParameterNotFoundException(String s)
    {
	super(s);
    }
}</Snippet>
<TargetFunction>java.lang.Exception.Exception()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>HtmlClues.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/HtmlClues.java</FilePath>
<LineStart>80</LineStart>
<Snippet>    {
	String username = s.getParser().getRawParameter(USERNAME, "");
	String password = s.getParser().getRawParameter(PASSWORD, "");

	//&lt;START_OMIT_SOURCE&gt;</Snippet>
<TargetFunction>Read org.owasp.webgoat.lessons.HtmlClues.PASSWORD()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="39BD5B82BDC59C2B5279E38B322D35F6" ruleID="10951BF4-F239-4F1D-8ADB-B12DE560960F">
                            <Category>Privacy Violation</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>The method getRawParameter() in ParameterParser.java mishandles confidential information, which can compromise user privacy and is often illegal.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>635</LineStart>
<Snippet>	else if (values[0].length() == 0)
	{
	    throw new ParameterNotFoundException(name + " was empty");
	}
</Snippet>
<TargetFunction>org.owasp.webgoat.session.ParameterNotFoundException.ParameterNotFoundException()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Login.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/Login.java</FilePath>
<LineStart>78</LineStart>
<Snippet>		    SQLInjection.EMPLOYEE_ID);
	    String password = s.getParser().getRawParameter(
		    SQLInjection.PASSWORD);

	    // Attempt authentication</Snippet>
<TargetFunction>Read org.owasp.webgoat.lessons.SQLInjection.SQLInjection.PASSWORD()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="0C0D100B70B3A2BC5ABEB4C9B50E9312" ruleID="10951BF4-F239-4F1D-8ADB-B12DE560960F">
                            <Category>Privacy Violation</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>The method getRawParameter() in ParameterParser.java mishandles confidential information, which can compromise user privacy and is often illegal.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>635</LineStart>
<Snippet>	else if (values[0].length() == 0)
	{
	    throw new ParameterNotFoundException(name + " was empty");
	}
</Snippet>
<TargetFunction>org.owasp.webgoat.session.ParameterNotFoundException.ParameterNotFoundException()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>HtmlClues.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/HtmlClues.java</FilePath>
<LineStart>80</LineStart>
<Snippet>    {
	String username = s.getParser().getRawParameter(USERNAME, "");
	String password = s.getParser().getRawParameter(PASSWORD, "");

	//&lt;START_OMIT_SOURCE&gt;</Snippet>
<TargetFunction>Read org.owasp.webgoat.lessons.HtmlClues.PASSWORD()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="02F53FC73CF2F826B49641D0B9BF0618" ruleID="10951BF4-F239-4F1D-8ADB-B12DE560960F">
                            <Category>Privacy Violation</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>The method getStringParameter() in ParameterParser.java mishandles confidential information, which can compromise user privacy and is often illegal.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>695</LineStart>
<Snippet>	if (values == null)
	{
	    throw new ParameterNotFoundException(name + " not found");
	}
	else if (values[0].length() == 0)</Snippet>
<TargetFunction>org.owasp.webgoat.session.ParameterNotFoundException.ParameterNotFoundException()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>UpdateProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/UpdateProfile.java</FilePath>
<LineStart>95</LineStart>
<Snippet>		    RoleBasedAccessControl.CCN);
	    int ccnLimit = s.getParser().getIntParameter(
		    RoleBasedAccessControl.CCN_LIMIT);
	    String disciplinaryActionDate = s.getParser().getStringParameter(
		    RoleBasedAccessControl.DISCIPLINARY_DATE);</Snippet>
<TargetFunction>Read org.owasp.webgoat.lessons.RoleBasedAccessControl.RoleBasedAccessControl.CCN_LIMIT()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="CB4C984A1BA521A2604E9BBCEF6995F0" ruleID="10951BF4-F239-4F1D-8ADB-B12DE560960F">
                            <Category>Privacy Violation</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>The method ParameterNotFoundException() in ParameterNotFoundException.java mishandles confidential information, which can compromise user privacy and is often illegal.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ParameterNotFoundException.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterNotFoundException.java</FilePath>
<LineStart>54</LineStart>
<Snippet>    public ParameterNotFoundException(String s)
    {
	super(s);
    }
}</Snippet>
<TargetFunction>java.lang.Exception.Exception()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>WsSAXInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/WsSAXInjection.java</FilePath>
<LineStart>149</LineStart>
<Snippet>	    ec.addElement(makeInputLine(s));

	    password = s.getParser().getRawParameter(PASSWORD, null);

	    PRE pre = new PRE();</Snippet>
<TargetFunction>Read org.owasp.webgoat.lessons.WsSAXInjection.PASSWORD()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="FD067016C70D5FB1997E5E11D4D30D7D" ruleID="10951BF4-F239-4F1D-8ADB-B12DE560960F">
                            <Category>Privacy Violation</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>The method ParameterNotFoundException() in ParameterNotFoundException.java mishandles confidential information, which can compromise user privacy and is often illegal.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ParameterNotFoundException.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterNotFoundException.java</FilePath>
<LineStart>54</LineStart>
<Snippet>    public ParameterNotFoundException(String s)
    {
	super(s);
    }
}</Snippet>
<TargetFunction>java.lang.Exception.Exception()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Login.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/Login.java</FilePath>
<LineStart>78</LineStart>
<Snippet>		    SQLInjection.EMPLOYEE_ID);
	    String password = s.getParser().getRawParameter(
		    SQLInjection.PASSWORD);

	    // Attempt authentication</Snippet>
<TargetFunction>Read org.owasp.webgoat.lessons.SQLInjection.SQLInjection.PASSWORD()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="C1244A13CA3BF8F9BA502170CED62589" ruleID="10951BF4-F239-4F1D-8ADB-B12DE560960F">
                            <Category>Privacy Violation</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>The method getRawParameter() in ParameterParser.java mishandles confidential information, which can compromise user privacy and is often illegal.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>631</LineStart>
<Snippet>	if (values == null)
	{
	    throw new ParameterNotFoundException(name + " not found");
	}
	else if (values[0].length() == 0)</Snippet>
<TargetFunction>org.owasp.webgoat.session.ParameterNotFoundException.ParameterNotFoundException()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Login.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/Login.java</FilePath>
<LineStart>78</LineStart>
<Snippet>		    SQLInjection.EMPLOYEE_ID);
	    String password = s.getParser().getRawParameter(
		    SQLInjection.PASSWORD);

	    // Attempt authentication</Snippet>
<TargetFunction>Read org.owasp.webgoat.lessons.SQLInjection.SQLInjection.PASSWORD()</TargetFunction>
                            </Source>
                        </Issue>
                    </GroupingSection>
                    <GroupingSection count="42">
                        <groupTitle>SQL Injection</groupTitle>
                        <MajorAttributeSummary>
                            <MetaInfo>
<Name>Abstract</Name>
<Value>On line 89 of ViewDatabase.java, the method createContent() invokes a SQL query built using input potentially coming from an untrusted source. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Explanation</Name>
<Value>SQL injection errors occur when:

1. Data enters a program from an untrusted source.

In this case, Fortify Static Code Analyzer could not determine that the source of the data is trusted.

2. The data is used to dynamically construct a SQL query.



Example 1: The following code dynamically constructs and executes a SQL query that searches for items matching a specified name. The query restricts the items displayed to those where the owner matches the user name of the currently-authenticated user.


...
	String userName = ctx.getAuthenticatedUserName();
	String itemName = request.getParameter("itemName");
	String query = "SELECT * FROM items WHERE owner = '"
				+ userName + "' AND itemname = '"
				+ itemName + "'";
	ResultSet rs = stmt.execute(query);
...


The query intends to execute the following code:


	SELECT * FROM items
	WHERE owner = &lt;userName&gt;
	AND itemname = &lt;itemName&gt;;


However, because the query is constructed dynamically by concatenating a constant base query string and a user input string, the query only behaves correctly if itemName does not contain a single-quote character. If an attacker with the user name wiley enters the string "name' OR 'a'='a" for itemName, then the query becomes the following:


	SELECT * FROM items
	WHERE owner = 'wiley'
	AND itemname = 'name' OR 'a'='a';


The addition of the OR 'a'='a' condition causes the where clause to always evaluate to true, so the query becomes logically equivalent to the much simpler query:


	SELECT * FROM items;


This simplification of the query allows the attacker to bypass the requirement that the query must only return items owned by the authenticated user. The query now returns all entries stored in the items table, regardless of their specified owner.

Example 2: This example examines the effects of a different malicious value passed to the query constructed and executed in Example 1. If an attacker with the user name wiley enters the string "name'; DELETE FROM items; --" for itemName, then the query becomes the following two queries:


	SELECT * FROM items
	WHERE owner = 'wiley'
	AND itemname = 'name';

	DELETE FROM items;

	--'


Many database servers, including Microsoft(R) SQL Server 2000, allow multiple SQL statements separated by semicolons to be executed at once. While this attack string results in an error on Oracle and other database servers that do not allow the batch-execution of statements separated by semicolons, on databases that do allow batch execution, this type of attack allows the attacker to execute arbitrary commands against the database.

Notice the trailing pair of hyphens (--), which specifies to most database servers that the remainder of the statement is to be treated as a comment and not executed [4]. In this case the comment character serves to remove the trailing single-quote left over from the modified query. On a database where comments are not allowed to be used in this way, the general attack could still be made effective using a trick similar to the one used in Example 1. If an attacker enters the string "name'); DELETE FROM items; SELECT * FROM items WHERE 'a'='a", the following three valid statements will be created:


	SELECT * FROM items
	WHERE owner = 'wiley'
	AND itemname = 'name';

	DELETE FROM items;

	SELECT * FROM items WHERE 'a'='a';


Some think that in the mobile world, classic web application vulnerabilities, such as SQL injection, do not make sense -- why would the user attack themself? However, keep in mind that the essence of mobile platforms is applications that are downloaded from various sources and run alongside each other on the same device. The likelihood of running a piece of malware next to a banking application is high, which necessitates expanding the attack surface of mobile applications to include inter-process communication.

Example 3: The following code adapts Example 1 to the Android platform.


...
        PasswordAuthentication pa = authenticator.getPasswordAuthentication();
        String userName = pa.getUserName();
        String itemName = this.getIntent().getExtras().getString("itemName");
        String query = "SELECT * FROM items WHERE owner = '"
                                + userName + "' AND itemname = '"
                                + itemName + "'";
        SQLiteDatabase db = this.openOrCreateDatabase("DB", MODE_PRIVATE, null);
        Cursor c = db.rawQuery(query, null);
...


One traditional approach to preventing SQL injection attacks is to handle them as an input validation problem and either accept only characters from an allow list of safe values or identify and escape a list of potentially malicious values (deny list). Checking an allow list can be a very effective means of enforcing strict input validation rules, but parameterized SQL statements require less maintenance and can offer more guarantees with respect to security. As is almost always the case, implementing a deny list is riddled with loopholes that make it ineffective at preventing SQL injection attacks. For example, attackers may:

- Target fields that are not quoted
- Find ways to bypass the need for certain escaped metacharacters
- Use stored procedures to hide the injected metacharacters

Manually escaping characters in input to SQL queries can help, but it will not make your application secure from SQL injection attacks.

Another solution commonly proposed for dealing with SQL injection attacks is to use stored procedures. Although stored procedures prevent some types of SQL injection attacks, they fail to protect against many others. Stored procedures typically help prevent SQL injection attacks by limiting the types of statements that can be passed to their parameters. However, there are many ways around the limitations and many interesting statements that can still be passed to stored procedures. Again, stored procedures can prevent some exploits, but they will not make your application secure against SQL injection attacks.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Recommendations</Name>
<Value>The root cause of a SQL injection vulnerability is the ability of an attacker to change context in the SQL query, causing a value that the programmer intended to be interpreted as data to be interpreted as a command instead. When a SQL query is constructed, the programmer knows what should be interpreted as part of the command and what should be interpreted as data. Parameterized SQL statements can enforce this behavior by disallowing data-directed context changes and preventing nearly all SQL injection attacks. Parameterized SQL statements are constructed using strings of regular SQL, but when user-supplied data needs to be included, they create bind parameters, which are placeholders for data that is subsequently inserted. Bind parameters allow the program to explicitly specify to the database what should be treated as a command and what should be treated as data. When the program is ready to execute a statement, it specifies to the database the runtime values to use for the value of each of the bind parameters, without the risk of the data being interpreted as commands.

Example 1 can be rewritten to use parameterized SQL statements (instead of concatenating user supplied strings) as follows:


...
	String userName = ctx.getAuthenticatedUserName();
	String itemName = request.getParameter("itemName");
	String query =
        	"SELECT * FROM items WHERE itemname=? AND owner=?";
	PreparedStatement stmt = conn.prepareStatement(query);
	stmt.setString(1, itemName);
	stmt.setString(2, userName);
	ResultSet results = stmt.execute();
...


And here is an Android equivalent:


...
	PasswordAuthentication pa = authenticator.getPasswordAuthentication();
	String userName = pa.getUserName();
	String itemName = this.getIntent().getExtras().getString("itemName");
	String query = "SELECT * FROM items WHERE itemname=? AND owner=?";
	SQLiteDatabase db = this.openOrCreateDatabase("DB", MODE_PRIVATE, null);
	Cursor c = db.rawQuery(query, new Object[]{itemName, userName});
...


More complicated scenarios, often found in report generation code, require that user input affect the command structure of the SQL statement, such as the addition of dynamic constraints in the WHERE clause. Do not use this requirement to justify concatenating user input into query strings. Prevent SQL injection attacks where user input must affect statement command structure with a level of indirection: create a set of legitimate strings that correspond to different elements you might include in a SQL statement. When constructing a statement, use input from the user to select from this set of application-controlled values.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Tips</Name>
<Value>1. A common mistake is to use parameterized SQL statements that are constructed by concatenating user-controlled strings. Of course, this defeats the purpose of using parameterized SQL statements. If you are not certain that the strings used to form statements are constants controlled by the application, do not assume that they are safe because they are not being executed directly as SQL strings. Thoroughly investigate all uses of user-controlled strings in SQL statements and verify that none can be used to modify the meaning of the query.

2. Data is untrustworthy if it originates from public non-final string fields of a class. These types of fields may be modified by an unknown source.

3. The SQL Injection issue might still be reported (with a reduced priority value) even after dataflow remediation efforts. When Fortify Static Code Analyzer finds clear dataflow evidence of user-controlled input being used to construct SQL statements, a high/critical priority dataflow issue is reported. When Fortify Static Code Analyzer cannot determine the source of the data but it can be dynamically changed, a low/medium priority semantic issue is reported. This strategy is adopted in a few select vulnerability categories such as SQL Injection where the potential impact of exploitation outweighs the inconvenience of auditing false positive issues.</Value>
                            </MetaInfo>
                            <AttributeValue>
<Name>&lt;Unaudited&gt;</Name>
<Count>42</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not an Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Reliability Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Bad Practice</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Suspicious</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Exploitable</Name>
<Count>0</Count>
                            </AttributeValue>
                        </MajorAttributeSummary>
                        <Issue iid="C09D360676FFCD2EB8CFA110EF2073AF" ruleID="4B673A45-9AD5-4CBA-945B-11A3702CDF57">
                            <Category>SQL Injection</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 112 of ViewProfile.java, the method getEmployeeProfile() invokes a SQL query built using input potentially coming from an untrusted source. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/ViewProfile.java</FilePath>
<LineStart>112</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>executeQuery()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="FDE309EF3C3965BDC6D68E819B4314A2" ruleID="4B673A45-9AD5-4CBA-945B-11A3702CDF57">
                            <Category>SQL Injection</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 130 of SqlNumericInjection.java, the method injectableQuery() invokes a SQL query built using input potentially coming from an untrusted source. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>SqlNumericInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SqlNumericInjection.java</FilePath>
<LineStart>130</LineStart>
<Snippet>			ResultSet.TYPE_SCROLL_INSENSITIVE,
			ResultSet.CONCUR_READ_ONLY);
		ResultSet results = statement.executeQuery(query);

		if ((results != null) &amp;&amp; (results.first() == true))</Snippet>
<TargetFunction>executeQuery()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="60FD883DE3BAC757BEC6FB016B675236" ruleID="4B673A45-9AD5-4CBA-945B-11A3702CDF57">
                            <Category>SQL Injection</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 176 of UpdateProfile.java, the method changeEmployeeProfile() invokes a SQL query built using input potentially coming from an untrusted source. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>UpdateProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/UpdateProfile.java</FilePath>
<LineStart>176</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
	    }
	    catch (SQLException sqle)</Snippet>
<TargetFunction>executeQuery()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="EBF2B90A529B6D5F6E3A143881FF46FC" ruleID="4B673A45-9AD5-4CBA-945B-11A3702CDF57">
                            <Category>SQL Injection</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 343 of StoredXss.java, the method makeList() invokes a SQL query built using input potentially coming from an untrusted source. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>StoredXss.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/StoredXss.java</FilePath>
<LineStart>343</LineStart>
<Snippet>	    // cookies, but not get confused by other users scripts

	    ResultSet results = statement.executeQuery(STANDARD_QUERY
		    + " WHERE user_name LIKE '" + getNameroot(s.getUserName())
		    + "%'");</Snippet>
<TargetFunction>executeQuery()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="5755C1EBC9A59A04667125EB6D455447" ruleID="4B673A45-9AD5-4CBA-945B-11A3702CDF57">
                            <Category>SQL Injection</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 134 of DOS_Login.java, the method createContent() invokes a SQL query built using input potentially coming from an untrusted source. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>DOS_Login.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/DOS_Login.java</FilePath>
<LineStart>134</LineStart>
<Snippet>				    + s.getUserName()
				    + "' )";
			    statement.executeUpdate(insertData1);
			}
			// check the total count of logins</Snippet>
<TargetFunction>executeUpdate()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="CFA005B34359B364344746087E840397" ruleID="4B673A45-9AD5-4CBA-945B-11A3702CDF57">
                            <Category>SQL Injection</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 103 of ThreadSafetyProblem.java, the method createContent() invokes a SQL query built using input potentially coming from an untrusted source. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ThreadSafetyProblem.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/ThreadSafetyProblem.java</FilePath>
<LineStart>103</LineStart>
<Snippet>			ResultSet.TYPE_SCROLL_INSENSITIVE,
			ResultSet.CONCUR_READ_ONLY);
		ResultSet results = statement.executeQuery(query);

		if ((results != null) &amp;&amp; (results.first() == true))</Snippet>
<TargetFunction>executeQuery()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="0FBD4D88271223048326EABE050CC62D" ruleID="4B673A45-9AD5-4CBA-945B-11A3702CDF57">
                            <Category>SQL Injection</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 115 of DeleteProfile.java, the method deleteEmployeeProfile() invokes a SQL query built using input potentially coming from an untrusted source. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>DeleteProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/DeleteProfile.java</FilePath>
<LineStart>115</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		statement.executeUpdate(query);
	    }
	    catch (SQLException sqle)</Snippet>
<TargetFunction>executeUpdate()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="A7D00D128F69A105896EC908FAFF241E" ruleID="4B673A45-9AD5-4CBA-945B-11A3702CDF57">
                            <Category>SQL Injection</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 112 of SqlStringInjection.java, the method injectableQuery() invokes a SQL query built using input potentially coming from an untrusted source. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>SqlStringInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SqlStringInjection.java</FilePath>
<LineStart>112</LineStart>
<Snippet>			ResultSet.TYPE_SCROLL_INSENSITIVE,
			ResultSet.CONCUR_READ_ONLY);
		ResultSet results = statement.executeQuery(query);

		if ((results != null) &amp;&amp; (results.first() == true))</Snippet>
<TargetFunction>executeQuery()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="1CE45B00344E15CAD6526E2F18ED5394" ruleID="4B673A45-9AD5-4CBA-945B-11A3702CDF57">
                            <Category>SQL Injection</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 122 of BlindSqlInjection.java, the method createContent() invokes a SQL query built using input potentially coming from an untrusted source. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>BlindSqlInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/BlindSqlInjection.java</FilePath>
<LineStart>122</LineStart>
<Snippet>			    ResultSet.TYPE_SCROLL_INSENSITIVE,
			    ResultSet.CONCUR_READ_ONLY);
		    ResultSet results = statement.executeQuery(query);

		    if ((results != null) &amp;&amp; (results.first() == true))</Snippet>
<TargetFunction>executeQuery()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="C34B717AA8F1F196ED2B5D207F54DBB3" ruleID="4B673A45-9AD5-4CBA-945B-11A3702CDF57">
                            <Category>SQL Injection</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 248 of UpdateProfile.java, the method changeEmployeeProfile() invokes a SQL query built using input potentially coming from an untrusted source. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>UpdateProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/UpdateProfile.java</FilePath>
<LineStart>248</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		answer_statement.executeUpdate(query);
	    }
	    catch (SQLException sqle)</Snippet>
<TargetFunction>executeUpdate()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="D22EAF3DF450EDEF696802635C6007D6" ruleID="4B673A45-9AD5-4CBA-945B-11A3702CDF57">
                            <Category>SQL Injection</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 297 of UpdateProfile.java, the method doChangeEmployeeProfile_BACKUP() invokes a SQL query built using input potentially coming from an untrusted source. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>UpdateProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/UpdateProfile.java</FilePath>
<LineStart>297</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		answer_statement.executeUpdate(query);
	    }
	    catch (SQLException sqle)</Snippet>
<TargetFunction>executeUpdate()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="B9D18A1B80F2CE2982A1DF0C011D7BFC" ruleID="4B673A45-9AD5-4CBA-945B-11A3702CDF57">
                            <Category>SQL Injection</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 256 of DefaultLessonAction.java, the method isAuthorized() invokes a SQL query built using input potentially coming from an untrusted source. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>DefaultLessonAction.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/DefaultLessonAction.java</FilePath>
<LineStart>256</LineStart>
<Snippet>			{
				Statement answer_statement = WebSession.getConnection(s).createStatement( ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY );
				ResultSet answer_results = answer_statement.executeQuery( query );
				authorized = answer_results.first();
				</Snippet>
<TargetFunction>executeQuery()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="B9D18A1B80F2CE2982A1DF0C011D7BFB" ruleID="4B673A45-9AD5-4CBA-945B-11A3702CDF57">
                            <Category>SQL Injection</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 265 of DefaultLessonAction.java, the method isAuthorized() invokes a SQL query built using input potentially coming from an untrusted source. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>DefaultLessonAction.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/DefaultLessonAction.java</FilePath>
<LineStart>265</LineStart>
<Snippet>							" AND employee_id = " + employeeId;
					answer_statement = WebSession.getConnection(s).createStatement( ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY );
					answer_results = answer_statement.executeQuery( query );
					authorized = answer_results.first();
				}</Snippet>
<TargetFunction>executeQuery()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="09598B5B8E89A030BEE456D9F896C2AE" ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 240 of WsSqlInjection.java, the method getResults() invokes a SQL query built with input that comes from an untrusted source. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>WsSqlInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/WsSqlInjection.java</FilePath>
<LineStart>240</LineStart>
<Snippet>			ResultSet.TYPE_SCROLL_INSENSITIVE,
			ResultSet.CONCUR_READ_ONLY);
		ResultSet results = statement.executeQuery(query);
		return results;
	    }</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>WsSqlInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/WsSqlInjection.java</FilePath>
<LineStart>252</LineStart>
<Snippet>

    public String[] getCreditCard(String id)
    {
	ResultSet results = getResults(id);</Snippet>
<TargetFunction>getCreditCard(0)</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="EC5D2A161015138659834F595ABEC843" ruleID="4B673A45-9AD5-4CBA-945B-11A3702CDF57">
                            <Category>SQL Injection</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 225 of UpdateProfile.java, the method changeEmployeeProfile_BACKUP() invokes a SQL query built using input potentially coming from an untrusted source. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>UpdateProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/UpdateProfile.java</FilePath>
<LineStart>225</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
	    }
	    catch (SQLException sqle)</Snippet>
<TargetFunction>executeQuery()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="F88C48ED63341D13C54050C71557B4B7" ruleID="4B673A45-9AD5-4CBA-945B-11A3702CDF57">
                            <Category>SQL Injection</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 192 of ViewProfile.java, the method getEmployeeProfile_BACKUP() invokes a SQL query built using input potentially coming from an untrusted source. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/ViewProfile.java</FilePath>
<LineStart>192</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>executeQuery()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="A3CC95BCD894EAD3D13DABC323E3D63B" ruleID="4B673A45-9AD5-4CBA-945B-11A3702CDF57">
                            <Category>SQL Injection</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 147 of DOS_Login.java, the method createContent() invokes a SQL query built using input potentially coming from an untrusted source. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>DOS_Login.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/DOS_Login.java</FilePath>
<LineStart>147</LineStart>
<Snippet>			    String deleteData1 = "DELETE from user_login WHERE webgoat_user = '"
				    + s.getUserName() + "'";
			    statement.executeUpdate(deleteData1);
			    return (new H1("Congratulations! Lesson Completed"));
			}</Snippet>
<TargetFunction>executeUpdate()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="125AFBB5C27425AA50E71B144AE97786" ruleID="4B673A45-9AD5-4CBA-945B-11A3702CDF57">
                            <Category>SQL Injection</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 172 of ViewProfile.java, the method getEmployeeProfile_BACKUP() invokes a SQL query built using input potentially coming from an untrusted source. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/ViewProfile.java</FilePath>
<LineStart>172</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>executeQuery()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="B89C6E51C5549D303051AB4FFC873D4D" ruleID="4B673A45-9AD5-4CBA-945B-11A3702CDF57">
                            <Category>SQL Injection</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 146 of ListStaff.java, the method getAllEmployees_BACKUP() invokes a SQL query built using input potentially coming from an untrusted source. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ListStaff.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/ListStaff.java</FilePath>
<LineStart>146</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		answer_results.beforeFirst();
		while (answer_results.next())</Snippet>
<TargetFunction>executeQuery()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="8670E2308E8A72DAAF573E8910CC3533" ruleID="4B673A45-9AD5-4CBA-945B-11A3702CDF57">
                            <Category>SQL Injection</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 295 of UpdateProfile.java, the method createEmployeeProfile() invokes a SQL query built using input potentially coming from an untrusted source. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>UpdateProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/UpdateProfile.java</FilePath>
<LineStart>295</LineStart>
<Snippet>		Statement statement = WebSession.getConnection(s)
			.createStatement();
		statement.executeUpdate(query);
	    }
	    catch (SQLException sqle)</Snippet>
<TargetFunction>executeUpdate()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="073DB645AB135D229981273383F9073A" ruleID="4B673A45-9AD5-4CBA-945B-11A3702CDF57">
                            <Category>SQL Injection</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 148 of Login.java, the method login() invokes a SQL query built using input potentially coming from an untrusted source. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Login.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/Login.java</FilePath>
<LineStart>148</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.first())
		{</Snippet>
<TargetFunction>executeQuery()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="064D8BD2C67AF9C52A04083A9CB9723F" ruleID="4B673A45-9AD5-4CBA-945B-11A3702CDF57">
                            <Category>SQL Injection</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 132 of ViewProfile.java, the method getEmployeeProfile() invokes a SQL query built using input potentially coming from an untrusted source. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/ViewProfile.java</FilePath>
<LineStart>132</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>executeQuery()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="5D0D2BB3E9273B421942EC7CFF4181ED" ruleID="4B673A45-9AD5-4CBA-945B-11A3702CDF57">
                            <Category>SQL Injection</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 149 of Login.java, the method login() invokes a SQL query built using input potentially coming from an untrusted source. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Login.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/Login.java</FilePath>
<LineStart>149</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.first())
		{</Snippet>
<TargetFunction>executeQuery()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="360E3CE77448ED1F01C49BC9140332C1" ruleID="4B673A45-9AD5-4CBA-945B-11A3702CDF57">
                            <Category>SQL Injection</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 114 of DOS_Login.java, the method createContent() invokes a SQL query built using input potentially coming from an untrusted source. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>DOS_Login.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/DOS_Login.java</FilePath>
<LineStart>114</LineStart>
<Snippet>			ResultSet.TYPE_SCROLL_INSENSITIVE,
			ResultSet.CONCUR_READ_ONLY);
		ResultSet results = statement.executeQuery(query);
		if ((results != null) &amp;&amp; (results.first() == true))
		{</Snippet>
<TargetFunction>executeQuery()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="C254DB2A8D71FBAEA8349DB39FFCF7B4" ruleID="4B673A45-9AD5-4CBA-945B-11A3702CDF57">
                            <Category>SQL Injection</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 146 of ListStaff.java, the method getAllEmployees_BACKUP() invokes a SQL query built using input potentially coming from an untrusted source. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ListStaff.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/ListStaff.java</FilePath>
<LineStart>146</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		answer_results.beforeFirst();
		while (answer_results.next())</Snippet>
<TargetFunction>executeQuery()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="37EF0001B8C2B3C09ED4C4C92B35CAEB" ruleID="4B673A45-9AD5-4CBA-945B-11A3702CDF57">
                            <Category>SQL Injection</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 178 of ViewProfile.java, the method getEmployeeProfile_BACKUP() invokes a SQL query built using input potentially coming from an untrusted source. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/ViewProfile.java</FilePath>
<LineStart>178</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>executeQuery()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="F8377AFF53EBFCFA4E7A705271C1EAA2" ruleID="4B673A45-9AD5-4CBA-945B-11A3702CDF57">
                            <Category>SQL Injection</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 89 of ViewDatabase.java, the method createContent() invokes a SQL query built using input potentially coming from an untrusted source. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ViewDatabase.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/admin/ViewDatabase.java</FilePath>
<LineStart>89</LineStart>
<Snippet>			ResultSet.TYPE_SCROLL_INSENSITIVE,
			ResultSet.CONCUR_READ_ONLY);
		ResultSet results = statement.executeQuery(sqlStatement
			.toString());
</Snippet>
<TargetFunction>executeQuery()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="DDA192CA04BD34CB09615F5ADA6D6D06" ruleID="4B673A45-9AD5-4CBA-945B-11A3702CDF57">
                            <Category>SQL Injection</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 203 of DefaultLessonAction.java, the method getUserName() invokes a SQL query built using input potentially coming from an untrusted source. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>DefaultLessonAction.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/DefaultLessonAction.java</FilePath>
<LineStart>203</LineStart>
<Snippet>			{
				Statement answer_statement = WebSession.getConnection(s).createStatement( ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY );
				ResultSet answer_results = answer_statement.executeQuery( query );
				if (answer_results.next())
					name = answer_results.getString("first_name");</Snippet>
<TargetFunction>executeQuery()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="8670E2308E8A72DAAF573E8910CC3532" ruleID="4B673A45-9AD5-4CBA-945B-11A3702CDF57">
                            <Category>SQL Injection</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 311 of UpdateProfile.java, the method createEmployeeProfile() invokes a SQL query built using input potentially coming from an untrusted source. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>UpdateProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/UpdateProfile.java</FilePath>
<LineStart>311</LineStart>
<Snippet>		Statement statement = WebSession.getConnection(s)
			.createStatement();
		statement.executeUpdate(query);
	    }
	    catch (SQLException sqle)</Snippet>
<TargetFunction>executeUpdate()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="62F967CF2ED7D73C7243D89CB343A34D" ruleID="4B673A45-9AD5-4CBA-945B-11A3702CDF57">
                            <Category>SQL Injection</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 118 of ViewProfile.java, the method getEmployeeProfile() invokes a SQL query built using input potentially coming from an untrusted source. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/ViewProfile.java</FilePath>
<LineStart>118</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>executeQuery()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="ADB2838EEF4321355CBA5524A2E21C12" ruleID="4B673A45-9AD5-4CBA-945B-11A3702CDF57">
                            <Category>SQL Injection</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 382 of UpdateProfile.java, the method createEmployeeProfile_BACKUP() invokes a SQL query built using input potentially coming from an untrusted source. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>UpdateProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/UpdateProfile.java</FilePath>
<LineStart>382</LineStart>
<Snippet>		Statement statement = WebSession.getConnection(s)
			.createStatement();
		statement.executeUpdate(query);
	    }
	    catch (SQLException sqle)</Snippet>
<TargetFunction>executeUpdate()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="5F846AACE47289DFE02718663ACBDFDE" ruleID="4B673A45-9AD5-4CBA-945B-11A3702CDF57">
                            <Category>SQL Injection</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 220 of Challenge2Screen.java, the method doStage2() invokes a SQL query built using input potentially coming from an untrusted source. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Challenge2Screen.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/Challenge2Screen.java</FilePath>
<LineStart>220</LineStart>
<Snippet>	try
	{
	    ResultSet results = statement3.executeQuery(query);

	    while (results.next())</Snippet>
<TargetFunction>executeQuery()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="3B9CAEDBA3EF988863E7FA1E4EDE4143" ruleID="4B673A45-9AD5-4CBA-945B-11A3702CDF57">
                            <Category>SQL Injection</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 144 of DeleteProfile.java, the method deleteEmployeeProfile_BACKUP() invokes a SQL query built using input potentially coming from an untrusted source. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>DeleteProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/DeleteProfile.java</FilePath>
<LineStart>144</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		statement.executeUpdate(query);
	    }
	    catch (SQLException sqle)</Snippet>
<TargetFunction>executeUpdate()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="8CAD92A61A9B843D16EB3291BA0B40B4" ruleID="4B673A45-9AD5-4CBA-945B-11A3702CDF57">
                            <Category>SQL Injection</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 113 of BackDoors.java, the method concept1() invokes a SQL query built using input potentially coming from an untrusted source. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>BackDoors.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/BackDoors.java</FilePath>
<LineStart>113</LineStart>
<Snippet>		}

		ResultSet rs = statement.executeQuery(arrSQL[0]);
		if (rs.next())
		{</Snippet>
<TargetFunction>executeQuery()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="360E3CE77448ED1F01C49BC9140332BF" ruleID="4B673A45-9AD5-4CBA-945B-11A3702CDF57">
                            <Category>SQL Injection</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 162 of DOS_Login.java, the method createContent() invokes a SQL query built using input potentially coming from an untrusted source. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>DOS_Login.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/DOS_Login.java</FilePath>
<LineStart>162</LineStart>
<Snippet>		    query = "SELECT * FROM user_login WHERE webgoat_user = '"
			    + s.getUserName() + "'";
		    results = statement.executeQuery(query);
		    results.last();
		    ec.addElement(new H2("Successfull login count: "</Snippet>
<TargetFunction>executeQuery()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="FF9BE2D53E1C4DF957E10192DB862A3C" ruleID="4B673A45-9AD5-4CBA-945B-11A3702CDF57">
                            <Category>SQL Injection</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 106 of BackDoors.java, the method concept1() invokes a SQL query built using input potentially coming from an untrusted source. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>BackDoors.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/BackDoors.java</FilePath>
<LineStart>106</LineStart>
<Snippet>		if (arrSQL.length == 2)
		{
		    statement.executeUpdate(arrSQL[1]);

		    getLessonTracker(s).setStage(2);</Snippet>
<TargetFunction>executeUpdate()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="360E3CE77448ED1F01C49BC9140332C0" ruleID="4B673A45-9AD5-4CBA-945B-11A3702CDF57">
                            <Category>SQL Injection</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 139 of DOS_Login.java, the method createContent() invokes a SQL query built using input potentially coming from an untrusted source. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>DOS_Login.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/DOS_Login.java</FilePath>
<LineStart>139</LineStart>
<Snippet>			query = "SELECT * FROM user_login WHERE webgoat_user = '"
				+ s.getUserName() + "'";
			results = statement.executeQuery(query);
			results.last();
			// If they get back more than one user they succeeded</Snippet>
<TargetFunction>executeQuery()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="AFB25E84318E605E3FD2DC1C3C372C8E" ruleID="4B673A45-9AD5-4CBA-945B-11A3702CDF57">
                            <Category>SQL Injection</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 340 of UpdateProfile.java, the method createEmployeeProfile() invokes a SQL query built using input potentially coming from an untrusted source. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>UpdateProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/UpdateProfile.java</FilePath>
<LineStart>340</LineStart>
<Snippet>		Statement statement = WebSession.getConnection(s)
			.createStatement();
		statement.executeUpdate(query);
	    }
	    catch (SQLException sqle)</Snippet>
<TargetFunction>executeUpdate()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="6D819C0ADD8C403642DF5539DCD83183" ruleID="4B673A45-9AD5-4CBA-945B-11A3702CDF57">
                            <Category>SQL Injection</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 98 of ListStaff.java, the method getAllEmployees() invokes a SQL query built using input potentially coming from an untrusted source. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ListStaff.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/ListStaff.java</FilePath>
<LineStart>98</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		answer_results.beforeFirst();
		while (answer_results.next())</Snippet>
<TargetFunction>executeQuery()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="DAF3388936B50051AC1AD8A12D19604C" ruleID="4B673A45-9AD5-4CBA-945B-11A3702CDF57">
                            <Category>SQL Injection</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 98 of ListStaff.java, the method getAllEmployees() invokes a SQL query built using input potentially coming from an untrusted source. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ListStaff.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/ListStaff.java</FilePath>
<LineStart>98</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		answer_results.beforeFirst();
		while (answer_results.next())</Snippet>
<TargetFunction>executeQuery()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="91BE8A9509668E194A8C877526E7160F" ruleID="4B673A45-9AD5-4CBA-945B-11A3702CDF57">
                            <Category>SQL Injection</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 181 of CSRF.java, the method makeList() invokes a SQL query built using input potentially coming from an untrusted source. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>CSRF.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CSRF.java</FilePath>
<LineStart>181</LineStart>
<Snippet>			Statement statement = connection.createStatement( ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY );
			
			ResultSet results = statement.executeQuery( STANDARD_QUERY + " WHERE user_name LIKE '" + getNameroot( s.getUserName() ) + "%'" );

			if ( ( results != null ) &amp;&amp; ( results.first() == true ) )</Snippet>
<TargetFunction>executeQuery()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="BAB17C436D95D81499CC384F43D3CDCC" ruleID="4B673A45-9AD5-4CBA-945B-11A3702CDF57">
                            <Category>SQL Injection</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 191 of Login.java, the method login_BACKUP() invokes a SQL query built using input potentially coming from an untrusted source. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Login.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/Login.java</FilePath>
<LineStart>191</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.first())
		{</Snippet>
<TargetFunction>executeQuery()</TargetFunction>
                            </Primary>
                        </Issue>
                    </GroupingSection>
                    <GroupingSection count="39">
                        <groupTitle>System Information Leak: Internal</groupTitle>
                        <MajorAttributeSummary>
                            <MetaInfo>
<Name>Abstract</Name>
<Value>The function log() in HammerHead.java reveals system data or debug information by calling println() on line 307. The information revealed by println() could help an adversary form a plan of attack.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Explanation</Name>
<Value>An internal information leak occurs when system data or debug information is sent to a local file, console, or screen via printing or logging.



Example 1: The following code writes an exception to the standard error stream:


try {
    ...
} catch (Exception e) {
    e.printStackTrace();
}


Depending on the system configuration, this information can be dumped to a console, written to a log file, or exposed to a user. In some cases, the error message provides the attacker with the precise type of attack to which the system is vulnerable. For example, a database error message can reveal that the application is vulnerable to a SQL injection attack. Other error messages can reveal more oblique clues about the system. In Example 1, the leaked information could imply information about the type of operating system, the applications installed on the system, and the amount of care that the administrators have put into configuring the program.

Information leaks are also a concern in a mobile computing environment.

Example 2: The following code logs the stack trace of a caught exception on the Android platform.

...
try {
  ...
} catch (Exception e) {
    Log.e(TAG, Log.getStackTraceString(e));
}
...
</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Recommendations</Name>
<Value>Write error messages with security in mind. In production environments, turn off detailed error information in favor of brief messages. Restrict the generation and storage of detailed output that can help administrators and programmers diagnose problems. Debug traces can sometimes appear in non-obvious places (embedded in comments in the HTML for an error page, for example).

Even brief error messages that do not reveal stack traces or database dumps can potentially aid an attacker. For example, an "Access Denied" message can reveal that a file or user exists on the system.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Tips</Name>
<Value>1. Do not rely on wrapper scripts, corporate IT policy, or quick-thinking system administrators to prevent system information leaks. Write software that is secure on its own.

2. This category of vulnerability does not apply to all types of programs. For example, if your application executes on a client machine where system information is already available to an attacker, or if you print system information only to a trusted log file, you can use Audit Guide to filter out this category from your scan results.</Value>
                            </MetaInfo>
                            <AttributeValue>
<Name>&lt;Unaudited&gt;</Name>
<Count>39</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not an Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Reliability Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Bad Practice</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Suspicious</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Exploitable</Name>
<Count>0</Count>
                            </AttributeValue>
                        </MajorAttributeSummary>
                        <Issue iid="F82BAB3CD0F3C4174E4E45AD5A4AC749" ruleID="DCA98C06-0D99-4EE0-ADA4-A4FA86FDE47A">
                            <Category>System Information Leak: Internal</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function main() in Exec.java reveals system data or debug information by calling println() on line 536. The information revealed by println() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Exec.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/util/Exec.java</FilePath>
<LineStart>536</LineStart>
<Snippet>		+ "TEST 6:ExecTimeout process never outputs");
	results = Exec.execTimeout("c:/swarm-2.1.1/bin/sleep.exe 20", 5 * 1000);
	System.out.println(results);
	System.out.println("-------------------------------------------" + sep
		+ "TEST 7:ExecTimeout process waits for input");</Snippet>
<TargetFunction>java.io.PrintStream.println()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Exec.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/util/Exec.java</FilePath>
<LineStart>357</LineStart>
<Snippet>	    catch (IOException e2)
	    {
		results.setThrowable(e2);
	    }
	    finally</Snippet>
<TargetFunction>Read e2()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="99230E892495D721C9D0F9664711B616" ruleID="DCA98C06-0D99-4EE0-ADA4-A4FA86FDE47A">
                            <Category>System Information Leak: Internal</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function log() in HammerHead.java reveals system data or debug information by calling println() on line 307. The information revealed by println() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>HammerHead.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/HammerHead.java</FilePath>
<LineStart>307</LineStart>
<Snippet>		+ request.getRemoteAddr() + " | " + message;
	log(output);
	System.out.println(output);
    }</Snippet>
<TargetFunction>java.io.PrintStream.println()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>HammerHead.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/HammerHead.java</FilePath>
<LineStart>206</LineStart>
<Snippet>		thr.printStackTrace();
		log(request, "Could not write error screen: "
			+ thr.getMessage());
	    }
	    // System.out.println( "HH Leaving doPost: " );</Snippet>
<TargetFunction>java.lang.Throwable.getMessage()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="07DC81F1724D3DD1F052EE4103383C34" ruleID="DCA98C06-0D99-4EE0-ADA4-A4FA86FDE47A">
                            <Category>System Information Leak: Internal</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function main() in Exec.java reveals system data or debug information by calling println() on line 532. The information revealed by println() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Exec.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/util/Exec.java</FilePath>
<LineStart>532</LineStart>
<Snippet>		+ "TEST 5:execLazy");
	results = Exec.execLazy("ping -t 127.0.0.1");
	System.out.println(results);
	System.out.println("-------------------------------------------" + sep
		+ "TEST 6:ExecTimeout process never outputs");</Snippet>
<TargetFunction>java.io.PrintStream.println()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Exec.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/util/Exec.java</FilePath>
<LineStart>317</LineStart>
<Snippet>		catch (IOException e1)
		{
		    results.setThrowable(e1);
		}
	    }</Snippet>
<TargetFunction>Read e1()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="159D205600BB0BD92FC54008D21A5050" ruleID="DCA98C06-0D99-4EE0-ADA4-A4FA86FDE47A">
                            <Category>System Information Leak: Internal</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function main() in Exec.java reveals system data or debug information by calling println() on line 536. The information revealed by println() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Exec.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/util/Exec.java</FilePath>
<LineStart>536</LineStart>
<Snippet>		+ "TEST 6:ExecTimeout process never outputs");
	results = Exec.execTimeout("c:/swarm-2.1.1/bin/sleep.exe 20", 5 * 1000);
	System.out.println(results);
	System.out.println("-------------------------------------------" + sep
		+ "TEST 7:ExecTimeout process waits for input");</Snippet>
<TargetFunction>java.io.PrintStream.println()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Exec.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/util/Exec.java</FilePath>
<LineStart>433</LineStart>
<Snippet>	catch (Throwable t)
	{
	    results.setThrowable(t);
	}
	finally</Snippet>
<TargetFunction>Read t()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="22527F24D3F8FE925A856B7C8B72C8B7" ruleID="DCA98C06-0D99-4EE0-ADA4-A4FA86FDE47A">
                            <Category>System Information Leak: Internal</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function main() in Exec.java reveals system data or debug information by calling println() on line 536. The information revealed by println() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Exec.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/util/Exec.java</FilePath>
<LineStart>536</LineStart>
<Snippet>		+ "TEST 6:ExecTimeout process never outputs");
	results = Exec.execTimeout("c:/swarm-2.1.1/bin/sleep.exe 20", 5 * 1000);
	System.out.println(results);
	System.out.println("-------------------------------------------" + sep
		+ "TEST 7:ExecTimeout process waits for input");</Snippet>
<TargetFunction>java.io.PrintStream.println()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Exec.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/util/Exec.java</FilePath>
<LineStart>403</LineStart>
<Snippet>	    catch (IOException e3)
	    {
		results.setThrowable(e3);
	    }
	    finally</Snippet>
<TargetFunction>Read e3()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="9396649AA679C28481D5964BA5420B58" ruleID="DCA98C06-0D99-4EE0-ADA4-A4FA86FDE47A">
                            <Category>System Information Leak: Internal</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function handleRequest() in ThreadSafetyProblem.java reveals system data or debug information by calling println() on line 216. The information revealed by println() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ThreadSafetyProblem.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/ThreadSafetyProblem.java</FilePath>
<LineStart>216</LineStart>
<Snippet>	catch (Exception e)
	{
	    System.out.println("Exception caught: " + e);
	    e.printStackTrace(System.out);
	}</Snippet>
<TargetFunction>java.io.PrintStream.println()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ThreadSafetyProblem.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/ThreadSafetyProblem.java</FilePath>
<LineStart>216</LineStart>
<Snippet>	catch (Exception e)
	{
	    System.out.println("Exception caught: " + e);
	    e.printStackTrace(System.out);
	}</Snippet>
<TargetFunction>Read e()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="159D205600BB0BD92FC54008D21A504D" ruleID="DCA98C06-0D99-4EE0-ADA4-A4FA86FDE47A">
                            <Category>System Information Leak: Internal</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function main() in Exec.java reveals system data or debug information by calling println() on line 524. The information revealed by println() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Exec.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/util/Exec.java</FilePath>
<LineStart>524</LineStart>
<Snippet>	results = Exec.execInput("find \"cde\"",
		"abcdefg1\nhijklmnop\nqrstuv\nabcdefg2");
	System.out.println(results);
	System.out.println("-------------------------------------------" + sep
		+ "TEST 4:execTimeout");</Snippet>
<TargetFunction>java.io.PrintStream.println()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Exec.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/util/Exec.java</FilePath>
<LineStart>433</LineStart>
<Snippet>	catch (Throwable t)
	{
	    results.setThrowable(t);
	}
	finally</Snippet>
<TargetFunction>Read t()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="7D7642FD9165C555C10F036C0408C0A6" ruleID="DCA98C06-0D99-4EE0-ADA4-A4FA86FDE47A">
                            <Category>System Information Leak: Internal</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function handleRequest() in SqlStringInjection.java reveals system data or debug information by calling println() on line 316. The information revealed by println() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>SqlStringInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SqlStringInjection.java</FilePath>
<LineStart>316</LineStart>
<Snippet>	catch (Exception e)
	{
	    System.out.println("Exception caught: " + e);
	    e.printStackTrace(System.out);
	}</Snippet>
<TargetFunction>java.io.PrintStream.println()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>SqlStringInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SqlStringInjection.java</FilePath>
<LineStart>316</LineStart>
<Snippet>	catch (Exception e)
	{
	    System.out.println("Exception caught: " + e);
	    e.printStackTrace(System.out);
	}</Snippet>
<TargetFunction>Read e()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="07DC81F1724D3DD1F052EE4103383C32" ruleID="DCA98C06-0D99-4EE0-ADA4-A4FA86FDE47A">
                            <Category>System Information Leak: Internal</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function main() in Exec.java reveals system data or debug information by calling println() on line 524. The information revealed by println() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Exec.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/util/Exec.java</FilePath>
<LineStart>524</LineStart>
<Snippet>	results = Exec.execInput("find \"cde\"",
		"abcdefg1\nhijklmnop\nqrstuv\nabcdefg2");
	System.out.println(results);
	System.out.println("-------------------------------------------" + sep
		+ "TEST 4:execTimeout");</Snippet>
<TargetFunction>java.io.PrintStream.println()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Exec.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/util/Exec.java</FilePath>
<LineStart>317</LineStart>
<Snippet>		catch (IOException e1)
		{
		    results.setThrowable(e1);
		}
	    }</Snippet>
<TargetFunction>Read e1()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="F82BAB3CD0F3C4174E4E45AD5A4AC746" ruleID="DCA98C06-0D99-4EE0-ADA4-A4FA86FDE47A">
                            <Category>System Information Leak: Internal</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function main() in Exec.java reveals system data or debug information by calling println() on line 524. The information revealed by println() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Exec.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/util/Exec.java</FilePath>
<LineStart>524</LineStart>
<Snippet>	results = Exec.execInput("find \"cde\"",
		"abcdefg1\nhijklmnop\nqrstuv\nabcdefg2");
	System.out.println(results);
	System.out.println("-------------------------------------------" + sep
		+ "TEST 4:execTimeout");</Snippet>
<TargetFunction>java.io.PrintStream.println()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Exec.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/util/Exec.java</FilePath>
<LineStart>357</LineStart>
<Snippet>	    catch (IOException e2)
	    {
		results.setThrowable(e2);
	    }
	    finally</Snippet>
<TargetFunction>Read e2()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="22527F24D3F8FE925A856B7C8B72C8B5" ruleID="DCA98C06-0D99-4EE0-ADA4-A4FA86FDE47A">
                            <Category>System Information Leak: Internal</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function main() in Exec.java reveals system data or debug information by calling println() on line 528. The information revealed by println() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Exec.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/util/Exec.java</FilePath>
<LineStart>528</LineStart>
<Snippet>		+ "TEST 4:execTimeout");
	results = Exec.execTimeout("ping -t 127.0.0.1", 5 * 1000);
	System.out.println(results);
	System.out.println("-------------------------------------------" + sep
		+ "TEST 5:execLazy");</Snippet>
<TargetFunction>java.io.PrintStream.println()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Exec.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/util/Exec.java</FilePath>
<LineStart>403</LineStart>
<Snippet>	    catch (IOException e3)
	    {
		results.setThrowable(e3);
	    }
	    finally</Snippet>
<TargetFunction>Read e3()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="F82BAB3CD0F3C4174E4E45AD5A4AC74A" ruleID="DCA98C06-0D99-4EE0-ADA4-A4FA86FDE47A">
                            <Category>System Information Leak: Internal</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function main() in Exec.java reveals system data or debug information by calling println() on line 540. The information revealed by println() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Exec.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/util/Exec.java</FilePath>
<LineStart>540</LineStart>
<Snippet>		+ "TEST 7:ExecTimeout process waits for input");
	results = Exec.execTimeout("c:/swarm-2.1.1/bin/cat", 5 * 1000);
	System.out.println(results);
    }
}</Snippet>
<TargetFunction>java.io.PrintStream.println()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Exec.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/util/Exec.java</FilePath>
<LineStart>357</LineStart>
<Snippet>	    catch (IOException e2)
	    {
		results.setThrowable(e2);
	    }
	    finally</Snippet>
<TargetFunction>Read e2()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="AB4E42C5163F2C47C0CE0592AD5E896C" ruleID="DCA98C06-0D99-4EE0-ADA4-A4FA86FDE47A">
                            <Category>System Information Leak: Internal</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function log() in HammerHead.java reveals system data or debug information by calling println() on line 307. The information revealed by println() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>HammerHead.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/HammerHead.java</FilePath>
<LineStart>307</LineStart>
<Snippet>		+ request.getRemoteAddr() + " | " + message;
	log(output);
	System.out.println(output);
    }</Snippet>
<TargetFunction>java.io.PrintStream.println()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>LessonSource.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/LessonSource.java</FilePath>
<LineStart>106</LineStart>
<Snippet>		thr.printStackTrace();
		log(request, "Could not write error screen: "
			+ thr.getMessage());
	    }
	    //System.out.println( "Leaving doPost: " );</Snippet>
<TargetFunction>java.lang.Throwable.getMessage()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="159D205600BB0BD92FC54008D21A504F" ruleID="DCA98C06-0D99-4EE0-ADA4-A4FA86FDE47A">
                            <Category>System Information Leak: Internal</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function main() in Exec.java reveals system data or debug information by calling println() on line 532. The information revealed by println() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Exec.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/util/Exec.java</FilePath>
<LineStart>532</LineStart>
<Snippet>		+ "TEST 5:execLazy");
	results = Exec.execLazy("ping -t 127.0.0.1");
	System.out.println(results);
	System.out.println("-------------------------------------------" + sep
		+ "TEST 6:ExecTimeout process never outputs");</Snippet>
<TargetFunction>java.io.PrintStream.println()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Exec.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/util/Exec.java</FilePath>
<LineStart>433</LineStart>
<Snippet>	catch (Throwable t)
	{
	    results.setThrowable(t);
	}
	finally</Snippet>
<TargetFunction>Read t()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="07DC81F1724D3DD1F052EE4103383C30" ruleID="DCA98C06-0D99-4EE0-ADA4-A4FA86FDE47A">
                            <Category>System Information Leak: Internal</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function main() in Exec.java reveals system data or debug information by calling println() on line 509. The information revealed by println() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Exec.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/util/Exec.java</FilePath>
<LineStart>509</LineStart>
<Snippet>		+ "TEST 1: execSimple");
	results = Exec.execSimple("c:/swarm-2.1.1/bin/whoami.exe");
	System.out.println(results);
	System.out.println("-------------------------------------------" + sep
		+ "TEST 2: execSimple (with search)");</Snippet>
<TargetFunction>java.io.PrintStream.println()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Exec.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/util/Exec.java</FilePath>
<LineStart>317</LineStart>
<Snippet>		catch (IOException e1)
		{
		    results.setThrowable(e1);
		}
	    }</Snippet>
<TargetFunction>Read e1()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="F82BAB3CD0F3C4174E4E45AD5A4AC747" ruleID="DCA98C06-0D99-4EE0-ADA4-A4FA86FDE47A">
                            <Category>System Information Leak: Internal</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function main() in Exec.java reveals system data or debug information by calling println() on line 528. The information revealed by println() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Exec.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/util/Exec.java</FilePath>
<LineStart>528</LineStart>
<Snippet>		+ "TEST 4:execTimeout");
	results = Exec.execTimeout("ping -t 127.0.0.1", 5 * 1000);
	System.out.println(results);
	System.out.println("-------------------------------------------" + sep
		+ "TEST 5:execLazy");</Snippet>
<TargetFunction>java.io.PrintStream.println()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Exec.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/util/Exec.java</FilePath>
<LineStart>357</LineStart>
<Snippet>	    catch (IOException e2)
	    {
		results.setThrowable(e2);
	    }
	    finally</Snippet>
<TargetFunction>Read e2()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="F22C243B557C399BA5F12578F4B9E012" ruleID="DCA98C06-0D99-4EE0-ADA4-A4FA86FDE47A">
                            <Category>System Information Leak: Internal</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function handleRequest() in SqlNumericInjection.java reveals system data or debug information by calling println() on line 400. The information revealed by println() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>SqlNumericInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SqlNumericInjection.java</FilePath>
<LineStart>400</LineStart>
<Snippet>	catch (Exception e)
	{
	    System.out.println("Exception caught: " + e);
	    e.printStackTrace(System.out);
	}</Snippet>
<TargetFunction>java.io.PrintStream.println()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>SqlNumericInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SqlNumericInjection.java</FilePath>
<LineStart>400</LineStart>
<Snippet>	catch (Exception e)
	{
	    System.out.println("Exception caught: " + e);
	    e.printStackTrace(System.out);
	}</Snippet>
<TargetFunction>Read e()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="22527F24D3F8FE925A856B7C8B72C8B2" ruleID="DCA98C06-0D99-4EE0-ADA4-A4FA86FDE47A">
                            <Category>System Information Leak: Internal</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function main() in Exec.java reveals system data or debug information by calling println() on line 509. The information revealed by println() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Exec.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/util/Exec.java</FilePath>
<LineStart>509</LineStart>
<Snippet>		+ "TEST 1: execSimple");
	results = Exec.execSimple("c:/swarm-2.1.1/bin/whoami.exe");
	System.out.println(results);
	System.out.println("-------------------------------------------" + sep
		+ "TEST 2: execSimple (with search)");</Snippet>
<TargetFunction>java.io.PrintStream.println()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Exec.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/util/Exec.java</FilePath>
<LineStart>403</LineStart>
<Snippet>	    catch (IOException e3)
	    {
		results.setThrowable(e3);
	    }
	    finally</Snippet>
<TargetFunction>Read e3()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="07DC81F1724D3DD1F052EE4103383C31" ruleID="DCA98C06-0D99-4EE0-ADA4-A4FA86FDE47A">
                            <Category>System Information Leak: Internal</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function main() in Exec.java reveals system data or debug information by calling println() on line 513. The information revealed by println() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Exec.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/util/Exec.java</FilePath>
<LineStart>513</LineStart>
<Snippet>		+ "TEST 2: execSimple (with search)");
	results = Exec.execSimple("netstat -r");
	System.out.println(results);

	if (results.outputContains("localhost:1031"))</Snippet>
<TargetFunction>java.io.PrintStream.println()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Exec.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/util/Exec.java</FilePath>
<LineStart>317</LineStart>
<Snippet>		catch (IOException e1)
		{
		    results.setThrowable(e1);
		}
	    }</Snippet>
<TargetFunction>Read e1()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="22527F24D3F8FE925A856B7C8B72C8B8" ruleID="DCA98C06-0D99-4EE0-ADA4-A4FA86FDE47A">
                            <Category>System Information Leak: Internal</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function main() in Exec.java reveals system data or debug information by calling println() on line 540. The information revealed by println() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Exec.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/util/Exec.java</FilePath>
<LineStart>540</LineStart>
<Snippet>		+ "TEST 7:ExecTimeout process waits for input");
	results = Exec.execTimeout("c:/swarm-2.1.1/bin/cat", 5 * 1000);
	System.out.println(results);
    }
}</Snippet>
<TargetFunction>java.io.PrintStream.println()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Exec.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/util/Exec.java</FilePath>
<LineStart>403</LineStart>
<Snippet>	    catch (IOException e3)
	    {
		results.setThrowable(e3);
	    }
	    finally</Snippet>
<TargetFunction>Read e3()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="BEB4814E49EAA11F2CEA573D16ECDB6E" ruleID="DCA98C06-0D99-4EE0-ADA4-A4FA86FDE47A">
                            <Category>System Information Leak: Internal</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function createStagedContent() in LessonAdapter.java reveals system data or debug information by calling println() on line 136. The information revealed by println() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>LessonAdapter.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/LessonAdapter.java</FilePath>
<LineStart>136</LineStart>
<Snippet>	{
	    s.setMessage("Error generating " + this.getClass().getName());
	    System.out.println(e);
	    e.printStackTrace();
	}</Snippet>
<TargetFunction>java.io.PrintStream.println()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>LessonAdapter.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/LessonAdapter.java</FilePath>
<LineStart>136</LineStart>
<Snippet>	{
	    s.setMessage("Error generating " + this.getClass().getName());
	    System.out.println(e);
	    e.printStackTrace();
	}</Snippet>
<TargetFunction>Read e()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="159D205600BB0BD92FC54008D21A5051" ruleID="DCA98C06-0D99-4EE0-ADA4-A4FA86FDE47A">
                            <Category>System Information Leak: Internal</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function main() in Exec.java reveals system data or debug information by calling println() on line 540. The information revealed by println() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Exec.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/util/Exec.java</FilePath>
<LineStart>540</LineStart>
<Snippet>		+ "TEST 7:ExecTimeout process waits for input");
	results = Exec.execTimeout("c:/swarm-2.1.1/bin/cat", 5 * 1000);
	System.out.println(results);
    }
}</Snippet>
<TargetFunction>java.io.PrintStream.println()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Exec.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/util/Exec.java</FilePath>
<LineStart>433</LineStart>
<Snippet>	catch (Throwable t)
	{
	    results.setThrowable(t);
	}
	finally</Snippet>
<TargetFunction>Read t()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="536AD1F9902988E88A35C504919667FC" ruleID="DCA98C06-0D99-4EE0-ADA4-A4FA86FDE47A">
                            <Category>System Information Leak: Internal</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function createContent() in ErrorScreen.java reveals system data or debug information by calling println() on line 159. The information revealed by println() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ErrorScreen.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ErrorScreen.java</FilePath>
<LineStart>159</LineStart>
<Snippet>	protected Element createContent( WebSession s )
	{
		System.out.println( "errorscreen createContent Error:" + this.error + " message:" + this.message );

		Element content;</Snippet>
<TargetFunction>java.io.PrintStream.println()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>HammerHead.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/HammerHead.java</FilePath>
<LineStart>194</LineStart>
<Snippet>	    t.printStackTrace();
	    log("ERROR: " + t);
	    screen = new ErrorScreen(mySession, t);
	}
	finally</Snippet>
<TargetFunction>Read t()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="1E98A6F7A122158FAD7179B0502E34B1" ruleID="DCA98C06-0D99-4EE0-ADA4-A4FA86FDE47A">
                            <Category>System Information Leak: Internal</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function getFileText() in AbstractLesson.java reveals system data or debug information by calling println() on line 478. The information revealed by println() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>AbstractLesson.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/AbstractLesson.java</FilePath>
<LineStart>478</LineStart>
<Snippet>	catch (Exception e)
	{
	    System.out.println(e);
	    e.printStackTrace();
	}</Snippet>
<TargetFunction>java.io.PrintStream.println()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>AbstractLesson.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/AbstractLesson.java</FilePath>
<LineStart>478</LineStart>
<Snippet>	catch (Exception e)
	{
	    System.out.println(e);
	    e.printStackTrace();
	}</Snippet>
<TargetFunction>Read e()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="63B451D8A2A6D70B0E55D1795D455FAF" ruleID="DCA98C06-0D99-4EE0-ADA4-A4FA86FDE47A">
                            <Category>System Information Leak: Internal</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function readFromURL() in AbstractLesson.java reveals system data or debug information by calling println() on line 1044. The information revealed by println() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>AbstractLesson.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/AbstractLesson.java</FilePath>
<LineStart>1044</LineStart>
<Snippet>	catch (Exception e)
	{
	    System.out.println(e);
	    e.printStackTrace();
	}</Snippet>
<TargetFunction>java.io.PrintStream.println()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>AbstractLesson.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/AbstractLesson.java</FilePath>
<LineStart>1044</LineStart>
<Snippet>	catch (Exception e)
	{
	    System.out.println(e);
	    e.printStackTrace();
	}</Snippet>
<TargetFunction>Read e()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="22527F24D3F8FE925A856B7C8B72C8B6" ruleID="DCA98C06-0D99-4EE0-ADA4-A4FA86FDE47A">
                            <Category>System Information Leak: Internal</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function main() in Exec.java reveals system data or debug information by calling println() on line 532. The information revealed by println() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Exec.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/util/Exec.java</FilePath>
<LineStart>532</LineStart>
<Snippet>		+ "TEST 5:execLazy");
	results = Exec.execLazy("ping -t 127.0.0.1");
	System.out.println(results);
	System.out.println("-------------------------------------------" + sep
		+ "TEST 6:ExecTimeout process never outputs");</Snippet>
<TargetFunction>java.io.PrintStream.println()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Exec.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/util/Exec.java</FilePath>
<LineStart>403</LineStart>
<Snippet>	    catch (IOException e3)
	    {
		results.setThrowable(e3);
	    }
	    finally</Snippet>
<TargetFunction>Read e3()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="07DC81F1724D3DD1F052EE4103383C35" ruleID="DCA98C06-0D99-4EE0-ADA4-A4FA86FDE47A">
                            <Category>System Information Leak: Internal</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function main() in Exec.java reveals system data or debug information by calling println() on line 536. The information revealed by println() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Exec.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/util/Exec.java</FilePath>
<LineStart>536</LineStart>
<Snippet>		+ "TEST 6:ExecTimeout process never outputs");
	results = Exec.execTimeout("c:/swarm-2.1.1/bin/sleep.exe 20", 5 * 1000);
	System.out.println(results);
	System.out.println("-------------------------------------------" + sep
		+ "TEST 7:ExecTimeout process waits for input");</Snippet>
<TargetFunction>java.io.PrintStream.println()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Exec.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/util/Exec.java</FilePath>
<LineStart>317</LineStart>
<Snippet>		catch (IOException e1)
		{
		    results.setThrowable(e1);
		}
	    }</Snippet>
<TargetFunction>Read e1()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="9EE0B7A443146B20F55DEE3883385554" ruleID="DCA98C06-0D99-4EE0-ADA4-A4FA86FDE47A">
                            <Category>System Information Leak: Internal</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function handleRequest() in BlindSqlInjection.java reveals system data or debug information by calling println() on line 343. The information revealed by println() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>BlindSqlInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/BlindSqlInjection.java</FilePath>
<LineStart>343</LineStart>
<Snippet>	catch (Exception e)
	{
	    System.out.println("Exception caught: " + e);
	    e.printStackTrace(System.out);
	}</Snippet>
<TargetFunction>java.io.PrintStream.println()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>BlindSqlInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/BlindSqlInjection.java</FilePath>
<LineStart>343</LineStart>
<Snippet>	catch (Exception e)
	{
	    System.out.println("Exception caught: " + e);
	    e.printStackTrace(System.out);
	}</Snippet>
<TargetFunction>Read e()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="159D205600BB0BD92FC54008D21A504E" ruleID="DCA98C06-0D99-4EE0-ADA4-A4FA86FDE47A">
                            <Category>System Information Leak: Internal</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function main() in Exec.java reveals system data or debug information by calling println() on line 528. The information revealed by println() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Exec.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/util/Exec.java</FilePath>
<LineStart>528</LineStart>
<Snippet>		+ "TEST 4:execTimeout");
	results = Exec.execTimeout("ping -t 127.0.0.1", 5 * 1000);
	System.out.println(results);
	System.out.println("-------------------------------------------" + sep
		+ "TEST 5:execLazy");</Snippet>
<TargetFunction>java.io.PrintStream.println()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Exec.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/util/Exec.java</FilePath>
<LineStart>433</LineStart>
<Snippet>	catch (Throwable t)
	{
	    results.setThrowable(t);
	}
	finally</Snippet>
<TargetFunction>Read t()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="F82BAB3CD0F3C4174E4E45AD5A4AC748" ruleID="DCA98C06-0D99-4EE0-ADA4-A4FA86FDE47A">
                            <Category>System Information Leak: Internal</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function main() in Exec.java reveals system data or debug information by calling println() on line 532. The information revealed by println() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Exec.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/util/Exec.java</FilePath>
<LineStart>532</LineStart>
<Snippet>		+ "TEST 5:execLazy");
	results = Exec.execLazy("ping -t 127.0.0.1");
	System.out.println(results);
	System.out.println("-------------------------------------------" + sep
		+ "TEST 6:ExecTimeout process never outputs");</Snippet>
<TargetFunction>java.io.PrintStream.println()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Exec.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/util/Exec.java</FilePath>
<LineStart>357</LineStart>
<Snippet>	    catch (IOException e2)
	    {
		results.setThrowable(e2);
	    }
	    finally</Snippet>
<TargetFunction>Read e2()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="159D205600BB0BD92FC54008D21A504B" ruleID="DCA98C06-0D99-4EE0-ADA4-A4FA86FDE47A">
                            <Category>System Information Leak: Internal</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function main() in Exec.java reveals system data or debug information by calling println() on line 509. The information revealed by println() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Exec.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/util/Exec.java</FilePath>
<LineStart>509</LineStart>
<Snippet>		+ "TEST 1: execSimple");
	results = Exec.execSimple("c:/swarm-2.1.1/bin/whoami.exe");
	System.out.println(results);
	System.out.println("-------------------------------------------" + sep
		+ "TEST 2: execSimple (with search)");</Snippet>
<TargetFunction>java.io.PrintStream.println()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Exec.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/util/Exec.java</FilePath>
<LineStart>433</LineStart>
<Snippet>	catch (Throwable t)
	{
	    results.setThrowable(t);
	}
	finally</Snippet>
<TargetFunction>Read t()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="22527F24D3F8FE925A856B7C8B72C8B3" ruleID="DCA98C06-0D99-4EE0-ADA4-A4FA86FDE47A">
                            <Category>System Information Leak: Internal</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function main() in Exec.java reveals system data or debug information by calling println() on line 513. The information revealed by println() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Exec.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/util/Exec.java</FilePath>
<LineStart>513</LineStart>
<Snippet>		+ "TEST 2: execSimple (with search)");
	results = Exec.execSimple("netstat -r");
	System.out.println(results);

	if (results.outputContains("localhost:1031"))</Snippet>
<TargetFunction>java.io.PrintStream.println()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Exec.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/util/Exec.java</FilePath>
<LineStart>403</LineStart>
<Snippet>	    catch (IOException e3)
	    {
		results.setThrowable(e3);
	    }
	    finally</Snippet>
<TargetFunction>Read e3()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="F82BAB3CD0F3C4174E4E45AD5A4AC745" ruleID="DCA98C06-0D99-4EE0-ADA4-A4FA86FDE47A">
                            <Category>System Information Leak: Internal</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function main() in Exec.java reveals system data or debug information by calling println() on line 513. The information revealed by println() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Exec.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/util/Exec.java</FilePath>
<LineStart>513</LineStart>
<Snippet>		+ "TEST 2: execSimple (with search)");
	results = Exec.execSimple("netstat -r");
	System.out.println(results);

	if (results.outputContains("localhost:1031"))</Snippet>
<TargetFunction>java.io.PrintStream.println()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Exec.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/util/Exec.java</FilePath>
<LineStart>357</LineStart>
<Snippet>	    catch (IOException e2)
	    {
		results.setThrowable(e2);
	    }
	    finally</Snippet>
<TargetFunction>Read e2()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="22527F24D3F8FE925A856B7C8B72C8B4" ruleID="DCA98C06-0D99-4EE0-ADA4-A4FA86FDE47A">
                            <Category>System Information Leak: Internal</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function main() in Exec.java reveals system data or debug information by calling println() on line 524. The information revealed by println() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Exec.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/util/Exec.java</FilePath>
<LineStart>524</LineStart>
<Snippet>	results = Exec.execInput("find \"cde\"",
		"abcdefg1\nhijklmnop\nqrstuv\nabcdefg2");
	System.out.println(results);
	System.out.println("-------------------------------------------" + sep
		+ "TEST 4:execTimeout");</Snippet>
<TargetFunction>java.io.PrintStream.println()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Exec.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/util/Exec.java</FilePath>
<LineStart>403</LineStart>
<Snippet>	    catch (IOException e3)
	    {
		results.setThrowable(e3);
	    }
	    finally</Snippet>
<TargetFunction>Read e3()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="F82BAB3CD0F3C4174E4E45AD5A4AC744" ruleID="DCA98C06-0D99-4EE0-ADA4-A4FA86FDE47A">
                            <Category>System Information Leak: Internal</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function main() in Exec.java reveals system data or debug information by calling println() on line 509. The information revealed by println() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Exec.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/util/Exec.java</FilePath>
<LineStart>509</LineStart>
<Snippet>		+ "TEST 1: execSimple");
	results = Exec.execSimple("c:/swarm-2.1.1/bin/whoami.exe");
	System.out.println(results);
	System.out.println("-------------------------------------------" + sep
		+ "TEST 2: execSimple (with search)");</Snippet>
<TargetFunction>java.io.PrintStream.println()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Exec.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/util/Exec.java</FilePath>
<LineStart>357</LineStart>
<Snippet>	    catch (IOException e2)
	    {
		results.setThrowable(e2);
	    }
	    finally</Snippet>
<TargetFunction>Read e2()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="159D205600BB0BD92FC54008D21A504C" ruleID="DCA98C06-0D99-4EE0-ADA4-A4FA86FDE47A">
                            <Category>System Information Leak: Internal</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function main() in Exec.java reveals system data or debug information by calling println() on line 513. The information revealed by println() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Exec.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/util/Exec.java</FilePath>
<LineStart>513</LineStart>
<Snippet>		+ "TEST 2: execSimple (with search)");
	results = Exec.execSimple("netstat -r");
	System.out.println(results);

	if (results.outputContains("localhost:1031"))</Snippet>
<TargetFunction>java.io.PrintStream.println()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Exec.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/util/Exec.java</FilePath>
<LineStart>433</LineStart>
<Snippet>	catch (Throwable t)
	{
	    results.setThrowable(t);
	}
	finally</Snippet>
<TargetFunction>Read t()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="BC4C3AFB66A9949C193A3809DDA9E40C" ruleID="DCA98C06-0D99-4EE0-ADA4-A4FA86FDE47A">
                            <Category>System Information Leak: Internal</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function getFileMethod() in AbstractLesson.java reveals system data or debug information by calling println() on line 422. The information revealed by println() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>AbstractLesson.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/AbstractLesson.java</FilePath>
<LineStart>422</LineStart>
<Snippet>	catch (Exception e)
	{
	    System.out.println(e);
	    e.printStackTrace();
	}</Snippet>
<TargetFunction>java.io.PrintStream.println()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>AbstractLesson.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/AbstractLesson.java</FilePath>
<LineStart>422</LineStart>
<Snippet>	catch (Exception e)
	{
	    System.out.println(e);
	    e.printStackTrace();
	}</Snippet>
<TargetFunction>Read e()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="07DC81F1724D3DD1F052EE4103383C33" ruleID="DCA98C06-0D99-4EE0-ADA4-A4FA86FDE47A">
                            <Category>System Information Leak: Internal</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function main() in Exec.java reveals system data or debug information by calling println() on line 528. The information revealed by println() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Exec.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/util/Exec.java</FilePath>
<LineStart>528</LineStart>
<Snippet>		+ "TEST 4:execTimeout");
	results = Exec.execTimeout("ping -t 127.0.0.1", 5 * 1000);
	System.out.println(results);
	System.out.println("-------------------------------------------" + sep
		+ "TEST 5:execLazy");</Snippet>
<TargetFunction>java.io.PrintStream.println()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Exec.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/util/Exec.java</FilePath>
<LineStart>317</LineStart>
<Snippet>		catch (IOException e1)
		{
		    results.setThrowable(e1);
		}
	    }</Snippet>
<TargetFunction>Read e1()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="07DC81F1724D3DD1F052EE4103383C36" ruleID="DCA98C06-0D99-4EE0-ADA4-A4FA86FDE47A">
                            <Category>System Information Leak: Internal</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The function main() in Exec.java reveals system data or debug information by calling println() on line 540. The information revealed by println() could help an adversary form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Exec.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/util/Exec.java</FilePath>
<LineStart>540</LineStart>
<Snippet>		+ "TEST 7:ExecTimeout process waits for input");
	results = Exec.execTimeout("c:/swarm-2.1.1/bin/cat", 5 * 1000);
	System.out.println(results);
    }
}</Snippet>
<TargetFunction>java.io.PrintStream.println()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Exec.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/util/Exec.java</FilePath>
<LineStart>317</LineStart>
<Snippet>		catch (IOException e1)
		{
		    results.setThrowable(e1);
		}
	    }</Snippet>
<TargetFunction>Read e1()</TargetFunction>
                            </Source>
                        </Issue>
                    </GroupingSection>
                    <GroupingSection count="32">
                        <groupTitle>Poor Error Handling: Empty Catch Block</groupTitle>
                        <MajorAttributeSummary>
                            <MetaInfo>
<Name>Abstract</Name>
<Value>The method createContent() in ReportCardScreen.java ignores an exception on line 87, which could cause the program to overlook unexpected states and conditions.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Explanation</Name>
<Value>Just about every serious attack on a software system begins with the violation of a programmer's assumptions. After the attack, the programmer's assumptions seem flimsy and poorly founded, but before an attack many programmers would defend their assumptions well past the end of their lunch break.

Two dubious assumptions that are easy to spot in code are "this method call can never fail" and "it doesn't matter if this call fails". When a programmer ignores an exception, they implicitly state that they are operating under one of these assumptions.

Example 1: The following code excerpt ignores a rarely-thrown exception from doExchange().


try {
  doExchange();
}
catch (RareException e) {
  // this can never happen
}


If a RareException were to ever be thrown, the program would continue to execute as though nothing unusual had occurred. The program records no evidence indicating the special situation, potentially frustrating any later attempt to explain the program's behavior.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Recommendations</Name>
<Value>At a minimum, log the fact that the exception was thrown so that it will be possible to come back later and make sense of the resulting program behavior. Better yet, abort the current operation. If the exception is being ignored because the caller cannot properly handle it but the context makes it inconvenient or impossible for the caller to declare that it throws the exception itself, consider throwing a RuntimeException or an Error, both of which are unchecked exceptions. As of JDK 1.4, RuntimeException has a constructor that makes it easy to wrap another exception.

Example 2: The code in Example 1 could be rewritten in the following way:


try {
  doExchange();
}
catch (RareException e) {
  throw new RuntimeException("This can never happen", e);
}
</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Tips</Name>
<Value>1. There are rare types of exceptions that can be discarded in some contexts. For instance, Thread.sleep() throws InterruptedException, and in many situations the program should behave the same way whether or not it was awoken prematurely.


  try {
    Thread.sleep(1000);
  }
  catch (InterruptedException e){
    // The thread has been woken up prematurely, but its
    // behavior should be the same either way.
  }
</Value>
                            </MetaInfo>
                            <AttributeValue>
<Name>&lt;Unaudited&gt;</Name>
<Count>32</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not an Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Reliability Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Bad Practice</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Suspicious</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Exploitable</Name>
<Count>0</Count>
                            </AttributeValue>
                        </MajorAttributeSummary>
                        <Issue iid="328F190A82702DD0E1B4E91A79F1DF54" ruleID="8843F319-8A22-4101-A378-C2B2F2597988">
                            <Category>Poor Error Handling: Empty Catch Block</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The method getResults() in WSDLScanning.java ignores an exception on line 293, which could cause the program to overlook unexpected states and conditions.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>WSDLScanning.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/WSDLScanning.java</FilePath>
<LineStart>293</LineStart>
<Snippet>	    {}
	}
	catch (Exception e)
	{}
	return null;</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="A809D26405DEE479D931C435A4085878" ruleID="8843F319-8A22-4101-A378-C2B2F2597988">
                            <Category>Poor Error Handling: Empty Catch Block</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The method getResults() in SoapRequest.java ignores an exception on line 431, which could cause the program to overlook unexpected states and conditions.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>SoapRequest.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SoapRequest.java</FilePath>
<LineStart>431</LineStart>
<Snippet>	    {}
	}
	catch (Exception e)
	{}
	return null;</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="2141A101049B136B169FBAE5AA39E899" ruleID="8843F319-8A22-4101-A378-C2B2F2597988">
                            <Category>Poor Error Handling: Empty Catch Block</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The method makeLogin() in WeakSessionID.java ignores an exception on line 228, which could cause the program to overlook unexpected states and conditions.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>WeakSessionID.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/WeakSessionID.java</FilePath>
<LineStart>228</LineStart>
<Snippet>	    username = s.getParser().getStringParameter(USERNAME);
	}
	catch (ParameterNotFoundException pnfe)
	{}
	try</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="EE9AD154EBC79058311074958E95862E" ruleID="8843F319-8A22-4101-A378-C2B2F2597988">
                            <Category>Poor Error Handling: Empty Catch Block</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The method updateLessonStatus() in ViewProfile.java ignores an exception on line 105, which could cause the program to overlook unexpected states and conditions.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/ViewProfile.java</FilePath>
<LineStart>105</LineStart>
<Snippet>	    }
	}
	catch (ParameterNotFoundException e)
	{}
    }</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="6C4C0C66EADEFA0731473F0CF1E32939" ruleID="8843F319-8A22-4101-A378-C2B2F2597988">
                            <Category>Poor Error Handling: Empty Catch Block</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The method load() in LessonTracker.java ignores an exception on line 262, which could cause the program to overlook unexpected states and conditions.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>LessonTracker.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/LessonTracker.java</FilePath>
<LineStart>262</LineStart>
<Snippet>		in.close();
	    }
	    catch (Exception e)
	    {}
	}</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="D63662D7BCDCF79874FA9554A6E747F2" ruleID="8843F319-8A22-4101-A378-C2B2F2597988">
                            <Category>Poor Error Handling: Empty Catch Block</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The method deleteUser() in UserTracker.java ignores an exception on line 161, which could cause the program to overlook unexpected states and conditions.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>UserTracker.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/UserTracker.java</FilePath>
<LineStart>161</LineStart>
<Snippet>
	    }
	    catch (Exception e)
	    {}
	}</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="994C4D480E556B07D0349CCB06C5BA1E" ruleID="8843F319-8A22-4101-A378-C2B2F2597988">
                            <Category>Poor Error Handling: Empty Catch Block</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The method isAuthenticated() in DefaultLessonAction.java ignores an exception on line 236, which could cause the program to overlook unexpected states and conditions.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>DefaultLessonAction.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/DefaultLessonAction.java</FilePath>
<LineStart>236</LineStart>
<Snippet>			authenticated = getBooleanSessionAttribute(s, getLessonName() + ".isAuthenticated");
		}
		catch (ParameterNotFoundException e)
		{	
		}</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="77A35530E212C467C6AFFCA03523D510" ruleID="8843F319-8A22-4101-A378-C2B2F2597988">
                            <Category>Poor Error Handling: Empty Catch Block</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The method updateLessonStatus() in ViewProfile.java ignores an exception on line 268, which could cause the program to overlook unexpected states and conditions.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/ViewProfile.java</FilePath>
<LineStart>268</LineStart>
<Snippet>	    }
	}
	catch (ParameterNotFoundException pnfe)
	{}
    }</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="34AAE0A9345FDF3E38CBA13A61FEF92A" ruleID="8843F319-8A22-4101-A378-C2B2F2597988">
                            <Category>Poor Error Handling: Empty Catch Block</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The method getResults() in WsSqlInjection.java ignores an exception on line 246, which could cause the program to overlook unexpected states and conditions.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>WsSqlInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/WsSqlInjection.java</FilePath>
<LineStart>246</LineStart>
<Snippet>	    {}
	}
	catch (Exception e)
	{}
	return null;</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="6F4483CBB6230FE84094B9B09F39FA67" ruleID="8843F319-8A22-4101-A378-C2B2F2597988">
                            <Category>Poor Error Handling: Empty Catch Block</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The method getIntSessionAttribute() in DefaultLessonAction.java ignores an exception on line 145, which could cause the program to overlook unexpected states and conditions.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>DefaultLessonAction.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/DefaultLessonAction.java</FilePath>
<LineStart>145</LineStart>
<Snippet>				value = Integer.parseInt(ss);
			}
			catch (NumberFormatException nfe)
			{
			}</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="B71E82E29B56F477512F8944B396EB5F" ruleID="8843F319-8A22-4101-A378-C2B2F2597988">
                            <Category>Poor Error Handling: Empty Catch Block</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The method store() in LessonTracker.java ignores an exception on line 403, which could cause the program to overlook unexpected states and conditions.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>LessonTracker.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/LessonTracker.java</FilePath>
<LineStart>403</LineStart>
<Snippet>		out.close();
	    }
	    catch (Exception e)
	    {}
	}</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="328F190A82702DD0E1B4E91A79F1DF53" ruleID="8843F319-8A22-4101-A378-C2B2F2597988">
                            <Category>Poor Error Handling: Empty Catch Block</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The method getResults() in WSDLScanning.java ignores an exception on line 290, which could cause the program to overlook unexpected states and conditions.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>WSDLScanning.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/WSDLScanning.java</FilePath>
<LineStart>290</LineStart>
<Snippet>		}
	    }
	    catch (SQLException sqle)
	    {}
	}</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="A809D26405DEE479D931C435A4085877" ruleID="8843F319-8A22-4101-A378-C2B2F2597988">
                            <Category>Poor Error Handling: Empty Catch Block</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The method getResults() in SoapRequest.java ignores an exception on line 428, which could cause the program to overlook unexpected states and conditions.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>SoapRequest.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SoapRequest.java</FilePath>
<LineStart>428</LineStart>
<Snippet>		}
	    }
	    catch (SQLException sqle)
	    {}
	}</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="6C4C0C66EADEFA0731473F0CF1E32938" ruleID="8843F319-8A22-4101-A378-C2B2F2597988">
                            <Category>Poor Error Handling: Empty Catch Block</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The method load() in LessonTracker.java ignores an exception on line 247, which could cause the program to overlook unexpected states and conditions.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>LessonTracker.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/LessonTracker.java</FilePath>
<LineStart>247</LineStart>
<Snippet>	    }
	}
	catch (FileNotFoundException e)
	{
	    // Normal if the lesson has not been accessed yet.</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="8034B6BF9C0A3C96E3F529EF7DB07E46" ruleID="8843F319-8A22-4101-A378-C2B2F2597988">
                            <Category>Poor Error Handling: Empty Catch Block</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The method getInstructions() in LessonAdapter.java ignores an exception on line 307, which could cause the program to overlook unexpected states and conditions.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>LessonAdapter.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/LessonAdapter.java</FilePath>
<LineStart>307</LineStart>
<Snippet>	    }
	}
	catch (Exception e)
	{}
</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="001E51EC122D0082A9228729D14D43D4" ruleID="8843F319-8A22-4101-A378-C2B2F2597988">
                            <Category>Poor Error Handling: Empty Catch Block</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The method getAllUsers() in UserTracker.java ignores an exception on line 133, which could cause the program to overlook unexpected states and conditions.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>UserTracker.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/UserTracker.java</FilePath>
<LineStart>133</LineStart>
<Snippet>		usersDB.close();
	    }
	    catch (Exception e)
	    {}
	    return allUsers;</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="640709F962A3A6CD1A058C9D600CDD2E" ruleID="8843F319-8A22-4101-A378-C2B2F2597988">
                            <Category>Poor Error Handling: Empty Catch Block</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The method viewWsdl() in SoapRequest.java ignores an exception on line 265, which could cause the program to overlook unexpected states and conditions.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>SoapRequest.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SoapRequest.java</FilePath>
<LineStart>265</LineStart>
<Snippet>	    s.setMessage("Sorry, that answer is invalid. Try again.");
	}
	catch (ParameterNotFoundException pnfe)
	{
	    //DEVNOTE: Eat the exception.</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="723A2344C7367746C432EC1E0051D9CC" ruleID="8843F319-8A22-4101-A378-C2B2F2597988">
                            <Category>Poor Error Handling: Empty Catch Block</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The method determineType() in SoapRequest.java ignores an exception on line 322, which could cause the program to overlook unexpected states and conditions.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>SoapRequest.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SoapRequest.java</FilePath>
<LineStart>322</LineStart>
<Snippet>	    }
	}
	catch (ParameterNotFoundException pnfe)
	{
	    //DEVNOTE: Eat the exception.</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="B32CF1212F9C99301C355F37AB3AD6A3" ruleID="8843F319-8A22-4101-A378-C2B2F2597988">
                            <Category>Poor Error Handling: Empty Catch Block</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The method getIntRequestAttribute() in DefaultLessonAction.java ignores an exception on line 178, which could cause the program to overlook unexpected states and conditions.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>DefaultLessonAction.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/DefaultLessonAction.java</FilePath>
<LineStart>178</LineStart>
<Snippet>				value = Integer.parseInt(ss);
			}
			catch (NumberFormatException nfe)
			{
			}</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="2141A101049B136B169FBAE5AA39E89A" ruleID="8843F319-8A22-4101-A378-C2B2F2597988">
                            <Category>Poor Error Handling: Empty Catch Block</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The method makeLogin() in WeakSessionID.java ignores an exception on line 234, which could cause the program to overlook unexpected states and conditions.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>WeakSessionID.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/WeakSessionID.java</FilePath>
<LineStart>234</LineStart>
<Snippet>	    password = s.getParser().getStringParameter(PASSWORD);
	}
	catch (ParameterNotFoundException pnfe)
	{}
</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="B7F867C5D55781B41552F6B38F0F92AB" ruleID="8843F319-8A22-4101-A378-C2B2F2597988">
                            <Category>Poor Error Handling: Empty Catch Block</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The method update() in WebSession.java ignores an exception on line 1027, which could cause the program to overlook unexpected states and conditions.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>WebSession.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/WebSession.java</FilePath>
<LineStart>1027</LineStart>
<Snippet>			}
		}
		catch ( Exception e )
		{
		}</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="833627E5F9F60C5DC0B7D2E90ADDCAF3" ruleID="8843F319-8A22-4101-A378-C2B2F2597988">
                            <Category>Poor Error Handling: Empty Catch Block</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The method foundEmployee() in FindProfile.java ignores an exception on line 235, which could cause the program to overlook unexpected states and conditions.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>FindProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/FindProfile.java</FilePath>
<LineStart>235</LineStart>
<Snippet>	    found = true;
	}
	catch (ParameterNotFoundException e)
	{}
</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="D448A9A6989D3E0D1501589E69E90601" ruleID="8843F319-8A22-4101-A378-C2B2F2597988">
                            <Category>Poor Error Handling: Empty Catch Block</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The method createContent() in WSDLScanning.java ignores an exception on line 232, which could cause the program to overlook unexpected states and conditions.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>WSDLScanning.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/WSDLScanning.java</FilePath>
<LineStart>232</LineStart>
<Snippet>	    ec.addElement(new P().addElement(t));
	}
	catch (Exception e)
	{
</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="4FB1967F287C3B421FCDE7B59977AFCA" ruleID="8843F319-8A22-4101-A378-C2B2F2597988">
                            <Category>Poor Error Handling: Empty Catch Block</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The method createContent() in ReportCardScreen.java ignores an exception on line 87, which could cause the program to overlook unexpected states and conditions.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ReportCardScreen.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/admin/ReportCardScreen.java</FilePath>
<LineStart>87</LineStart>
<Snippet>	    }
	}
	catch (Exception e)
	{}
</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="AA019D41BE25BB0FB11784798C66A90A" ruleID="8843F319-8A22-4101-A378-C2B2F2597988">
                            <Category>Poor Error Handling: Empty Catch Block</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The method getCreditCard() in WsSqlInjection.java ignores an exception on line 273, which could cause the program to overlook unexpected states and conditions.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>WsSqlInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/WsSqlInjection.java</FilePath>
<LineStart>273</LineStart>
<Snippet>		return users;
	    }
	    catch (SQLException sqle)
	    {}
	}</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="77A35530E212C467C6AFFCA03523D50F" ruleID="8843F319-8A22-4101-A378-C2B2F2597988">
                            <Category>Poor Error Handling: Empty Catch Block</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The method updateLessonStatus() in ViewProfile.java ignores an exception on line 253, which could cause the program to overlook unexpected states and conditions.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/ViewProfile.java</FilePath>
<LineStart>253</LineStart>
<Snippet>				    userId, employeeId);
			}
			catch (UnauthorizedException e)
			{}
			if (targetEmployee != null</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="DACF6CF1217EA9A21A29F4A91928BFF3" ruleID="8843F319-8A22-4101-A378-C2B2F2597988">
                            <Category>Poor Error Handling: Empty Catch Block</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The method foundEmployee() in FindProfile.java ignores an exception on line 118, which could cause the program to overlook unexpected states and conditions.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>FindProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/FindProfile.java</FilePath>
<LineStart>118</LineStart>
<Snippet>	    found = true;
	}
	catch (ParameterNotFoundException e)
	{}
</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="AB0DC4163B2F4540E8B43D74D6C24B93" ruleID="8843F319-8A22-4101-A378-C2B2F2597988">
                            <Category>Poor Error Handling: Empty Catch Block</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The method loadLessons() in Course.java ignores an exception on line 377, which could cause the program to overlook unexpected states and conditions.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Course.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/Course.java</FilePath>
<LineStart>377</LineStart>
<Snippet>    				}
    			}
    			catch (Exception e)
    			{
    				//System.out.println("Warning: " + e.getMessage());</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="E9EDBF5BF129C81B7AA27CFB179E8452" ruleID="8843F319-8A22-4101-A378-C2B2F2597988">
                            <Category>Poor Error Handling: Empty Catch Block</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The method createContent() in LessonAdapter.java ignores an exception on line 101, which could cause the program to overlook unexpected states and conditions.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>LessonAdapter.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/LessonAdapter.java</FilePath>
<LineStart>101</LineStart>
<Snippet>		ec.addElement(pre);
	    }
	    catch (Exception e)
	    {}
	}</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="C9AC077BDAC3DDDE44672BEDB913CFE3" ruleID="8843F319-8A22-4101-A378-C2B2F2597988">
                            <Category>Poor Error Handling: Empty Catch Block</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The method updateLessonStatus() in DeleteProfile.java ignores an exception on line 176, which could cause the program to overlook unexpected states and conditions.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>DeleteProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/DeleteProfile.java</FilePath>
<LineStart>176</LineStart>
<Snippet>	    }
	}
	catch (ParameterNotFoundException e)
	{}
    }</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="3DD48437A3EC81F297685B39FCBACC59" ruleID="8843F319-8A22-4101-A378-C2B2F2597988">
                            <Category>Poor Error Handling: Empty Catch Block</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The method getResults() in WsSqlInjection.java ignores an exception on line 243, which could cause the program to overlook unexpected states and conditions.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>WsSqlInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/WsSqlInjection.java</FilePath>
<LineStart>243</LineStart>
<Snippet>		return results;
	    }
	    catch (SQLException sqle)
	    {}
	}</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="6006134830EAB488FFAED5E6E2F8B1C0" ruleID="8843F319-8A22-4101-A378-C2B2F2597988">
                            <Category>Poor Error Handling: Empty Catch Block</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The method updateLessonStatus() in Login.java ignores an exception on line 297, which could cause the program to overlook unexpected states and conditions.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Login.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/Login.java</FilePath>
<LineStart>297</LineStart>
<Snippet>	    }
	}
	catch (ParameterNotFoundException pnfe)
	{}
    }</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                    </GroupingSection>
                    <GroupingSection count="29">
                        <groupTitle>Cross-Site Scripting: Persistent</groupTitle>
                        <MajorAttributeSummary>
                            <MetaInfo>
<Name>Abstract</Name>
<Value>The method concept1() in BackDoors.java sends unvalidated data to a web browser on line 125, which can result in the browser executing malicious code.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Explanation</Name>
<Value>Cross-site scripting (XSS) vulnerabilities occur when:

1. Data enters a web application through an untrusted source. In the case of persistent (also known as stored) XSS, the untrusted source is typically a database or other back-end data store, while in the case of reflected XSS it is typically a web request.


2. The data is included in dynamic content that is sent to a web user without validation.

The malicious content sent to the web browser often takes the form of a JavaScript segment, but can also include HTML, Flash or any other type of code that the browser executes. The variety of attacks based on XSS is almost limitless, but they commonly include transmitting private data such as cookies or other session information to the attacker, redirecting the victim to web content controlled by the attacker, or performing other malicious operations on the user's machine under the guise of the vulnerable site.


Example 1: The following JSP code segment queries a database for an employee with a given ID and prints the corresponding employee's name.


&lt;%...
Statement stmt = conn.createStatement();
ResultSet rs = stmt.executeQuery("select * from emp where id="+eid);
if (rs != null) {
   rs.next();
   String name = rs.getString("name");
}
%&gt;

Employee Name: &lt;%= name %&gt;



This code functions correctly when the values of name are well-behaved, but it does nothing to prevent exploits if they are not. This code can appear less dangerous because the value of name is read from a database, whose contents are apparently managed by the application. However, if the value of name originates from user-supplied data, then the database can be a conduit for malicious content. Without proper input validation on all data stored in the database, an attacker may execute malicious commands in the user's web browser. This type of exploit, known as Persistent (or Stored) XSS, is particularly insidious because the indirection caused by the data store makes it difficult to identify the threat and increases the possibility that the attack might affect multiple users. XSS got its start in this form with web sites that offered a "guestbook" to visitors. Attackers would include JavaScript in their guestbook entries, and all subsequent visitors to the guestbook page would execute the malicious code.


Example 2: The following JSP code segment reads an employee ID, eid, from an HTTP request and displays it to the user.


&lt;% String eid = request.getParameter("eid"); %&gt;
...
Employee ID: &lt;%= eid %&gt;



As in Example 1, this code operates correctly if eid contains only standard alphanumeric text. If eid has a value that includes metacharacters or source code, then the code is executed by the web browser as it displays the HTTP response.

Initially this might not appear to be much of a vulnerability. After all, why would someone enter a URL that causes malicious code to run on their own computer? The real danger is that an attacker will create the malicious URL, then use email or social engineering tricks to lure victims into visiting a link to the URL. When victims click the link, they unwittingly reflect the malicious content through the vulnerable web application back to their own computers. This mechanism of exploiting vulnerable web applications is known as Reflected XSS.

Some think that in the mobile environment, classic web application vulnerabilities, such as cross-site scripting, do not make sense -- why would the user attack themself? However, keep in mind that the essence of mobile platforms is applications that are downloaded from various sources and run alongside each other on the same device. The likelihood of running a piece of malware next to a banking application is high, which necessitates expanding the attack surface of mobile applications to include inter-process communication.

Example 3: The following code enables JavaScript in Android's WebView (by default, JavaScript is disabled) and loads a page based on the value received from an Android intent.


...
        WebView webview = (WebView) findViewById(R.id.webview);
        webview.getSettings().setJavaScriptEnabled(true);
        String url = this.getIntent().getExtras().getString("url");
        webview.loadUrl(url);
...


If the value of url starts with javascript:, JavaScript code that follows executes within the context of the web page inside WebView.

As the examples demonstrate, XSS vulnerabilities are caused by code that includes unvalidated data in an HTTP response. There are three vectors by which an XSS attack can reach a victim:

- As in Example 1, the application stores dangerous data in a database or other trusted data store. The dangerous data is subsequently read back into the application and included in dynamic content. Persistent XSS exploits occur when an attacker injects dangerous content into a data store that is later read and included in dynamic content. From an attacker's perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user.

- As in Example 2, data is read directly from the HTTP request and reflected back in the HTTP response. Reflected XSS exploits occur when an attacker causes a user to supply dangerous content to a vulnerable web application, which is then reflected back to the user and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or emailed directly to victims. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces victims to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the user, the content is executed and proceeds to transfer private information, such as cookies that might include session information, from the user's machine to the attacker or perform other nefarious activities.

- As in Example 3, a source outside the application stores dangerous data in a database or other data store, and the dangerous data is subsequently read back into the application as trusted data and included in dynamic content.


A number of modern web frameworks provide mechanisms to perform user input validation (including Struts and Spring MVC). To highlight the unvalidated sources of input, Fortify Secure Coding Rulepacks dynamically re-prioritize the issues Fortify Static Code Analyzer reports by lowering their probability of exploit and providing pointers to the supporting evidence whenever the framework validation mechanism is in use. We refer to this feature as Context-Sensitive Ranking. To further assist the Fortify user with the auditing process, the Fortify Software Security Research group makes available the Data Validation project template that groups the issues into folders based on the validation mechanism applied to their source of input.
</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Recommendations</Name>
<Value>The solution to prevent XSS is to ensure that validation occurs in the required places and that relevant properties are set to prevent vulnerabilities.

Because XSS vulnerabilities occur when an application includes malicious data in its output, one logical approach is to validate data immediately before it leaves the application. However, because web applications often have complex and intricate code for generating dynamic content, this method is prone to errors of omission (missing validation). An effective way to mitigate this risk is to also perform input validation for XSS.

Web applications must validate all input to prevent other vulnerabilities, such as SQL injection, so augmenting an application's existing input validation mechanism to include checks for XSS is generally relatively easy. Despite its value, input validation for XSS does not take the place of rigorous output validation. An application might accept input through a shared data store or other trusted source, and that data store might accept input from a source that does not perform adequate input validation. Therefore, the application cannot implicitly rely on the safety of this or any other data. This means that the best way to prevent XSS vulnerabilities is to validate everything that enters the application and leaves the application destined for the user.

The most secure approach to validation for XSS is to create an allow list of safe characters that can appear in HTTP content and accept input composed exclusively of characters in the approved set. For example, a valid username might only include alphanumeric characters or a phone number might only include digits 0-9. However, this solution is often infeasible in web applications because many characters that have special meaning to the browser must be considered valid input after they are encoded, such as a web design bulletin board that must accept HTML fragments from its users.

A more flexible, but less secure approach is to implement a deny list, which selectively rejects or escapes potentially dangerous characters before using the input. To form such a list, you first need to understand the set of characters that hold special meaning for web browsers. Although the HTML standard defines which characters have special meaning, many web browsers try to correct common mistakes in HTML and might treat other characters as special in certain contexts. This is why we do not recommend the use of deny lists as a means to prevent XSS. The CERT(R) Coordination Center at the Software Engineering Institute at Carnegie Mellon University provides the following details about special characters in various contexts [1]:

In the content of a block-level element (in the middle of a paragraph of text):

- "&lt;" is special because it introduces a tag.

- "&amp;" is special because it introduces a character entity.

- "&gt;" is special because some browsers treat it as special, on the assumption that the author of the page intended to include an opening "&lt;", but omitted it in error.

The following principles apply to attribute values:

- In attribute values enclosed in double quotes, the double quotes are special because they mark the end of the attribute value.

- In attribute values enclosed in single quotes, the single quotes are special because they mark the end of the attribute value.

- In attribute values without any quotes, white-space characters, such as space and tab, are special.

- "&amp;" is special when used with certain attributes, because it introduces a character entity.

In URLs, for example, a search engine might provide a link within the results page that the user can click to re-run the search. This can be implemented by encoding the search query inside the URL, which introduces additional special characters:

- Space, tab, and new line are special because they mark the end of the URL.

- "&amp;" is special because it either introduces a character entity or separates CGI parameters.

- Non-ASCII characters (that is, everything greater than 127 in the ISO-8859-1 encoding) are not allowed in URLs, so they are considered to be special in this context.

- The "%" symbol must be filtered from input anywhere parameters encoded with HTTP escape sequences are decoded by server-side code. For example, "%" must be filtered if input such as "%68%65%6C%6C%6F" becomes "hello" when it appears on the web page.


Within the body of a &lt;SCRIPT&gt; &lt;/SCRIPT&gt;:

- Semicolons, parentheses, curly braces, and new line characters must be filtered out in situations where text could be inserted directly into a pre-existing script tag.

Server-side scripts:

- Server-side scripts that convert any exclamation characters (!) in input to double-quote characters (") on output might require additional filtering.

Other possibilities:

- If an attacker submits a request in UTF-7, the special character '&lt;' appears as '+ADw-' and might bypass filtering. If the output is included in a page that does not explicitly specify an encoding format, then some browsers try to intelligently identify the encoding based on the content (in this case, UTF-7).

After you identify the correct points in an application to perform validation for XSS attacks and what special characters the validation should consider, the next challenge is to identify how your validation handles special characters. If special characters are not considered valid input to the application, then you can reject any input that contains special characters as invalid. A second option is to remove special characters with filtering. However, filtering has the side effect of changing any visual representation of the filtered content and might be unacceptable in circumstances where the integrity of the input must be preserved for display.

If input containing special characters must be accepted and displayed accurately, validation must encode any special characters to remove their significance. A complete list of ISO 8859-1 encoded values for special characters is provided as part of the official HTML specification [2].

Many application servers attempt to limit an application's exposure to cross-site scripting vulnerabilities by providing implementations for the functions responsible for setting certain specific HTTP response content that perform validation for the characters essential to a cross-site scripting attack. Do not rely on the server running your application to make it secure. For any developed application, there are no guarantees about which application servers it will run on during its lifetime. As standards and known exploits evolve, there are no guarantees that application servers will continue to stay in sync.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Tips</Name>
<Value>1. The Fortify Secure Coding Rulepacks warn about SQL Injection issues when untrusted data is written to a database and also treat the database as a source of untrusted data, which can lead to XSS vulnerabilities. If the database is a trusted resource in your environment, use custom filters to filter out dataflow issues that include the DATABASE taint flag or originate from database sources. Nonetheless, it is often still a good idea to validate everything read from the database.

2. Even though URL encoding untrusted data protects against many XSS attacks, some browsers automatically decode content at certain locations within the Document Object Model (DOM) prior to passing it to the JavaScript interpreter. To reflect this danger, the Rulepacks no longer treat URL encoding routines as sufficient to protect against cross-site scripting. Data values that are URL encoded and subsequently output will cause Fortify to report Cross-Site Scripting: Poor Validation vulnerabilities.</Value>
                            </MetaInfo>
                            <AttributeValue>
<Name>&lt;Unaudited&gt;</Name>
<Count>29</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not an Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Reliability Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Bad Practice</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Suspicious</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Exploitable</Name>
<Count>0</Count>
                            </AttributeValue>
                        </MajorAttributeSummary>
                        <Issue iid="EDF8A46B61B836CABDDD520B54B33001" ruleID="94B3FB0E-4AED-4006-9CDD-B2B1C13747EE">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method writeTable() in DatabaseUtilities.java sends unvalidated data to a web browser on line 154, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>DatabaseUtilities.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/DatabaseUtilities.java</FilePath>
<LineStart>154</LineStart>
<Snippet>		for (int i = 1; i &lt; (numColumns + 1); i++)
		{
		    row.addElement(new TD(results.getString(i).replaceAll(" ",
			    "&amp;nbsp;")));
		}</Snippet>
<TargetFunction>org.apache.ecs.html.TD.TD()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>SqlNumericInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SqlNumericInjection.java</FilePath>
<LineStart>130</LineStart>
<Snippet>			ResultSet.TYPE_SCROLL_INSENSITIVE,
			ResultSet.CONCUR_READ_ONLY);
		ResultSet results = statement.executeQuery(query);

		if ((results != null) &amp;&amp; (results.first() == true))</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="7F5910D8AF054AAE63BCB1A22ECFA207" ruleID="94B3FB0E-4AED-4006-9CDD-B2B1C13747EE">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method makeList() in CSRF.java sends unvalidated data to a web browser on line 193, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>CSRF.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CSRF.java</FilePath>
<LineStart>193</LineStart>
<Snippet>			        "&amp;menu=" + getDefaultCategory().getRanking().toString() +
			        "' style='cursor:hand'&gt;" +  results.getString( TITLE_COL ) + "&lt;/a&gt;";
					TD td = new TD().addElement( link );
					TR tr = new TR().addElement( td );
					t.addElement( tr );</Snippet>
<TargetFunction>org.apache.ecs.html.TD.addElement()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>CSRF.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CSRF.java</FilePath>
<LineStart>181</LineStart>
<Snippet>			Statement statement = connection.createStatement( ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY );
			
			ResultSet results = statement.executeQuery( STANDARD_QUERY + " WHERE user_name LIKE '" + getNameroot( s.getUserName() ) + "%'" );

			if ( ( results != null ) &amp;&amp; ( results.first() == true ) )</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="11F1761C672F6E989BCAA93E87F652BC" ruleID="94B3FB0E-4AED-4006-9CDD-B2B1C13747EE">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method concept1() in BackDoors.java sends unvalidated data to a web browser on line 127, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>BackDoors.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/BackDoors.java</FilePath>
<LineStart>127</LineStart>
<Snippet>		    tr.addElement(new TD(rs.getString("userid")));
		    tr.addElement(new TD(rs.getString("password")));
		    tr.addElement(new TD(rs.getString("ssn")));
		    tr.addElement(new TD(rs.getString("salary")));
		    t.addElement(tr);</Snippet>
<TargetFunction>org.apache.ecs.html.TD.TD()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>BackDoors.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/BackDoors.java</FilePath>
<LineStart>113</LineStart>
<Snippet>		}

		ResultSet rs = statement.executeQuery(arrSQL[0]);
		if (rs.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="17BB7194AF5F3257FC85C2CF5087CE96" ruleID="94B3FB0E-4AED-4006-9CDD-B2B1C13747EE">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method concept1() in BackDoors.java sends unvalidated data to a web browser on line 125, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>BackDoors.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/BackDoors.java</FilePath>
<LineStart>125</LineStart>
<Snippet>		    t.addElement(tr);
		    tr = new TR();
		    tr.addElement(new TD(rs.getString("userid")));
		    tr.addElement(new TD(rs.getString("password")));
		    tr.addElement(new TD(rs.getString("ssn")));</Snippet>
<TargetFunction>org.apache.ecs.html.TD.TD()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>BackDoors.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/BackDoors.java</FilePath>
<LineStart>113</LineStart>
<Snippet>		}

		ResultSet rs = statement.executeQuery(arrSQL[0]);
		if (rs.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="3A8E3BB2450E531B99FA728F81DEA042" ruleID="94B3FB0E-4AED-4006-9CDD-B2B1C13747EE">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method makeCurrent() in StoredXss.java sends unvalidated data to a web browser on line 239, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>StoredXss.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/StoredXss.java</FilePath>
<LineStart>239</LineStart>
<Snippet>		String messageData = results.getString(MESSAGE_COL);
		TR row2 = new TR(new TD(new B(new StringElement("Message:"))));
		row2.addElement(new TD(new StringElement(messageData)));
		t.addElement(row2);
</Snippet>
<TargetFunction>org.apache.ecs.html.TD.TD()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>StoredXss.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/StoredXss.java</FilePath>
<LineStart>224</LineStart>
<Snippet>	    statement.setString(1, getNameroot(s.getUserName()) + "%");
	    statement.setInt(2, messageNum);
	    ResultSet results = statement.executeQuery();

	    if ((results != null) &amp;&amp; results.first())</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="A493155D278EDB3DFFB05B30943C65A7" ruleID="94B3FB0E-4AED-4006-9CDD-B2B1C13747EE">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method writeTable() in DatabaseUtilities.java sends unvalidated data to a web browser on line 154, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>DatabaseUtilities.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/DatabaseUtilities.java</FilePath>
<LineStart>154</LineStart>
<Snippet>		for (int i = 1; i &lt; (numColumns + 1); i++)
		{
		    row.addElement(new TD(results.getString(i).replaceAll(" ",
			    "&amp;nbsp;")));
		}</Snippet>
<TargetFunction>org.apache.ecs.html.TD.TD()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>SqlNumericInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SqlNumericInjection.java</FilePath>
<LineStart>208</LineStart>
<Snippet>			ResultSet.CONCUR_READ_ONLY);
		statement.setInt(1, Integer.parseInt(station));
		ResultSet results = statement.executeQuery();

		if ((results != null) &amp;&amp; (results.first() == true))</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="06CA400013FB6F492D5C1678976823BE" ruleID="94B3FB0E-4AED-4006-9CDD-B2B1C13747EE">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method makeLink() in ECSFactory.java sends unvalidated data to a web browser on line 292, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ECSFactory.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ECSFactory.java</FilePath>
<LineStart>292</LineStart>
<Snippet>	A a = new A(href);

	a.addElement(new U().addElement(text));

	a.addAttribute("style", "cursor:hand");</Snippet>
<TargetFunction>org.apache.ecs.html.U.addElement()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>StoredXss.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/StoredXss.java</FilePath>
<LineStart>343</LineStart>
<Snippet>	    // cookies, but not get confused by other users scripts

	    ResultSet results = statement.executeQuery(STANDARD_QUERY
		    + " WHERE user_name LIKE '" + getNameroot(s.getUserName())
		    + "%'");</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="B006533175FFC04DA1C8A68E496D8F69" ruleID="94B3FB0E-4AED-4006-9CDD-B2B1C13747EE">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method writeTable() in DatabaseUtilities.java sends unvalidated data to a web browser on line 154, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>DatabaseUtilities.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/DatabaseUtilities.java</FilePath>
<LineStart>154</LineStart>
<Snippet>		for (int i = 1; i &lt; (numColumns + 1); i++)
		{
		    row.addElement(new TD(results.getString(i).replaceAll(" ",
			    "&amp;nbsp;")));
		}</Snippet>
<TargetFunction>org.apache.ecs.html.TD.TD()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>WsSqlInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/WsSqlInjection.java</FilePath>
<LineStart>240</LineStart>
<Snippet>			ResultSet.TYPE_SCROLL_INSENSITIVE,
			ResultSet.CONCUR_READ_ONLY);
		ResultSet results = statement.executeQuery(query);
		return results;
	    }</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="F923DCADEC840E9C80C09336D9C4FDA6" ruleID="94B3FB0E-4AED-4006-9CDD-B2B1C13747EE">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method writeTable() in DatabaseUtilities.java sends unvalidated data to a web browser on line 154, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>DatabaseUtilities.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/DatabaseUtilities.java</FilePath>
<LineStart>154</LineStart>
<Snippet>		for (int i = 1; i &lt; (numColumns + 1); i++)
		{
		    row.addElement(new TD(results.getString(i).replaceAll(" ",
			    "&amp;nbsp;")));
		}</Snippet>
<TargetFunction>org.apache.ecs.html.TD.TD()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>UserAdminScreen.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/admin/UserAdminScreen.java</FilePath>
<LineStart>75</LineStart>
<Snippet>		    ResultSet.TYPE_SCROLL_INSENSITIVE,
		    ResultSet.CONCUR_READ_ONLY);
	    ResultSet results = statement.executeQuery(QUERY);

	    if (results != null)</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="AAFC1F7059CAAA46A9CD6BDBA80E9307" ruleID="94B3FB0E-4AED-4006-9CDD-B2B1C13747EE">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method makeCurrent() in CSRF.java sends unvalidated data to a web browser on line 248, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>CSRF.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CSRF.java</FilePath>
<LineStart>248</LineStart>
<Snippet>				Table t = new Table( 0 ).setCellSpacing( 0 ).setCellPadding( 0 ).setBorder( 0 );
				TR row1 = new TR( new TD( new B(new StringElement( "Title:" )) ) );
				row1.addElement( new TD( new StringElement( results.getString( TITLE_COL ) ) ) );
				t.addElement( row1 );
</Snippet>
<TargetFunction>org.apache.ecs.html.TD.TD()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>CSRF.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CSRF.java</FilePath>
<LineStart>241</LineStart>
<Snippet>			statement.setString(1, getNameroot( s.getUserName() ) + "%");
			statement.setInt(2, messageNum);
			ResultSet results = statement.executeQuery();

			if ( ( results != null ) &amp;&amp; results.first() )</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="7BE3E12694022AFD9AF323451FEC105E" ruleID="94B3FB0E-4AED-4006-9CDD-B2B1C13747EE">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method createContent() in WSDLScanning.java sends unvalidated data to a web browser on line 221, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>WSDLScanning.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/WSDLScanning.java</FilePath>
<LineStart>221</LineStart>
<Snippet>		header.addElement(new TD().addElement(fields[i]));
		results.addElement(new TD()
			.addElement((String) accessWGService("WSDLScanning",
				fields[i], "acct_num", new Integer(id))));
	    }</Snippet>
<TargetFunction>org.apache.ecs.html.TD.addElement()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>WSDLScanning.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/WSDLScanning.java</FilePath>
<LineStart>150</LineStart>
<Snippet>	    call.setTargetEndpointAddress("http://localhost/WebGoat/services/"
		    + serv);
	    Object result = call.invoke(new Object[] { parameterValue });
	    return result;
	}</Snippet>
<TargetFunction>org.apache.axis.client.Call.invoke()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="C6A666FC90242705B57829FF6DC411F7" ruleID="94B3FB0E-4AED-4006-9CDD-B2B1C13747EE">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method makeCurrent() in StoredXss.java sends unvalidated data to a web browser on line 228, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>StoredXss.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/StoredXss.java</FilePath>
<LineStart>228</LineStart>
<Snippet>	    if ((results != null) &amp;&amp; results.first())
	    {
		ec.addElement(new H1("Message Contents For: "
			+ results.getString(TITLE_COL)));
		Table t = new Table(0).setCellSpacing(0).setCellPadding(0)</Snippet>
<TargetFunction>org.apache.ecs.html.H1.H1()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>StoredXss.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/StoredXss.java</FilePath>
<LineStart>224</LineStart>
<Snippet>	    statement.setString(1, getNameroot(s.getUserName()) + "%");
	    statement.setInt(2, messageNum);
	    ResultSet results = statement.executeQuery();

	    if ((results != null) &amp;&amp; results.first())</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="A6812F7C6FC5DE38A4539262BA6AA1A6" ruleID="94B3FB0E-4AED-4006-9CDD-B2B1C13747EE">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method makeStationList() in SqlNumericInjection.java sends unvalidated data to a web browser on line 264, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SqlNumericInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SqlNumericInjection.java</FilePath>
<LineStart>264</LineStart>
<Snippet>	{
	    String key = (String) it.next();
	    select.addElement(new Option(key).addElement((String) stations
		    .get(key)));
	}</Snippet>
<TargetFunction>org.apache.ecs.html.Option.Option()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>SqlNumericInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SqlNumericInjection.java</FilePath>
<LineStart>299</LineStart>
<Snippet>		    ResultSet.TYPE_SCROLL_INSENSITIVE,
		    ResultSet.CONCUR_READ_ONLY);
	    ResultSet results = statement.executeQuery(query);

	    if ((results != null) &amp;&amp; (results.first() == true))</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="534E027931D59EC4A4462FF83B150B17" ruleID="94B3FB0E-4AED-4006-9CDD-B2B1C13747EE">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method writeTable() in DatabaseUtilities.java sends unvalidated data to a web browser on line 154, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>DatabaseUtilities.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/DatabaseUtilities.java</FilePath>
<LineStart>154</LineStart>
<Snippet>		for (int i = 1; i &lt; (numColumns + 1); i++)
		{
		    row.addElement(new TD(results.getString(i).replaceAll(" ",
			    "&amp;nbsp;")));
		}</Snippet>
<TargetFunction>org.apache.ecs.html.TD.TD()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ThreadSafetyProblem.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/ThreadSafetyProblem.java</FilePath>
<LineStart>103</LineStart>
<Snippet>			ResultSet.TYPE_SCROLL_INSENSITIVE,
			ResultSet.CONCUR_READ_ONLY);
		ResultSet results = statement.executeQuery(query);

		if ((results != null) &amp;&amp; (results.first() == true))</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="0A63D93D46BAE019693FC96144F860E5" ruleID="94B3FB0E-4AED-4006-9CDD-B2B1C13747EE">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method writeTable() in DatabaseUtilities.java sends unvalidated data to a web browser on line 154, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>DatabaseUtilities.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/DatabaseUtilities.java</FilePath>
<LineStart>154</LineStart>
<Snippet>		for (int i = 1; i &lt; (numColumns + 1); i++)
		{
		    row.addElement(new TD(results.getString(i).replaceAll(" ",
			    "&amp;nbsp;")));
		}</Snippet>
<TargetFunction>org.apache.ecs.html.TD.TD()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>SqlStringInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SqlStringInjection.java</FilePath>
<LineStart>112</LineStart>
<Snippet>			ResultSet.TYPE_SCROLL_INSENSITIVE,
			ResultSet.CONCUR_READ_ONLY);
		ResultSet results = statement.executeQuery(query);

		if ((results != null) &amp;&amp; (results.first() == true))</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="BFC40FBA3F9B73C3A8654B3F76C62244" ruleID="94B3FB0E-4AED-4006-9CDD-B2B1C13747EE">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method makeCurrent() in CSRF.java sends unvalidated data to a web browser on line 245, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>CSRF.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CSRF.java</FilePath>
<LineStart>245</LineStart>
<Snippet>			if ( ( results != null ) &amp;&amp; results.first() )
			{
				ec.addElement( new H1( "Message Contents For: " + results.getString( TITLE_COL )) );
				Table t = new Table( 0 ).setCellSpacing( 0 ).setCellPadding( 0 ).setBorder( 0 );
				TR row1 = new TR( new TD( new B(new StringElement( "Title:" )) ) );</Snippet>
<TargetFunction>org.apache.ecs.html.H1.H1()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>CSRF.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CSRF.java</FilePath>
<LineStart>241</LineStart>
<Snippet>			statement.setString(1, getNameroot( s.getUserName() ) + "%");
			statement.setInt(2, messageNum);
			ResultSet results = statement.executeQuery();

			if ( ( results != null ) &amp;&amp; results.first() )</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="AAFC1F7059CAAA46A9CD6BDBA80E9308" ruleID="94B3FB0E-4AED-4006-9CDD-B2B1C13747EE">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method makeCurrent() in CSRF.java sends unvalidated data to a web browser on line 253, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>CSRF.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CSRF.java</FilePath>
<LineStart>253</LineStart>
<Snippet>				String messageData = results.getString( MESSAGE_COL );
				TR row2 = new TR( new TD( new B(new StringElement( "Message:" )) ) );
				row2.addElement( new TD( new StringElement( messageData ) ) );
				t.addElement( row2 );
											</Snippet>
<TargetFunction>org.apache.ecs.html.TD.TD()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>CSRF.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CSRF.java</FilePath>
<LineStart>241</LineStart>
<Snippet>			statement.setString(1, getNameroot( s.getUserName() ) + "%");
			statement.setInt(2, messageNum);
			ResultSet results = statement.executeQuery();

			if ( ( results != null ) &amp;&amp; results.first() )</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="AAFC1F7059CAAA46A9CD6BDBA80E9309" ruleID="94B3FB0E-4AED-4006-9CDD-B2B1C13747EE">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method makeCurrent() in CSRF.java sends unvalidated data to a web browser on line 257, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>CSRF.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CSRF.java</FilePath>
<LineStart>257</LineStart>
<Snippet>											
				TR row3 = new TR( new TD( new StringElement( "Posted By:" ) ) );
				row3.addElement( new TD( new StringElement( results.getString( USER_COL ) ) ) );
				t.addElement( row3 );
								</Snippet>
<TargetFunction>org.apache.ecs.html.TD.TD()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>CSRF.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CSRF.java</FilePath>
<LineStart>241</LineStart>
<Snippet>			statement.setString(1, getNameroot( s.getUserName() ) + "%");
			statement.setInt(2, messageNum);
			ResultSet results = statement.executeQuery();

			if ( ( results != null ) &amp;&amp; results.first() )</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="817C085918DF353C388139CCC2BAEBF2" ruleID="94B3FB0E-4AED-4006-9CDD-B2B1C13747EE">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method writeTable() in DatabaseUtilities.java sends unvalidated data to a web browser on line 154, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>DatabaseUtilities.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/DatabaseUtilities.java</FilePath>
<LineStart>154</LineStart>
<Snippet>		for (int i = 1; i &lt; (numColumns + 1); i++)
		{
		    row.addElement(new TD(results.getString(i).replaceAll(" ",
			    "&amp;nbsp;")));
		}</Snippet>
<TargetFunction>org.apache.ecs.html.TD.TD()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ProductsAdminScreen.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/admin/ProductsAdminScreen.java</FilePath>
<LineStart>75</LineStart>
<Snippet>		    ResultSet.TYPE_SCROLL_INSENSITIVE,
		    ResultSet.CONCUR_READ_ONLY);
	    ResultSet results = statement.executeQuery(QUERY);

	    if (results != null)</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="C17D91286AD2D02369C262900E561D07" ruleID="94B3FB0E-4AED-4006-9CDD-B2B1C13747EE">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method concept1() in BackDoors.java sends unvalidated data to a web browser on line 126, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>BackDoors.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/BackDoors.java</FilePath>
<LineStart>126</LineStart>
<Snippet>		    tr = new TR();
		    tr.addElement(new TD(rs.getString("userid")));
		    tr.addElement(new TD(rs.getString("password")));
		    tr.addElement(new TD(rs.getString("ssn")));
		    tr.addElement(new TD(rs.getString("salary")));</Snippet>
<TargetFunction>org.apache.ecs.html.TD.TD()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>BackDoors.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/BackDoors.java</FilePath>
<LineStart>113</LineStart>
<Snippet>		}

		ResultSet rs = statement.executeQuery(arrSQL[0]);
		if (rs.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="3A8E3BB2450E531B99FA728F81DEA043" ruleID="94B3FB0E-4AED-4006-9CDD-B2B1C13747EE">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method makeCurrent() in StoredXss.java sends unvalidated data to a web browser on line 247, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>StoredXss.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/StoredXss.java</FilePath>
<LineStart>247</LineStart>
<Snippet>
		TR row3 = new TR(new TD(new StringElement("Posted By:")));
		row3.addElement(new TD(new StringElement(results
			.getString(USER_COL))));
		t.addElement(row3);</Snippet>
<TargetFunction>org.apache.ecs.html.TD.TD()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>StoredXss.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/StoredXss.java</FilePath>
<LineStart>224</LineStart>
<Snippet>	    statement.setString(1, getNameroot(s.getUserName()) + "%");
	    statement.setInt(2, messageNum);
	    ResultSet results = statement.executeQuery();

	    if ((results != null) &amp;&amp; results.first())</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="1ADC4933B860D72293036A75AF4D12F5" ruleID="94B3FB0E-4AED-4006-9CDD-B2B1C13747EE">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method concept1() in BackDoors.java sends unvalidated data to a web browser on line 128, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>BackDoors.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/BackDoors.java</FilePath>
<LineStart>128</LineStart>
<Snippet>		    tr.addElement(new TD(rs.getString("password")));
		    tr.addElement(new TD(rs.getString("ssn")));
		    tr.addElement(new TD(rs.getString("salary")));
		    t.addElement(tr);
		    ec.addElement(t);</Snippet>
<TargetFunction>org.apache.ecs.html.TD.TD()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>BackDoors.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/BackDoors.java</FilePath>
<LineStart>113</LineStart>
<Snippet>		}

		ResultSet rs = statement.executeQuery(arrSQL[0]);
		if (rs.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="F9F0A777F6E9CC63EFCDDD557D44DB7C" ruleID="94B3FB0E-4AED-4006-9CDD-B2B1C13747EE">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method writeTable() in DatabaseUtilities.java sends unvalidated data to a web browser on line 154, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>DatabaseUtilities.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/DatabaseUtilities.java</FilePath>
<LineStart>154</LineStart>
<Snippet>		for (int i = 1; i &lt; (numColumns + 1); i++)
		{
		    row.addElement(new TD(results.getString(i).replaceAll(" ",
			    "&amp;nbsp;")));
		}</Snippet>
<TargetFunction>org.apache.ecs.html.TD.TD()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>SqlStringInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SqlStringInjection.java</FilePath>
<LineStart>194</LineStart>
<Snippet>			ResultSet.CONCUR_READ_ONLY);
		statement.setString(1, accountName);
		ResultSet results = statement.executeQuery();

		if ((results != null) &amp;&amp; (results.first() == true))</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="C4B549D12E0B69217B2645D2663BDF51" ruleID="94B3FB0E-4AED-4006-9CDD-B2B1C13747EE">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method writeTable() in DatabaseUtilities.java sends unvalidated data to a web browser on line 154, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>DatabaseUtilities.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/DatabaseUtilities.java</FilePath>
<LineStart>154</LineStart>
<Snippet>		for (int i = 1; i &lt; (numColumns + 1); i++)
		{
		    row.addElement(new TD(results.getString(i).replaceAll(" ",
			    "&amp;nbsp;")));
		}</Snippet>
<TargetFunction>org.apache.ecs.html.TD.TD()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>DOS_Login.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/DOS_Login.java</FilePath>
<LineStart>114</LineStart>
<Snippet>			ResultSet.TYPE_SCROLL_INSENSITIVE,
			ResultSet.CONCUR_READ_ONLY);
		ResultSet results = statement.executeQuery(query);
		if ((results != null) &amp;&amp; (results.first() == true))
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="69196A7A21B35483FE9D3DA03D2AE088" ruleID="94B3FB0E-4AED-4006-9CDD-B2B1C13747EE">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method makeStationList() in SqlNumericInjection.java sends unvalidated data to a web browser on line 265, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SqlNumericInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SqlNumericInjection.java</FilePath>
<LineStart>265</LineStart>
<Snippet>	    String key = (String) it.next();
	    select.addElement(new Option(key).addElement((String) stations
		    .get(key)));
	}
	ec.addElement(select);</Snippet>
<TargetFunction>org.apache.ecs.html.Option.addElement()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>SqlNumericInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SqlNumericInjection.java</FilePath>
<LineStart>299</LineStart>
<Snippet>		    ResultSet.TYPE_SCROLL_INSENSITIVE,
		    ResultSet.CONCUR_READ_ONLY);
	    ResultSet results = statement.executeQuery(query);

	    if ((results != null) &amp;&amp; (results.first() == true))</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="3A8E3BB2450E531B99FA728F81DEA041" ruleID="94B3FB0E-4AED-4006-9CDD-B2B1C13747EE">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method makeCurrent() in StoredXss.java sends unvalidated data to a web browser on line 233, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>StoredXss.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/StoredXss.java</FilePath>
<LineStart>233</LineStart>
<Snippet>			.setBorder(0);
		TR row1 = new TR(new TD(new B(new StringElement("Title:"))));
		row1.addElement(new TD(new StringElement(results
			.getString(TITLE_COL))));
		t.addElement(row1);</Snippet>
<TargetFunction>org.apache.ecs.html.TD.TD()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>StoredXss.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/StoredXss.java</FilePath>
<LineStart>224</LineStart>
<Snippet>	    statement.setString(1, getNameroot(s.getUserName()) + "%");
	    statement.setInt(2, messageNum);
	    ResultSet results = statement.executeQuery();

	    if ((results != null) &amp;&amp; results.first())</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="DFBCFFBD3519668DCBC0A9405DECFDA0" ruleID="94B3FB0E-4AED-4006-9CDD-B2B1C13747EE">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method writeTable() in DatabaseUtilities.java sends unvalidated data to a web browser on line 154, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>DatabaseUtilities.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/DatabaseUtilities.java</FilePath>
<LineStart>154</LineStart>
<Snippet>		for (int i = 1; i &lt; (numColumns + 1); i++)
		{
		    row.addElement(new TD(results.getString(i).replaceAll(" ",
			    "&amp;nbsp;")));
		}</Snippet>
<TargetFunction>org.apache.ecs.html.TD.TD()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewDatabase.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/admin/ViewDatabase.java</FilePath>
<LineStart>89</LineStart>
<Snippet>			ResultSet.TYPE_SCROLL_INSENSITIVE,
			ResultSet.CONCUR_READ_ONLY);
		ResultSet results = statement.executeQuery(sqlStatement
			.toString());
</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="A9D00682BDB65300B83730C998008491" ruleID="94B3FB0E-4AED-4006-9CDD-B2B1C13747EE">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method writeTable() in DatabaseUtilities.java sends unvalidated data to a web browser on line 154, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>DatabaseUtilities.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/DatabaseUtilities.java</FilePath>
<LineStart>154</LineStart>
<Snippet>		for (int i = 1; i &lt; (numColumns + 1); i++)
		{
		    row.addElement(new TD(results.getString(i).replaceAll(" ",
			    "&amp;nbsp;")));
		}</Snippet>
<TargetFunction>org.apache.ecs.html.TD.TD()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Challenge2Screen.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/Challenge2Screen.java</FilePath>
<LineStart>220</LineStart>
<Snippet>	try
	{
	    ResultSet results = statement3.executeQuery(query);

	    while (results.next())</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="81C6BF09430D7517DEFF022D71F3EC88" ruleID="94B3FB0E-4AED-4006-9CDD-B2B1C13747EE">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method makePulldown() in ECSFactory.java sends unvalidated data to a web browser on line 450, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ECSFactory.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ECSFactory.java</FilePath>
<LineStart>450</LineStart>
<Snippet>	Select s = new Select(name);

	s.addElement((String[]) options.toArray(new String[options.size()]));

	return (s);</Snippet>
<TargetFunction>org.apache.ecs.html.Select.addElement()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Challenge2Screen.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/Challenge2Screen.java</FilePath>
<LineStart>220</LineStart>
<Snippet>	try
	{
	    ResultSet results = statement3.executeQuery(query);

	    while (results.next())</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                    </GroupingSection>
                    <GroupingSection count="29">
                        <groupTitle>Password Management: Password in Comment</groupTitle>
                        <MajorAttributeSummary>
                            <MetaInfo>
<Name>Abstract</Name>
<Value>Storing passwords or password details in plain text anywhere in the system or system code might compromise system security in a way that cannot be easily remedied.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Explanation</Name>
<Value>It is never a good idea to hardcode a password. Storing password details within comments is equivalent to hardcoding passwords. Not only is the password visible to the project's developers, it also makes fixing the problem extremely difficult. After the code is in production, the password is leaked to the outside world and cannot be protected or changed without patching the software. If the account protected by the password is compromised, the owners of the system must choose between security and availability.


Example: The following comment specifies the default password to connect to a database:


...
&lt;config&gt;
  &lt;!-- Default username/password is scott/tiger --&gt;
  &lt;username&gt;&lt;/username&gt;
  &lt;password&gt;&lt;/password&gt;
&lt;/config&gt;
...


This code will run successfully, but anyone who has access to it will have access to the password. An employee with access to this information can use it to break into the system.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Recommendations</Name>
<Value>Passwords should never be hardcoded and should generally be obfuscated and managed in an external source. Storing passwords in plain text anywhere on the system allows anyone with sufficient permissions to read and potentially misuse the password.</Value>
                            </MetaInfo>
                            <AttributeValue>
<Name>&lt;Unaudited&gt;</Name>
<Count>29</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not an Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Reliability Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Bad Practice</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Suspicious</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Exploitable</Name>
<Count>0</Count>
                            </AttributeValue>
                        </MajorAttributeSummary>
                        <Issue iid="63FDA39339AABEFFDAFC338CF3882126" ruleID="720E3A66-55AC-4D2D-8DB9-DC30E120A52F">
                            <Category>Password Management: Password in Comment</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>Storing passwords or password details in plain text anywhere in the system or system code might compromise system security in a way that cannot be easily remedied.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>UpdateProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/UpdateProfile.java</FilePath>
<LineStart>149</LineStart>
<Snippet>	try
	{
	    // Note: The password field is ONLY set by ChangePassword
	    String query = "UPDATE employee SET first_name = '"
		    + employee.getFirstName() + "', last_name = '"</Snippet>
<TargetFunction>Comment()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="4881C1A9E2A09BF6D6243B886530CA6F" ruleID="720E3A66-55AC-4D2D-8DB9-DC30E120A52F">
                            <Category>Password Management: Password in Comment</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>Storing passwords or password details in plain text anywhere in the system or system code might compromise system security in a way that cannot be easily remedied.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>FindProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/FindProfile.java</FilePath>
<LineStart>184</LineStart>
<Snippet>		{
		    int id = answer_results.getInt("userid");
		    // Note: Do NOT get the password field.
		    profile = new Employee(id, answer_results
			    .getString("first_name"), answer_results</Snippet>
<TargetFunction>Comment()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="4881C1A9E2A09BF6D6243B886530CA73" ruleID="720E3A66-55AC-4D2D-8DB9-DC30E120A52F">
                            <Category>Password Management: Password in Comment</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>Storing passwords or password details in plain text anywhere in the system or system code might compromise system security in a way that cannot be easily remedied.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/EditProfile.java</FilePath>
<LineStart>161</LineStart>
<Snippet>		if (answer_results.next())
		{
		    // Note: Do NOT get the password field.
		    profile = new Employee(answer_results.getInt("userid"),
			    answer_results.getString("first_name"),</Snippet>
<TargetFunction>Comment()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="2032FFDA1ACE66CF7BF8140FEDEF58A9" ruleID="720E3A66-55AC-4D2D-8DB9-DC30E120A52F">
                            <Category>Password Management: Password in Comment</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>Storing passwords or password details in plain text anywhere in the system or system code might compromise system security in a way that cannot be easily remedied.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ForgotPassword.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/ForgotPassword.java</FilePath>
<LineStart>285</LineStart>
<Snippet>

    /**
     *  Gets the category attribute of the ForgotPassword object
     *</Snippet>
<TargetFunction>Comment()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="4E084D90439ADCDF912AD2BB626904C3" ruleID="7CE9D4DF-5D0C-49AE-ABC0-5D5632965FED">
                            <Category>Password Management: Password in Comment</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>Storing passwords or password details in plain text anywhere in the system or system code might compromise system security in a way that cannot be easily remedied.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>build.xml</FileName>
<FilePath>build.xml</FilePath>
<LineStart>73</LineStart>
<Snippet>                       "manager" role (so that he or she can execute
                       commands via the "/manager" web application)
--&gt;

  &lt;property name="app.name"      		   value="WebGoat"/&gt;</Snippet>
                            </Primary>
                        </Issue>
                        <Issue iid="83F06CD8F02FEA5F506B1C33E9C723D5" ruleID="720E3A66-55AC-4D2D-8DB9-DC30E120A52F">
                            <Category>Password Management: Password in Comment</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>Storing passwords or password details in plain text anywhere in the system or system code might compromise system security in a way that cannot be easily remedied.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Course.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/Course.java</FilePath>
<LineStart>76</LineStart>
<Snippet>    }
    
    /**
     * Take an absolute file and return the filename.
     * </Snippet>
<TargetFunction>Comment()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="63FDA39339AABEFFDAFC338CF3882122" ruleID="720E3A66-55AC-4D2D-8DB9-DC30E120A52F">
                            <Category>Password Management: Password in Comment</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>Storing passwords or password details in plain text anywhere in the system or system code might compromise system security in a way that cannot be easily remedied.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>UpdateProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/UpdateProfile.java</FilePath>
<LineStart>221</LineStart>
<Snippet>	try
	{
	    // Note: The password field is ONLY set by ChangePassword
	    String query = "UPDATE employee SET first_name = '"
		    + employee.getFirstName() + "', last_name = '"</Snippet>
<TargetFunction>Comment()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="4881C1A9E2A09BF6D6243B886530CA75" ruleID="720E3A66-55AC-4D2D-8DB9-DC30E120A52F">
                            <Category>Password Management: Password in Comment</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>Storing passwords or password details in plain text anywhere in the system or system code might compromise system security in a way that cannot be easily remedied.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/ViewProfile.java</FilePath>
<LineStart>135</LineStart>
<Snippet>		if (answer_results.next())
		{
		    // Note: Do NOT get the password field.
		    profile = new Employee(answer_results.getInt("userid"),
			    answer_results.getString("first_name"),</Snippet>
<TargetFunction>Comment()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="4881C1A9E2A09BF6D6243B886530CA78" ruleID="720E3A66-55AC-4D2D-8DB9-DC30E120A52F">
                            <Category>Password Management: Password in Comment</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>Storing passwords or password details in plain text anywhere in the system or system code might compromise system security in a way that cannot be easily remedied.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/ViewProfile.java</FilePath>
<LineStart>181</LineStart>
<Snippet>		if (answer_results.next())
		{
		    // Note: Do NOT get the password field.
		    profile = new Employee(answer_results.getInt("userid"),
			    answer_results.getString("first_name"),</Snippet>
<TargetFunction>Comment()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="2032FFDA1ACE66CF7BF8140FEDEF58A7" ruleID="720E3A66-55AC-4D2D-8DB9-DC30E120A52F">
                            <Category>Password Management: Password in Comment</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>Storing passwords or password details in plain text anywhere in the system or system code might compromise system security in a way that cannot be easily remedied.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>BufferOverflow.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/BufferOverflow.java</FilePath>
<LineStart>59</LineStart>
<Snippet>

    /**
     *  Gets the category attribute of the ForgotPassword object
     *</Snippet>
<TargetFunction>Comment()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="2672B79A28F1D268BE0BE4510ECA2F0D" ruleID="720E3A66-55AC-4D2D-8DB9-DC30E120A52F">
                            <Category>Password Management: Password in Comment</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>Storing passwords or password details in plain text anywhere in the system or system code might compromise system security in a way that cannot be easily remedied.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Challenge2Screen.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/Challenge2Screen.java</FilePath>
<LineStart>139</LineStart>
<Snippet>

    /**
     *  Determine the username and password
     *</Snippet>
<TargetFunction>Comment()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="2032FFDA1ACE66CF7BF8140FEDEF58A6" ruleID="720E3A66-55AC-4D2D-8DB9-DC30E120A52F">
                            <Category>Password Management: Password in Comment</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>Storing passwords or password details in plain text anywhere in the system or system code might compromise system security in a way that cannot be easily remedied.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>BasicAuthentication.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/BasicAuthentication.java</FilePath>
<LineStart>258</LineStart>
<Snippet>

    /**
     *  Gets the category attribute of the ForgotPassword object
     *</Snippet>
<TargetFunction>Comment()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="4881C1A9E2A09BF6D6243B886530CA72" ruleID="720E3A66-55AC-4D2D-8DB9-DC30E120A52F">
                            <Category>Password Management: Password in Comment</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>Storing passwords or password details in plain text anywhere in the system or system code might compromise system security in a way that cannot be easily remedied.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/EditProfile.java</FilePath>
<LineStart>100</LineStart>
<Snippet>		if (answer_results.next())
		{
		    // Note: Do NOT get the password field.
		    profile = new Employee(answer_results.getInt("userid"),
			    answer_results.getString("first_name"),</Snippet>
<TargetFunction>Comment()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="4881C1A9E2A09BF6D6243B886530CA70" ruleID="720E3A66-55AC-4D2D-8DB9-DC30E120A52F">
                            <Category>Password Management: Password in Comment</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>Storing passwords or password details in plain text anywhere in the system or system code might compromise system security in a way that cannot be easily remedied.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/ViewProfile.java</FilePath>
<LineStart>115</LineStart>
<Snippet>		if (answer_results.next())
		{
		    // Note: Do NOT get the password field.
		    profile = new Employee(answer_results.getInt("userid"),
			    answer_results.getString("first_name"),</Snippet>
<TargetFunction>Comment()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="2032FFDA1ACE66CF7BF8140FEDEF58AA" ruleID="720E3A66-55AC-4D2D-8DB9-DC30E120A52F">
                            <Category>Password Management: Password in Comment</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>Storing passwords or password details in plain text anywhere in the system or system code might compromise system security in a way that cannot be easily remedied.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>RemoteAdminFlaw.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RemoteAdminFlaw.java</FilePath>
<LineStart>69</LineStart>
<Snippet>

    /**
     *  Gets the category attribute of the ForgotPassword object
     *</Snippet>
<TargetFunction>Comment()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="5CC6F221C368158E158C40EA7AD04851" ruleID="720E3A66-55AC-4D2D-8DB9-DC30E120A52F">
                            <Category>Password Management: Password in Comment</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>Storing passwords or password details in plain text anywhere in the system or system code might compromise system security in a way that cannot be easily remedied.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>FailOpenAuthentication.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/FailOpenAuthentication.java</FilePath>
<LineStart>98</LineStart>
<Snippet>	    }

	    // Don't let the fail open pass with a blank password.
	    if (password.length() == 0)
	    {</Snippet>
<TargetFunction>Comment()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="2032FFDA1ACE66CF7BF8140FEDEF58A8" ruleID="720E3A66-55AC-4D2D-8DB9-DC30E120A52F">
                            <Category>Password Management: Password in Comment</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>Storing passwords or password details in plain text anywhere in the system or system code might compromise system security in a way that cannot be easily remedied.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ForcedBrowsing.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/ForcedBrowsing.java</FilePath>
<LineStart>103</LineStart>
<Snippet>

    /**
     *  Gets the category attribute of the ForgotPassword object
     *</Snippet>
<TargetFunction>Comment()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="63FDA39339AABEFFDAFC338CF3882125" ruleID="720E3A66-55AC-4D2D-8DB9-DC30E120A52F">
                            <Category>Password Management: Password in Comment</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>Storing passwords or password details in plain text anywhere in the system or system code might compromise system security in a way that cannot be easily remedied.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>DeleteProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/DeleteProfile.java</FilePath>
<LineStart>136</LineStart>
<Snippet>	try
	{
	    // Note: The password field is ONLY set by ChangePassword
	    String query = "DELETE FROM employee WHERE userid = " + employeeId;
	    //System.out.println("Query:  " + query);</Snippet>
<TargetFunction>Comment()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="4881C1A9E2A09BF6D6243B886530CA6E" ruleID="720E3A66-55AC-4D2D-8DB9-DC30E120A52F">
                            <Category>Password Management: Password in Comment</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>Storing passwords or password details in plain text anywhere in the system or system code might compromise system security in a way that cannot be easily remedied.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/EditProfile.java</FilePath>
<LineStart>158</LineStart>
<Snippet>		if (answer_results.next())
		{
		    // Note: Do NOT get the password field.
		    profile = new Employee(answer_results.getInt("userid"),
			    answer_results.getString("first_name"),</Snippet>
<TargetFunction>Comment()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="63FDA39339AABEFFDAFC338CF3882123" ruleID="720E3A66-55AC-4D2D-8DB9-DC30E120A52F">
                            <Category>Password Management: Password in Comment</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>Storing passwords or password details in plain text anywhere in the system or system code might compromise system security in a way that cannot be easily remedied.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>UpdateProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/UpdateProfile.java</FilePath>
<LineStart>270</LineStart>
<Snippet>	try
	{
	    // Note: The password field is ONLY set by ChangePassword
	    String query = "UPDATE employee SET first_name = '"
		    + employee.getFirstName() + "', last_name = '"</Snippet>
<TargetFunction>Comment()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="28B72891B4552F5DD8F0964834D3AC43" ruleID="720E3A66-55AC-4D2D-8DB9-DC30E120A52F">
                            <Category>Password Management: Password in Comment</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>Storing passwords or password details in plain text anywhere in the system or system code might compromise system security in a way that cannot be easily remedied.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>FailOpenAuthentication.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/FailOpenAuthentication.java</FilePath>
<LineStart>102</LineStart>
<Snippet>	    {
		// We make sure the username was submitted to avoid telling the user an invalid
		// username/password was entered when they first enter the lesson via the side menu.
		// This also suppresses the error if they just hit the login and both fields are empty.
		if (username.length() != 0)</Snippet>
<TargetFunction>Comment()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="4881C1A9E2A09BF6D6243B886530CA71" ruleID="720E3A66-55AC-4D2D-8DB9-DC30E120A52F">
                            <Category>Password Management: Password in Comment</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>Storing passwords or password details in plain text anywhere in the system or system code might compromise system security in a way that cannot be easily remedied.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/ViewProfile.java</FilePath>
<LineStart>175</LineStart>
<Snippet>		if (answer_results.next())
		{
		    // Note: Do NOT get the password field.
		    profile = new Employee(answer_results.getInt("userid"),
			    answer_results.getString("first_name"),</Snippet>
<TargetFunction>Comment()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="4881C1A9E2A09BF6D6243B886530CA76" ruleID="720E3A66-55AC-4D2D-8DB9-DC30E120A52F">
                            <Category>Password Management: Password in Comment</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>Storing passwords or password details in plain text anywhere in the system or system code might compromise system security in a way that cannot be easily remedied.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/ViewProfile.java</FilePath>
<LineStart>195</LineStart>
<Snippet>		if (answer_results.next())
		{
		    // Note: Do NOT get the password field.
		    profile = new Employee(answer_results.getInt("userid"),
			    answer_results.getString("first_name"),</Snippet>
<TargetFunction>Comment()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="4881C1A9E2A09BF6D6243B886530CA77" ruleID="720E3A66-55AC-4D2D-8DB9-DC30E120A52F">
                            <Category>Password Management: Password in Comment</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>Storing passwords or password details in plain text anywhere in the system or system code might compromise system security in a way that cannot be easily remedied.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/ViewProfile.java</FilePath>
<LineStart>121</LineStart>
<Snippet>		if (answer_results.next())
		{
		    // Note: Do NOT get the password field.
		    profile = new Employee(answer_results.getInt("userid"),
			    answer_results.getString("first_name"),</Snippet>
<TargetFunction>Comment()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="4881C1A9E2A09BF6D6243B886530CA74" ruleID="720E3A66-55AC-4D2D-8DB9-DC30E120A52F">
                            <Category>Password Management: Password in Comment</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>Storing passwords or password details in plain text anywhere in the system or system code might compromise system security in a way that cannot be easily remedied.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>FindProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/FindProfile.java</FilePath>
<LineStart>152</LineStart>
<Snippet>		{
		    int id = answer_results.getInt("userid");
		    // Note: Do NOT get the password field.
		    profile = new Employee(id, answer_results
			    .getString("first_name"), answer_results</Snippet>
<TargetFunction>Comment()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="63FDA39339AABEFFDAFC338CF3882124" ruleID="720E3A66-55AC-4D2D-8DB9-DC30E120A52F">
                            <Category>Password Management: Password in Comment</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>Storing passwords or password details in plain text anywhere in the system or system code might compromise system security in a way that cannot be easily remedied.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>DeleteProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/DeleteProfile.java</FilePath>
<LineStart>107</LineStart>
<Snippet>	try
	{
	    // Note: The password field is ONLY set by ChangePassword
	    String query = "DELETE FROM employee WHERE userid = " + employeeId;
	    //System.out.println("Query:  " + query);</Snippet>
<TargetFunction>Comment()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="63FDA39339AABEFFDAFC338CF3882127" ruleID="720E3A66-55AC-4D2D-8DB9-DC30E120A52F">
                            <Category>Password Management: Password in Comment</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>Storing passwords or password details in plain text anywhere in the system or system code might compromise system security in a way that cannot be easily remedied.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>UpdateProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/UpdateProfile.java</FilePath>
<LineStart>198</LineStart>
<Snippet>	try
	{
	    // Note: The password field is ONLY set by ChangePassword
	    String query = "UPDATE employee SET first_name = '"
		    + employee.getFirstName() + "', last_name = '"</Snippet>
<TargetFunction>Comment()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="4881C1A9E2A09BF6D6243B886530CA6D" ruleID="720E3A66-55AC-4D2D-8DB9-DC30E120A52F">
                            <Category>Password Management: Password in Comment</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>Storing passwords or password details in plain text anywhere in the system or system code might compromise system security in a way that cannot be easily remedied.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/EditProfile.java</FilePath>
<LineStart>100</LineStart>
<Snippet>		if (answer_results.next())
		{
		    // Note: Do NOT get the password field.
		    profile = new Employee(answer_results.getInt("userid"),
			    answer_results.getString("first_name"),</Snippet>
<TargetFunction>Comment()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="FA2E59EFE5B8C6E2A801F7C450DB6779" ruleID="720E3A66-55AC-4D2D-8DB9-DC30E120A52F">
                            <Category>Password Management: Password in Comment</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>Storing passwords or password details in plain text anywhere in the system or system code might compromise system security in a way that cannot be easily remedied.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ECSFactory.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ECSFactory.java</FilePath>
<LineStart>169</LineStart>
<Snippet>		.setMaxlength(size);

	// double check in case someone means to make a * starred out password field

	if (name.equals(PASSWORD))</Snippet>
<TargetFunction>Comment()</TargetFunction>
                            </Primary>
                        </Issue>
                    </GroupingSection>
                    <GroupingSection count="27">
                        <groupTitle>Cross-Site Request Forgery</groupTitle>
                        <MajorAttributeSummary>
                            <MetaInfo>
<Name>Abstract</Name>
<Value>The form post at EditProfile.jsp line 10 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Explanation</Name>
<Value>A cross-site request forgery (CSRF) vulnerability occurs when:
1. A Web application uses session cookies.

2. The application acts on an HTTP request without verifying that the request was made with the user's consent.



A nonce is a cryptographic random value that is sent with a message to prevent replay attacks. If the request does not contain a nonce that proves its provenance, the code that handles the request is vulnerable to a CSRF attack (unless it does not change the state of the application). This means a Web application that uses session cookies has to take special precautions in order to ensure that an attacker can't trick users into submitting bogus requests. Imagine a Web application that allows administrators to create new accounts by submitting this form:


&lt;form method="POST" action="/new_user" &gt;
  Name of new user: &lt;input type="text" name="username"&gt;
  Password for new user: &lt;input type="password" name="user_passwd"&gt;
    &lt;input type="submit" name="action" value="Create User"&gt;
&lt;/form&gt;


An attacker might set up a Web site with the following:


&lt;form method="POST" action="http://www.example.com/new_user"&gt;
  &lt;input type="hidden" name="username" value="hacker"&gt;
  &lt;input type="hidden" name="user_passwd" value="hacked"&gt;
&lt;/form&gt;
&lt;script&gt;
  document.usr_form.submit();
&lt;/script&gt;


If an administrator for example.com visits the malicious page while she has an active session on the site, she will unwittingly create an account for the attacker. This is a CSRF attack. It is possible because the application does not have a way to determine the provenance of the request. Any request could be a legitimate action chosen by the user or a faked action set up by an attacker. The attacker does not get to see the Web page that the bogus request generates, so the attack technique is only useful for requests that alter the state of the application.

Applications that pass the session identifier in the URL rather than as a cookie do not have CSRF problems because there is no way for the attacker to access the session identifier and include it as part of the bogus request.

CSRF is entry number five on the 2007 OWASP Top 10 list.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Recommendations</Name>
<Value>Applications that use session cookies must include some piece of information in every form post that the back-end code can use to validate the provenance of the request. One way to do that is to include a random request identifier or nonce, as follows:


  RequestBuilder rb = new RequestBuilder(RequestBuilder.POST, "/new_user");
  body = addToPost(body, new_username);
  body = addToPost(body, new_passwd);
  body = addToPost(body, request_id);
  rb.sendRequest(body, new NewAccountCallback(callback));


Then the back-end logic can validate the request identifier before processing the rest of the form data. When possible, the request identifier should be unique to each server request rather than shared across every request for a particular session. As with session identifiers, the harder it is for an attacker to guess the request identifier, the harder it is to conduct a successful CSRF attack. The token should not be easily guessed and it should be protected in the same way that session tokens are protected, such as using SSLv3.

Additional mitigation techniques include:

Framework protection: Most modern web application frameworks embed CSRF protection and they will automatically include and verify CSRF tokens.
Use a Challenge-Response control: Forcing the customer to respond to a challenge sent by the server is a strong defense against CSRF. Some of the challenges that can be used for this purpose are: CAPTCHAs, password re-authentication and one-time tokens.
Check HTTP Referer/Origin headers: An attacker won't be able to spoof these headers while performing a CSRF attack. This makes these headers a useful method to prevent CSRF attacks.
Double-submit Session Cookie: Sending the session ID Cookie as a hidden form value in addition to the actual session ID Cookie is a good protection against CSRF attacks. The server will check both values and make sure they are identical before processing the rest of the form data. If an attacker submits a form in behalf of a user, he won't be able to modify the session ID cookie value as per the same-origin-policy.
Limit Session Lifetime: When accessing protected resources using a CSRF attack, the attack will only be valid as long as the session ID sent as part of the attack is still valid on the server. Limiting the Session lifetime will reduce the probability of a successful attack.

The techniques described here can be defeated with XSS attacks. Effective CSRF mitigation includes XSS mitigation techniques.
</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Tips</Name>
<Value>1. Fortify Static Code Analyzer flags all HTML forms and XMLHttpRequest objects that might perform either a GET or POST operation. The auditor must determine if each form is valuable to an attacker as a CSRF target and whether or not an appropriate mitigation technique is in place.</Value>
                            </MetaInfo>
                            <AttributeValue>
<Name>&lt;Unaudited&gt;</Name>
<Count>27</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not an Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Reliability Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Bad Practice</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Suspicious</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Exploitable</Name>
<Count>0</Count>
                            </AttributeValue>
                        </MajorAttributeSummary>
                        <Issue iid="8BBD94853BD1AFA82C773BBEBB8E4795" ruleID="78E0700E-56FE-45A2-A11B-6A560F730576">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at webgoat.jsp line 74 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>webgoat.jsp</FileName>
<FilePath>WebContent/webgoat.jsp</FilePath>
<LineStart>74</LineStart>
<Snippet>                  &lt;td colspan = "2"&gt;
                    &lt;div align="center" class="style2"&gt;			
                      &lt;form id="form" name="form" method="post" action="attack"&gt;
    			            &lt;input type="submit" name="start" value="Start WebGoat" /&gt;
			          &lt;/form&gt;</Snippet>
                            </Primary>
                        </Issue>
                        <Issue iid="7C132245B083E92447D0599E9949D6DA" ruleID="78E0700E-56FE-45A2-A11B-6A560F730576">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at SearchStaff.jsp line 15 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>SearchStaff.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/SearchStaff.jsp</FilePath>
<LineStart>15</LineStart>
<Snippet>			}
			%&gt;
			&lt;form id="form1" name="form1" method="post" action="attack?menu=&lt;%=webSession.getCurrentMenu()%&gt;"&gt;
			    	&lt;label&gt;Name
					&lt;input class="lesson_text_db" type="text" name="&lt;%=SQLInjection.SEARCHNAME%&gt;"/&gt;</Snippet>
                            </Primary>
                        </Issue>
                        <Issue iid="754A1987C965CBF08F04FC8600F89A78" ruleID="78E0700E-56FE-45A2-A11B-6A560F730576">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at EditProfile.jsp line 10 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/EditProfile.jsp</FilePath>
<LineStart>10</LineStart>
<Snippet>		&lt;div class="lesson_title_box"&gt;&lt;strong&gt;Welcome Back &lt;/strong&gt;&lt;span class="lesson_text_db"&gt;&lt;%=webSession.getUserNameInLesson()%&gt;&lt;/span&gt;&lt;/div&gt;
		&lt;div class="lesson_text"&gt;
			&lt;form id="form1" name="form1" method="post" action="attack?menu=&lt;%=webSession.getCurrentMenu()%&gt;"&gt;
				&lt;Table&gt;
				&lt;TR&gt;&lt;TD&gt;</Snippet>
                            </Primary>
                        </Issue>
                        <Issue iid="4999E6C3999EC5B75662569D55AB02D6" ruleID="78E0700E-56FE-45A2-A11B-6A560F730576">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at error.jsp line 10 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>error.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/error.jsp</FilePath>
<LineStart>10</LineStart>
<Snippet>&lt;br&gt;&lt;br&gt;&lt;br&gt;An error has occurred.
&lt;br&gt;&lt;br&gt;&lt;br&gt;
&lt;form method="POST" action="attack?menu=&lt;%=webSession.getCurrentMenu()%&gt;"&gt;

 &lt;input type="submit" name="action" value="&lt;%=RoleBasedAccessControl.LOGIN_ACTION%&gt;"/&gt;</Snippet>
                            </Primary>
                        </Issue>
                        <Issue iid="B69FA9CDEBEBA2EE681EFA4F0ED1CE15" ruleID="78E0700E-56FE-45A2-A11B-6A560F730576">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at ViewProfile.jsp line 141 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/ViewProfile.jsp</FilePath>
<LineStart>141</LineStart>
<Snippet>					{
					%&gt;
						&lt;form method="POST" action="attack?menu=&lt;%=webSession.getCurrentMenu()%&gt;"&gt;
							&lt;input type="hidden" name="&lt;%=RoleBasedAccessControl.EMPLOYEE_ID%&gt;" value="&lt;%=employee.getId()%&gt;"&gt;
							&lt;input type="submit" name="action" value="&lt;%=RoleBasedAccessControl.DELETEPROFILE_ACTION%&gt;"/&gt;</Snippet>
                            </Primary>
                        </Issue>
                        <Issue iid="7C132245B083E92447D0599E9949D6D9" ruleID="78E0700E-56FE-45A2-A11B-6A560F730576">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at SearchStaff.jsp line 15 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>SearchStaff.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/SearchStaff.jsp</FilePath>
<LineStart>15</LineStart>
<Snippet>			}
			%&gt;
				&lt;form id="form1" name="form1" method="post" action="attack?menu=&lt;%=webSession.getCurrentMenu()%&gt;"&gt;
			    	&lt;label&gt;Name
					&lt;input class="lesson_text_db" type="text" name="&lt;%=RoleBasedAccessControl.SEARCHNAME%&gt;"/&gt;</Snippet>
                            </Primary>
                        </Issue>
                        <Issue iid="754A1987C965CBF08F04FC8600F89A7A" ruleID="78E0700E-56FE-45A2-A11B-6A560F730576">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at EditProfile.jsp line 10 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/EditProfile.jsp</FilePath>
<LineStart>10</LineStart>
<Snippet>		&lt;div class="lesson_title_box"&gt;&lt;strong&gt;Welcome Back &lt;/strong&gt;&lt;span class="lesson_text_db"&gt;&lt;%=webSession.getUserNameInLesson()%&gt;&lt;/span&gt;&lt;/div&gt;
		&lt;div class="lesson_text"&gt;
			&lt;form id="form1" name="form1" method="post" action="attack?menu=&lt;%=webSession.getCurrentMenu()%&gt;"&gt;
				&lt;Table&gt;
				&lt;TR&gt;&lt;TD&gt;</Snippet>
                            </Primary>
                        </Issue>
                        <Issue iid="B69FA9CDEBEBA2EE681EFA4F0ED1CE13" ruleID="78E0700E-56FE-45A2-A11B-6A560F730576">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at ViewProfile.jsp line 116 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/ViewProfile.jsp</FilePath>
<LineStart>116</LineStart>
<Snippet>					 {
					 %&gt;
						&lt;form method="POST" action="attack?menu=&lt;%=webSession.getCurrentMenu()%&gt;"&gt;
							&lt;input type="hidden" name="&lt;%=RoleBasedAccessControl.EMPLOYEE_ID%&gt;" value="&lt;%=employee.getId()%&gt;"&gt;
							&lt;input type="submit" name="action" value="&lt;%=RoleBasedAccessControl.LISTSTAFF_ACTION%&gt;"/&gt;</Snippet>
                            </Primary>
                        </Issue>
                        <Issue iid="B69FA9CDEBEBA2EE681EFA4F0ED1CE17" ruleID="78E0700E-56FE-45A2-A11B-6A560F730576">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at ViewProfile.jsp line 112 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/ViewProfile.jsp</FilePath>
<LineStart>112</LineStart>
<Snippet>					 {
					 %&gt;                	
						&lt;form method="POST" action="attack?menu=&lt;%=webSession.getCurrentMenu()%&gt;"&gt;
							&lt;input type="hidden" name="&lt;%=SQLInjection.EMPLOYEE_ID%&gt;" value="&lt;%=employee.getId()%&gt;"&gt;
							&lt;input type="submit" name="action" value="&lt;%=SQLInjection.LISTSTAFF_ACTION%&gt;"/&gt;</Snippet>
                            </Primary>
                        </Issue>
                        <Issue iid="28E84239977EB127E8870D759DC4BF3B" ruleID="78E0700E-56FE-45A2-A11B-6A560F730576">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at Login.jsp line 9 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Login.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/Login.jsp</FilePath>
<LineStart>9</LineStart>
<Snippet>			WebSession webSession = ((WebSession)session.getAttribute("websession"));
			%&gt;
			&lt;form id="form1" name="form1" method="post" action="attack?menu=&lt;%=webSession.getCurrentMenu()%&gt;"&gt;
			    	&lt;label&gt;
			      	&lt;select name="&lt;%=SQLInjection.EMPLOYEE_ID%&gt;"&gt;</Snippet>
                            </Primary>
                        </Issue>
                        <Issue iid="28E84239977EB127E8870D759DC4BF39" ruleID="78E0700E-56FE-45A2-A11B-6A560F730576">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at Login.jsp line 9 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Login.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/Login.jsp</FilePath>
<LineStart>9</LineStart>
<Snippet>			WebSession webSession = ((WebSession)session.getAttribute("websession"));
			%&gt;
			&lt;form id="form1" name="form1" method="post" action="attack?menu=&lt;%=webSession.getCurrentMenu()%&gt;"&gt;
			    	&lt;label&gt;
			      	&lt;select name="&lt;%=CrossSiteScripting.EMPLOYEE_ID%&gt;"&gt;</Snippet>
                            </Primary>
                        </Issue>
                        <Issue iid="B69FA9CDEBEBA2EE681EFA4F0ED1CE12" ruleID="78E0700E-56FE-45A2-A11B-6A560F730576">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at ViewProfile.jsp line 153 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/ViewProfile.jsp</FilePath>
<LineStart>153</LineStart>
<Snippet>                      &lt;td width="190"&gt;&amp;nbsp;&lt;/td&gt;
                      &lt;td width="76"&gt;
						&lt;form method="POST"&gt;
							&lt;input type="submit" name="action" value="&lt;%=CrossSiteScripting.LOGOUT_ACTION%&gt;"/&gt;
						&lt;/form&gt;</Snippet>
                            </Primary>
                        </Issue>
                        <Issue iid="B69FA9CDEBEBA2EE681EFA4F0ED1CE10" ruleID="78E0700E-56FE-45A2-A11B-6A560F730576">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at ViewProfile.jsp line 130 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/ViewProfile.jsp</FilePath>
<LineStart>130</LineStart>
<Snippet>					{
					%&gt;
						&lt;form method="POST" action="attack?menu=&lt;%=webSession.getCurrentMenu()%&gt;"&gt;
							&lt;input type="hidden" name="&lt;%=CrossSiteScripting.EMPLOYEE_ID%&gt;" value="&lt;%=employee.getId()%&gt;"&gt;
							&lt;input type="submit" name="action" value="&lt;%=CrossSiteScripting.EDITPROFILE_ACTION%&gt;"/&gt;</Snippet>
                            </Primary>
                        </Issue>
                        <Issue iid="A8C56B5E653723A33C75A4F306FDC010" ruleID="78E0700E-56FE-45A2-A11B-6A560F730576">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at webgoat_challenge.jsp line 51 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>webgoat_challenge.jsp</FileName>
<FilePath>WebContent/webgoat_challenge.jsp</FilePath>
<LineStart>51</LineStart>
<Snippet>                &lt;/tr&gt;
            &lt;/table&gt;
			&lt;form id="form" name="form" method="post" action="attack"&gt;
	    			&lt;div align="center"&gt;  
    			        &lt;input type="submit" name="start" value="Start" /&gt;</Snippet>
                            </Primary>
                        </Issue>
                        <Issue iid="28E84239977EB127E8870D759DC4BF3A" ruleID="78E0700E-56FE-45A2-A11B-6A560F730576">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at Login.jsp line 9 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Login.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/Login.jsp</FilePath>
<LineStart>9</LineStart>
<Snippet>			WebSession webSession = ((WebSession)session.getAttribute("websession"));
			%&gt;
			&lt;form id="form1" name="form1" method="post" action="attack?menu=&lt;%=webSession.getCurrentMenu()%&gt;"&gt;
			    	&lt;label&gt;
			      	&lt;select name="&lt;%=RoleBasedAccessControl.EMPLOYEE_ID%&gt;"&gt;</Snippet>
                            </Primary>
                        </Issue>
                        <Issue iid="B69FA9CDEBEBA2EE681EFA4F0ED1CE18" ruleID="78E0700E-56FE-45A2-A11B-6A560F730576">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at ViewProfile.jsp line 125 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/ViewProfile.jsp</FilePath>
<LineStart>125</LineStart>
<Snippet>					 {
					 %&gt;
						&lt;form method="POST" action="attack?menu=&lt;%=webSession.getCurrentMenu()%&gt;"&gt;
							&lt;input type="hidden" name="&lt;%=SQLInjection.EMPLOYEE_ID%&gt;" value="&lt;%=employee.getId()%&gt;"&gt;
							&lt;input type="submit" name="action" value="&lt;%=SQLInjection.EDITPROFILE_ACTION%&gt;"/&gt;</Snippet>
                            </Primary>
                        </Issue>
                        <Issue iid="8F40E93016ADFE7F9DA7CA9FFCD5ABEB" ruleID="78E0700E-56FE-45A2-A11B-6A560F730576">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at ListStaff.jsp line 14 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ListStaff.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/ListStaff.jsp</FilePath>
<LineStart>14</LineStart>
<Snippet>		&lt;p&gt;Select from the list below	&lt;/p&gt;

		&lt;form id="form1" name="form1" method="post" action="attack?menu=&lt;%=webSession.getCurrentMenu()%&gt;"&gt;
  &lt;table width="60%" border="0" cellpadding="3"&gt;
    &lt;tr&gt;</Snippet>
                            </Primary>
                        </Issue>
                        <Issue iid="B69FA9CDEBEBA2EE681EFA4F0ED1CE16" ruleID="78E0700E-56FE-45A2-A11B-6A560F730576">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at ViewProfile.jsp line 151 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/ViewProfile.jsp</FilePath>
<LineStart>151</LineStart>
<Snippet>                      &lt;td width="190"&gt;&amp;nbsp;&lt;/td&gt;
                      &lt;td width="76"&gt;
						&lt;form method="POST"&gt;
							&lt;input type="submit" name="action" value="&lt;%=RoleBasedAccessControl.LOGOUT_ACTION%&gt;"/&gt;
						&lt;/form&gt;</Snippet>
                            </Primary>
                        </Issue>
                        <Issue iid="B69FA9CDEBEBA2EE681EFA4F0ED1CE0F" ruleID="78E0700E-56FE-45A2-A11B-6A560F730576">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at ViewProfile.jsp line 118 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/ViewProfile.jsp</FilePath>
<LineStart>118</LineStart>
<Snippet>					{
					%&gt;
						&lt;form method="POST" action="attack?menu=&lt;%=webSession.getCurrentMenu()%&gt;"&gt;
							&lt;input type="hidden" name="&lt;%=CrossSiteScripting.EMPLOYEE_ID%&gt;" value="&lt;%=employee.getId()%&gt;"&gt;
							&lt;input type="submit" name="action" value="&lt;%=CrossSiteScripting.LISTSTAFF_ACTION%&gt;"/&gt;</Snippet>
                            </Primary>
                        </Issue>
                        <Issue iid="7C132245B083E92447D0599E9949D6D8" ruleID="78E0700E-56FE-45A2-A11B-6A560F730576">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at SearchStaff.jsp line 15 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>SearchStaff.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/SearchStaff.jsp</FilePath>
<LineStart>15</LineStart>
<Snippet>			}
			%&gt;
			&lt;form id="form1" name="form1" method="post" action="attack?menu=&lt;%=webSession.getCurrentMenu()%&gt;"&gt;
			    	&lt;label&gt;Name
					&lt;input class="lesson_text_db" type="text" name="&lt;%=CrossSiteScripting.SEARCHNAME%&gt;"/&gt;</Snippet>
                            </Primary>
                        </Issue>
                        <Issue iid="B69FA9CDEBEBA2EE681EFA4F0ED1CE14" ruleID="78E0700E-56FE-45A2-A11B-6A560F730576">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at ViewProfile.jsp line 128 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/ViewProfile.jsp</FilePath>
<LineStart>128</LineStart>
<Snippet>					 {
					 %&gt;
						&lt;form method="POST" action="attack?menu=&lt;%=webSession.getCurrentMenu()%&gt;"&gt;
							&lt;input type="hidden" name="&lt;%=RoleBasedAccessControl.EMPLOYEE_ID%&gt;" value="&lt;%=employee.getId()%&gt;"&gt;
							&lt;input type="submit" name="action" value="&lt;%=RoleBasedAccessControl.EDITPROFILE_ACTION%&gt;"/&gt;</Snippet>
                            </Primary>
                        </Issue>
                        <Issue iid="B69FA9CDEBEBA2EE681EFA4F0ED1CE11" ruleID="78E0700E-56FE-45A2-A11B-6A560F730576">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at ViewProfile.jsp line 143 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/ViewProfile.jsp</FilePath>
<LineStart>143</LineStart>
<Snippet>					{
					%&gt;
						&lt;form method="POST" action="attack?menu=&lt;%=webSession.getCurrentMenu()%&gt;"&gt;
							&lt;input type="hidden" name="&lt;%=CrossSiteScripting.EMPLOYEE_ID%&gt;" value="&lt;%=employee.getId()%&gt;"&gt;
							&lt;input type="submit" name="action" value="&lt;%=CrossSiteScripting.DELETEPROFILE_ACTION%&gt;"/&gt;</Snippet>
                            </Primary>
                        </Issue>
                        <Issue iid="754A1987C965CBF08F04FC8600F89A79" ruleID="78E0700E-56FE-45A2-A11B-6A560F730576">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at EditProfile.jsp line 10 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/EditProfile.jsp</FilePath>
<LineStart>10</LineStart>
<Snippet>		&lt;div class="lesson_title_box"&gt;&lt;strong&gt;Welcome Back &lt;/strong&gt;&lt;span class="lesson_text_db"&gt;&lt;%=webSession.getUserNameInLesson()%&gt;&lt;/span&gt; - Edit Profile Page&lt;/div&gt;
		&lt;div class="lesson_text"&gt;
			&lt;form id="form1" name="form1" method="post" action="attack?menu=&lt;%=webSession.getCurrentMenu()%&gt;"&gt;
&lt;Table border="0" cellpadding="0" cellspacing="0"&gt;
				&lt;TR&gt;&lt;TD width="110"&gt;</Snippet>
                            </Primary>
                        </Issue>
                        <Issue iid="B69FA9CDEBEBA2EE681EFA4F0ED1CE19" ruleID="78E0700E-56FE-45A2-A11B-6A560F730576">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at ViewProfile.jsp line 138 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/ViewProfile.jsp</FilePath>
<LineStart>138</LineStart>
<Snippet>					{
					%&gt;
						&lt;form method="POST" action="attack?menu=&lt;%=webSession.getCurrentMenu()%&gt;"&gt;
							&lt;input type="hidden" name="&lt;%=SQLInjection.EMPLOYEE_ID%&gt;" value="&lt;%=employee.getId()%&gt;"&gt;
							&lt;input type="submit" name="action" value="&lt;%=SQLInjection.DELETEPROFILE_ACTION%&gt;"/&gt;</Snippet>
                            </Primary>
                        </Issue>
                        <Issue iid="B69FA9CDEBEBA2EE681EFA4F0ED1CE1A" ruleID="78E0700E-56FE-45A2-A11B-6A560F730576">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at ViewProfile.jsp line 148 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/ViewProfile.jsp</FilePath>
<LineStart>148</LineStart>
<Snippet>                      &lt;td width="190"&gt;&amp;nbsp;&lt;/td&gt;
                      &lt;td width="76"&gt;
						&lt;form method="POST"&gt;
							&lt;input type="submit" name="action" value="&lt;%=SQLInjection.LOGOUT_ACTION%&gt;"/&gt;
						&lt;/form&gt;</Snippet>
                            </Primary>
                        </Issue>
                        <Issue iid="8F40E93016ADFE7F9DA7CA9FFCD5ABEA" ruleID="78E0700E-56FE-45A2-A11B-6A560F730576">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at ListStaff.jsp line 13 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ListStaff.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/ListStaff.jsp</FilePath>
<LineStart>13</LineStart>
<Snippet>		&lt;br&gt;
		&lt;p&gt;Select from the list below	&lt;/p&gt;
		&lt;form id="form1" name="form1" method="post" action="attack?menu=&lt;%=webSession.getCurrentMenu()%&gt;"&gt;
  &lt;table width="60%" border="0" cellpadding="3"&gt;
    &lt;tr&gt;</Snippet>
                            </Primary>
                        </Issue>
                        <Issue iid="8F40E93016ADFE7F9DA7CA9FFCD5ABEC" ruleID="78E0700E-56FE-45A2-A11B-6A560F730576">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The form post at ListStaff.jsp line 14 must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ListStaff.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/ListStaff.jsp</FilePath>
<LineStart>14</LineStart>
<Snippet>		&lt;p&gt;Select from the list below	&lt;/p&gt;

		&lt;form id="form1" name="form1" method="post" action="attack?menu=&lt;%=webSession.getCurrentMenu()%&gt;"&gt;
  &lt;table width="60%" border="0" cellpadding="3"&gt;
    &lt;tr&gt;</Snippet>
                            </Primary>
                        </Issue>
                    </GroupingSection>
                    <GroupingSection count="19">
                        <groupTitle>Password Management: Hardcoded Password</groupTitle>
                        <MajorAttributeSummary>
                            <MetaInfo>
<Name>Abstract</Name>
<Value>Hardcoded passwords can compromise system security in a way that is not easy to remedy.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Explanation</Name>
<Value>It is never a good idea to hardcode a password. Not only does hardcoding a password allow all of the project's developers to view the password, it also makes fixing the problem extremely difficult. After the code is in production, the password cannot be changed without patching the software. If the account protected by the password is compromised, the owners of the system must choose between security and availability.


Example 1: The following code uses a hardcoded password to connect to a database:


...
DriverManager.getConnection(url, "scott", "tiger");
...


This code will run successfully, but anyone who has access to it will have access to the password. After the program ships, there is likely no way to change the database user "scott" with a password of "tiger" unless the program is patched. An employee with access to this information can use it to break into the system. Even worse, if attackers have access to the bytecode for the application they can use the javap -c command to access the disassembled code, which will contain the values of the passwords used. The result of this operation might look something like the following for Example 1:


javap -c ConnMngr.class

22: ldc   #36; //String jdbc:mysql://ixne.com/rxsql
24: ldc   #38; //String scott
26: ldc   #17; //String tiger


In the mobile environment, password management is especially important given that there is such a high chance of device loss.
Example 2: The following code uses hardcoded username and password to setup authentication for viewing protected pages with Android's WebView.

...
webview.setWebViewClient(new WebViewClient() {
  public void onReceivedHttpAuthRequest(WebView view,
        HttpAuthHandler handler, String host, String realm) {
    handler.proceed("guest", "allow");
  }
});
...


Similar to Example 1, this code will run successfully, but anyone who has access to it will have access to the password.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Recommendations</Name>
<Value>Passwords should never be hardcoded and should generally be obfuscated and managed in an external source. Storing passwords in plain text anywhere on the system allows anyone with sufficient permissions to read and potentially misuse the password. At the very least, hash passwords before storing them.

Some third-party products claim the ability to securely manage passwords. For example, WebSphere Application Server 4.x uses a simple XOR encryption algorithm for obfuscating values, but be skeptical about such facilities. WebSphere and other application servers offer outdated and relatively weak encryption mechanisms that are insufficient for security-sensitive environments. Today, the best option for a secure generic solution is to create a proprietary mechanism yourself.

For Android, as well as any other platform that uses SQLite database, SQLCipher is a good alternative. SQLCipher is an extension to the SQLite database that provides transparent 256-bit AES encryption of database files. Thus, credentials can be stored in an encrypted database.

Example 3: The following code demonstrates how to integrate SQLCipher into an Android application after downloading the necessary binaries, and store credentials into the database file.

import net.sqlcipher.database.SQLiteDatabase;
...
  SQLiteDatabase.loadLibs(this);
  File dbFile = getDatabasePath("credentials.db");
  dbFile.mkdirs();
  dbFile.delete();
  SQLiteDatabase db = SQLiteDatabase.openOrCreateDatabase(dbFile, "credentials", null);
  db.execSQL("create table credentials(u, p)");
  db.execSQL("insert into credentials(u, p) values(?, ?)", new Object[]{username, password});
...


Note that references to android.database.sqlite.SQLiteDatabase are substituted with those of net.sqlcipher.database.SQLiteDatabase.

To enable encryption on the WebView store, you must recompile WebKit with the sqlcipher.so library.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Tips</Name>
<Value>1. You can use the Fortify Java Annotations FortifyPassword and FortifyNotPassword to indicate which fields and variables represent passwords.

2. To identify null, empty, or hardcoded passwords, default rules only consider fields and variables that contain the word password. However, the Fortify Custom Rules Editor provides the Password Management wizard that makes it easy to create rules for detecting password management issues on custom-named fields and variables.</Value>
                            </MetaInfo>
                            <AttributeValue>
<Name>&lt;Unaudited&gt;</Name>
<Count>19</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not an Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Reliability Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Bad Practice</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Suspicious</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Exploitable</Name>
<Count>0</Count>
                            </AttributeValue>
                        </MajorAttributeSummary>
                        <Issue iid="816CEA48BCEC6903A18B76736450F08D" ruleID="C204F020-1CA1-4c25-A6CB-BAA69CA2DA0B">
                            <Category>Password Management: Hardcoded Password</Category>
                            <Folder>High</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>Hardcoded passwords can compromise system security in a way that is not easy to remedy.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>CrossSiteScripting.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/CrossSiteScripting.java</FilePath>
<LineStart>95</LineStart>
<Snippet>    public final static String FIRST_NAME = "firstName";

    public final static String PASSWORD = "password";

    public final static String EMPLOYEE_ID = "employee_id";</Snippet>
<TargetFunction>FieldAccess: PASSWORD()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="07F7D341F663504EA1ACCCF8305C4C13" ruleID="F9D3C462-8D1E-4457-967F-9F082B973F88">
                            <Category>Password Management: Hardcoded Password</Category>
                            <Folder>High</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>Hardcoded passwords can compromise system security in a way that is not easy to remedy.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>HtmlClues.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/HtmlClues.java</FilePath>
<LineStart>83</LineStart>
<Snippet>
	//&lt;START_OMIT_SOURCE&gt;
	return (username.equals("admin") &amp;&amp; password.equals("adminpw"));
	//&lt;END_OMIT_SOURCE&gt;
    }</Snippet>
<TargetFunction>FunctionCall: equals()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="C6B7BABAA6543DC3A46BEF45A9E04C1C" ruleID="CFD5D7C5-08EB-4D20-AE29-28C05CDA4B92">
                            <Category>Password Management: Hardcoded Password</Category>
                            <Folder>High</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>Hardcoded passwords can compromise system security in a way that is not easy to remedy.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>CreateDB.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/CreateDB.java</FilePath>
<LineStart>70</LineStart>
<Snippet>
	    connection = DriverManager
		    .getConnection(
			    "jdbc:odbc:;DRIVER=Microsoft Access Driver (*.mdb);DBQ=c:/webgoat.mdb;PWD=webgoat",
			    "webgoat", "webgoat");</Snippet>
<TargetFunction>getConnection()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="BEE9F012D21B9F3AC42A682BBEE278A7" ruleID="F9D3C462-8D1E-4457-967F-9F082B973F88">
                            <Category>Password Management: Hardcoded Password</Category>
                            <Folder>High</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>Hardcoded passwords can compromise system security in a way that is not easy to remedy.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>FailOpenAuthentication.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/FailOpenAuthentication.java</FilePath>
<LineStart>76</LineStart>
<Snippet>
		// if credentials are bad, send the login page
		if (!"webgoat".equals(username) || !password.equals("webgoat"))
		{
		    s.setMessage("Invalid username and password entered.");</Snippet>
<TargetFunction>FunctionCall: equals()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="868A60798788EDC729D0E0F48F20A84E" ruleID="F9D3C462-8D1E-4457-967F-9F082B973F88">
                            <Category>Password Management: Hardcoded Password</Category>
                            <Folder>High</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>Hardcoded passwords can compromise system security in a way that is not easy to remedy.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>WeakAuthenticationCookie.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/WeakAuthenticationCookie.java</FilePath>
<LineStart>137</LineStart>
<Snippet>		loginID = encode("webgoat12345");
	    }
	    else if (username.equals("aspect") &amp;&amp; password.equals("aspect"))
	    {
		loginID = encode("aspect12345");</Snippet>
<TargetFunction>FunctionCall: equals()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="5564F8A8AE1FDB216F90CD53FF4C5C83" ruleID="F9D3C462-8D1E-4457-967F-9F082B973F88">
                            <Category>Password Management: Hardcoded Password</Category>
                            <Folder>High</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>Hardcoded passwords can compromise system security in a way that is not easy to remedy.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>WeakAuthenticationCookie.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/WeakAuthenticationCookie.java</FilePath>
<LineStart>133</LineStart>
<Snippet>	    String loginID = "";

	    if (username.equals("webgoat") &amp;&amp; password.equals("webgoat"))
	    {
		loginID = encode("webgoat12345");</Snippet>
<TargetFunction>FunctionCall: equals()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="DE7FF93CBA90C5D81119A46A72EA5016" ruleID="C204F020-1CA1-4c25-A6CB-BAA69CA2DA0B">
                            <Category>Password Management: Hardcoded Password</Category>
                            <Folder>High</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>Hardcoded passwords can compromise system security in a way that is not easy to remedy.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>WeakSessionID.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/WeakSessionID.java</FilePath>
<LineStart>68</LineStart>
<Snippet>     *  Description of the Field
     */
    protected final static String PASSWORD = "Password";

    /**</Snippet>
<TargetFunction>FieldAccess: PASSWORD()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="DFE5CCB06D8F608016DD7B1BC4E28D5B" ruleID="5FC849F9-EBBB-49C9-8F48-45368F98C83E">
                            <Category>Password Management: Hardcoded Password</Category>
                            <Folder>High</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>Hardcoded passwords can compromise system security in a way that is not easy to remedy.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>DatabaseUtilities.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/DatabaseUtilities.java</FilePath>
<LineStart>98</LineStart>
<Snippet>		Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
		return DriverManager
			.getConnection("jdbc:odbc:;DRIVER=Microsoft Access Driver (*.mdb);DBQ="
				+ dbName + ";PWD=webgoat");
	    }</Snippet>
<TargetFunction>getConnection()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="43D35901E78406A60F044F2F407F9A53" ruleID="C204F020-1CA1-4c25-A6CB-BAA69CA2DA0B">
                            <Category>Password Management: Hardcoded Password</Category>
                            <Folder>High</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>Hardcoded passwords can compromise system security in a way that is not easy to remedy.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>Challenge2Screen.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/Challenge2Screen.java</FilePath>
<LineStart>108</LineStart>
<Snippet>     *  Description of the Field
     */
    protected final static String PASSWORD = "Password";

    /**</Snippet>
<TargetFunction>FieldAccess: PASSWORD()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="7AEA3CBD88E206BEE5FB1E06CB42B00E" ruleID="C204F020-1CA1-4c25-A6CB-BAA69CA2DA0B">
                            <Category>Password Management: Hardcoded Password</Category>
                            <Folder>High</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>Hardcoded passwords can compromise system security in a way that is not easy to remedy.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>LogSpoofing.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/LogSpoofing.java</FilePath>
<LineStart>59</LineStart>
<Snippet>    private static final String USERNAME = "username";

    private static final String PASSWORD = "password";

    private final static IMG MAC_LOGO = new IMG("images/logos/macadamian.gif").setAlt(</Snippet>
<TargetFunction>FieldAccess: PASSWORD()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="C9F66C7212252423D2CBA090538D5087" ruleID="ACBE009D-CD38-4DDC-BB9A-FC9CD21FCEC4">
                            <Category>Password Management: Hardcoded Password</Category>
                            <Folder>High</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>Hardcoded passwords can compromise system security in a way that is not easy to remedy.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>WSDLScanning.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/WSDLScanning.java</FilePath>
<LineStart>147</LineStart>
<Snippet>	    call.setReturnType(XMLType.XSD_STRING);
	    call.setUsername("guest");
	    call.setPassword("guest");
	    call.setTargetEndpointAddress("http://localhost/WebGoat/services/"
		    + serv);</Snippet>
<TargetFunction>setPassword()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="1A6D75C955CDD71301B61428E35E8346" ruleID="C204F020-1CA1-4c25-A6CB-BAA69CA2DA0B">
                            <Category>Password Management: Hardcoded Password</Category>
                            <Folder>High</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>Hardcoded passwords can compromise system security in a way that is not easy to remedy.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>RoleBasedAccessControl.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/RoleBasedAccessControl.java</FilePath>
<LineStart>88</LineStart>
<Snippet>    public final static String FIRST_NAME = "firstName";

    public final static String PASSWORD = "password";

    public final static String EMPLOYEE_ID = "employee_id";</Snippet>
<TargetFunction>FieldAccess: PASSWORD()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="8A34872802D40BEFBDFF8522BED488E6" ruleID="C204F020-1CA1-4c25-A6CB-BAA69CA2DA0B">
                            <Category>Password Management: Hardcoded Password</Category>
                            <Folder>High</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>Hardcoded passwords can compromise system security in a way that is not easy to remedy.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>XPATHInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/XPATHInjection.java</FilePath>
<LineStart>79</LineStart>
<Snippet>    private final static String USERNAME = "Username";

    private final static String PASSWORD = "Password";

    private final static IMG MAC_LOGO = new IMG("images/logos/macadamian.gif").setAlt(</Snippet>
<TargetFunction>FieldAccess: PASSWORD()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="5720CC1A72AB7536B69D6A13E69A4154" ruleID="C204F020-1CA1-4c25-A6CB-BAA69CA2DA0B">
                            <Category>Password Management: Hardcoded Password</Category>
                            <Folder>High</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>Hardcoded passwords can compromise system security in a way that is not easy to remedy.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>DOS_Login.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/DOS_Login.java</FilePath>
<LineStart>64</LineStart>
<Snippet>     *  Description of the Field
     */
    protected final static String PASSWORD = "Password";

    /**</Snippet>
<TargetFunction>FieldAccess: PASSWORD()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="A0122DA0000C619783ECEE640A4B2842" ruleID="C204F020-1CA1-4c25-A6CB-BAA69CA2DA0B">
                            <Category>Password Management: Hardcoded Password</Category>
                            <Folder>High</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>Hardcoded passwords can compromise system security in a way that is not easy to remedy.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>WeakAuthenticationCookie.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/WeakAuthenticationCookie.java</FilePath>
<LineStart>70</LineStart>
<Snippet>     *  Description of the Field
     */
    protected final static String PASSWORD = "Password";

    /**</Snippet>
<TargetFunction>FieldAccess: PASSWORD()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="FFD30B48DE13CEE114F59E2141897423" ruleID="C204F020-1CA1-4c25-A6CB-BAA69CA2DA0B">
                            <Category>Password Management: Hardcoded Password</Category>
                            <Folder>High</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>Hardcoded passwords can compromise system security in a way that is not easy to remedy.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>HtmlClues.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/HtmlClues.java</FilePath>
<LineStart>63</LineStart>
<Snippet>     *  Description of the Field
     */
    protected final static String PASSWORD = "Password";

    /**</Snippet>
<TargetFunction>FieldAccess: PASSWORD()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="16C3FBC37D6B8D7A61AAF7D7F5225500" ruleID="C204F020-1CA1-4c25-A6CB-BAA69CA2DA0B">
                            <Category>Password Management: Hardcoded Password</Category>
                            <Folder>High</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>Hardcoded passwords can compromise system security in a way that is not easy to remedy.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>WsSAXInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/WsSAXInjection.java</FilePath>
<LineStart>69</LineStart>
<Snippet>{

    private final static String PASSWORD = "password";

    private String password;</Snippet>
<TargetFunction>FieldAccess: PASSWORD()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="C7BA3E1B5FA2A87891ACE2703B58FF9C" ruleID="C204F020-1CA1-4c25-A6CB-BAA69CA2DA0B">
                            <Category>Password Management: Hardcoded Password</Category>
                            <Folder>High</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>Hardcoded passwords can compromise system security in a way that is not easy to remedy.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>SQLInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/SQLInjection.java</FilePath>
<LineStart>94</LineStart>
<Snippet>    public final static String FIRST_NAME = "firstName";

    public final static String PASSWORD = "password";

    public final static String EMPLOYEE_ID = "employee_id";</Snippet>
<TargetFunction>FieldAccess: PASSWORD()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="F12D3DA6BF02CCF50D438E74A1F8176C" ruleID="C204F020-1CA1-4c25-A6CB-BAA69CA2DA0B">
                            <Category>Password Management: Hardcoded Password</Category>
                            <Folder>High</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>Hardcoded passwords can compromise system security in a way that is not easy to remedy.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>ECSFactory.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ECSFactory.java</FilePath>
<LineStart>70</LineStart>
<Snippet>     */

    public final static String PASSWORD = "Password";

</Snippet>
<TargetFunction>FieldAccess: PASSWORD()</TargetFunction>
                            </Primary>
                        </Issue>
                    </GroupingSection>
                    <GroupingSection count="15">
                        <groupTitle>Hidden Field</groupTitle>
                        <MajorAttributeSummary>
                            <MetaInfo>
<Name>Abstract</Name>
<Value>A hidden form field is used in EditProfile.jsp on line 122.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Explanation</Name>
<Value>Programmers often trust the contents of hidden fields, expecting that users will not be able to view them or manipulate their contents. Attackers will violate these assumptions. They will examine the values written to hidden fields and alter them or replace the contents with attack data.

Example: An &lt;input&gt; tag of type hidden indicates the use of a hidden field.

&lt;input type="hidden"&gt;


If hidden fields carry sensitive information, this information will be cached the same way the rest of the page is cached. This can lead to sensitive information being tucked away in the browser cache without the user's knowledge.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Recommendations</Name>
<Value>Expect that attackers will study and decode all uses of hidden fields in the application. Treat hidden fields as untrusted input. Don't store information in hidden fields if the information should not be cached along with the rest of the page.</Value>
                            </MetaInfo>
                            <AttributeValue>
<Name>&lt;Unaudited&gt;</Name>
<Count>15</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not an Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Reliability Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Bad Practice</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Suspicious</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Exploitable</Name>
<Count>0</Count>
                            </AttributeValue>
                        </MajorAttributeSummary>
                        <Issue iid="9316BBE3F97DD886FEB0C22EFD4F9CF7" ruleID="811489B8-AA5B-494C-9074-926A810A1421">
                            <Category>Hidden Field</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>A hidden form field is used in ViewProfile.jsp on line 119.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/ViewProfile.jsp</FilePath>
<LineStart>119</LineStart>
<Snippet>					%&gt;
						&lt;form method="POST" action="attack?menu=&lt;%=webSession.getCurrentMenu()%&gt;"&gt;
							&lt;input type="hidden" name="&lt;%=CrossSiteScripting.EMPLOYEE_ID%&gt;" value="&lt;%=employee.getId()%&gt;"&gt;
							&lt;input type="submit" name="action" value="&lt;%=CrossSiteScripting.LISTSTAFF_ACTION%&gt;"/&gt;
						&lt;/form&gt;&lt;/td&gt;</Snippet>
                            </Primary>
                        </Issue>
                        <Issue iid="CD83647E67EDA4BFB5EDF60573C7BA3D" ruleID="811489B8-AA5B-494C-9074-926A810A1421">
                            <Category>Hidden Field</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>A hidden form field is used in EditProfile.jsp on line 123.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/EditProfile.jsp</FilePath>
<LineStart>123</LineStart>
<Snippet>                       	&lt;td width="81"&gt;
 							&lt;input name="&lt;%=SQLInjection.EMPLOYEE_ID%&gt;" type="hidden" value="&lt;%=employee.getId()%&gt;"&gt;
							&lt;input name="&lt;%=SQLInjection.TITLE%&gt;" type="hidden" value="&lt;%=employee.getTitle()%&gt;"&gt;
							&lt;input type="submit" name="action" value="&lt;%=SQLInjection.UPDATEPROFILE_ACTION%&gt;"/&gt;
						&lt;/td&gt;</Snippet>
                            </Primary>
                        </Issue>
                        <Issue iid="9316BBE3F97DD886FEB0C22EFD4F9CFE" ruleID="811489B8-AA5B-494C-9074-926A810A1421">
                            <Category>Hidden Field</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>A hidden form field is used in ViewProfile.jsp on line 126.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/ViewProfile.jsp</FilePath>
<LineStart>126</LineStart>
<Snippet>					 %&gt;
						&lt;form method="POST" action="attack?menu=&lt;%=webSession.getCurrentMenu()%&gt;"&gt;
							&lt;input type="hidden" name="&lt;%=SQLInjection.EMPLOYEE_ID%&gt;" value="&lt;%=employee.getId()%&gt;"&gt;
							&lt;input type="submit" name="action" value="&lt;%=SQLInjection.EDITPROFILE_ACTION%&gt;"/&gt;
						&lt;/form&gt;</Snippet>
                            </Primary>
                        </Issue>
                        <Issue iid="9316BBE3F97DD886FEB0C22EFD4F9CF8" ruleID="811489B8-AA5B-494C-9074-926A810A1421">
                            <Category>Hidden Field</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>A hidden form field is used in ViewProfile.jsp on line 131.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/ViewProfile.jsp</FilePath>
<LineStart>131</LineStart>
<Snippet>					%&gt;
						&lt;form method="POST" action="attack?menu=&lt;%=webSession.getCurrentMenu()%&gt;"&gt;
							&lt;input type="hidden" name="&lt;%=CrossSiteScripting.EMPLOYEE_ID%&gt;" value="&lt;%=employee.getId()%&gt;"&gt;
							&lt;input type="submit" name="action" value="&lt;%=CrossSiteScripting.EDITPROFILE_ACTION%&gt;"/&gt;
						&lt;/form&gt;</Snippet>
                            </Primary>
                        </Issue>
                        <Issue iid="9316BBE3F97DD886FEB0C22EFD4F9CF9" ruleID="811489B8-AA5B-494C-9074-926A810A1421">
                            <Category>Hidden Field</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>A hidden form field is used in ViewProfile.jsp on line 144.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/ViewProfile.jsp</FilePath>
<LineStart>144</LineStart>
<Snippet>					%&gt;
						&lt;form method="POST" action="attack?menu=&lt;%=webSession.getCurrentMenu()%&gt;"&gt;
							&lt;input type="hidden" name="&lt;%=CrossSiteScripting.EMPLOYEE_ID%&gt;" value="&lt;%=employee.getId()%&gt;"&gt;
							&lt;input type="submit" name="action" value="&lt;%=CrossSiteScripting.DELETEPROFILE_ACTION%&gt;"/&gt;
						&lt;/form&gt;</Snippet>
                            </Primary>
                        </Issue>
                        <Issue iid="9316BBE3F97DD886FEB0C22EFD4F9CFB" ruleID="811489B8-AA5B-494C-9074-926A810A1421">
                            <Category>Hidden Field</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>A hidden form field is used in ViewProfile.jsp on line 129.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/ViewProfile.jsp</FilePath>
<LineStart>129</LineStart>
<Snippet>					 %&gt;
						&lt;form method="POST" action="attack?menu=&lt;%=webSession.getCurrentMenu()%&gt;"&gt;
							&lt;input type="hidden" name="&lt;%=RoleBasedAccessControl.EMPLOYEE_ID%&gt;" value="&lt;%=employee.getId()%&gt;"&gt;
							&lt;input type="submit" name="action" value="&lt;%=RoleBasedAccessControl.EDITPROFILE_ACTION%&gt;"/&gt;
						&lt;/form&gt;</Snippet>
                            </Primary>
                        </Issue>
                        <Issue iid="CD83647E67EDA4BFB5EDF60573C7BA39" ruleID="811489B8-AA5B-494C-9074-926A810A1421">
                            <Category>Hidden Field</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>A hidden form field is used in EditProfile.jsp on line 123.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/EditProfile.jsp</FilePath>
<LineStart>123</LineStart>
<Snippet>                       	&lt;td width="81"&gt;
 							&lt;input name="&lt;%=CrossSiteScripting.EMPLOYEE_ID%&gt;" type="hidden" value="&lt;%=employee.getId()%&gt;"&gt;
							&lt;input name="&lt;%=CrossSiteScripting.TITLE%&gt;" type="hidden" value="&lt;%=employee.getTitle()%&gt;"&gt;
							&lt;input type="submit" name="action" value="&lt;%=CrossSiteScripting.UPDATEPROFILE_ACTION%&gt;"/&gt;
						&lt;/td&gt;</Snippet>
                            </Primary>
                        </Issue>
                        <Issue iid="9316BBE3F97DD886FEB0C22EFD4F9CFA" ruleID="811489B8-AA5B-494C-9074-926A810A1421">
                            <Category>Hidden Field</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>A hidden form field is used in ViewProfile.jsp on line 117.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/ViewProfile.jsp</FilePath>
<LineStart>117</LineStart>
<Snippet>					 %&gt;
						&lt;form method="POST" action="attack?menu=&lt;%=webSession.getCurrentMenu()%&gt;"&gt;
							&lt;input type="hidden" name="&lt;%=RoleBasedAccessControl.EMPLOYEE_ID%&gt;" value="&lt;%=employee.getId()%&gt;"&gt;
							&lt;input type="submit" name="action" value="&lt;%=RoleBasedAccessControl.LISTSTAFF_ACTION%&gt;"/&gt;
						&lt;/form&gt;</Snippet>
                            </Primary>
                        </Issue>
                        <Issue iid="CD83647E67EDA4BFB5EDF60573C7BA3C" ruleID="811489B8-AA5B-494C-9074-926A810A1421">
                            <Category>Hidden Field</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>A hidden form field is used in EditProfile.jsp on line 122.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/EditProfile.jsp</FilePath>
<LineStart>122</LineStart>
<Snippet>				  		
                       	&lt;td width="81"&gt;
 							&lt;input name="&lt;%=SQLInjection.EMPLOYEE_ID%&gt;" type="hidden" value="&lt;%=employee.getId()%&gt;"&gt;
							&lt;input name="&lt;%=SQLInjection.TITLE%&gt;" type="hidden" value="&lt;%=employee.getTitle()%&gt;"&gt;
							&lt;input type="submit" name="action" value="&lt;%=SQLInjection.UPDATEPROFILE_ACTION%&gt;"/&gt;</Snippet>
                            </Primary>
                        </Issue>
                        <Issue iid="CD83647E67EDA4BFB5EDF60573C7BA3B" ruleID="811489B8-AA5B-494C-9074-926A810A1421">
                            <Category>Hidden Field</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>A hidden form field is used in EditProfile.jsp on line 126.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/EditProfile.jsp</FilePath>
<LineStart>126</LineStart>
<Snippet>                       	&lt;td width="81"&gt;
 							&lt;input name="&lt;%=RoleBasedAccessControl.EMPLOYEE_ID%&gt;" type="hidden" value="&lt;%=employee.getId()%&gt;"&gt;
							&lt;input name="&lt;%=RoleBasedAccessControl.TITLE%&gt;" type="hidden" value="&lt;%=employee.getTitle()%&gt;"&gt;
							&lt;input type="submit" name="action" value="&lt;%=RoleBasedAccessControl.UPDATEPROFILE_ACTION%&gt;"/&gt;
						&lt;/td&gt;</Snippet>
                            </Primary>
                        </Issue>
                        <Issue iid="CD83647E67EDA4BFB5EDF60573C7BA3A" ruleID="811489B8-AA5B-494C-9074-926A810A1421">
                            <Category>Hidden Field</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>A hidden form field is used in EditProfile.jsp on line 125.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/EditProfile.jsp</FilePath>
<LineStart>125</LineStart>
<Snippet>				  		
                       	&lt;td width="81"&gt;
 							&lt;input name="&lt;%=RoleBasedAccessControl.EMPLOYEE_ID%&gt;" type="hidden" value="&lt;%=employee.getId()%&gt;"&gt;
							&lt;input name="&lt;%=RoleBasedAccessControl.TITLE%&gt;" type="hidden" value="&lt;%=employee.getTitle()%&gt;"&gt;
							&lt;input type="submit" name="action" value="&lt;%=RoleBasedAccessControl.UPDATEPROFILE_ACTION%&gt;"/&gt;</Snippet>
                            </Primary>
                        </Issue>
                        <Issue iid="9316BBE3F97DD886FEB0C22EFD4F9CFC" ruleID="811489B8-AA5B-494C-9074-926A810A1421">
                            <Category>Hidden Field</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>A hidden form field is used in ViewProfile.jsp on line 142.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/ViewProfile.jsp</FilePath>
<LineStart>142</LineStart>
<Snippet>					%&gt;
						&lt;form method="POST" action="attack?menu=&lt;%=webSession.getCurrentMenu()%&gt;"&gt;
							&lt;input type="hidden" name="&lt;%=RoleBasedAccessControl.EMPLOYEE_ID%&gt;" value="&lt;%=employee.getId()%&gt;"&gt;
							&lt;input type="submit" name="action" value="&lt;%=RoleBasedAccessControl.DELETEPROFILE_ACTION%&gt;"/&gt;
						&lt;/form&gt;</Snippet>
                            </Primary>
                        </Issue>
                        <Issue iid="9316BBE3F97DD886FEB0C22EFD4F9CFF" ruleID="811489B8-AA5B-494C-9074-926A810A1421">
                            <Category>Hidden Field</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>A hidden form field is used in ViewProfile.jsp on line 139.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/ViewProfile.jsp</FilePath>
<LineStart>139</LineStart>
<Snippet>					%&gt;
						&lt;form method="POST" action="attack?menu=&lt;%=webSession.getCurrentMenu()%&gt;"&gt;
							&lt;input type="hidden" name="&lt;%=SQLInjection.EMPLOYEE_ID%&gt;" value="&lt;%=employee.getId()%&gt;"&gt;
							&lt;input type="submit" name="action" value="&lt;%=SQLInjection.DELETEPROFILE_ACTION%&gt;"/&gt;
						&lt;/form&gt;</Snippet>
                            </Primary>
                        </Issue>
                        <Issue iid="9316BBE3F97DD886FEB0C22EFD4F9CFD" ruleID="811489B8-AA5B-494C-9074-926A810A1421">
                            <Category>Hidden Field</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>A hidden form field is used in ViewProfile.jsp on line 113.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/ViewProfile.jsp</FilePath>
<LineStart>113</LineStart>
<Snippet>					 %&gt;                	
						&lt;form method="POST" action="attack?menu=&lt;%=webSession.getCurrentMenu()%&gt;"&gt;
							&lt;input type="hidden" name="&lt;%=SQLInjection.EMPLOYEE_ID%&gt;" value="&lt;%=employee.getId()%&gt;"&gt;
							&lt;input type="submit" name="action" value="&lt;%=SQLInjection.LISTSTAFF_ACTION%&gt;"/&gt;
						&lt;/form&gt;</Snippet>
                            </Primary>
                        </Issue>
                        <Issue iid="CD83647E67EDA4BFB5EDF60573C7BA38" ruleID="811489B8-AA5B-494C-9074-926A810A1421">
                            <Category>Hidden Field</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>A hidden form field is used in EditProfile.jsp on line 122.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/EditProfile.jsp</FilePath>
<LineStart>122</LineStart>
<Snippet>				  		
                       	&lt;td width="81"&gt;
 							&lt;input name="&lt;%=CrossSiteScripting.EMPLOYEE_ID%&gt;" type="hidden" value="&lt;%=employee.getId()%&gt;"&gt;
							&lt;input name="&lt;%=CrossSiteScripting.TITLE%&gt;" type="hidden" value="&lt;%=employee.getTitle()%&gt;"&gt;
							&lt;input type="submit" name="action" value="&lt;%=CrossSiteScripting.UPDATEPROFILE_ACTION%&gt;"/&gt;</Snippet>
                            </Primary>
                        </Issue>
                    </GroupingSection>
                    <GroupingSection count="15">
                        <groupTitle>Poor Error Handling: Overly Broad Throws</groupTitle>
                        <MajorAttributeSummary>
                            <MetaInfo>
<Name>Abstract</Name>
<Value>The method concept1() in BackDoors.java throws a generic exception making it harder for callers to do a good job of error handling and recovery.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Explanation</Name>
<Value>Declaring a method to throw Exception or Throwable makes it difficult for callers to do good error handling and error recovery. Java's exception mechanism is set up to make it easy for callers to anticipate what can go wrong and write code to handle each specific exceptional circumstance. Declaring that a method throws a generic form of exception defeats this system.

Example: The following method throws three types of exceptions.


public void doExchange()
  throws IOException, InvocationTargetException,
         SQLException {
  ...
}



While it might seem tidier to write


public void doExchange()
  throws Exception {
  ...
}


doing so hampers the caller's ability to understand and handle the exceptions that occur. Further, if a later revision of doExchange() introduces a new type of exception that should be treated differently than previous exceptions, there is no easy way to enforce this requirement.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Recommendations</Name>
<Value>Do not declare methods to throw Exception or Throwable. If the exceptions thrown by a method are not recoverable or should not generally be caught by the caller, consider throwing unchecked exceptions rather than checked exceptions. This can be accomplished by implementing exception classes that extend RuntimeException or Error instead of Exception, or add a try/catch wrapper in your method to convert checked exceptions to unchecked exceptions.</Value>
                            </MetaInfo>
                            <AttributeValue>
<Name>&lt;Unaudited&gt;</Name>
<Count>15</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not an Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Reliability Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Bad Practice</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Suspicious</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Exploitable</Name>
<Count>0</Count>
                            </AttributeValue>
                        </MajorAttributeSummary>
                        <Issue iid="543877893EBD02DFE17A9E604F23A9F3" ruleID="572EA1F6-FC86-443E-B1A9-A227D5AD17CC">
                            <Category>Poor Error Handling: Overly Broad Throws</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The method checkCookie() in WeakAuthenticationCookie.java throws a generic exception making it harder for callers to do a good job of error handling and recovery.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>WeakAuthenticationCookie.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/WeakAuthenticationCookie.java</FilePath>
<LineStart>85</LineStart>
<Snippet>     * @exception  Exception  Description of the Exception
     */
    protected String checkCookie(WebSession s) throws Exception
    {
	String cookie = getCookie(s);</Snippet>
<TargetFunction>Function: checkCookie()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="4767A39CC82624C8DF94CE558388608F" ruleID="572EA1F6-FC86-443E-B1A9-A227D5AD17CC">
                            <Category>Poor Error Handling: Overly Broad Throws</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The method makeUser() in HtmlClues.java throws a generic exception making it harder for callers to do a good job of error handling and recovery.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>HtmlClues.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/HtmlClues.java</FilePath>
<LineStart>135</LineStart>
<Snippet>     * @exception  Exception  Description of the Exception
     */
    protected Element makeUser(WebSession s, String user, String method)
	    throws Exception
    {</Snippet>
<TargetFunction>Function: makeUser()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="D9C7CC39D5B7A558E88FA78611553BF4" ruleID="572EA1F6-FC86-443E-B1A9-A227D5AD17CC">
                            <Category>Poor Error Handling: Overly Broad Throws</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The method showDefaceAttempt() in Challenge2Screen.java throws a generic exception making it harder for callers to do a good job of error handling and recovery.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Challenge2Screen.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/Challenge2Screen.java</FilePath>
<LineStart>397</LineStart>
<Snippet>

    private Element showDefaceAttempt(WebSession s) throws Exception
    {
	ElementContainer ec = new ElementContainer();</Snippet>
<TargetFunction>Function: showDefaceAttempt()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="022767F21A8D334E484C3E7CEC2C6749" ruleID="572EA1F6-FC86-443E-B1A9-A227D5AD17CC">
                            <Category>Poor Error Handling: Overly Broad Throws</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The method concept1() in BackDoors.java throws a generic exception making it harder for callers to do a good job of error handling and recovery.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>BackDoors.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/BackDoors.java</FilePath>
<LineStart>87</LineStart>
<Snippet>

    protected Element concept1(WebSession s) throws Exception
    {
	ElementContainer ec = new ElementContainer();</Snippet>
<TargetFunction>Function: concept1()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="5503BCF906889669D3706765FAA2A3D8" ruleID="572EA1F6-FC86-443E-B1A9-A227D5AD17CC">
                            <Category>Poor Error Handling: Overly Broad Throws</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The method doStage2() in LessonAdapter.java throws a generic exception making it harder for callers to do a good job of error handling and recovery.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>LessonAdapter.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/LessonAdapter.java</FilePath>
<LineStart>152</LineStart>
<Snippet>

    protected Element doStage2(WebSession s) throws Exception
    {
	ElementContainer ec = new ElementContainer();</Snippet>
<TargetFunction>Function: doStage2()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="DFD20D8A60BD076F656B2B332AA1F9B2" ruleID="572EA1F6-FC86-443E-B1A9-A227D5AD17CC">
                            <Category>Poor Error Handling: Overly Broad Throws</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The method makeUser() in WeakAuthenticationCookie.java throws a generic exception making it harder for callers to do a good job of error handling and recovery.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>WeakAuthenticationCookie.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/WeakAuthenticationCookie.java</FilePath>
<LineStart>373</LineStart>
<Snippet>     * @exception  Exception  Description of the Exception
     */
    protected Element makeUser(WebSession s, String user, String method)
	    throws Exception
    {</Snippet>
<TargetFunction>Function: makeUser()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="20D8D8DC490B4033D5BED8E678B7B761" ruleID="572EA1F6-FC86-443E-B1A9-A227D5AD17CC">
                            <Category>Poor Error Handling: Overly Broad Throws</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The method doStage4() in LessonAdapter.java throws a generic exception making it harder for callers to do a good job of error handling and recovery.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>LessonAdapter.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/LessonAdapter.java</FilePath>
<LineStart>168</LineStart>
<Snippet>

    protected Element doStage4(WebSession s) throws Exception
    {
	ElementContainer ec = new ElementContainer();</Snippet>
<TargetFunction>Function: doStage4()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="8C3759D2B027E1A49E71D3884549506C" ruleID="572EA1F6-FC86-443E-B1A9-A227D5AD17CC">
                            <Category>Poor Error Handling: Overly Broad Throws</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The method doCachePoisining() in HttpSplitting.java throws a generic exception making it harder for callers to do a good job of error handling and recovery.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>HttpSplitting.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/HttpSplitting.java</FilePath>
<LineStart>191</LineStart>
<Snippet>

    protected Element doCachePoisining(WebSession s) throws Exception
    {
	ElementContainer ec = new ElementContainer();</Snippet>
<TargetFunction>Function: doCachePoisining()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="7DCAF2F4819DDFC80CC5DDD5783F98D8" ruleID="572EA1F6-FC86-443E-B1A9-A227D5AD17CC">
                            <Category>Poor Error Handling: Overly Broad Throws</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The method doStage6() in LessonAdapter.java throws a generic exception making it harder for callers to do a good job of error handling and recovery.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>LessonAdapter.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/LessonAdapter.java</FilePath>
<LineStart>184</LineStart>
<Snippet>

    protected Element doStage6(WebSession s) throws Exception
    {
	ElementContainer ec = new ElementContainer();</Snippet>
<TargetFunction>Function: doStage6()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="F3E81447B7A253F2AB8E9FF9EBE13A3F" ruleID="572EA1F6-FC86-443E-B1A9-A227D5AD17CC">
                            <Category>Poor Error Handling: Overly Broad Throws</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The method doStage5() in LessonAdapter.java throws a generic exception making it harder for callers to do a good job of error handling and recovery.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>LessonAdapter.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/LessonAdapter.java</FilePath>
<LineStart>176</LineStart>
<Snippet>

    protected Element doStage5(WebSession s) throws Exception
    {
	ElementContainer ec = new ElementContainer();</Snippet>
<TargetFunction>Function: doStage5()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="3CEFB658C858D961F2C1942155C3C953" ruleID="572EA1F6-FC86-443E-B1A9-A227D5AD17CC">
                            <Category>Poor Error Handling: Overly Broad Throws</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The method concept2() in BackDoors.java throws a generic exception making it harder for callers to do a good job of error handling and recovery.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>BackDoors.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/BackDoors.java</FilePath>
<LineStart>142</LineStart>
<Snippet>

    protected Element concept2(WebSession s) throws Exception
    {
	ElementContainer ec = new ElementContainer();</Snippet>
<TargetFunction>Function: concept2()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="B1EAD77CBD01B93091502EBF26A4247B" ruleID="572EA1F6-FC86-443E-B1A9-A227D5AD17CC">
                            <Category>Poor Error Handling: Overly Broad Throws</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The method createAttackEnvironment() in HttpSplitting.java throws a generic exception making it harder for callers to do a good job of error handling and recovery.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>HttpSplitting.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/HttpSplitting.java</FilePath>
<LineStart>161</LineStart>
<Snippet>

    protected Element createAttackEnvironment(WebSession s) throws Exception
    {
	ElementContainer ec = new ElementContainer();</Snippet>
<TargetFunction>Function: createAttackEnvironment()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="210AA1A8EFBCB73D3D72870FCFCE5041" ruleID="572EA1F6-FC86-443E-B1A9-A227D5AD17CC">
                            <Category>Poor Error Handling: Overly Broad Throws</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The method doStage1() in LessonAdapter.java throws a generic exception making it harder for callers to do a good job of error handling and recovery.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>LessonAdapter.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/LessonAdapter.java</FilePath>
<LineStart>144</LineStart>
<Snippet>

    protected Element doStage1(WebSession s) throws Exception
    {
	ElementContainer ec = new ElementContainer();</Snippet>
<TargetFunction>Function: doStage1()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="444E18A164A77C9987658EB0D0F46EBF" ruleID="572EA1F6-FC86-443E-B1A9-A227D5AD17CC">
                            <Category>Poor Error Handling: Overly Broad Throws</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The method doStage3() in LessonAdapter.java throws a generic exception making it harder for callers to do a good job of error handling and recovery.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>LessonAdapter.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/LessonAdapter.java</FilePath>
<LineStart>160</LineStart>
<Snippet>

    protected Element doStage3(WebSession s) throws Exception
    {
	ElementContainer ec = new ElementContainer();</Snippet>
<TargetFunction>Function: doStage3()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="7A9D14739BA15F55897876721C44C389" ruleID="572EA1F6-FC86-443E-B1A9-A227D5AD17CC">
                            <Category>Poor Error Handling: Overly Broad Throws</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>The method checkParams() in WeakAuthenticationCookie.java throws a generic exception making it harder for callers to do a good job of error handling and recovery.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>WeakAuthenticationCookie.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/WeakAuthenticationCookie.java</FilePath>
<LineStart>124</LineStart>
<Snippet>     * @exception  Exception  Description of the Exception
     */
    protected String checkParams(WebSession s) throws Exception
    {
	String username = s.getParser().getStringParameter(USERNAME, "");</Snippet>
<TargetFunction>Function: checkParams()</TargetFunction>
                            </Primary>
                        </Issue>
                    </GroupingSection>
                    <GroupingSection count="15">
                        <groupTitle>Unreleased Resource: Streams</groupTitle>
                        <MajorAttributeSummary>
                            <MetaInfo>
<Name>Abstract</Name>
<Value>The function getLessonPlan() in AbstractLesson.java sometimes fails to release a system resource allocated by FileReader() on line 567.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Explanation</Name>
<Value>The program can potentially fail to release a system resource.

Resource leaks have at least two common causes:

- Error conditions and other exceptional circumstances.

- Confusion over which part of the program is responsible for releasing the resource.

Most unreleased resource issues result in general software reliability problems. However, if an attacker can intentionally trigger a resource leak, the attacker may be able to launch a denial of service attack by depleting the resource pool.

Example: The following method never closes the file handle it opens. The finalize() method for FileInputStream eventually calls close(), but there is no guarantee as to how long it will take before the finalize() method will be invoked. In a busy environment, this can result in the JVM using up all of its file handles.

private void processFile(String fName) throws FileNotFoundException, IOException {
  FileInputStream fis = new FileInputStream(fName);
  int sz;
  byte[] byteArray = new byte[BLOCK_SIZE];
  while ((sz = fis.read(byteArray)) != -1) {
    processBytes(byteArray, sz);
  }
}
</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Recommendations</Name>
<Value>1. Never rely on finalize() to reclaim resources. In order for an object's finalize() method to be invoked, the garbage collector must determine that the object is eligible for garbage collection. Because the garbage collector is not required to run unless the JVM is low on memory, there is no guarantee that an object's finalize() method will be invoked in an expedient fashion. When the garbage collector finally does run, it may cause a large number of resources to be reclaimed in a short period of time, which can lead to "bursty" performance and lower overall system throughput. This effect becomes more pronounced as the load on the system increases.

Finally, if it is possible for a resource reclamation operation to hang (if it requires communicating over a network to a database, for example), then the thread that is executing the finalize() method will hang.

2. Release resources in a finally block. The code for the Example should be rewritten as follows:


public void processFile(String fName) throws FileNotFoundException, IOException {
  FileInputStream fis;
  try {
    fis = new FileInputStream(fName);
    int sz;
    byte[] byteArray = new byte[BLOCK_SIZE];
    while ((sz = fis.read(byteArray)) != -1) {
      processBytes(byteArray, sz);
    }
  }
  finally {
    if (fis != null) {
      safeClose(fis);
    }
  }
}

public static void safeClose(FileInputStream fis) {
  if (fis != null) {
    try {
      fis.close();
    } catch (IOException e) {
      log(e);
    }
  }
}


This solution uses a helper function to log the exceptions that might occur when trying to close the stream. Presumably this helper function will be reused whenever a stream needs to be closed.

Also, the processFile method does not initialize the fis object to null. Instead, it checks to ensure that fis is not null before calling safeClose(). Without the null check, the Java compiler reports that fis might not be initialized. This choice takes advantage of Java's ability to detect uninitialized variables. If fis is initialized to null in a more complex method, cases in which fis is used without being initialized will not be detected by the compiler.</Value>
                            </MetaInfo>
                            <AttributeValue>
<Name>&lt;Unaudited&gt;</Name>
<Count>15</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not an Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Reliability Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Bad Practice</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Suspicious</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Exploitable</Name>
<Count>0</Count>
                            </AttributeValue>
                        </MajorAttributeSummary>
                        <Issue iid="15C50D550084CFABCE3D6DBB896ACCE3" ruleID="74714BFC-EDF7-445B-8672-0996214D5845">
                            <Category>Unreleased Resource: Streams</Category>
                            <Folder>High</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>The function readFromURL() in AbstractLesson.java sometimes fails to release a system resource allocated by getInputStream() on line 1032.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>AbstractLesson.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/AbstractLesson.java</FilePath>
<LineStart>1031</LineStart>
<Snippet>	    URL u = new URL(url);
	    HttpURLConnection huc = (HttpURLConnection) u.openConnection();
	    BufferedReader reader = new BufferedReader(new InputStreamReader(
		    huc.getInputStream()));
	    String line;</Snippet>
<TargetFunction>reader = new BufferedReader(new java.io.InputStreamReader())</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="13D5F7ED75A3AB864A34A5714569EF65" ruleID="74714BFC-EDF7-445B-8672-0996214D5845">
                            <Category>Unreleased Resource: Streams</Category>
                            <Folder>High</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>The function isDefaced() in Challenge2Screen.java sometimes fails to release a system resource allocated by FileReader() on line 381.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>Challenge2Screen.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/Challenge2Screen.java</FilePath>
<LineStart>381</LineStart>
<Snippet>	    String masterFilePath = s.getContext().getRealPath(
		    WEBGOAT_CHALLENGE_JSP);
	    String defacedText = getFileText(new BufferedReader(new FileReader(
		    origpath)), false);
	    String origText = getFileText(new BufferedReader(new FileReader(</Snippet>
<TargetFunction>getFileText(new java.io.BufferedReader(), ?)</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="CB8421F4774F0AA99840B6DD04FD0829" ruleID="74714BFC-EDF7-445B-8672-0996214D5845">
                            <Category>Unreleased Resource: Streams</Category>
                            <Folder>High</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>The function getInstructions() in LessonAdapter.java sometimes fails to release a system resource allocated by FileReader() on line 285.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>LessonAdapter.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/LessonAdapter.java</FilePath>
<LineStart>285</LineStart>
<Snippet>	    if (fileName != null)
	    {
		BufferedReader in = new BufferedReader(new FileReader(fileName));
		String line = null;
		boolean startAppending = false;</Snippet>
<TargetFunction>in = new BufferedReader(new java.io.FileReader())</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="C4EC2EDAF3F91A3A50B5499E737521B1" ruleID="74714BFC-EDF7-445B-8672-0996214D5845">
                            <Category>Unreleased Resource: Streams</Category>
                            <Folder>High</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>The function createContent() in LessonAdapter.java sometimes fails to release a system resource allocated by FileReader() on line 93.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>LessonAdapter.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/LessonAdapter.java</FilePath>
<LineStart>93</LineStart>
<Snippet>	    {
		PRE pre = new PRE();
		BufferedReader in = new BufferedReader(new FileReader(fileName));
		String line = null;
		while ((line = in.readLine()) != null)</Snippet>
<TargetFunction>in = new BufferedReader(new java.io.FileReader())</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="106C950FC6B8B677064B203028BDB065" ruleID="74714BFC-EDF7-445B-8672-0996214D5845">
                            <Category>Unreleased Resource: Streams</Category>
                            <Folder>High</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>The function WebgoatProperties() in WebgoatProperties.java sometimes fails to release a system resource allocated by FileInputStream() on line 43.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>WebgoatProperties.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/WebgoatProperties.java</FilePath>
<LineStart>43</LineStart>
<Snippet>	try
	{
	    FileInputStream in = new FileInputStream(propertiesFileName);
	    load(in);
	}</Snippet>
<TargetFunction>in = new FileInputStream(...)</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="6A452E3BFF473737F95196432C59610A" ruleID="74714BFC-EDF7-445B-8672-0996214D5845">
                            <Category>Unreleased Resource: Streams</Category>
                            <Folder>High</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>The function getSource() in AbstractLesson.java sometimes fails to release a system resource allocated by FileReader() on line 670.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>AbstractLesson.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/AbstractLesson.java</FilePath>
<LineStart>669</LineStart>
<Snippet>	    // System.out.println("Loading source file: " +
	    // getSourceFileName());
	    src = convertMetacharsJavaCode(readFromFile(new BufferedReader(
		    new FileReader(s.getWebResource(getSourceFileName()))),
		    true));</Snippet>
<TargetFunction>readFromFile(new java.io.BufferedReader(), ?)</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="C18864ACC2F321D56CB007715E732C95" ruleID="74714BFC-EDF7-445B-8672-0996214D5845">
                            <Category>Unreleased Resource: Streams</Category>
                            <Folder>High</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>The function createContent() in PathBasedAccessControl.java sometimes fails to release a system resource allocated by FileReader() on line 193.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>PathBasedAccessControl.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/PathBasedAccessControl.java</FilePath>
<LineStart>192</LineStart>
<Snippet>			throw new Exception("File is too large");
		    }
		    String fileData = getFileText(new BufferedReader(
			    new FileReader(f)), false);
		    if (fileData.indexOf(0x00) != -1)</Snippet>
<TargetFunction>getFileText(new java.io.BufferedReader(), ?)</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="13D5F7ED75A3AB864A34A5714569EF66" ruleID="74714BFC-EDF7-445B-8672-0996214D5845">
                            <Category>Unreleased Resource: Streams</Category>
                            <Folder>High</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>The function isDefaced() in Challenge2Screen.java sometimes fails to release a system resource allocated by FileReader() on line 383.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>Challenge2Screen.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/Challenge2Screen.java</FilePath>
<LineStart>383</LineStart>
<Snippet>	    String defacedText = getFileText(new BufferedReader(new FileReader(
		    origpath)), false);
	    String origText = getFileText(new BufferedReader(new FileReader(
		    masterFilePath)), false);
</Snippet>
<TargetFunction>getFileText(new java.io.BufferedReader(), ?)</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="48CFC4960DE0E45B88DAE1B75077B408" ruleID="74714BFC-EDF7-445B-8672-0996214D5845">
                            <Category>Unreleased Resource: Streams</Category>
                            <Folder>High</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>The function showDefaceAttempt() in Challenge2Screen.java sometimes fails to release a system resource allocated by FileReader() on line 405.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>Challenge2Screen.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/Challenge2Screen.java</FilePath>
<LineStart>404</LineStart>
<Snippet>	String origpath = s.getContext().getRealPath(
		WEBGOAT_CHALLENGE + "_" + s.getUserName() + JSP);
	String defaced = getFileText(new BufferedReader(
		new FileReader(origpath)), false);
	String origText = getFileText(new BufferedReader(new FileReader(s</Snippet>
<TargetFunction>getFileText(new java.io.BufferedReader(), ?)</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="8D2F9470457AA1DBB019D65452C98DCC" ruleID="74714BFC-EDF7-445B-8672-0996214D5845">
                            <Category>Unreleased Resource: Streams</Category>
                            <Folder>High</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>The function getLessonPlan() in AbstractLesson.java sometimes fails to release a system resource allocated by FileReader() on line 567.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>AbstractLesson.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/AbstractLesson.java</FilePath>
<LineStart>567</LineStart>
<Snippet>	    // System.out.println("Loading lesson plan file: " +
	    // getLessonPlanFileName());
	    src = readFromFile(new BufferedReader(new FileReader(s
		    .getWebResource(getLessonPlanFileName()))), false);
</Snippet>
<TargetFunction>readFromFile(new java.io.BufferedReader(), ?)</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="D56D1FEF7BB4EBA49C9A395DF0D88AC4" ruleID="74714BFC-EDF7-445B-8672-0996214D5845">
                            <Category>Unreleased Resource: Streams</Category>
                            <Folder>High</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>The function makeSourceDump_DELETEME() in AbstractLesson.java sometimes fails to release a system resource allocated by FileReader() on line 955.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>AbstractLesson.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/AbstractLesson.java</FilePath>
<LineStart>954</LineStart>
<Snippet>		    .addElement(new TR()
			    .addElement(new TD()
				    .addElement(convertMetachars(readFromFile(
					    new BufferedReader(new FileReader(
						    filename)), true)))));</Snippet>
<TargetFunction>readFromFile(new java.io.BufferedReader(), ?)</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="42AB68D270545768293D3D37571A4EFE" ruleID="74714BFC-EDF7-445B-8672-0996214D5845">
                            <Category>Unreleased Resource: Streams</Category>
                            <Folder>High</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>The function createContent() in XPATHInjection.java sometimes fails to release a system resource allocated by FileInputStream() on line 155.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>XPATHInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/XPATHInjection.java</FilePath>
<LineStart>155</LineStart>
<Snippet>	    XPathFactory factory = XPathFactory.newInstance();
	    XPath xPath = factory.newXPath();
	    InputSource inputSource = new InputSource(new FileInputStream(d));
	    String expression = "/employees/employee[loginID/text()='"
		    + username + "' and passwd/text()='" + password + "']";</Snippet>
<TargetFunction>new FileInputStream(...)</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="48CFC4960DE0E45B88DAE1B75077B409" ruleID="74714BFC-EDF7-445B-8672-0996214D5845">
                            <Category>Unreleased Resource: Streams</Category>
                            <Folder>High</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>The function showDefaceAttempt() in Challenge2Screen.java sometimes fails to release a system resource allocated by FileReader() on line 406.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>Challenge2Screen.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/Challenge2Screen.java</FilePath>
<LineStart>406</LineStart>
<Snippet>	String defaced = getFileText(new BufferedReader(
		new FileReader(origpath)), false);
	String origText = getFileText(new BufferedReader(new FileReader(s
		.getContext().getRealPath(WEBGOAT_CHALLENGE_JSP))), false);
</Snippet>
<TargetFunction>getFileText(new java.io.BufferedReader(), ?)</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="49AC82522DFE5219AF616B4DD208B330" ruleID="74714BFC-EDF7-445B-8672-0996214D5845">
                            <Category>Unreleased Resource: Streams</Category>
                            <Folder>High</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>The function resetWebPage() in Challenge2Screen.java sometimes fails to release a system resource allocated by FileWriter() on line 433.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>Challenge2Screen.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/Challenge2Screen.java</FilePath>
<LineStart>433</LineStart>
<Snippet>	    // replace the defaced text with the original
	    File usersFile = new File(defacedpath);
	    FileWriter fw = new FileWriter(usersFile);
	    fw.write(getFileText(new BufferedReader(new FileReader(
		    masterFilePath)), false));</Snippet>
<TargetFunction>fw = new FileWriter(...)</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="1C63C03CDAD3AAC473C04FED33047A6E" ruleID="74714BFC-EDF7-445B-8672-0996214D5845">
                            <Category>Unreleased Resource: Streams</Category>
                            <Folder>High</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>The function resetWebPage() in Challenge2Screen.java sometimes fails to release a system resource allocated by FileReader() on line 434.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>Challenge2Screen.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/Challenge2Screen.java</FilePath>
<LineStart>434</LineStart>
<Snippet>	    File usersFile = new File(defacedpath);
	    FileWriter fw = new FileWriter(usersFile);
	    fw.write(getFileText(new BufferedReader(new FileReader(
		    masterFilePath)), false));
	    fw.close();</Snippet>
<TargetFunction>getFileText(new java.io.BufferedReader(), ?)</TargetFunction>
                            </Primary>
                        </Issue>
                    </GroupingSection>
                    <GroupingSection count="13">
                        <groupTitle>Unreleased Resource: Database</groupTitle>
                        <MajorAttributeSummary>
                            <MetaInfo>
<Name>Abstract</Name>
<Value>The function getResults() in SoapRequest.java sometimes fails to release a database resource allocated by &lt;a href="location://JavaSource/org/owasp/webgoat/session/DatabaseUtilities.java###82###5###0"&gt;makeConnection()&lt;/a&gt; on line 412.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Explanation</Name>
<Value>Resource leaks have at least two common causes:

- Error conditions and other exceptional circumstances.

- Confusion over which part of the program is responsible for releasing the resource.

Most unreleased resource issues result in general software reliability problems. However, if an attacker can intentionally trigger a resource leak, the attacker may be able to launch a denial of service attack by depleting the resource pool.

Example: Under normal conditions, the following code executes a database query, processes the results returned by the database, and closes the allocated statement object. But if an exception occurs while executing the SQL or processing the results, the statement object will not be closed. If this happens often enough, the database will run out of available cursors and not be able to execute any more SQL queries.

  Statement stmt = conn.createStatement();
  ResultSet rs = stmt.executeQuery(CXN_SQL);
  harvestResults(rs);
  stmt.close();
&#13;
</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Recommendations</Name>
<Value>1. Never rely on finalize() to reclaim resources. In order for an object's finalize() method to be invoked, the garbage collector must determine that the object is eligible for garbage collection. Because the garbage collector is not required to run unless the JVM is low on memory, there is no guarantee that an object's finalize() method will be invoked in an expedient fashion. When the garbage collector finally does run, it may cause a large number of resources to be reclaimed in a short period of time, which can lead to "bursty" performance and lower overall system throughput. This effect becomes more pronounced as the load on the system increases.

Finally, if it is possible for a resource reclamation operation to hang (if it requires communicating over a network to a database, for example), then the thread that is executing the finalize() method will hang.

2. Release resources in a finally block. The code for the Example should be rewritten as follows:


  public void execCxnSql(Connection conn) {
    Statement stmt;
    try {
      stmt = conn.createStatement();
      ResultSet rs = stmt.executeQuery(CXN_SQL);
      ...
    }
    finally {
      if (stmt != null) {
        safeClose(stmt);
      }
    }
}

public static void safeClose(Statement stmt) {
  if (stmt != null) {
    try {
      stmt.close();
    } catch (SQLException e) {
      log(e);
    }
  }
}


This solution uses a helper function to log the exceptions that might occur when trying to close the statement. Presumably this helper function will be reused whenever a statement needs to be closed.

Also, the execCxnSql method does not initialize the stmt object to null. Instead, it checks to ensure that stmt is not null before calling safeClose(). Without the null check, the Java compiler reports that stmt might not be initialized. This choice takes advantage of Java's ability to detect uninitialized variables. If stmt is initialized to null in a more complex method, cases in which stmt is used without being initialized will not be detected by the compiler.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Tips</Name>
<Value>1. Be aware that closing a database connection may or may not automatically free other resources associated with the connection object. If the application uses connection pooling, it is best to explicitly close the other resources after the connection is closed. If the application is not using connection pooling, the other resources are automatically closed when the database connection is closed. In such a case, this vulnerability is invalid.</Value>
                            </MetaInfo>
                            <AttributeValue>
<Name>&lt;Unaudited&gt;</Name>
<Count>13</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not an Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Reliability Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Bad Practice</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Suspicious</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Exploitable</Name>
<Count>0</Count>
                            </AttributeValue>
                        </MajorAttributeSummary>
                        <Issue iid="CDAFF78604806F2C9413943C8A3A691B" ruleID="789BB115-AAF5-4C03-BBC2-C4CFCC74C13A">
                            <Category>Unreleased Resource: Database</Category>
                            <Folder>High</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>The function getResults() in WsSqlInjection.java sometimes fails to release a database resource allocated by &lt;a href="location://JavaSource/org/owasp/webgoat/session/DatabaseUtilities.java###82###5###0"&gt;makeConnection()&lt;/a&gt; on line 229.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>WsSqlInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/WsSqlInjection.java</FilePath>
<LineStart>240</LineStart>
<Snippet>			ResultSet.TYPE_SCROLL_INSENSITIVE,
			ResultSet.CONCUR_READ_ONLY);
		ResultSet results = statement.executeQuery(query);
		return results;
	    }</Snippet>
<TargetFunction>results = statement.executeQuery(...)</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="1A190EDA4C62457810D8ED1385AAAC6C" ruleID="789BB115-AAF5-4C03-BBC2-C4CFCC74C13A">
                            <Category>Unreleased Resource: Database</Category>
                            <Folder>High</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>The function getResults() in WSDLScanning.java sometimes fails to release a database resource allocated by &lt;a href="location://JavaSource/org/owasp/webgoat/session/DatabaseUtilities.java###82###5###0"&gt;makeConnection()&lt;/a&gt; on line 274.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>WSDLScanning.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/WSDLScanning.java</FilePath>
<LineStart>284</LineStart>
<Snippet>	    try
	    {
		ResultSet results = ps.executeQuery();
		if ((results != null) &amp;&amp; (results.next() == true))
		{</Snippet>
<TargetFunction>results = ps.executeQuery()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="04ED8DE06DF66F9C36907FBF82DEB835" ruleID="EC71C442-6E66-45DF-9890-41A5156B1CD0">
                            <Category>Unreleased Resource: Database</Category>
                            <Folder>High</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>The function getResults() in SoapRequest.java sometimes fails to release a database resource allocated by &lt;a href="location://JavaSource/org/owasp/webgoat/session/DatabaseUtilities.java###82###5###0"&gt;makeConnection()&lt;/a&gt; on line 412.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>SoapRequest.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SoapRequest.java</FilePath>
<LineStart>418</LineStart>
<Snippet>	    }
	    PreparedStatement ps = connection
		    .prepareStatement("SELECT * FROM user_data WHERE userid = ?");
	    ps.setInt(1, id);
	    try</Snippet>
<TargetFunction>ps = connection.prepareStatement(...)</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="82D70BA5E84D0C9D4F5969FFB9E2BB82" ruleID="B7DFF4A8-9817-4418-A35B-E70D10DC825E">
                            <Category>Unreleased Resource: Database</Category>
                            <Folder>High</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>The function getResults() in WsSqlInjection.java sometimes fails to release a database resource allocated by &lt;a href="location://JavaSource/org/owasp/webgoat/session/DatabaseUtilities.java###82###5###0"&gt;makeConnection()&lt;/a&gt; on line 229.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>WsSqlInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/WsSqlInjection.java</FilePath>
<LineStart>229</LineStart>
<Snippet>	try
	{
	    Connection connection = DatabaseUtilities.makeConnection();
	    if (connection == null)
	    {</Snippet>
<TargetFunction>connection = makeConnection()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="CD4E7D142D4170819A026198F9748EFD" ruleID="B7DFF4A8-9817-4418-A35B-E70D10DC825E">
                            <Category>Unreleased Resource: Database</Category>
                            <Folder>High</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>The function main() in CreateDB.java sometimes fails to release a database resource allocated by getConnection() on line 70.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>CreateDB.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/CreateDB.java</FilePath>
<LineStart>70</LineStart>
<Snippet>
	    connection = DriverManager
		    .getConnection(
			    "jdbc:odbc:;DRIVER=Microsoft Access Driver (*.mdb);DBQ=c:/webgoat.mdb;PWD=webgoat",
			    "webgoat", "webgoat");</Snippet>
<TargetFunction>connection = getConnection(...)</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="FEA45A3D84A912105A0DEA1F42093C48" ruleID="EC71C442-6E66-45DF-9890-41A5156B1CD0">
                            <Category>Unreleased Resource: Database</Category>
                            <Folder>High</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>The function getResults() in WSDLScanning.java sometimes fails to release a database resource allocated by &lt;a href="location://JavaSource/org/owasp/webgoat/session/DatabaseUtilities.java###82###5###0"&gt;makeConnection()&lt;/a&gt; on line 274.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>WSDLScanning.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/WSDLScanning.java</FilePath>
<LineStart>280</LineStart>
<Snippet>	    }
	    PreparedStatement ps = connection
		    .prepareStatement("SELECT * FROM user_data WHERE userid = ?");
	    ps.setInt(1, id);
	    try</Snippet>
<TargetFunction>ps = connection.prepareStatement(...)</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="3A61CC50D67E795CD5D9C72962426B3D" ruleID="789BB115-AAF5-4C03-BBC2-C4CFCC74C13A">
                            <Category>Unreleased Resource: Database</Category>
                            <Folder>High</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>The function getResults() in SoapRequest.java sometimes fails to release a database resource allocated by &lt;a href="location://JavaSource/org/owasp/webgoat/session/DatabaseUtilities.java###82###5###0"&gt;makeConnection()&lt;/a&gt; on line 412.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>SoapRequest.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SoapRequest.java</FilePath>
<LineStart>422</LineStart>
<Snippet>	    try
	    {
		ResultSet results = ps.executeQuery();
		if ((results != null) &amp;&amp; (results.next() == true))
		{</Snippet>
<TargetFunction>results = ps.executeQuery()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="9576E5DBC7ACCBD5458D476D6C15BAB3" ruleID="EC71C442-6E66-45DF-9890-41A5156B1CD0">
                            <Category>Unreleased Resource: Database</Category>
                            <Folder>High</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>The function main() in CreateDB.java sometimes fails to release a database resource allocated by getConnection() on line 70.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>CreateDB.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/CreateDB.java</FilePath>
<LineStart>88</LineStart>
<Snippet>	try
	{
	    Statement answer_statement = connection.createStatement(
		    ResultSet.TYPE_SCROLL_INSENSITIVE,
		    ResultSet.CONCUR_READ_ONLY);</Snippet>
<TargetFunction>answer_statement = connection.createStatement(...)</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="1633DEC41E18BD7F8A60AFD79EFA55AD" ruleID="B7DFF4A8-9817-4418-A35B-E70D10DC825E">
                            <Category>Unreleased Resource: Database</Category>
                            <Folder>High</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>The function getResults() in WSDLScanning.java sometimes fails to release a database resource allocated by &lt;a href="location://JavaSource/org/owasp/webgoat/session/DatabaseUtilities.java###82###5###0"&gt;makeConnection()&lt;/a&gt; on line 274.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>WSDLScanning.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/WSDLScanning.java</FilePath>
<LineStart>274</LineStart>
<Snippet>	try
	{
	    Connection connection = DatabaseUtilities.makeConnection();
	    if (connection == null)
	    {</Snippet>
<TargetFunction>connection = makeConnection()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="1FFACC17DFC8579777D6FFD9384C71DC" ruleID="789BB115-AAF5-4C03-BBC2-C4CFCC74C13A">
                            <Category>Unreleased Resource: Database</Category>
                            <Folder>High</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>The function main() in CreateDB.java sometimes fails to release a database resource allocated by getConnection() on line 70.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>CreateDB.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/CreateDB.java</FilePath>
<LineStart>91</LineStart>
<Snippet>		    ResultSet.TYPE_SCROLL_INSENSITIVE,
		    ResultSet.CONCUR_READ_ONLY);
	    ResultSet answer_results = answer_statement.executeQuery(query);
	    answer_results.first();
	    int employeeId = answer_results.getInt("userid");</Snippet>
<TargetFunction>answer_results = answer_statement.executeQuery(...)</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="9E04332C771DC6643C26B2FD61F35F93" ruleID="B7DFF4A8-9817-4418-A35B-E70D10DC825E">
                            <Category>Unreleased Resource: Database</Category>
                            <Folder>High</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>The function getResults() in SoapRequest.java sometimes fails to release a database resource allocated by &lt;a href="location://JavaSource/org/owasp/webgoat/session/DatabaseUtilities.java###82###5###0"&gt;makeConnection()&lt;/a&gt; on line 412.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>SoapRequest.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SoapRequest.java</FilePath>
<LineStart>412</LineStart>
<Snippet>	try
	{
	    Connection connection = DatabaseUtilities.makeConnection();
	    if (connection == null)
	    {</Snippet>
<TargetFunction>connection = makeConnection()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="451A17229ADFC2431B64826831C3B627" ruleID="EC71C442-6E66-45DF-9890-41A5156B1CD0">
                            <Category>Unreleased Resource: Database</Category>
                            <Folder>High</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>The function getResults() in WsSqlInjection.java sometimes fails to release a database resource allocated by &lt;a href="location://JavaSource/org/owasp/webgoat/session/DatabaseUtilities.java###82###5###0"&gt;makeConnection()&lt;/a&gt; on line 229.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>WsSqlInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/WsSqlInjection.java</FilePath>
<LineStart>237</LineStart>
<Snippet>	    try
	    {
		Statement statement = connection.createStatement(
			ResultSet.TYPE_SCROLL_INSENSITIVE,
			ResultSet.CONCUR_READ_ONLY);</Snippet>
<TargetFunction>statement = connection.createStatement(...)</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="E7F8B28D8CC84CC72A21B3CB2B606909" ruleID="EC71C442-6E66-45DF-9890-41A5156B1CD0">
                            <Category>Unreleased Resource: Database</Category>
                            <Folder>High</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>The function main() in CreateDB.java sometimes fails to release a database resource allocated by getConnection() on line 70.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>CreateDB.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/CreateDB.java</FilePath>
<LineStart>73</LineStart>
<Snippet>			    "jdbc:odbc:;DRIVER=Microsoft Access Driver (*.mdb);DBQ=c:/webgoat.mdb;PWD=webgoat",
			    "webgoat", "webgoat");
	    db.makeDB(connection);
	}
	catch (Exception e)</Snippet>
<TargetFunction>?.makeDB(connection)</TargetFunction>
                            </Primary>
                        </Issue>
                    </GroupingSection>
                    <GroupingSection count="11">
                        <groupTitle>Portability Flaw: Locale Dependent Comparison</groupTitle>
                        <MajorAttributeSummary>
                            <MetaInfo>
<Name>Abstract</Name>
<Value>The call to equals()  on line 91 causes portability problems because it has different locales which may lead to unexpected output. This may also circumvent custom validation routines.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Explanation</Name>
<Value>When comparing data that may be locale-dependent, an appropriate locale should be specified.

Example 1: The following example tries to perform validation to determine if user input includes a &lt;script&gt; tag.

  ...
  public String tagProcessor(String tag){
    if (tag.toUpperCase().equals("SCRIPT")){
      return null;
    }
    //does not contain SCRIPT tag, keep processing input
    ...
  }
  ...


The problem with Example 1 is that java.lang.String.toUpperCase() when used without a locale uses the rules of the default locale. Using the Turkish locale "title".toUpperCase() returns "T\u0130TLE", where "\u0130" is the "LATIN CAPITAL LETTER I WITH DOT ABOVE" character. This can lead to unexpected results, such as in Example 1 where this will prevent the word "script" from being caught by this validation, potentially leading to a Cross-Site Scripting vulnerability.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Recommendations</Name>
<Value>To prevent this from occurring, always make sure to either specify the default locale, or specify the locale with APIs that accept them such as toUpperCase().

Example 2: The following specifies the locale manually as an argument to toUpperCase().


import java.util.Locale;
  ...
  public String tagProcessor(String tag){
    if (tag.toUpperCase(Locale.ENGLISH).equals("SCRIPT")){
      return null;
    }
    //does not contain SCRIPT tag, keep processing input
    ...
  }
  ...


Example 3: The following uses the function java.lang.String.equalsIgnoreCase() API to prevent this issue.


  ...
  public String tagProcessor(String tag){
    if (tag.equalsIgnoreCase("SCRIPT")){
      return null;
    }
    //does not contain SCRIPT tag, keep processing input
    ...
  }
  ...


This prevents the problem because equalsIgnoreCase() changes case similar to Character.toLowerCase() and Character.toUpperCase(). This involves creating temporary canonical forms of both strings using information from the UnicodeData file that is part of the Unicode Character Database maintained by the Unicode Consortium, and even though this may render them unreadable if they were to be read out, it makes comparison possible without being dependent upon locale.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Tips</Name>
<Value>1. If Fortify Static Code Analyzer sees that java.util.Locale.setDefault() is called anywhere in the application, it will assume that the locale has been set accordingly and these issues will also not appear.</Value>
                            </MetaInfo>
                            <AttributeValue>
<Name>&lt;Unaudited&gt;</Name>
<Count>11</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not an Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Reliability Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Bad Practice</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Suspicious</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Exploitable</Name>
<Count>0</Count>
                            </AttributeValue>
                        </MajorAttributeSummary>
                        <Issue iid="C10CC80219E23586F49B56A09EFD5C8A" ruleID="D8E9ED3B-22EC-4CBA-98C8-7C67F73CCF4C">
                            <Category>Portability Flaw: Locale Dependent Comparison</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>The call to equals()  on line 106 causes portability problems because it has different locales which may lead to unexpected output. This may also circumvent custom validation routines.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>CommandInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CommandInjection.java</FilePath>
<LineStart>106</LineStart>
<Snippet>					.trim().toLowerCase().equals("dir #")
				|| helpFile.substring(index, helpFileLen)
					.trim().toLowerCase().equals("ls #")
				|| helpFile.substring(index, helpFileLen)
					.trim().toLowerCase().equals("ls -l #")</Snippet>
<TargetFunction>helpFile.substring(index, helpFileLen).trim().toLowerCase().equals(...) : Comparison without checking locale()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="21D6A59D3A5B3773B565C8A068A6F786" ruleID="D8E9ED3B-22EC-4CBA-98C8-7C67F73CCF4C">
                            <Category>Portability Flaw: Locale Dependent Comparison</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>The call to equals()  on line 108 causes portability problems because it has different locales which may lead to unexpected output. This may also circumvent custom validation routines.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>CommandInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CommandInjection.java</FilePath>
<LineStart>108</LineStart>
<Snippet>					.trim().toLowerCase().equals("ls #")
				|| helpFile.substring(index, helpFileLen)
					.trim().toLowerCase().equals("ls -l #")
				|| helpFile.substring(index, helpFileLen)
					.trim().toLowerCase().equals(</Snippet>
<TargetFunction>helpFile.substring(index, helpFileLen).trim().toLowerCase().equals(...) : Comparison without checking locale()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="7BBF44F9C54BFA46F2DB455FDAA99218" ruleID="D8E9ED3B-22EC-4CBA-98C8-7C67F73CCF4C">
                            <Category>Portability Flaw: Locale Dependent Comparison</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>The call to equals()  on line 96 causes portability problems because it has different locales which may lead to unexpected output. This may also circumvent custom validation routines.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>CommandInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CommandInjection.java</FilePath>
<LineStart>96</LineStart>
<Snippet>				.toLowerCase().equals("dir")
			|| helpFile.substring(index, helpFileLen).trim()
				.toLowerCase().equals("ls")
			|| helpFile.substring(index, helpFileLen).trim()
				.toLowerCase().equals("ifconfig") || helpFile</Snippet>
<TargetFunction>helpFile.substring(index, helpFileLen).trim().toLowerCase().equals(...) : Comparison without checking locale()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="0C15CFDBC9593186412491D1E413DD37" ruleID="D8E9ED3B-22EC-4CBA-98C8-7C67F73CCF4C">
                            <Category>Portability Flaw: Locale Dependent Comparison</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>The call to equals()  on line 98 causes portability problems because it has different locales which may lead to unexpected output. This may also circumvent custom validation routines.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>CommandInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CommandInjection.java</FilePath>
<LineStart>98</LineStart>
<Snippet>				.toLowerCase().equals("ls")
			|| helpFile.substring(index, helpFileLen).trim()
				.toLowerCase().equals("ifconfig") || helpFile
			.substring(index, helpFileLen).trim().toLowerCase()
			.equals("ipconfig")))</Snippet>
<TargetFunction>helpFile.substring(index, helpFileLen).trim().toLowerCase().equals(...) : Comparison without checking locale()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="3C4A3131050CC60B27940AB38957D2CC" ruleID="D8E9ED3B-22EC-4CBA-98C8-7C67F73CCF4C">
                            <Category>Portability Flaw: Locale Dependent Comparison</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>The call to equals()  on line 100 causes portability problems because it has different locales which may lead to unexpected output. This may also circumvent custom validation routines.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>CommandInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CommandInjection.java</FilePath>
<LineStart>100</LineStart>
<Snippet>				.toLowerCase().equals("ifconfig") || helpFile
			.substring(index, helpFileLen).trim().toLowerCase()
			.equals("ipconfig")))
			|| (helpFile.substring(index, helpFileLen).trim()
				.toLowerCase().equals("netstat -a #")</Snippet>
<TargetFunction>helpFile.substring(index, helpFileLen).trim().toLowerCase().equals(...) : Comparison without checking locale()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="B2F935DB9D9101F2007981595EFE39FA" ruleID="D8E9ED3B-22EC-4CBA-98C8-7C67F73CCF4C">
                            <Category>Portability Flaw: Locale Dependent Comparison</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>The call to equals()  on line 91 causes portability problems because it has different locales which may lead to unexpected output. This may also circumvent custom validation routines.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>CommandInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CommandInjection.java</FilePath>
<LineStart>91</LineStart>
<Snippet>				.toLowerCase() + "]");
		if ((osName.indexOf("Windows") != -1 &amp;&amp; (helpFile.substring(
			index, helpFileLen).trim().toLowerCase().equals(
			"netstat -a")
			|| helpFile.substring(index, helpFileLen).trim()</Snippet>
<TargetFunction>helpFile.substring(index, helpFileLen).trim().toLowerCase().equals(...) : Comparison without checking locale()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="7A4F663B47CF248531452655594A697E" ruleID="D8E9ED3B-22EC-4CBA-98C8-7C67F73CCF4C">
                            <Category>Portability Flaw: Locale Dependent Comparison</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>The call to equals()  on line 113 causes portability problems because it has different locales which may lead to unexpected output. This may also circumvent custom validation routines.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>CommandInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CommandInjection.java</FilePath>
<LineStart>113</LineStart>
<Snippet>						"ifconfig #") || helpFile
				.substring(index, helpFileLen).trim()
				.toLowerCase().equals("ipconfig #")))
		{
		    illegalCommand = false;</Snippet>
<TargetFunction>helpFile.substring(index, helpFileLen).trim().toLowerCase().equals(...) : Comparison without checking locale()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="06BCAF8544560127282453F54A6C02F8" ruleID="D8E9ED3B-22EC-4CBA-98C8-7C67F73CCF4C">
                            <Category>Portability Flaw: Locale Dependent Comparison</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>The call to equals()  on line 102 causes portability problems because it has different locales which may lead to unexpected output. This may also circumvent custom validation routines.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>CommandInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CommandInjection.java</FilePath>
<LineStart>102</LineStart>
<Snippet>			.equals("ipconfig")))
			|| (helpFile.substring(index, helpFileLen).trim()
				.toLowerCase().equals("netstat -a #")
				|| helpFile.substring(index, helpFileLen)
					.trim().toLowerCase().equals("dir #")</Snippet>
<TargetFunction>helpFile.substring(index, helpFileLen).trim().toLowerCase().equals(...) : Comparison without checking locale()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="62A16B93EBE18142F72A9429F72F8D1D" ruleID="D8E9ED3B-22EC-4CBA-98C8-7C67F73CCF4C">
                            <Category>Portability Flaw: Locale Dependent Comparison</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>The call to equals()  on line 104 causes portability problems because it has different locales which may lead to unexpected output. This may also circumvent custom validation routines.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>CommandInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CommandInjection.java</FilePath>
<LineStart>104</LineStart>
<Snippet>				.toLowerCase().equals("netstat -a #")
				|| helpFile.substring(index, helpFileLen)
					.trim().toLowerCase().equals("dir #")
				|| helpFile.substring(index, helpFileLen)
					.trim().toLowerCase().equals("ls #")</Snippet>
<TargetFunction>helpFile.substring(index, helpFileLen).trim().toLowerCase().equals(...) : Comparison without checking locale()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="5BDD633E9F9464E5B57B5CA0175FE7BA" ruleID="D8E9ED3B-22EC-4CBA-98C8-7C67F73CCF4C">
                            <Category>Portability Flaw: Locale Dependent Comparison</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>The call to equals()  on line 110 causes portability problems because it has different locales which may lead to unexpected output. This may also circumvent custom validation routines.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>CommandInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CommandInjection.java</FilePath>
<LineStart>110</LineStart>
<Snippet>					.trim().toLowerCase().equals("ls -l #")
				|| helpFile.substring(index, helpFileLen)
					.trim().toLowerCase().equals(
						"ifconfig #") || helpFile
				.substring(index, helpFileLen).trim()</Snippet>
<TargetFunction>helpFile.substring(index, helpFileLen).trim().toLowerCase().equals(...) : Comparison without checking locale()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="0C44CD5BB5361DB96E12E36594AA4CF1" ruleID="D8E9ED3B-22EC-4CBA-98C8-7C67F73CCF4C">
                            <Category>Portability Flaw: Locale Dependent Comparison</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>The call to equals()  on line 94 causes portability problems because it has different locales which may lead to unexpected output. This may also circumvent custom validation routines.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>CommandInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CommandInjection.java</FilePath>
<LineStart>94</LineStart>
<Snippet>			"netstat -a")
			|| helpFile.substring(index, helpFileLen).trim()
				.toLowerCase().equals("dir")
			|| helpFile.substring(index, helpFileLen).trim()
				.toLowerCase().equals("ls")</Snippet>
<TargetFunction>helpFile.substring(index, helpFileLen).trim().toLowerCase().equals(...) : Comparison without checking locale()</TargetFunction>
                            </Primary>
                        </Issue>
                    </GroupingSection>
                    <GroupingSection count="8">
                        <groupTitle>Access Control: Database</groupTitle>
                        <MajorAttributeSummary>
                            <MetaInfo>
<Name>Abstract</Name>
<Value>Without proper access control, the method getResults() in SoapRequest.java can execute a SQL statement on line 419 that contains an attacker-controlled primary key, thereby allowing the attacker to access unauthorized records.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Explanation</Name>
<Value>Database access control errors occur when:

1.	Data enters a program from an untrusted source.


2.	The data is used to specify the value of a primary key in a SQL query.



Example 1: The following code uses a parameterized statement, which escapes metacharacters and prevents SQL injection vulnerabilities, to construct and execute a SQL query that searches for an invoice matching the specified identifier [1]. The identifier is selected from a list of all invoices associated with the current authenticated user.


...
id = Integer.decode(request.getParameter("invoiceID"));
String query = "SELECT * FROM invoices WHERE id = ?";
PreparedStatement stmt = conn.prepareStatement(query);
stmt.setInt(1, id);
ResultSet results = stmt.execute();
...



The problem is that the developer has failed to consider all of the possible values of id. Although the interface generates a list of invoice identifiers that belong to the current user, an attacker might bypass this interface to request any desired invoice. Because the code in this example does not check to ensure that the user has permission to access the requested invoice, it will display any invoice, even if it does not belong to the current user.

Some think that in the mobile world, classic web application vulnerabilities, such as database access control errors, do not make sense -- why would the user attack themself? However, keep in mind that the essence of mobile platforms is applications that are downloaded from various sources and run alongside each other on the same device. The likelihood of running a piece of malware next to a banking application is high, which necessitates expanding the attack surface of mobile applications to include inter-process communication.


Example 2: The following code adapts Example 1 to the Android platform.


...
        String id = this.getIntent().getExtras().getString("invoiceID");
        String query = "SELECT * FROM invoices WHERE id = ?";
        SQLiteDatabase db = this.openOrCreateDatabase("DB", MODE_PRIVATE, null);
        Cursor c = db.rawQuery(query, new Object[]{id});
...


A number of modern web frameworks provide mechanisms to perform user input validation (including Struts and Spring MVC). To highlight the unvalidated sources of input, Fortify Secure Coding Rulepacks dynamically re-prioritize the issues Fortify Static Code Analyzer reports by lowering their probability of exploit and providing pointers to the supporting evidence whenever the framework validation mechanism is in use. We refer to this feature as Context-Sensitive Ranking. To further assist the Fortify user with the auditing process, the Fortify Software Security Research group makes available the Data Validation project template that groups the issues into folders based on the validation mechanism applied to their source of input.
</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Recommendations</Name>
<Value>Rather than relying on the presentation layer to restrict values submitted by the user, access control should be handled by the application and database layers. Under no circumstances should a user be allowed to retrieve or modify a row in the database without the appropriate permissions. Every query that accesses the database should enforce this policy, which can often be accomplished by simply including the current authenticated username as part of the query.


Example 3: The following code implements the same functionality as Example 1 but imposes an additional constraint to verify that the invoice belongs to the currently authenticated user.


...
userName = ctx.getAuthenticatedUserName();
id = Integer.decode(request.getParameter("invoiceID"));
String query =
        "SELECT * FROM invoices WHERE id = ? AND user = ?";
PreparedStatement stmt = conn.prepareStatement(query);
stmt.setInt(1, id);
stmt.setString(2, userName);
ResultSet results = stmt.execute();
...



And here is an Android equivalent:


...
        PasswordAuthentication pa = authenticator.getPasswordAuthentication();
        String userName = pa.getUserName();
        String id = this.getIntent().getExtras().getString("invoiceID");
        String query = "SELECT * FROM invoices WHERE id = ? AND user = ?";
        SQLiteDatabase db = this.openOrCreateDatabase("DB", MODE_PRIVATE, null);
        Cursor c = db.rawQuery(query, new Object[]{id, userName});
...
</Value>
                            </MetaInfo>
                            <AttributeValue>
<Name>&lt;Unaudited&gt;</Name>
<Count>8</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not an Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Reliability Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Bad Practice</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Suspicious</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Exploitable</Name>
<Count>0</Count>
                            </AttributeValue>
                        </MajorAttributeSummary>
                        <Issue iid="3953DF6D1FD8CD9B3AAE359C0D88DBA7" ruleID="A53E6ED8-2131-4F10-B320-4158B7238CFA">
                            <Category>Access Control: Database</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>Without proper access control, the method getResults() in SoapRequest.java can execute a SQL statement on line 419 that contains an attacker-controlled primary key, thereby allowing the attacker to access unauthorized records.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>SoapRequest.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SoapRequest.java</FilePath>
<LineStart>419</LineStart>
<Snippet>	    PreparedStatement ps = connection
		    .prepareStatement("SELECT * FROM user_data WHERE userid = ?");
	    ps.setInt(1, id);
	    try
	    {</Snippet>
<TargetFunction>java.sql.PreparedStatement.setInt()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>SoapRequest.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SoapRequest.java</FilePath>
<LineStart>437</LineStart>
<Snippet>

    public String getCreditCard(int id)
    {
	String result = getResults(id, "cc_number");</Snippet>
<TargetFunction>getCreditCard(0)</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="3025582889EF3C8D361408D3CF7FDE6D" ruleID="A53E6ED8-2131-4F10-B320-4158B7238CFA">
                            <Category>Access Control: Database</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>Without proper access control, the method getResults() in WSDLScanning.java can execute a SQL statement on line 281 that contains an attacker-controlled primary key, thereby allowing the attacker to access unauthorized records.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>WSDLScanning.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/WSDLScanning.java</FilePath>
<LineStart>281</LineStart>
<Snippet>	    PreparedStatement ps = connection
		    .prepareStatement("SELECT * FROM user_data WHERE userid = ?");
	    ps.setInt(1, id);
	    try
	    {</Snippet>
<TargetFunction>java.sql.PreparedStatement.setInt()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>WSDLScanning.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/WSDLScanning.java</FilePath>
<LineStart>333</LineStart>
<Snippet>

    public String getLoginCount(int id)
    {
	String result = getResults(id, "login_count");</Snippet>
<TargetFunction>getLoginCount(0)</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="6C4DCAF0482F77B264F2491154246A8B" ruleID="A53E6ED8-2131-4F10-B320-4158B7238CFA">
                            <Category>Access Control: Database</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>Without proper access control, the method getResults() in WSDLScanning.java can execute a SQL statement on line 281 that contains an attacker-controlled primary key, thereby allowing the attacker to access unauthorized records.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>WSDLScanning.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/WSDLScanning.java</FilePath>
<LineStart>281</LineStart>
<Snippet>	    PreparedStatement ps = connection
		    .prepareStatement("SELECT * FROM user_data WHERE userid = ?");
	    ps.setInt(1, id);
	    try
	    {</Snippet>
<TargetFunction>java.sql.PreparedStatement.setInt()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>WSDLScanning.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/WSDLScanning.java</FilePath>
<LineStart>322</LineStart>
<Snippet>

    public String getLastName(int id)
    {
	String result = getResults(id, "last_name");</Snippet>
<TargetFunction>getLastName(0)</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="E657A5419784596E93B1184DCCC75670" ruleID="A53E6ED8-2131-4F10-B320-4158B7238CFA">
                            <Category>Access Control: Database</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>Without proper access control, the method getResults() in SoapRequest.java can execute a SQL statement on line 419 that contains an attacker-controlled primary key, thereby allowing the attacker to access unauthorized records.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>SoapRequest.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SoapRequest.java</FilePath>
<LineStart>419</LineStart>
<Snippet>	    PreparedStatement ps = connection
		    .prepareStatement("SELECT * FROM user_data WHERE userid = ?");
	    ps.setInt(1, id);
	    try
	    {</Snippet>
<TargetFunction>java.sql.PreparedStatement.setInt()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>SoapRequest.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SoapRequest.java</FilePath>
<LineStart>453</LineStart>
<Snippet>

    public String getFirstName(int id)
    {
	String result = getResults(id, "first_name");</Snippet>
<TargetFunction>getFirstName(0)</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="9599B7B1D829DFAA84732AAB3EFB71C3" ruleID="A53E6ED8-2131-4F10-B320-4158B7238CFA">
                            <Category>Access Control: Database</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>Without proper access control, the method getResults() in SoapRequest.java can execute a SQL statement on line 419 that contains an attacker-controlled primary key, thereby allowing the attacker to access unauthorized records.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>SoapRequest.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SoapRequest.java</FilePath>
<LineStart>419</LineStart>
<Snippet>	    PreparedStatement ps = connection
		    .prepareStatement("SELECT * FROM user_data WHERE userid = ?");
	    ps.setInt(1, id);
	    try
	    {</Snippet>
<TargetFunction>java.sql.PreparedStatement.setInt()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>SoapRequest.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SoapRequest.java</FilePath>
<LineStart>467</LineStart>
<Snippet>

    public String getLastName(int id)
    {
	String result = getResults(id, "last_name");</Snippet>
<TargetFunction>getLastName(0)</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="B633EF04A9935A253B0DAA0AC19A3B47" ruleID="A53E6ED8-2131-4F10-B320-4158B7238CFA">
                            <Category>Access Control: Database</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>Without proper access control, the method getResults() in SoapRequest.java can execute a SQL statement on line 419 that contains an attacker-controlled primary key, thereby allowing the attacker to access unauthorized records.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>SoapRequest.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SoapRequest.java</FilePath>
<LineStart>419</LineStart>
<Snippet>	    PreparedStatement ps = connection
		    .prepareStatement("SELECT * FROM user_data WHERE userid = ?");
	    ps.setInt(1, id);
	    try
	    {</Snippet>
<TargetFunction>java.sql.PreparedStatement.setInt()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>SoapRequest.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SoapRequest.java</FilePath>
<LineStart>481</LineStart>
<Snippet>

    public String getLoginCount(int id)
    {
	String result = getResults(id, "login_count");</Snippet>
<TargetFunction>getLoginCount(0)</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="51BA2F50810D608DEEFF970FBDA420F8" ruleID="A53E6ED8-2131-4F10-B320-4158B7238CFA">
                            <Category>Access Control: Database</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>Without proper access control, the method getResults() in WSDLScanning.java can execute a SQL statement on line 281 that contains an attacker-controlled primary key, thereby allowing the attacker to access unauthorized records.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>WSDLScanning.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/WSDLScanning.java</FilePath>
<LineStart>281</LineStart>
<Snippet>	    PreparedStatement ps = connection
		    .prepareStatement("SELECT * FROM user_data WHERE userid = ?");
	    ps.setInt(1, id);
	    try
	    {</Snippet>
<TargetFunction>java.sql.PreparedStatement.setInt()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>WSDLScanning.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/WSDLScanning.java</FilePath>
<LineStart>299</LineStart>
<Snippet>

    public String getCreditCard(int id)
    {
	String result = getResults(id, "cc_number");</Snippet>
<TargetFunction>getCreditCard(0)</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="5C469213CFD768DB1DF3299735C7D8C4" ruleID="A53E6ED8-2131-4F10-B320-4158B7238CFA">
                            <Category>Access Control: Database</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>Without proper access control, the method getResults() in WSDLScanning.java can execute a SQL statement on line 281 that contains an attacker-controlled primary key, thereby allowing the attacker to access unauthorized records.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>WSDLScanning.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/WSDLScanning.java</FilePath>
<LineStart>281</LineStart>
<Snippet>	    PreparedStatement ps = connection
		    .prepareStatement("SELECT * FROM user_data WHERE userid = ?");
	    ps.setInt(1, id);
	    try
	    {</Snippet>
<TargetFunction>java.sql.PreparedStatement.setInt()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>WSDLScanning.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/WSDLScanning.java</FilePath>
<LineStart>311</LineStart>
<Snippet>

    public String getFirstName(int id)
    {
	String result = getResults(id, "first_name");</Snippet>
<TargetFunction>getFirstName(0)</TargetFunction>
                            </Source>
                        </Issue>
                    </GroupingSection>
                    <GroupingSection count="8">
                        <groupTitle>Insecure Transport: External Link</groupTitle>
                        <MajorAttributeSummary>
                            <MetaInfo>
<Name>Abstract</Name>
<Value>The file CSRF.html on line 14 links to a third-party site over an unencrypted channel.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Explanation</Name>
<Value>Ensure that hyperlinks on your web pages only link to secure locations to prevent any user-compromise when navigating around your website. Even if the link redirects from an insecure protocol (such as HTTP) to a secure protocol (such as HTTPS), the initial connection over an unencrypted channel enables an attacker to perform a man-in-the-middle (MiTM) attack. This enables the attacker to control the page the resulting landing page.

Example: Consider the following hyperlink:

&lt;a href="http://www.example.com/index.html"/&gt;


If an attacker is listening to the network traffic between the user and the server, the attacker can imitate or manipulate www.example.com to load their own web page.

Links to third-party websites might not initially be considered important to secure, but any compromise can appear to a user as coming from a link on your web page and can therefore lower user trust in using your platform.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Recommendations</Name>
<Value>Keep control over the web pages linked on your website, and if possible ensure that the links are always loaded over a secure protocol. If an insecure protocol is required by the destination server, provide a warning to inform the user that there is some additional risk from clicking the link. Do not include scripts or other artifacts from third-party sites where possible.</Value>
                            </MetaInfo>
                            <AttributeValue>
<Name>&lt;Unaudited&gt;</Name>
<Count>8</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not an Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Reliability Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Bad Practice</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Suspicious</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Exploitable</Name>
<Count>0</Count>
                            </AttributeValue>
                        </MajorAttributeSummary>
                        <Issue iid="68FE974F6AF4842AEEA27A096E64AD46" ruleID="C72A3E77-8324-4FF9-B958-74FCDDF39D17">
                            <Category>Insecure Transport: External Link</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>The file main.jsp on line 225 links to a third-party site over an unencrypted channel.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>main.jsp</FileName>
<FilePath>WebContent/main.jsp</FilePath>
<LineStart>225</LineStart>
<Snippet>
		&lt;div id="bottom"&gt;
			&lt;div align="center"&gt;&lt;a href="http://www.owasp.org"&gt;OWASP Foundation&lt;/a&gt; | Project WebGoat&lt;/div&gt;
	  	&lt;/div&gt;
	&lt;/div&gt;</Snippet>
                            </Primary>
                        </Issue>
                        <Issue iid="D15C0620BBB3E912A4C5092D06D62C07" ruleID="C72A3E77-8324-4FF9-B958-74FCDDF39D17">
                            <Category>Insecure Transport: External Link</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>The file webgoat.jsp on line 25 links to a third-party site over an unencrypted channel.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>webgoat.jsp</FileName>
<FilePath>WebContent/webgoat.jsp</FilePath>
<LineStart>25</LineStart>
<Snippet>			&lt;table border="0" align="center" class="lessonText"&gt;
                &lt;tr&gt;
                  &lt;td width="50%"&gt;&lt;div align="center"&gt;&lt;a href="http://www.owasp.org"&gt;&lt;img border="0" src="images/logos/owasp.jpg" alt="OWASP Foundation" longdesc="http://www.owasp.org" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;/td&gt;
                  &lt;td width="50%"&gt;&lt;div align="center"&gt;&lt;a href="http://www.aspectsecurity.com"&gt;&lt;img border="0" src="images/logos/aspect.jpg" alt="Aspect Security" longdesc="http://www.aspectsecurity.com" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;/td&gt;
                &lt;/tr&gt;</Snippet>
                            </Primary>
                        </Issue>
                        <Issue iid="67B1D3DDE4D746D321F26DDD4A961EF8" ruleID="C72A3E77-8324-4FF9-B958-74FCDDF39D17">
                            <Category>Insecure Transport: External Link</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>The file CSRF.html on line 14 links to a third-party site over an unencrypted channel.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>CSRF.html</FileName>
<FilePath>WebContent/lesson_plans/CSRF.html</FilePath>
<LineStart>14</LineStart>
<Snippet>Cross-Site Request Forgery (CSRF/XSRF) is an attack that tricks the victim into loading a page that contains img links like the one below: 

&lt;pre&gt;&amp;lt;img src="&lt;a href="http://www.mybank.com/transferFunds.do?acctId=123456" class='external free' title="http://www.mybank.com/transferFunds.do?acctId=123456" rel="nofollow"&gt;http://www.mybank.com/sendFunds.do?acctId=123456&lt;/a&gt;"/&amp;gt;&lt;/pre&gt;

When the victim's browser attempts to render this page, it will issue a request to www.mybank.com to the transferFunds.do page with the specified parameters. The browser will think the link is to get an image, even though it actually is a funds transfer function. </Snippet>
                            </Primary>
                        </Issue>
                        <Issue iid="FA7730A34EE13DC18A58B0E13A76E59B" ruleID="C72A3E77-8324-4FF9-B958-74FCDDF39D17">
                            <Category>Insecure Transport: External Link</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>The file NewLesson.html on line 15 links to a third-party site over an unencrypted channel.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>NewLesson.html</FileName>
<FilePath>WebContent/lesson_plans/NewLesson.html</FilePath>
<LineStart>15</LineStart>
<Snippet>&amp;nbsp;&amp;nbsp;- YourLesson.html to WebContent/lesson_plans&lt;br&gt;&lt;br&gt;
* YourLesson class must implement LessonAdapter and override the following methods:&lt;br&gt;
&amp;nbsp;- createContent: Use the &lt;a href="http://jakarta.apache.org/site/downloads/downloads_ecs.cgi"&gt;ECS package&lt;/a&gt; to develop HTML presented to the user.&lt;br&gt;
&amp;nbsp;- getCategory: Returns the category for which this lesson belongs (XSS, Injection flaws..etc)&lt;br&gt;
&amp;nbsp;- getHints: List of hints you would like to pass on to the users to point them in the right direction.&lt;br&gt;</Snippet>
                            </Primary>
                        </Issue>
                        <Issue iid="D15C0620BBB3E912A4C5092D06D62C08" ruleID="C72A3E77-8324-4FF9-B958-74FCDDF39D17">
                            <Category>Insecure Transport: External Link</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>The file webgoat.jsp on line 26 links to a third-party site over an unencrypted channel.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>webgoat.jsp</FileName>
<FilePath>WebContent/webgoat.jsp</FilePath>
<LineStart>26</LineStart>
<Snippet>                &lt;tr&gt;
                  &lt;td width="50%"&gt;&lt;div align="center"&gt;&lt;a href="http://www.owasp.org"&gt;&lt;img border="0" src="images/logos/owasp.jpg" alt="OWASP Foundation" longdesc="http://www.owasp.org" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;/td&gt;
                  &lt;td width="50%"&gt;&lt;div align="center"&gt;&lt;a href="http://www.aspectsecurity.com"&gt;&lt;img border="0" src="images/logos/aspect.jpg" alt="Aspect Security" longdesc="http://www.aspectsecurity.com" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr&gt;</Snippet>
                            </Primary>
                        </Issue>
                        <Issue iid="FA7730A34EE13DC18A58B0E13A76E59A" ruleID="C72A3E77-8324-4FF9-B958-74FCDDF39D17">
                            <Category>Insecure Transport: External Link</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>The file NewLesson.html on line 9 links to a third-party site over an unencrypted channel.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>NewLesson.html</FileName>
<FilePath>WebContent/lesson_plans/NewLesson.html</FilePath>
<LineStart>9</LineStart>
<Snippet>Adding lessons to WebGoat is very easy. If you have an idea that would be suitable&lt;br&gt; 
for a new lesson, follow these few simple instructions to implement it:&lt;br&gt;&lt;br&gt;
* Download the source code from &lt;a href="http://sourceforge.net/project/showfiles.php?group_id=64424&amp;package_id=61824"&gt;here.&lt;/a&gt;&lt;br&gt;&lt;br&gt;
* Setup framework: follow the simple instructions in "HOW TO create the WebGoat workspace.txt" that comes with the project.&lt;br&gt;&lt;br&gt;
* You need to add two files for each new lesson: &lt;br&gt;</Snippet>
                            </Primary>
                        </Issue>
                        <Issue iid="8A47FF47C96AAB11781F0336F798D374" ruleID="C72A3E77-8324-4FF9-B958-74FCDDF39D17">
                            <Category>Insecure Transport: External Link</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>The file webgoat_challenge.jsp on line 72 links to a third-party site over an unencrypted channel.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>webgoat_challenge.jsp</FileName>
<FilePath>WebContent/webgoat_challenge.jsp</FilePath>
<LineStart>72</LineStart>
<Snippet>	  &lt;/div&gt;
		&lt;div id="bottom_ch"&gt;
			&lt;div align="center"&gt;&lt;img src="images/logos/owasp.jpg" alt="OWASP Foundation" width="166" height="29" longdesc="http://www.owasp.org" /&gt;&lt;a href="http://www.owasp.org"&gt;&lt;br /&gt;
&amp;copy; 2006 Project WebGoat&lt;/a&gt;&lt;/div&gt;
	  	&lt;/div&gt;</Snippet>
                            </Primary>
                        </Issue>
                        <Issue iid="A0EE5EDF8989758001B70924F24A750C" ruleID="C72A3E77-8324-4FF9-B958-74FCDDF39D17">
                            <Category>Insecure Transport: External Link</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>The file lessons.html on line 15 links to a third-party site over an unencrypted channel.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>lessons.html</FileName>
<FilePath>WebContent/lesson_template/lessons.html</FilePath>
<LineStart>15</LineStart>
<Snippet>&lt;table width="100%" border="0" cellspacing="0" cellpadding="0" align="center"&gt;
  &lt;tr&gt; 
    &lt;td&gt; &lt;a href="http://www.aspectsecurity.com"&gt; &lt;img src="images/logo1.jpg" width="306" height="73" border="0" title="Aspect Security - Application security analysis, process, and training."&gt; 
      &lt;/a&gt;&lt;/td&gt;
  &lt;/tr&gt;</Snippet>
                            </Primary>
                        </Issue>
                    </GroupingSection>
                    <GroupingSection count="8">
                        <groupTitle>Null Dereference</groupTitle>
                        <MajorAttributeSummary>
                            <MetaInfo>
<Name>Abstract</Name>
<Value>The method hashMD5() in Encoding.java can crash the program by dereferencing a null-pointer on line 648.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Explanation</Name>
<Value>Null-pointer exceptions usually occur when one or more of the programmer's assumptions is violated. A dereference-after-store error occurs when a program explicitly sets an object to null and dereferences it later. This error is often the result of a programmer initializing a variable to null when it is declared.


Most null-pointer issues result in general software reliability problems, but if attackers can intentionally trigger a null-pointer dereference, they can use the resulting exception to bypass security logic or to cause the application to reveal debugging information that will be valuable in planning subsequent attacks.

Example: In the following code, the programmer explicitly sets the variable foo to null. Later, the programmer dereferences foo before checking the object for a null value.


Foo foo = null;
...
foo.setBar(val);
...
}
</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Recommendations</Name>
<Value>Implement careful checks before dereferencing objects that might be null. When possible, abstract null checks into wrappers around code that manipulates resources to ensure that they are applied in all cases and to minimize the places where mistakes can occur.</Value>
                            </MetaInfo>
                            <AttributeValue>
<Name>&lt;Unaudited&gt;</Name>
<Count>8</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not an Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Reliability Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Bad Practice</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Suspicious</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Exploitable</Name>
<Count>0</Count>
                            </AttributeValue>
                        </MajorAttributeSummary>
                        <Issue iid="B6C3A77AAA4D1A0D6C3E08A2B01439F9" ruleID="B32F92AC-9605-0987-E73B-CCB28279AA24">
                            <Category>Null Dereference</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>The method load() in LessonTracker.java can crash the program by dereferencing a null-pointer on line 260.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>LessonTracker.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/LessonTracker.java</FilePath>
<LineStart>260</LineStart>
<Snippet>	    try
	    {
		in.close();
	    }
	    catch (Exception e)</Snippet>
<TargetFunction>Dereferenced : in()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="DB4F3DDACD82302E2DA008EB284971D6" ruleID="B32F92AC-9605-0987-E73B-CCB28279AA24">
                            <Category>Null Dereference</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>The method createContent() in XPATHInjection.java can crash the program by dereferencing a null-pointer on line 185.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>XPATHInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/XPATHInjection.java</FilePath>
<LineStart>185</LineStart>
<Snippet>		tr.addElement(new TD().addElement(arrTokens[2]));
		tr.addElement(new TD().addElement(arrTokens[4]));
		t2.addElement(tr);

	    }</Snippet>
<TargetFunction>Dereferenced : t2()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="6FAEC70B7AF50870D34891D1ACCFB573" ruleID="B32F92AC-9605-0987-E73B-CCB28279AA24">
                            <Category>Null Dereference</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>The method store() in LessonTracker.java can crash the program by dereferencing a null-pointer on line 401.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>LessonTracker.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/LessonTracker.java</FilePath>
<LineStart>401</LineStart>
<Snippet>	    try
	    {
		out.close();
	    }
	    catch (Exception e)</Snippet>
<TargetFunction>Dereferenced : out()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="FF960AE97C1C857482B91047F52F5DE4" ruleID="B32F92AC-9605-0987-E73B-CCB28279AA24">
                            <Category>Null Dereference</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>The method main() in WebgoatProperties.java can crash the program by dereferencing a null-pointer on line 124.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>WebgoatProperties.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/WebgoatProperties.java</FilePath>
<LineStart>124</LineStart>
<Snippet>	    e.printStackTrace();
	}
	System.out.println(properties.getProperty("CommandInjection.category"));
    }
</Snippet>
<TargetFunction>Dereferenced : properties()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="D797A398E012EB1CDCAE32BF00644EAE" ruleID="B32F92AC-9605-0987-E73B-CCB28279AA24">
                            <Category>Null Dereference</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>The method hashMD5() in Encoding.java can crash the program by dereferencing a null-pointer on line 648.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Encoding.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/Encoding.java</FilePath>
<LineStart>648</LineStart>
<Snippet>			e.printStackTrace();
		}
		return ( base64Encode( md.digest() ) );
	}
</Snippet>
<TargetFunction>Dereferenced : md()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="21689F7E2F448EFBEFBB8355DAF014CF" ruleID="B32F92AC-9605-0987-E73B-CCB28279AA24">
                            <Category>Null Dereference</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>The method updateSession_DELETEME() in LessonSource.java can crash the program by dereferencing a null-pointer on line 134.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>LessonSource.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/LessonSource.java</FilePath>
<LineStart>134</LineStart>
<Snippet>	    realSession = (WebSession) o;
	}
	session.setCurrentScreen(realSession.getCurrentScreen());
	session.setCourse(realSession.getCourse());
	session.setRequest(request);</Snippet>
<TargetFunction>Dereferenced : realSession()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="DCEFD76972F73EAB44A108EF5B2D9B9E" ruleID="B32F92AC-9605-0987-E73B-CCB28279AA24">
                            <Category>Null Dereference</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>The method main() in CreateDB.java can crash the program by dereferencing a null-pointer on line 88.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>CreateDB.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/CreateDB.java</FilePath>
<LineStart>88</LineStart>
<Snippet>	try
	{
	    Statement answer_statement = connection.createStatement(
		    ResultSet.TYPE_SCROLL_INSENSITIVE,
		    ResultSet.CONCUR_READ_ONLY);</Snippet>
<TargetFunction>Dereferenced : connection()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="8D828F3B19E452F8FF5CAA70C4112957" ruleID="B32F92AC-9605-0987-E73B-CCB28279AA24">
                            <Category>Null Dereference</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>The method hashSHA() in Encoding.java can crash the program by dereferencing a null-pointer on line 674.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Encoding.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/Encoding.java</FilePath>
<LineStart>674</LineStart>
<Snippet>			e.printStackTrace();
		}
		return ( base64Encode( md.digest() ) );
	}
</Snippet>
<TargetFunction>Dereferenced : md()</TargetFunction>
                            </Primary>
                        </Issue>
                    </GroupingSection>
                    <GroupingSection count="7">
                        <groupTitle>Denial of Service</groupTitle>
                        <MajorAttributeSummary>
                            <MetaInfo>
<Name>Abstract</Name>
<Value>The call to readLine() at AbstractLesson.java line 380 might allow an attacker to crash the program or otherwise make it unavailable to legitimate users.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Explanation</Name>
<Value>Attackers may be able to deny service to legitimate users by flooding the application with requests, but flooding attacks can often be defused at the network layer. More problematic are bugs that allow an attacker to overload the application using a small number of requests. Such bugs allow the attacker to specify the quantity of system resources their requests will consume or the duration for which they will use them.

Example 1: The following code allows a user to specify the amount of time for which a thread will sleep. By specifying a large number, an attacker may tie up the thread indefinitely. With a small number of requests, the attacker may deplete the application's thread pool.


  int usrSleepTime = Integer.parseInt(usrInput);
  Thread.sleep(usrSleepTime);


Example 2: The following code reads a String from a zip file. Because it uses the readLine() method, it will read an unbounded amount of input. An attacker may take advantage of this code to cause an OutOfMemoryException or to consume a large amount of memory so that the program spends more time performing garbage collection or runs out of memory during some subsequent operation.


  InputStream zipInput = zipFile.getInputStream(zipEntry);
  Reader zipReader = new InputStreamReader(zipInput);
  BufferedReader br = new BufferedReader(zipReader);
  String line = br.readLine();
</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Recommendations</Name>
<Value>Validate user input to ensure that it will not cause inappropriate resource utilization.

Example 3: The following code allows a user to specify the amount of time for which a thread will sleep just as in Example 1, but only if the value is within reasonable bounds.

  int usrSleepTime = Integer.parseInt(usrInput);
  if (usrSleepTime &gt;= SLEEP_MIN &amp;&amp;
      usrSleepTime &lt;= SLEEP_MAX) {
    Thread.sleep(usrSleepTime);
  } else {
    throw new Exception("Invalid sleep duration");
  }
}


Example 4: The following code reads a String from a zip file just as in Example 2, but the maximum string length it will read is MAX_STR_LEN characters.

  InputStream zipInput = zipFile.getInputStream(zipEntry);
  Reader zipReader = new InputStreamReader(zipInput);
  BufferedReader br = new BufferedReader(zipReader);
  StringBuffer sb = new StringBuffer();
  int intC;
  while ((intC = br.read()) != -1) {
    char c = (char) intC;
    if (c == '\n') {
      break;
    }
    if (sb.length() &gt;= MAX_STR_LEN) {
      throw new Exception("input too long");
    }
    sb.append(c);
  }
  String line = sb.toString();
</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Tips</Name>
<Value>1. Denial of service can happen even if the quantity of system resources that will be consumed or the duration for which they will be used is not controlled by an attacker, or at least not directly. Instead, a programmer might choose unsafe constant values for specifying these parameters. The Fortify Secure Coding Rulepacks will report such cases as potential Denial of Services vulnerabilities.

2. The recommended fix for this weakness might not be detectable, and therefore you might need to perform additional auditing after remediation to confirm the fix. After you confirm the weakness is removed, you can safely suppress the issue.</Value>
                            </MetaInfo>
                            <AttributeValue>
<Name>&lt;Unaudited&gt;</Name>
<Count>7</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not an Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Reliability Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Bad Practice</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Suspicious</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Exploitable</Name>
<Count>0</Count>
                            </AttributeValue>
                        </MajorAttributeSummary>
                        <Issue iid="95AE736E3A7D74C95F35C1A5AF0DC9B7" ruleID="24023E22-D6C7-4D5C-B049-38B7EFC8B408">
                            <Category>Denial of Service</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The call to readLine() at AbstractLesson.java line 380 might allow an attacker to crash the program or otherwise make it unavailable to legitimate users.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>AbstractLesson.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/AbstractLesson.java</FilePath>
<LineStart>380</LineStart>
<Snippet>	    String line;

	    while ((line = reader.readLine()) != null)
	    {
		if ((line.indexOf(methodName) != -1)</Snippet>
<TargetFunction>readLine()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="EDF948D557DECD622C3456D5B753A504" ruleID="5c0b56c2-93d3-48e6-b061-c89dbffb2628">
                            <Category>Denial of Service</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The call to waitFor() at Exec.java line 229 might allow an attacker to crash the program or otherwise make it unavailable to legitimate users.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Exec.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/util/Exec.java</FilePath>
<LineStart>229</LineStart>
<Snippet>	    if (!interrupted.get(0) &amp;&amp; !lazyQuit)
	    {
		int returnCode = child.waitFor();
		results.setReturnCode(returnCode);
</Snippet>
<TargetFunction>waitFor()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="EDF948D557DECD622C3456D5B753A503" ruleID="5c0b56c2-93d3-48e6-b061-c89dbffb2628">
                            <Category>Denial of Service</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The call to waitFor() at Exec.java line 418 might allow an attacker to crash the program or otherwise make it unavailable to legitimate users.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Exec.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/util/Exec.java</FilePath>
<LineStart>418</LineStart>
<Snippet>	    if (!interrupted.get(0) &amp;&amp; !lazyQuit)
	    {
		int returnCode = child.waitFor();
		results.setReturnCode(returnCode);
</Snippet>
<TargetFunction>waitFor()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="D952C12A5423B822395BF743BB148DCC" ruleID="24023E22-D6C7-4D5C-B049-38B7EFC8B408">
                            <Category>Denial of Service</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The call to readLine() at AbstractLesson.java line 465 might allow an attacker to crash the program or otherwise make it unavailable to legitimate users.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>AbstractLesson.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/AbstractLesson.java</FilePath>
<LineStart>465</LineStart>
<Snippet>	    String line;

	    while ((line = reader.readLine()) != null)
	    {
		if (numbers)</Snippet>
<TargetFunction>readLine()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="9AF0499627DB625C86C9B1EF9C22A9FB" ruleID="24023E22-D6C7-4D5C-B049-38B7EFC8B408">
                            <Category>Denial of Service</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The call to readLine() at LessonAdapter.java line 95 might allow an attacker to crash the program or otherwise make it unavailable to legitimate users.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>LessonAdapter.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/LessonAdapter.java</FilePath>
<LineStart>95</LineStart>
<Snippet>		BufferedReader in = new BufferedReader(new FileReader(fileName));
		String line = null;
		while ((line = in.readLine()) != null)
		{
		    pre.addElement(line + "\n");</Snippet>
<TargetFunction>readLine()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="82D086BCD95AD09F495F3C599DF5CE7E" ruleID="24023E22-D6C7-4D5C-B049-38B7EFC8B408">
                            <Category>Denial of Service</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The call to readLine() at AbstractLesson.java line 1035 might allow an attacker to crash the program or otherwise make it unavailable to legitimate users.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>AbstractLesson.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/AbstractLesson.java</FilePath>
<LineStart>1035</LineStart>
<Snippet>	    String line;

	    while ((line = reader.readLine()) != null)
	    {
		ec.addElement(new StringElement(line));</Snippet>
<TargetFunction>readLine()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="11410FE5B221F247DBAF9EE94BA91A8A" ruleID="24023E22-D6C7-4D5C-B049-38B7EFC8B408">
                            <Category>Denial of Service</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The call to readLine() at LessonAdapter.java line 288 might allow an attacker to crash the program or otherwise make it unavailable to legitimate users.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>LessonAdapter.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/LessonAdapter.java</FilePath>
<LineStart>288</LineStart>
<Snippet>		String line = null;
		boolean startAppending = false;
		while ((line = in.readLine()) != null)
		{
		    if (line.indexOf("&lt;!-- Start Instructions --&gt;") != -1)</Snippet>
<TargetFunction>readLine()</TargetFunction>
                            </Primary>
                        </Issue>
                    </GroupingSection>
                    <GroupingSection count="6">
                        <groupTitle>Axis 2 Misconfiguration: Debug Information</groupTitle>
                        <MajorAttributeSummary>
                            <MetaInfo>
<Name>Abstract</Name>
<Value>The SOAP Monitor module allows attackers to sniff SOAP traffic.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Explanation</Name>
<Value>Apache Axis 2 provides developers with a utility to monitor incoming and outgoing SOAP messages through a Java applet. The SOAP Monitor will show all SOAP messages used to invoke a Web Service. Attackers may use the utility to eavesdrop on traffic between a Web Service and its clients.

</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Recommendations</Name>
<Value>Disable the SOAP Monitor by removing references to it from your configuration files. Specifically, ensure that web.xml does not contain a servlet or servlet-mapping to the SOAP Monitor service. Also make sure that axis2.xml has no references such as &lt;module ref="soapmonitor"/&gt;</Value>
                            </MetaInfo>
                            <AttributeValue>
<Name>&lt;Unaudited&gt;</Name>
<Count>6</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not an Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Reliability Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Bad Practice</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Suspicious</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Exploitable</Name>
<Count>0</Count>
                            </AttributeValue>
                        </MajorAttributeSummary>
                        <Issue iid="6EAF343D747C9A95AAD3933BF76BF3BE" ruleID="C15A1F06-3B47-4AA2-AFD1-02E895160582">
                            <Category>Axis 2 Misconfiguration: Debug Information</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Environment</Kingdom>
                            <Abstract>The SOAP Monitor module allows attackers to sniff SOAP traffic.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>web.xml</FileName>
<FilePath>WebContent/WEB-INF/web.xml</FilePath>
<LineStart>217</LineStart>
<Snippet>    &lt;servlet-mapping&gt;
      &lt;servlet-name&gt;SOAPMonitorService&lt;/servlet-name&gt;
      &lt;url-pattern&gt;/SOAPMonitor&lt;/url-pattern&gt;
    &lt;/servlet-mapping&gt;
 </Snippet>
                            </Primary>
                        </Issue>
                        <Issue iid="6EAF343D747C9A95AAD3933BF76BF3BC" ruleID="C15A1F06-3B47-4AA2-AFD1-02E895160582">
                            <Category>Axis 2 Misconfiguration: Debug Information</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Environment</Kingdom>
                            <Abstract>The SOAP Monitor module allows attackers to sniff SOAP traffic.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>web.xml</FileName>
<FilePath>WebContent/WEB-INF/web.xml</FilePath>
<LineStart>95</LineStart>
<Snippet>      &lt;/servlet-class&gt;
      &lt;init-param&gt;
        &lt;param-name&gt;SOAPMonitorPort&lt;/param-name&gt;
        &lt;param-value&gt;5001&lt;/param-value&gt;
      &lt;/init-param&gt;</Snippet>
                            </Primary>
                        </Issue>
                        <Issue iid="6EAF343D747C9A95AAD3933BF76BF3B9" ruleID="C15A1F06-3B47-4AA2-AFD1-02E895160582">
                            <Category>Axis 2 Misconfiguration: Debug Information</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Environment</Kingdom>
                            <Abstract>The SOAP Monitor module allows attackers to sniff SOAP traffic.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>web.xml</FileName>
<FilePath>WebContent/WEB-INF/web.xml</FilePath>
<LineStart>89</LineStart>
<Snippet>
    &lt;servlet&gt;
      &lt;servlet-name&gt;SOAPMonitorService&lt;/servlet-name&gt;
      &lt;display-name&gt;SOAPMonitorService&lt;/display-name&gt;
      &lt;servlet-class&gt;</Snippet>
                            </Primary>
                        </Issue>
                        <Issue iid="6EAF343D747C9A95AAD3933BF76BF3BB" ruleID="C15A1F06-3B47-4AA2-AFD1-02E895160582">
                            <Category>Axis 2 Misconfiguration: Debug Information</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Environment</Kingdom>
                            <Abstract>The SOAP Monitor module allows attackers to sniff SOAP traffic.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>web.xml</FileName>
<FilePath>WebContent/WEB-INF/web.xml</FilePath>
<LineStart>91</LineStart>
<Snippet>      &lt;servlet-name&gt;SOAPMonitorService&lt;/servlet-name&gt;
      &lt;display-name&gt;SOAPMonitorService&lt;/display-name&gt;
      &lt;servlet-class&gt;
          org.apache.axis.monitor.SOAPMonitorService
      &lt;/servlet-class&gt;</Snippet>
                            </Primary>
                        </Issue>
                        <Issue iid="6EAF343D747C9A95AAD3933BF76BF3BD" ruleID="C15A1F06-3B47-4AA2-AFD1-02E895160582">
                            <Category>Axis 2 Misconfiguration: Debug Information</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Environment</Kingdom>
                            <Abstract>The SOAP Monitor module allows attackers to sniff SOAP traffic.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>web.xml</FileName>
<FilePath>WebContent/WEB-INF/web.xml</FilePath>
<LineStart>216</LineStart>
<Snippet> 
    &lt;servlet-mapping&gt;
      &lt;servlet-name&gt;SOAPMonitorService&lt;/servlet-name&gt;
      &lt;url-pattern&gt;/SOAPMonitor&lt;/url-pattern&gt;
    &lt;/servlet-mapping&gt;</Snippet>
                            </Primary>
                        </Issue>
                        <Issue iid="6EAF343D747C9A95AAD3933BF76BF3BA" ruleID="C15A1F06-3B47-4AA2-AFD1-02E895160582">
                            <Category>Axis 2 Misconfiguration: Debug Information</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Environment</Kingdom>
                            <Abstract>The SOAP Monitor module allows attackers to sniff SOAP traffic.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>web.xml</FileName>
<FilePath>WebContent/WEB-INF/web.xml</FilePath>
<LineStart>90</LineStart>
<Snippet>    &lt;servlet&gt;
      &lt;servlet-name&gt;SOAPMonitorService&lt;/servlet-name&gt;
      &lt;display-name&gt;SOAPMonitorService&lt;/display-name&gt;
      &lt;servlet-class&gt;
          org.apache.axis.monitor.SOAPMonitorService</Snippet>
                            </Primary>
                        </Issue>
                    </GroupingSection>
                    <GroupingSection count="6">
                        <groupTitle>Denial of Service: StringBuilder</groupTitle>
                        <MajorAttributeSummary>
                            <MetaInfo>
<Name>Abstract</Name>
<Value>The call to append() in AbstractLesson.java on line 398 appends untrusted data to a StringBuilder or StringBuffer instance initialized with the default backing array size (16). This can cause the JVM to overconsume heap memory space.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Explanation</Name>
<Value>Appending user-controlled data to a StringBuilder or StringBuffer instance initialized with the default backing character array size (16) can cause the application to consume large amounts of heap memory while resizing the underlying array to fit user's data. When data is appended to a StringBuilder or StringBuffer instance, the instance will determine if the backing character array has enough free space to store the data. If the data does not fit, the StringBuilder or StringBuffer instance will create a new array with a capacity of at least double the previous array size, and the old array will remain in the heap until it is garbage collected. Attackers can use this implementation detail to execute a Denial of Service (DoS) attack.

Example 1: User-controlled data is appended to a StringBuilder instance initialized with the default constructor.

    ...
    StringBuilder sb = new StringBuilder();
    final String lineSeparator = System.lineSeparator();
    String[] labels = request.getParameterValues("label");
    for (String label : labels) {
        sb.append(label).append(lineSeparator);
    }
    ...
</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Recommendations</Name>
<Value>Initialize the StringBuilder or StringBuffer with an initial capacity of the expected appended data size to reduce the number of times the backing array is resized. Check the size of the data before appending it to a StringBuilder or StringBuffer instance.

Example 2: User-controlled data is appended to a StringBuilder instance initialized with the initial capacity constructor, and the data length is checked before appending to ensure that the initial StringBuilder capacity is not exceeded to prevent resizing of the backing array.

    ...
    private final int BUFFER_CAPACITY = 5200;
    StringBuilder sb = new StringBuilder(BUFFER_CAPACITY);
    ...
    final String lineSeparator = System.lineSeparator();
    String[] labels = request.getParameterValues("label");
    for (String label : labels) {
        if (label.length() + lineSeparator.length() + sb.length() &lt;= sb.capacity()) {
            sb.append(label).append(lineSeparator);
        } else {
            // Handle error
        }
    }
    ...


Example 3: User-controlled data is appended to a StringBuffer instance initialized with the initial capacity constructor, and the string length and number of data items are checked to limit the amount of data that can be appended to the StringBuffer.

    ...
    private final int MAX_LABEL_LEN = 50;
    private final int MAX_LABEL_ITEMS = 100;
    private final int BUFFER_CAPACITY = 5200;
    StringBuffer sb = new StringBuffer(BUFFER_CAPACITY);
    ...
    final String lineSeparator = System.lineSeparator();
    String[] labels = request.getParameterValues("label");
    if (labels.length &lt;= MAX_LABEL_ITEMS) {
        for (String label : labels) {
            if (label.length() &lt;= MAX_LABEL_LEN) {
                sb.append(label).append(lineSeparator);
            } else {
                // Handle error
            }
        }
    } else {
        // Handle error
    }
    ...
</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Tips</Name>
<Value>1. The recommended fix for this weakness might not be detectable, and therefore you might need to perform additional auditing after remediation to confirm the fix. After you confirm the weakness is removed, you can safely suppress the issue.</Value>
                            </MetaInfo>
                            <AttributeValue>
<Name>&lt;Unaudited&gt;</Name>
<Count>6</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not an Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Reliability Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Bad Practice</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Suspicious</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Exploitable</Name>
<Count>0</Count>
                            </AttributeValue>
                        </MajorAttributeSummary>
                        <Issue iid="C000215F54F05AAF86B6D89D68586D96" ruleID="F2BD85B8-504E-4D52-967C-E00A043BAFAD">
                            <Category>Denial of Service: StringBuilder</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The call to append() in LessonAdapter.java on line 302 appends untrusted data to a StringBuilder or StringBuffer instance initialized with the default backing array size (16). This can cause the JVM to overconsume heap memory space.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>LessonAdapter.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/LessonAdapter.java</FilePath>
<LineStart>302</LineStart>
<Snippet>		    if (startAppending)
		    {
			buff.append(line + "\n");
		    }
		}</Snippet>
<TargetFunction>java.lang.StringBuffer.append()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>LessonAdapter.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/LessonAdapter.java</FilePath>
<LineStart>288</LineStart>
<Snippet>		String line = null;
		boolean startAppending = false;
		while ((line = in.readLine()) != null)
		{
		    if (line.indexOf("&lt;!-- Start Instructions --&gt;") != -1)</Snippet>
<TargetFunction>java.io.BufferedReader.readLine()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="02B6F7369BB6CCDD25EEB5C83914DE0C" ruleID="F2BD85B8-504E-4D52-967C-E00A043BAFAD">
                            <Category>Denial of Service: StringBuilder</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The call to append() in HtmlEncoder.java on line 155 appends untrusted data to a StringBuilder or StringBuffer instance initialized with the default backing array size (16). This can cause the JVM to overconsume heap memory space.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>HtmlEncoder.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/util/HtmlEncoder.java</FilePath>
<LineStart>155</LineStart>
<Snippet>		if (((int) ch) &gt; 128)
		{
		    buf.append("&amp;#" + ((int) ch) + ";");
		}
		else</Snippet>
<TargetFunction>java.lang.StringBuffer.append()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Encoding.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/Encoding.java</FilePath>
<LineStart>740</LineStart>
<Snippet>	 */

	public static void main( String[] args )
	{
		try</Snippet>
<TargetFunction>main(0)</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="DF1D53EE167BED1654A4D3CF4B32DBB4" ruleID="F2BD85B8-504E-4D52-967C-E00A043BAFAD">
                            <Category>Denial of Service: StringBuilder</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The call to append() in AbstractLesson.java on line 471 appends untrusted data to a StringBuilder or StringBuffer instance initialized with the default backing array size (16). This can cause the JVM to overconsume heap memory space.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>AbstractLesson.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/AbstractLesson.java</FilePath>
<LineStart>471</LineStart>
<Snippet>		    sb.append(pad(++count) + "  ");
		}
		sb.append(line + System.getProperty("line.separator"));
	    }
</Snippet>
<TargetFunction>java.lang.StringBuffer.append()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>AbstractLesson.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/AbstractLesson.java</FilePath>
<LineStart>465</LineStart>
<Snippet>	    String line;

	    while ((line = reader.readLine()) != null)
	    {
		if (numbers)</Snippet>
<TargetFunction>java.io.BufferedReader.readLine()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="83D4DD0771BE8C8EE3E96104B26B839C" ruleID="F2BD85B8-504E-4D52-967C-E00A043BAFAD">
                            <Category>Denial of Service: StringBuilder</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The call to append() in HtmlEncoder.java on line 209 appends untrusted data to a StringBuilder or StringBuffer instance initialized with the default backing array size (16). This can cause the JVM to overconsume heap memory space.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>HtmlEncoder.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/util/HtmlEncoder.java</FilePath>
<LineStart>209</LineStart>
<Snippet>		if (iso == null)
		{
		    buf.append("&amp;" + entity + ";");
		}
		else</Snippet>
<TargetFunction>java.lang.StringBuffer.append()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Encoding.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/Encoding.java</FilePath>
<LineStart>740</LineStart>
<Snippet>	 */

	public static void main( String[] args )
	{
		try</Snippet>
<TargetFunction>main(0)</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="08257DB276BE48D6BB780EEC906D45C5" ruleID="F2BD85B8-504E-4D52-967C-E00A043BAFAD">
                            <Category>Denial of Service: StringBuilder</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The call to append() in Encoding.java on line 727 appends untrusted data to a StringBuilder or StringBuffer instance initialized with the default backing array size (16). This can cause the JVM to overconsume heap memory space.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Encoding.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/Encoding.java</FilePath>
<LineStart>727</LineStart>
<Snippet>		{
			hexBuff.append( "%" );
			hexBuff.append( Integer.toHexString( ascii[i] ) );
		}
		return hexBuff.toString().toUpperCase();</Snippet>
<TargetFunction>java.lang.StringBuffer.append()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Encoding.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/Encoding.java</FilePath>
<LineStart>740</LineStart>
<Snippet>	 */

	public static void main( String[] args )
	{
		try</Snippet>
<TargetFunction>main(0)</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="CCD52E3DEF9645BE9394C9E82118078E" ruleID="F2BD85B8-504E-4D52-967C-E00A043BAFAD">
                            <Category>Denial of Service: StringBuilder</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The call to append() in AbstractLesson.java on line 398 appends untrusted data to a StringBuilder or StringBuffer instance initialized with the default backing array size (16). This can cause the JVM to overconsume heap memory space.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>AbstractLesson.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/AbstractLesson.java</FilePath>
<LineStart>398</LineStart>
<Snippet>		    }

		    sb.append(line + "\n");
		}
</Snippet>
<TargetFunction>java.lang.StringBuffer.append()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>AbstractLesson.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/AbstractLesson.java</FilePath>
<LineStart>380</LineStart>
<Snippet>	    String line;

	    while ((line = reader.readLine()) != null)
	    {
		if ((line.indexOf(methodName) != -1)</Snippet>
<TargetFunction>java.io.BufferedReader.readLine()</TargetFunction>
                            </Source>
                        </Issue>
                    </GroupingSection>
                    <GroupingSection count="6">
                        <groupTitle>J2EE Bad Practices: Threads</groupTitle>
                        <MajorAttributeSummary>
                            <MetaInfo>
<Name>Abstract</Name>
<Value>The method createContent() in ThreadSafetyProblem.java calls sleep()  on line 95. Thread management in a web application is forbidden in some circumstances and is always highly error prone.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Explanation</Name>
<Value>Thread management in a web application is forbidden by the J2EE standard in some circumstances and is always highly error prone. Managing threads is difficult and is likely to interfere in unpredictable ways with the behavior of the application container. Even without interfering with the container, thread management usually leads to bugs that are hard to detect and diagnose like deadlock, race conditions, and other synchronization errors.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Recommendations</Name>
<Value>Avoid managing threads directly from within the web application. Instead use standards such as message driven beans and the EJB timer service that are provided by the application container.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Tips</Name>
<Value>1. If you are auditing a non-J2EE Java application, the J2EE Bad Practices categories might not apply to your environment. If this is the case, you can use Audit Guide to suppress these issues.</Value>
                            </MetaInfo>
                            <AttributeValue>
<Name>&lt;Unaudited&gt;</Name>
<Count>6</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not an Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Reliability Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Bad Practice</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Suspicious</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Exploitable</Name>
<Count>0</Count>
                            </AttributeValue>
                        </MajorAttributeSummary>
                        <Issue iid="A37D4268D19050C04BA6222FAEEFCCAA" ruleID="7DDCF7B6-5C23-48F5-A44A-B6A0E0643058">
                            <Category>J2EE Bad Practices: Threads</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Time and State</Kingdom>
                            <Abstract>The method execOptions() in Exec.java calls run()  on line 114. Thread management in a web application is forbidden in some circumstances and is always highly error prone.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Exec.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/util/Exec.java</FilePath>
<LineStart>114</LineStart>
<Snippet>	    {
		watcher = new ThreadWatcher(child, interrupted, timeout);
		new Thread(watcher).start();
	    }
</Snippet>
<TargetFunction>run()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="5C8CC415FD7278B9B8A35B3C53B39381" ruleID="8ECE1D9E-AE40-4AD1-9ECB-6D024DBF8FCA">
                            <Category>J2EE Bad Practices: Threads</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Time and State</Kingdom>
                            <Abstract>The method run() in ThreadWatcher.java calls sleep()  on line 108. Thread management in a web application is forbidden in some circumstances and is always highly error prone.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ThreadWatcher.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/util/ThreadWatcher.java</FilePath>
<LineStart>108</LineStart>
<Snippet>	try
	{
	    Thread.sleep(myTimeout);
	}
	catch (InterruptedException e)</Snippet>
<TargetFunction>sleep()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="71F0625AE57A741FA803D1184A21994A" ruleID="8ECE1D9E-AE40-4AD1-9ECB-6D024DBF8FCA">
                            <Category>J2EE Bad Practices: Threads</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Time and State</Kingdom>
                            <Abstract>The method execOptions() in Exec.java calls start()  on line 114. Thread management in a web application is forbidden in some circumstances and is always highly error prone.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Exec.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/util/Exec.java</FilePath>
<LineStart>114</LineStart>
<Snippet>	    {
		watcher = new ThreadWatcher(child, interrupted, timeout);
		new Thread(watcher).start();
	    }
</Snippet>
<TargetFunction>start()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="71F0625AE57A741FA803D1184A219949" ruleID="8ECE1D9E-AE40-4AD1-9ECB-6D024DBF8FCA">
                            <Category>J2EE Bad Practices: Threads</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Time and State</Kingdom>
                            <Abstract>The method execOptions() in Exec.java calls start()  on line 303. Thread management in a web application is forbidden in some circumstances and is always highly error prone.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Exec.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/util/Exec.java</FilePath>
<LineStart>303</LineStart>
<Snippet>	    {
		watcher = new ThreadWatcher(child, interrupted, timeout);
		new Thread(watcher).start();
	    }
</Snippet>
<TargetFunction>start()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="A37D4268D19050C04BA6222FAEEFCCA9" ruleID="7DDCF7B6-5C23-48F5-A44A-B6A0E0643058">
                            <Category>J2EE Bad Practices: Threads</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Time and State</Kingdom>
                            <Abstract>The method execOptions() in Exec.java calls run()  on line 303. Thread management in a web application is forbidden in some circumstances and is always highly error prone.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Exec.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/util/Exec.java</FilePath>
<LineStart>303</LineStart>
<Snippet>	    {
		watcher = new ThreadWatcher(child, interrupted, timeout);
		new Thread(watcher).start();
	    }
</Snippet>
<TargetFunction>run()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="BB4EF0C6DFBF7384D36B5136BC23EEE0" ruleID="8ECE1D9E-AE40-4AD1-9ECB-6D024DBF8FCA">
                            <Category>J2EE Bad Practices: Threads</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Time and State</Kingdom>
                            <Abstract>The method createContent() in ThreadSafetyProblem.java calls sleep()  on line 95. Thread management in a web application is forbidden in some circumstances and is always highly error prone.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ThreadSafetyProblem.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/ThreadSafetyProblem.java</FilePath>
<LineStart>95</LineStart>
<Snippet>	    if (!"".equals(currentUser))
	    {
		Thread.sleep(1500);

		// Get the users info from the DB</Snippet>
<TargetFunction>sleep()</TargetFunction>
                            </Primary>
                        </Issue>
                    </GroupingSection>
                    <GroupingSection count="6">
                        <groupTitle>Poor Style: Non-final Public Static Field</groupTitle>
                        <MajorAttributeSummary>
                            <MetaInfo>
<Name>Abstract</Name>
<Value>Non-final public static fields can be changed by external classes.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Explanation</Name>
<Value>Typically, you do not want to provide external classes direct access to your object's member fields since a public field can be changed by any external class. Good object oriented designed uses encapsulation to prevent implementation details, such as member fields, from being exposed to other classes. Further, if the system assumes that this field cannot be changed, then malicious code might be able to adversely change the behavior of the system.

Example 1: In the following code, the field ERROR_CODE is declared as public and static, but not final:


public class MyClass
{
public static int ERROR_CODE = 100;
//...
}

In this case, malicious code might be able to change this error code and cause the program to behave in an unexpected manner.&#13;
This category is from the Cigital Java Rulepack.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Recommendations</Name>
<Value>If you intend to expose a field as a constant value, the field should be declared as public static final, otherwise declare the field private.

Example 2:

public class MyClass
{
public static final int ERROR_CODE = 123;
//...
}</Value>
                            </MetaInfo>
                            <AttributeValue>
<Name>&lt;Unaudited&gt;</Name>
<Count>6</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not an Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Reliability Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Bad Practice</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Suspicious</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Exploitable</Name>
<Count>0</Count>
                            </AttributeValue>
                        </MajorAttributeSummary>
                        <Issue iid="3D3B0CF2E42BCD0A6398480A11773DE6" ruleID="3F30430E-C978-475D-97A0-37D917C45791">
                            <Category>Poor Style: Non-final Public Static Field</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>Non-final public static fields can be changed by external classes.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>WSDLScanning.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/WSDLScanning.java</FilePath>
<LineStart>82</LineStart>
<Snippet>    static boolean beenRestartedYet = false;

    public static Connection connection = null;

    public final static String firstName = "getFirstName";</Snippet>
<TargetFunction>Field: connection()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="4BC01878981195B737F743B5F5D2B440" ruleID="3F30430E-C978-475D-97A0-37D917C45791">
                            <Category>Poor Style: Non-final Public Static Field</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>Non-final public static fields can be changed by external classes.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>HammerHead.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/HammerHead.java</FilePath>
<LineStart>85</LineStart>
<Snippet>     * Properties file path
     */
    public static String propertiesPath = null;

</Snippet>
<TargetFunction>Field: propertiesPath()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="C2BFA7617B92FB6BE0C2ED442FE41955" ruleID="3F30430E-C978-475D-97A0-37D917C45791">
                            <Category>Poor Style: Non-final Public Static Field</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>Non-final public static fields can be changed by external classes.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>DatabaseUtilities.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/DatabaseUtilities.java</FilePath>
<LineStart>50</LineStart>
<Snippet>{

    public static String servletContextRealPath = null;

</Snippet>
<TargetFunction>Field: servletContextRealPath()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="E17ACA7483F9F7AF59E377D763E7983D" ruleID="3F30430E-C978-475D-97A0-37D917C45791">
                            <Category>Poor Style: Non-final Public Static Field</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>Non-final public static fields can be changed by external classes.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Screen.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/Screen.java</FilePath>
<LineStart>54</LineStart>
<Snippet>     *  Description of the Field
     */
    public static int MAIN_SIZE = 375;

    //private Head head;</Snippet>
<TargetFunction>Field: MAIN_SIZE()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="A23E4C61BF5F1E75B85E8B32C06E75CE" ruleID="3F30430E-C978-475D-97A0-37D917C45791">
                            <Category>Poor Style: Non-final Public Static Field</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>Non-final public static fields can be changed by external classes.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>XMLInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/XMLInjection.java</FilePath>
<LineStart>61</LineStart>
<Snippet>    private final static String ACCOUNTID = "accountID";

    public static HashMap rewardsMap = new HashMap();

    private final static IMG MAC_LOGO = new IMG("images/logos/macadamian.gif").setAlt(</Snippet>
<TargetFunction>Field: rewardsMap()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="2E81F5EFD08CBCDDBAC3E3611EA9EDCA" ruleID="3F30430E-C978-475D-97A0-37D917C45791">
                            <Category>Poor Style: Non-final Public Static Field</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>Non-final public static fields can be changed by external classes.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>SoapRequest.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SoapRequest.java</FilePath>
<LineStart>74</LineStart>
<Snippet>
    //static boolean completed;
    public static Connection connection = null;

    public final static String firstName = "getFirstName";</Snippet>
<TargetFunction>Field: connection()</TargetFunction>
                            </Primary>
                        </Issue>
                    </GroupingSection>
                    <GroupingSection count="5">
                        <groupTitle>J2EE Bad Practices: getConnection()</groupTitle>
                        <MajorAttributeSummary>
                            <MetaInfo>
<Name>Abstract</Name>
<Value>The J2EE standard forbids the direct management of connections.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Explanation</Name>
<Value>The J2EE standard requires that applications use the container's resource management facilities to obtain connections to resources.

For example, a J2EE application should obtain a database connection as follows:


ctx = new InitialContext();
datasource = (DataSource)ctx.lookup(DB_DATASRC_REF);
conn = datasource.getConnection();


and should avoid obtaining a connection in this way:


conn = DriverManager.getConnection(CONNECT_STRING);


Every major web application container provides pooled database connection management as part of its resource management framework. Duplicating this functionality in an application is difficult and error prone, which is part of the reason it is forbidden under the J2EE standard.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Recommendations</Name>
<Value>Replace direct calls to DriverManager.getConnection() with a JNDI lookup of the appropriate connection factory, and obtain a connection from the connection factory.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Tips</Name>
<Value>1. Depending on the complexity of the resource management scheme in use, it might be difficult to identify specific errors in a proprietary connection management infrastructure. Instead of trying to hunt down the bugs, advocate to migrate the application to a connection pool manager provided by the container.

2. Beyond the more vanilla performance problems that are likely to be introduced, proprietary connection management often leads to password management mistakes. In applications that manage their own database connections, it is not uncommon to find passwords hardcoded or stored in plain text configuration files because no alternative is readily available. Examples of this type of behavior should serve as added ammunition in your argument to move to an application server managed connection pool.

3. If you are auditing a non-J2EE Java application, the J2EE Bad Practices categories might not apply to your environment. If this is the case, you can use Audit Guide to suppress these issues.</Value>
                            </MetaInfo>
                            <AttributeValue>
<Name>&lt;Unaudited&gt;</Name>
<Count>5</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not an Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Reliability Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Bad Practice</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Suspicious</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Exploitable</Name>
<Count>0</Count>
                            </AttributeValue>
                        </MajorAttributeSummary>
                        <Issue iid="2CD2759C69A0E24CF5AFD8284BFECEA4" ruleID="EDD8E0B5-D8F2-4F56-A20B-549E3880318B">
                            <Category>J2EE Bad Practices: getConnection()</Category>
                            <Folder>Low</Folder>
                            <Kingdom>API Abuse</Kingdom>
                            <Abstract>The J2EE standard forbids the direct management of connections.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>DatabaseUtilities.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/DatabaseUtilities.java</FilePath>
<LineStart>105</LineStart>
<Snippet>		dbName = dbName.concat("database.prp");
		Class.forName("org.enhydra.instantdb.jdbc.idbDriver");
		return DriverManager.getConnection("jdbc:idb:" + dbName);
	    }
	}</Snippet>
<TargetFunction>getConnection()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="C80D7C3499FFE0DA5ABD6063A35EED34" ruleID="EDD8E0B5-D8F2-4F56-A20B-549E3880318B">
                            <Category>J2EE Bad Practices: getConnection()</Category>
                            <Folder>Low</Folder>
                            <Kingdom>API Abuse</Kingdom>
                            <Abstract>The J2EE standard forbids the direct management of connections.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>CreateDB.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/CreateDB.java</FilePath>
<LineStart>70</LineStart>
<Snippet>
	    connection = DriverManager
		    .getConnection(
			    "jdbc:odbc:;DRIVER=Microsoft Access Driver (*.mdb);DBQ=c:/webgoat.mdb;PWD=webgoat",
			    "webgoat", "webgoat");</Snippet>
<TargetFunction>getConnection()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="C03165CB85975247DBF40E816A1A007A" ruleID="EDD8E0B5-D8F2-4F56-A20B-549E3880318B">
                            <Category>J2EE Bad Practices: getConnection()</Category>
                            <Folder>Low</Folder>
                            <Kingdom>API Abuse</Kingdom>
                            <Abstract>The J2EE standard forbids the direct management of connections.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>DatabaseUtilities.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/DatabaseUtilities.java</FilePath>
<LineStart>68</LineStart>
<Snippet>	Class.forName(s.getDatabaseDriver());

	return (DriverManager.getConnection(s.getDatabaseConnectionString()));
    }
</Snippet>
<TargetFunction>getConnection()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="A09AE144AE395B011A8BCD8E723A9244" ruleID="EDD8E0B5-D8F2-4F56-A20B-549E3880318B">
                            <Category>J2EE Bad Practices: getConnection()</Category>
                            <Folder>Low</Folder>
                            <Kingdom>API Abuse</Kingdom>
                            <Abstract>The J2EE standard forbids the direct management of connections.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>DatabaseUtilities.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/DatabaseUtilities.java</FilePath>
<LineStart>78</LineStart>
<Snippet>	Class.forName(driverName);

	return (DriverManager.getConnection(connectionString));
    }
</Snippet>
<TargetFunction>getConnection()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="800E5D45253401B7011A3E425FA7E38C" ruleID="EDD8E0B5-D8F2-4F56-A20B-549E3880318B">
                            <Category>J2EE Bad Practices: getConnection()</Category>
                            <Folder>Low</Folder>
                            <Kingdom>API Abuse</Kingdom>
                            <Abstract>The J2EE standard forbids the direct management of connections.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>DatabaseUtilities.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/DatabaseUtilities.java</FilePath>
<LineStart>98</LineStart>
<Snippet>		Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
		return DriverManager
			.getConnection("jdbc:odbc:;DRIVER=Microsoft Access Driver (*.mdb);DBQ="
				+ dbName + ";PWD=webgoat");
	    }</Snippet>
<TargetFunction>getConnection()</TargetFunction>
                            </Primary>
                        </Issue>
                    </GroupingSection>
                    <GroupingSection count="5">
                        <groupTitle>Password Management: Password in Configuration File</groupTitle>
                        <MajorAttributeSummary>
                            <MetaInfo>
<Name>Abstract</Name>
<Value>Storing a plain text password in a configuration file may result in a system compromise.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Explanation</Name>
<Value>Storing a plain text password in a configuration file allows anyone who can read the file access to the password-protected resource. Developers sometimes believe that they cannot defend the application from someone who has access to the configuration, but this attitude makes an attacker's job easier. Good password management guidelines require that a password never be stored in plain text.

</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Recommendations</Name>
<Value>A password should never be stored in plain text. An administrator should be required to enter the password when the system starts. If that approach is impractical, a less secure but often adequate solution is to obfuscate the password and scatter the de-obfuscation material around the system so that an attacker has to obtain and correctly combine multiple system resources to decipher the password.

Some third-party products claim the ability to manage passwords in a more secure way. For example, WebSphere Application Server 4.x uses a simple XOR encryption algorithm for obfuscating values, but be skeptical about such facilities. WebSphere and other application servers offer outdated and relatively weak encryption mechanisms that are insufficient for security-sensitive environments. For a secure solution the only viable option is a proprietary one.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Tips</Name>
<Value>1. Fortify Static Code Analyzer searches configuration files for common names used for password properties. Audit these issues by verifying that the flagged entry is used as a password and that the password entry contains plain text.

2. If the entry in the configuration file is a default password, require that it be changed in addition to requiring that it be obfuscated in the configuration file.</Value>
                            </MetaInfo>
                            <AttributeValue>
<Name>&lt;Unaudited&gt;</Name>
<Count>5</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not an Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Reliability Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Bad Practice</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Suspicious</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Exploitable</Name>
<Count>0</Count>
                            </AttributeValue>
                        </MajorAttributeSummary>
                        <Issue iid="CA01C2FE2A75E8E8C1746C81ABF7152E" ruleID="8FF9A602-1DDF-491F-B2D5-55A5B15C60C7">
                            <Category>Password Management: Password in Configuration File</Category>
                            <Folder>High</Folder>
                            <Kingdom>Environment</Kingdom>
                            <Abstract>Storing a plain text password in a configuration file may result in a system compromise.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>EmployeesData.xml</FileName>
<FilePath>WebContent/lessons/XPATHInjection/EmployeesData.xml</FilePath>
<LineStart>6</LineStart>
<Snippet>		&lt;loginID&gt;Mike&lt;/loginID&gt;
		&lt;accountno&gt;11123&lt;/accountno&gt;
		&lt;passwd&gt;test123&lt;/passwd&gt;
		&lt;salary&gt;468100&lt;/salary&gt;
	&lt;/employee&gt;</Snippet>
                            </Primary>
                        </Issue>
                        <Issue iid="CA01C2FE2A75E8E8C1746C81ABF7152F" ruleID="8FF9A602-1DDF-491F-B2D5-55A5B15C60C7">
                            <Category>Password Management: Password in Configuration File</Category>
                            <Folder>High</Folder>
                            <Kingdom>Environment</Kingdom>
                            <Abstract>Storing a plain text password in a configuration file may result in a system compromise.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>EmployeesData.xml</FileName>
<FilePath>WebContent/lessons/XPATHInjection/EmployeesData.xml</FilePath>
<LineStart>12</LineStart>
<Snippet>		&lt;loginID&gt;John&lt;/loginID&gt;
		&lt;accountno&gt;63458&lt;/accountno&gt;
		&lt;passwd&gt;myownpass&lt;/passwd&gt;
		&lt;salary&gt;559833&lt;/salary&gt;
	&lt;/employee&gt;</Snippet>
                            </Primary>
                        </Issue>
                        <Issue iid="9FB9464427B3254DC3A928611157C9C2" ruleID="9F6CA34F-B0C3-47E2-B679-17B0B1730C57">
                            <Category>Password Management: Password in Configuration File</Category>
                            <Folder>High</Folder>
                            <Kingdom>Environment</Kingdom>
                            <Abstract>Storing a plain text password in a configuration file may result in a system compromise.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>server-config.wsdd</FileName>
<FilePath>WebContent/WEB-INF/server-config.wsdd</FilePath>
<LineStart>6</LineStart>
<Snippet>  &lt;parameter name="sendMultiRefs" value="true"/&gt;
  &lt;parameter name="disablePrettyXML" value="true"/&gt;
  &lt;parameter name="adminPassword" value="admin"/&gt;
&lt;!--
  &lt;parameter name="attachments.Directory" value="C:\webgoat\tomcat\webapps\WebGoat\WEB-INF\attachments"/&gt;</Snippet>
                            </Primary>
                        </Issue>
                        <Issue iid="389F6E68A2C3DFF3011346362DAC7F4B" ruleID="26FA1D1C-C9AE-4D45-9D0D-2972534ECDCE">
                            <Category>Password Management: Password in Configuration File</Category>
                            <Folder>High</Folder>
                            <Kingdom>Environment</Kingdom>
                            <Abstract>Storing a plain text password in a configuration file may result in a system compromise.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>build.xml</FileName>
<FilePath>build.xml</FilePath>
<LineStart>85</LineStart>
<Snippet>  &lt;property name="manager.url"   		   value="http://localhost/manager"/&gt;
  &lt;property name="manager.username"   	   value="admin"/&gt; 			&lt;!-- UPDATE THIS! --&gt;
  &lt;property name="manager.password"   	   value="admin"/&gt; 			&lt;!-- UPDATE THIS! --&gt;
  &lt;property name="src.home"     		   value="${basedir}/JavaSource"/&gt;
  &lt;property name="web.home"      		   value="${basedir}/WebContent"/&gt;</Snippet>
                            </Primary>
                        </Issue>
                        <Issue iid="CA01C2FE2A75E8E8C1746C81ABF71530" ruleID="8FF9A602-1DDF-491F-B2D5-55A5B15C60C7">
                            <Category>Password Management: Password in Configuration File</Category>
                            <Folder>High</Folder>
                            <Kingdom>Environment</Kingdom>
                            <Abstract>Storing a plain text password in a configuration file may result in a system compromise.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>EmployeesData.xml</FileName>
<FilePath>WebContent/lessons/XPATHInjection/EmployeesData.xml</FilePath>
<LineStart>18</LineStart>
<Snippet>		&lt;loginID&gt;Sarah&lt;/loginID&gt;
		&lt;accountno&gt;23363&lt;/accountno&gt;
		&lt;passwd&gt;secret&lt;/passwd&gt;
		&lt;salary&gt;84000&lt;/salary&gt;
	&lt;/employee&gt;</Snippet>
                            </Primary>
                        </Issue>
                    </GroupingSection>
                    <GroupingSection count="5">
                        <groupTitle>Poor Style: Value Never Read</groupTitle>
                        <MajorAttributeSummary>
                            <MetaInfo>
<Name>Abstract</Name>
<Value>The method createContent() in CommandInjection.java never uses the value it assigns to the variable safeDirName on line 134.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Explanation</Name>
<Value>This variable's value is not used. After the assignment, the variable is either assigned another value or goes out of scope.

Example: The following code excerpt assigns to the variable r and then overwrites the value without using it.


  r = getName();
  r = getNewBuffer(buf);
</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Recommendations</Name>
<Value>Remove unnecessary assignments in order to make the code easier to understand and maintain.</Value>
                            </MetaInfo>
                            <AttributeValue>
<Name>&lt;Unaudited&gt;</Name>
<Count>5</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not an Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Reliability Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Bad Practice</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Suspicious</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Exploitable</Name>
<Count>0</Count>
                            </AttributeValue>
                        </MajorAttributeSummary>
                        <Issue iid="3589513556962CA5B7033D627DFC6F69" ruleID="B30AA17C-87EC-42CF-9160-CFDF122CE28E">
                            <Category>Poor Style: Value Never Read</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>The method changeEmployeeProfile() in UpdateProfile.java never uses the value it assigns to the variable answer_results on line 176.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>UpdateProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/UpdateProfile.java</FilePath>
<LineStart>176</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
	    }
	    catch (SQLException sqle)</Snippet>
<TargetFunction>VariableAccess: answer_results</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="07F7DA7F90EDF740177EC49092EF53A0" ruleID="B30AA17C-87EC-42CF-9160-CFDF122CE28E">
                            <Category>Poor Style: Value Never Read</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>The method foundEmployee() in FindProfile.java never uses the value it assigns to the variable id on line 114.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>FindProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/FindProfile.java</FilePath>
<LineStart>114</LineStart>
<Snippet>	try
	{
	    int id = getIntRequestAttribute(s, getLessonName() + "."
		    + RoleBasedAccessControl.EMPLOYEE_ID);
	    found = true;</Snippet>
<TargetFunction>VariableAccess: id</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="9D3A0C6D941E4174742B122658EFFFAC" ruleID="B30AA17C-87EC-42CF-9160-CFDF122CE28E">
                            <Category>Poor Style: Value Never Read</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>The method createContent() in CommandInjection.java never uses the value it assigns to the variable safeDirName on line 134.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>CommandInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CommandInjection.java</FilePath>
<LineStart>134</LineStart>
<Snippet>		    {
			// FIXME: This value isn't used.  What is the goal here?
			safeDirName = s.getContext().getRealPath("/")
				+ helpFile;
			illegalCommand = false;</Snippet>
<TargetFunction>VariableAccess: safeDirName</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="6371BA0B05E6E046D8A0DB0FAE2353E0" ruleID="B30AA17C-87EC-42CF-9160-CFDF122CE28E">
                            <Category>Poor Style: Value Never Read</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>The method accessWGService() in WSDLScanning.java never uses the value it assigns to the variable targetNamespace on line 136.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>WSDLScanning.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/WSDLScanning.java</FilePath>
<LineStart>136</LineStart>
<Snippet>	    String parameterName, Object parameterValue)
    {
	String targetNamespace = "WebGoat";
	try
	{</Snippet>
<TargetFunction>VariableAccess: targetNamespace</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="71FBEAAC863905D25E0B749F71EC1625" ruleID="B30AA17C-87EC-42CF-9160-CFDF122CE28E">
                            <Category>Poor Style: Value Never Read</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>The method changeEmployeeProfile_BACKUP() in UpdateProfile.java never uses the value it assigns to the variable answer_results on line 225.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>UpdateProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/UpdateProfile.java</FilePath>
<LineStart>225</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
	    }
	    catch (SQLException sqle)</Snippet>
<TargetFunction>VariableAccess: answer_results</TargetFunction>
                            </Primary>
                        </Issue>
                    </GroupingSection>
                    <GroupingSection count="4">
                        <groupTitle>Code Correctness: Erroneous String Compare</groupTitle>
                        <MajorAttributeSummary>
                            <MetaInfo>
<Name>Abstract</Name>
<Value>The method checkParams() in WeakAuthenticationCookie.java should compare strings with the equals() method, not == or !=.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Explanation</Name>
<Value>This program uses == or != to compare two strings for equality, which compares two objects for equality, not their values. Chances are good that the two references will never be equal.

Example 1: The following branch will never be taken.


  if (args[0] == STRING_CONSTANT) {
      logger.info("miracle");
  }


The == and != operators will only behave as expected when they are used to compare strings contained in objects that are equal. The most common way for this to occur is for the strings to be interned, whereby the strings are added to a pool of objects maintained by the String class. Once a string is interned, all uses of that string will use the same object and equality operators will behave as expected. All string literals and string-valued constants are interned automatically. Other strings can be interned manually be calling String.intern(), which will return a canonical instance of the current string, creating one if necessary.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Recommendations</Name>
<Value>Use equals() to compare strings.

Example 2: The code in Example 1 could be rewritten in the following way:


  if (STRING_CONSTANT.equals(args[0])) {
      logger.info("could happen");
  }
</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Tips</Name>
<Value>1. Developers will sometimes compare strings for reference equality in order to "avoid the inefficiency" of calling equals() right off the bat:


 if (args[0] == STRING_CONSTANT) {
    doWork(args[0]);
 } else if (STRING_CONSTANT.equals(args[0])) {
    doWork(args[0]);
 }


In many circumstances this small performance gain comes at the cost of duplicated or convoluted code. Because String.equals() performs a == comparison before doing any deeper evaluation, the performance benefits of using == instead of String.equals() are limited to the overhead of performing a method call and are likely to be negligible in most environments.
Do a performance comparison for your program.</Value>
                            </MetaInfo>
                            <AttributeValue>
<Name>&lt;Unaudited&gt;</Name>
<Count>4</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not an Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Reliability Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Bad Practice</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Suspicious</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Exploitable</Name>
<Count>0</Count>
                            </AttributeValue>
                        </MajorAttributeSummary>
                        <Issue iid="73A1972FEC2D7272E695B74CCEC7B6C5" ruleID="3B074389-826B-4DDA-9FEF-05ECD125D1FC">
                            <Category>Code Correctness: Erroneous String Compare</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>The method checkParams() in WeakAuthenticationCookie.java should compare strings with the equals() method, not == or !=.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>WeakAuthenticationCookie.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/WeakAuthenticationCookie.java</FilePath>
<LineStart>142</LineStart>
<Snippet>	    }

	    if (loginID != "")
	    {
		Cookie newCookie = new Cookie(AUTHCOOKIE, loginID);</Snippet>
<TargetFunction>Operation()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="D6987C4FB82223C3D9994B1B932BA4A0" ruleID="3B074389-826B-4DDA-9FEF-05ECD125D1FC">
                            <Category>Code Correctness: Erroneous String Compare</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>The method createContent() in XMLInjection.java should compare strings with the equals() method, not == or !=.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>XMLInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/XMLInjection.java</FilePath>
<LineStart>282</LineStart>
<Snippet>	if (s.getParser().getRawParameter("SUBMIT", "") != "")
	{
	    if (s.getParser().getRawParameter("check1004", "") != "")
	    {
		makeSuccess(s);</Snippet>
<TargetFunction>Operation()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="F4771E926F22B246FB183A24C87DBE10" ruleID="3B074389-826B-4DDA-9FEF-05ECD125D1FC">
                            <Category>Code Correctness: Erroneous String Compare</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>The method createContent() in XMLInjection.java should compare strings with the equals() method, not == or !=.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>XMLInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/XMLInjection.java</FilePath>
<LineStart>280</LineStart>
<Snippet>	ec.addElement(b);

	if (s.getParser().getRawParameter("SUBMIT", "") != "")
	{
	    if (s.getParser().getRawParameter("check1004", "") != "")</Snippet>
<TargetFunction>Operation()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="BC03C8F1B56B9F2376C34ADF9C551E44" ruleID="3B074389-826B-4DDA-9FEF-05ECD125D1FC">
                            <Category>Code Correctness: Erroneous String Compare</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>The method createContent() in XMLInjection.java should compare strings with the equals() method, not == or !=.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>XMLInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/XMLInjection.java</FilePath>
<LineStart>292</LineStart>
<Snippet>		{

		    if (s.getParser().getRawParameter("check" + i, "") != "")
		    {
			shipment.append(((Reward) rewardsMap.get(i)).getName()</Snippet>
<TargetFunction>Operation()</TargetFunction>
                            </Primary>
                        </Issue>
                    </GroupingSection>
                    <GroupingSection count="4">
                        <groupTitle>J2EE Bad Practices: Leftover Debug Code</groupTitle>
                        <MajorAttributeSummary>
                            <MetaInfo>
<Name>Abstract</Name>
<Value>The class Encoding contains debug code, which can create unintended entry points in a deployed web application.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Explanation</Name>
<Value>A common development practice is to add "back door" code specifically designed for debugging or testing purposes that is not intended to be shipped or deployed with the application. When this sort of debug code is accidentally left in the application, the application is open to unintended modes of interaction. These back door entry points create security risks because they are not considered during design or testing and fall outside of the expected operating conditions of the application.

The most common example of forgotten debug code is a main() method appearing in a web application. Although this is an acceptable practice during product development, classes that are part of a production J2EE application should not define a main().</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Recommendations</Name>
<Value>Remove debug code before deploying a production version of an application. Regardless of whether a direct security threat can be articulated, it is unlikely that there is a legitimate reason for such code to remain in the application after the early stages of development.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Tips</Name>
<Value>1. The presence of a main() method may represent the tip of an iceberg. When you find a main(), look for other indications that developers were rushed or otherwise not able to conclude their efforts normally.

2. If you are auditing a non-J2EE Java application, the J2EE Bad Practices category might not apply to your environment. If this is the case, you can use Audit Guide to suppress these issues.</Value>
                            </MetaInfo>
                            <AttributeValue>
<Name>&lt;Unaudited&gt;</Name>
<Count>4</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not an Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Reliability Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Bad Practice</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Suspicious</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Exploitable</Name>
<Count>0</Count>
                            </AttributeValue>
                        </MajorAttributeSummary>
                        <Issue iid="4C617F5E1017A5616DA20C1873DA1A59" ruleID="625EEE1F-464F-42DC-85D6-269A637EF747">
                            <Category>J2EE Bad Practices: Leftover Debug Code</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The class CreateDB contains debug code, which can create unintended entry points in a deployed web application.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>CreateDB.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/CreateDB.java</FilePath>
<LineStart>50</LineStart>
<Snippet>     * @param args The command line arguments
     */
    public static void main(String[] args)
    {
</Snippet>
<TargetFunction>Function: main()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="39935F5497EC906A3A07B9EA4DB66A0C" ruleID="625EEE1F-464F-42DC-85D6-269A637EF747">
                            <Category>J2EE Bad Practices: Leftover Debug Code</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The class Exec contains debug code, which can create unintended entry points in a deployed web application.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Exec.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/util/Exec.java</FilePath>
<LineStart>502</LineStart>
<Snippet>     * @param  args  The command line arguments
     */
    public static void main(String[] args)
    {
	ExecResults results;</Snippet>
<TargetFunction>Function: main()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="6DE0722B567CE1995B714A6C99B27D45" ruleID="625EEE1F-464F-42DC-85D6-269A637EF747">
                            <Category>J2EE Bad Practices: Leftover Debug Code</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The class WebgoatProperties contains debug code, which can create unintended entry points in a deployed web application.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>WebgoatProperties.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/WebgoatProperties.java</FilePath>
<LineStart>112</LineStart>
<Snippet>

    public static void main(String[] args)
    {
	WebgoatProperties properties = null;</Snippet>
<TargetFunction>Function: main()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="47D0E56CF6C0BE005EB528F440C796D2" ruleID="625EEE1F-464F-42DC-85D6-269A637EF747">
                            <Category>J2EE Bad Practices: Leftover Debug Code</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>The class Encoding contains debug code, which can create unintended entry points in a deployed web application.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Encoding.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/Encoding.java</FilePath>
<LineStart>739</LineStart>
<Snippet>	 * @param  args  The command line arguments
	 */

	public static void main( String[] args )
	{</Snippet>
<TargetFunction>Function: main()</TargetFunction>
                            </Primary>
                        </Issue>
                    </GroupingSection>
                    <GroupingSection count="4">
                        <groupTitle>Poor Style: Redundant Initialization</groupTitle>
                        <MajorAttributeSummary>
                            <MetaInfo>
<Name>Abstract</Name>
<Value>The method createContent() in ReflectedXSS.java never uses the initial value it assigns to the variable quantity on line 77.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Explanation</Name>
<Value>This variable's initial value is not used. After initialization, the variable is either assigned another value or goes out of scope.

Example: The following code excerpt assigns to the variable r and then overwrites the value without using it.


  int r = getNum();
  r = getNewNum(buf);
</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Recommendations</Name>
<Value>Remove unnecessary assignments in order to make the code easier to understand and maintain.</Value>
                            </MetaInfo>
                            <AttributeValue>
<Name>&lt;Unaudited&gt;</Name>
<Count>4</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not an Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Reliability Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Bad Practice</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Suspicious</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Exploitable</Name>
<Count>0</Count>
                            </AttributeValue>
                        </MajorAttributeSummary>
                        <Issue iid="F8C627B24DCDDD52DABCB52D9DFA549B" ruleID="A984452A-DD31-47C9-83A6-76F5EA13133F">
                            <Category>Poor Style: Redundant Initialization</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>The method createContent() in TraceXSS.java never uses the initial value it assigns to the variable quantity on line 77.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>TraceXSS.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/TraceXSS.java</FilePath>
<LineStart>77</LineStart>
<Snippet>	    String param2 = HtmlEncoder.encode(s.getParser().getRawParameter(
		    "field2", "4128 3214 0002 1999"));
	    float quantity = 1.0f;
	    float total = 0.0f;
	    float runningTotal = 0.0f;</Snippet>
<TargetFunction>VariableAccess: quantity</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="FF1207EB0E32FB47AE0B6A2DD090D7A8" ruleID="A984452A-DD31-47C9-83A6-76F5EA13133F">
                            <Category>Poor Style: Redundant Initialization</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>The method createContent() in ReflectedXSS.java never uses the initial value it assigns to the variable quantity on line 77.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ReflectedXSS.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/ReflectedXSS.java</FilePath>
<LineStart>77</LineStart>
<Snippet>	    String param2 = HtmlEncoder.encode(s.getParser().getRawParameter(
		    "field2", "4128 3214 0002 1999"));
	    float quantity = 1.0f;
	    float total = 0.0f;
	    float runningTotal = 0.0f;</Snippet>
<TargetFunction>VariableAccess: quantity</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="4118B2A42B08129A735C2E31A9B7F96A" ruleID="A984452A-DD31-47C9-83A6-76F5EA13133F">
                            <Category>Poor Style: Redundant Initialization</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>The method createContent() in TraceXSS.java never uses the initial value it assigns to the variable total on line 78.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>TraceXSS.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/TraceXSS.java</FilePath>
<LineStart>78</LineStart>
<Snippet>		    "field2", "4128 3214 0002 1999"));
	    float quantity = 1.0f;
	    float total = 0.0f;
	    float runningTotal = 0.0f;
</Snippet>
<TargetFunction>VariableAccess: total</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="19225B5C67375D96F7D4C4E2C9E273ED" ruleID="A984452A-DD31-47C9-83A6-76F5EA13133F">
                            <Category>Poor Style: Redundant Initialization</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>The method createContent() in ReflectedXSS.java never uses the initial value it assigns to the variable total on line 78.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ReflectedXSS.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/ReflectedXSS.java</FilePath>
<LineStart>78</LineStart>
<Snippet>		    "field2", "4128 3214 0002 1999"));
	    float quantity = 1.0f;
	    float total = 0.0f;
	    float runningTotal = 0.0f;
</Snippet>
<TargetFunction>VariableAccess: total</TargetFunction>
                            </Primary>
                        </Issue>
                    </GroupingSection>
                    <GroupingSection count="4">
                        <groupTitle>Weak Cryptographic Hash: Insecure PBE Iteration Count</groupTitle>
                        <MajorAttributeSummary>
                            <MetaInfo>
<Name>Abstract</Name>
<Value>The iteration count used by a password-based key derivation function is too low.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Explanation</Name>
<Value>A key derivation function is used to derive a key from a base key and other parameters. In a password-based key derivation function, the base key is a password and the other parameters are a salt value and an iteration count. An iteration count has traditionally served the purpose of increasing the cost of generating keys from a password. If the iteration count is too low, the feasibility of an attack increases as an attacker can compute "rainbow tables" for the application and more easily determine the hashed password values.



Example 1: The following code uses an iteration count of 50:


...
final int iterationCount=50;
PBEParameterSpec pbeps=new PBEParameterSpec(salt,iterationCount);
...


Applications that use a low iteration count for password-based encryption are vulnerable to trivial dictionary-based attacks -- exactly the type of attack that password-based encryption schemes were designed to protect against.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Recommendations</Name>
<Value>When using password-based key derivation functions, the iteration should be at least 1000, but ideally 100,000 or greater. An iteration count of 1000 will significantly increase the cost of an exhaustive search for passwords without a noticeable impact on the cost of deriving individual keys. NIST SP 800-132 recommends using an iteration count as high as 10,000,000 for critical keys or very powerful systems.
The Fortify Secure Coding Rulepacks will report a more severe issue for use of fewer than 1000 iterations, and will report a lower severity issue for use of an iteration count from 1000 to 100,000. If your source code is using 100,000 or more iterations, then no issue will be reported.

Example 2: The following code uses an iteration count of 100,000:


...
final int iterationCount=100000;
PBEParameterSpec pbeps=new PBEParameterSpec(salt,iterationCount);
...
</Value>
                            </MetaInfo>
                            <AttributeValue>
<Name>&lt;Unaudited&gt;</Name>
<Count>4</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not an Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Reliability Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Bad Practice</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Suspicious</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Exploitable</Name>
<Count>0</Count>
                            </AttributeValue>
                        </MajorAttributeSummary>
                        <Issue iid="CCDBEBDCA8529B6562555BA1325C6E08" ruleID="E2CD26BB-EEF7-4D13-91CC-2F22278FE7C3">
                            <Category>Weak Cryptographic Hash: Insecure PBE Iteration Count</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>The iteration count used by a password-based key derivation function is too low.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>Encoding.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/Encoding.java</FilePath>
<LineStart>495</LineStart>
<Snippet>			char[] pass = pw.toCharArray();

			SecretKey k = kf.generateSecret( new javax.crypto.spec.PBEKeySpec( pass ) );

			passwordDecryptCipher.init( Cipher.DECRYPT_MODE, k, ps );</Snippet>
<TargetFunction>PBEKeySpec()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="3F04FAE769A4DDF255BE805DC7914D4B" ruleID="E36939CF-1ED1-447A-9FE2-F67BEA4386E6">
                            <Category>Weak Cryptographic Hash: Insecure PBE Iteration Count</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>The iteration count used by a password-based key derivation function is too low.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>Encoding.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/Encoding.java</FilePath>
<LineStart>531</LineStart>
<Snippet>		{

			PBEParameterSpec ps = new javax.crypto.spec.PBEParameterSpec( salt, 20 );

			SecretKeyFactory kf = SecretKeyFactory.getInstance( "PBEWithMD5AndDES" );</Snippet>
<TargetFunction>PBEParameterSpec()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="76F83F7F586982395D3369DC6BF4F293" ruleID="E36939CF-1ED1-447A-9FE2-F67BEA4386E6">
                            <Category>Weak Cryptographic Hash: Insecure PBE Iteration Count</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>The iteration count used by a password-based key derivation function is too low.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>Encoding.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/Encoding.java</FilePath>
<LineStart>487</LineStart>
<Snippet>		{

			PBEParameterSpec ps = new javax.crypto.spec.PBEParameterSpec( salt, 20 );

			SecretKeyFactory kf = SecretKeyFactory.getInstance( "PBEWithMD5AndDES" );</Snippet>
<TargetFunction>PBEParameterSpec()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="34816573F2EED5813D3AC2F5DC458AD8" ruleID="E2CD26BB-EEF7-4D13-91CC-2F22278FE7C3">
                            <Category>Weak Cryptographic Hash: Insecure PBE Iteration Count</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>The iteration count used by a password-based key derivation function is too low.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>Encoding.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/Encoding.java</FilePath>
<LineStart>539</LineStart>
<Snippet>			char[] pass = pw.toCharArray();

			SecretKey k = kf.generateSecret( new javax.crypto.spec.PBEKeySpec( pass ) );

			passwordEncryptCipher.init( Cipher.ENCRYPT_MODE, k, ps );</Snippet>
<TargetFunction>PBEKeySpec()</TargetFunction>
                            </Primary>
                        </Issue>
                    </GroupingSection>
                    <GroupingSection count="4">
                        <groupTitle>Weak Encryption</groupTitle>
                        <MajorAttributeSummary>
                            <MetaInfo>
<Name>Abstract</Name>
<Value>The call to getInstance() at Encoding.java line 489 uses a weak encryption algorithm that cannot guarantee the confidentiality of sensitive data.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Explanation</Name>
<Value>Antiquated encryption algorithms such as DES no longer provide sufficient protection for use with sensitive data. Encryption algorithms rely on key size as one of the primary mechanisms to ensure cryptographic strength. Cryptographic strength is often measured by the time and computational power needed to generate a valid key. Advances in computing power have made it possible to obtain small encryption keys in a reasonable amount of time. For example, the 56-bit key used in DES posed a significant computational hurdle in the 1970s when the algorithm was first developed, but today DES can be cracked in less than a day using commonly available equipment.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Recommendations</Name>
<Value>Use strong encryption algorithms with large key sizes to protect sensitive data. A strong alternative to DES is AES (Advanced Encryption Standard, formerly Rijndael). Before selecting an algorithm, first determine if your organization has standardized on a specific algorithm and implementation.</Value>
                            </MetaInfo>
                            <AttributeValue>
<Name>&lt;Unaudited&gt;</Name>
<Count>4</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not an Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Reliability Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Bad Practice</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Suspicious</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Exploitable</Name>
<Count>0</Count>
                            </AttributeValue>
                        </MajorAttributeSummary>
                        <Issue iid="348DE279CA4677D539557F0772DC215F" ruleID="925A2CD9-F518-4500-B94C-34126420D183">
                            <Category>Weak Encryption</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>The call to getInstance() at Encoding.java line 491 uses a weak encryption algorithm that cannot guarantee the confidentiality of sensitive data.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>Encoding.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/Encoding.java</FilePath>
<LineStart>491</LineStart>
<Snippet>			SecretKeyFactory kf = SecretKeyFactory.getInstance( "PBEWithMD5AndDES" );

			Cipher passwordDecryptCipher = Cipher.getInstance( "PBEWithMD5AndDES/CBC/PKCS5Padding" );

			char[] pass = pw.toCharArray();</Snippet>
<TargetFunction>getInstance()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="1D385E28C2D8A9E9F68F0AB8888B5EDF" ruleID="4FCC2666-0044-495B-AFBE-CE1160414EEB">
                            <Category>Weak Encryption</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>The call to getInstance() at Encoding.java line 489 uses a weak encryption algorithm that cannot guarantee the confidentiality of sensitive data.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>Encoding.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/Encoding.java</FilePath>
<LineStart>489</LineStart>
<Snippet>			PBEParameterSpec ps = new javax.crypto.spec.PBEParameterSpec( salt, 20 );

			SecretKeyFactory kf = SecretKeyFactory.getInstance( "PBEWithMD5AndDES" );

			Cipher passwordDecryptCipher = Cipher.getInstance( "PBEWithMD5AndDES/CBC/PKCS5Padding" );</Snippet>
<TargetFunction>getInstance()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="8703C5DCE8BC7D1128B656E2516864AA" ruleID="925A2CD9-F518-4500-B94C-34126420D183">
                            <Category>Weak Encryption</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>The call to getInstance() at Encoding.java line 535 uses a weak encryption algorithm that cannot guarantee the confidentiality of sensitive data.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>Encoding.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/Encoding.java</FilePath>
<LineStart>535</LineStart>
<Snippet>			SecretKeyFactory kf = SecretKeyFactory.getInstance( "PBEWithMD5AndDES" );

			Cipher passwordEncryptCipher = Cipher.getInstance( "PBEWithMD5AndDES/CBC/PKCS5Padding" );

			char[] pass = pw.toCharArray();</Snippet>
<TargetFunction>getInstance()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="80F4A07EEEB4A2FFE6B25E72C01862B9" ruleID="4FCC2666-0044-495B-AFBE-CE1160414EEB">
                            <Category>Weak Encryption</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>The call to getInstance() at Encoding.java line 533 uses a weak encryption algorithm that cannot guarantee the confidentiality of sensitive data.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>Encoding.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/Encoding.java</FilePath>
<LineStart>533</LineStart>
<Snippet>			PBEParameterSpec ps = new javax.crypto.spec.PBEParameterSpec( salt, 20 );

			SecretKeyFactory kf = SecretKeyFactory.getInstance( "PBEWithMD5AndDES" );

			Cipher passwordEncryptCipher = Cipher.getInstance( "PBEWithMD5AndDES/CBC/PKCS5Padding" );</Snippet>
<TargetFunction>getInstance()</TargetFunction>
                            </Primary>
                        </Issue>
                    </GroupingSection>
                    <GroupingSection count="3">
                        <groupTitle>Dead Code: Expression is Always false</groupTitle>
                        <MajorAttributeSummary>
                            <MetaInfo>
<Name>Abstract</Name>
<Value>The expression at Exec.java line 111 will always evaluate to false.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Explanation</Name>
<Value>This expression will always evaluate to false; the program could be rewritten in a simpler form. The nearby code may be present for debugging purposes, or it may not have been maintained along with the rest of the program. The expression may also be indicative of a bug earlier in the method.

Example 1: The following method never sets the variable secondCall after initializing it to false. (The variable firstCall is mistakenly used twice.)  The result is that the expression firstCall &amp;&amp; secondCall will always evaluate to false, so setUpDualCall() will never be invoked.


public void setUpCalls() {
  boolean firstCall = false;
  boolean secondCall = false;

  if (fCall &gt; 0) {
    setUpFCall();
    firstCall = true;
  }
  if (sCall &gt; 0) {
    setUpSCall();
    firstCall = true;
  }

  if (firstCall &amp;&amp; secondCall) {
    setUpDualCall();
  }
}


Example 2: The following method never sets the variable firstCall to true. (The variable firstCall is mistakenly set to false after the first conditional statement.)  The result is that the first part of the expression firstCall &amp;&amp; secondCall will always evaluate to false.


public void setUpCalls() {
  boolean firstCall = false;
  boolean secondCall = false;

  if (fCall &gt; 0) {
    setUpFCall();
    firstCall = false;
  }
  if (sCall &gt; 0) {
    setUpSCall();
    secondCall = true;
  }

  if (firstCall &amp;&amp; secondCall) {
    setUpForCall();
  }
}
</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Recommendations</Name>
<Value>In general, you should repair or remove unused code. It causes additional complexity and maintenance burden without contributing to the functionality of the program.</Value>
                            </MetaInfo>
                            <AttributeValue>
<Name>&lt;Unaudited&gt;</Name>
<Count>3</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not an Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Reliability Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Bad Practice</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Suspicious</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Exploitable</Name>
<Count>0</Count>
                            </AttributeValue>
                        </MajorAttributeSummary>
                        <Issue iid="E436EAD2DEBF7552C75CE00B65F90F49" ruleID="0E2798F4-EFFE-4390-A6F5-FFBD9DC071B8">
                            <Category>Dead Code: Expression is Always false</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>The expression at Exec.java line 111 will always evaluate to false.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Exec.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/util/Exec.java</FilePath>
<LineStart>111</LineStart>
<Snippet>
	    // start the clock running
	    if (timeout &gt; 0)
	    {
		watcher = new ThreadWatcher(child, interrupted, timeout);</Snippet>
<TargetFunction>IfStatement()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="7B1E951C4D673C4D0FBD72A921D46345" ruleID="0E2798F4-EFFE-4390-A6F5-FFBD9DC071B8">
                            <Category>Dead Code: Expression is Always false</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>The expression at Exec.java line 202 will always evaluate to false.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Exec.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/util/Exec.java</FilePath>
<LineStart>202</LineStart>
<Snippet>		    output.write(c);

		    if (lazy &amp;&amp; (processError.available() &lt; 1))
		    {
			lazyQuit = true;</Snippet>
<TargetFunction>IfStatement()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="7B1E951C4D673C4D0FBD72A921D46344" ruleID="0E2798F4-EFFE-4390-A6F5-FFBD9DC071B8">
                            <Category>Dead Code: Expression is Always false</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>The expression at Exec.java line 156 will always evaluate to false.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Exec.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/util/Exec.java</FilePath>
<LineStart>156</LineStart>
<Snippet>		    output.write(c);

		    if (lazy &amp;&amp; (processIn.available() &lt; 1))
		    {
			lazyQuit = true;</Snippet>
<TargetFunction>IfStatement()</TargetFunction>
                            </Primary>
                        </Issue>
                    </GroupingSection>
                    <GroupingSection count="3">
                        <groupTitle>J2EE Misconfiguration: Missing Error Handling</groupTitle>
                        <MajorAttributeSummary>
                            <MetaInfo>
<Name>Abstract</Name>
<Value>A web application must define default error pages in order to prevent attackers from mining information from the application container's built-in error response.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Explanation</Name>
<Value>When an attacker explores a web site looking for vulnerabilities, the amount of information that the site provides is crucial to the eventual success or failure of any attempted attacks. If the application shows the attacker a stack trace, it relinquishes information that makes the attacker's job significantly easier. For example, a stack trace might show the attacker a malformed SQL query string, the type of database being used, and the version of the application container. This information enables the attacker to target known vulnerabilities in these components.

The application configuration should specify a default error page in order to guarantee that the application will never leak error messages to an attacker. Handling standard HTTP error codes is useful and user-friendly in addition to being a good security practice, and a good configuration will also define a last-chance error handler that catches any exception that could possibly be thrown by the application.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Recommendations</Name>
<Value>A web application must be configured with a default error page. Your web.xml should include at least the following entries:


&lt;error-page&gt;
   &lt;exception-type&gt;java.lang.Throwable&lt;/exception-type&gt;
&lt;location&gt;/error.jsp&lt;/location&gt;
&lt;/error-page&gt;
&lt;error-page&gt;
   &lt;error-code&gt;404&lt;/error-code&gt;
&lt;location&gt;/error.jsp&lt;/location&gt;
&lt;/error-page&gt;
&lt;error-page&gt;
   &lt;error-code&gt;500&lt;/error-code&gt;
&lt;location&gt;/error.jsp&lt;/location&gt;
&lt;/error-page&gt;
</Value>
                            </MetaInfo>
                            <AttributeValue>
<Name>&lt;Unaudited&gt;</Name>
<Count>3</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not an Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Reliability Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Bad Practice</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Suspicious</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Exploitable</Name>
<Count>0</Count>
                            </AttributeValue>
                        </MajorAttributeSummary>
                        <Issue iid="A4F1C9B64A6151C8466143432EBAA61B" ruleID="749BCC9F-FE61-4DC0-9EF2-5EF1872C7717">
                            <Category>J2EE Misconfiguration: Missing Error Handling</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Environment</Kingdom>
                            <Abstract>A web application must define default error pages in order to prevent attackers from mining information from the application container's built-in error response.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>web-windows.xml</FileName>
<FilePath>WebContent/WEB-INF/web-windows.xml</FilePath>
<LineStart>6</LineStart>
<Snippet>    "http://java.sun.com/dtd/web-app_2_3.dtd"&gt;

&lt;web-app&gt;

    &lt;!-- General description of your web application --&gt;</Snippet>
<TargetFunction>/web-app()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="399A248E35AE0FBB04255DE45FA9754C" ruleID="749BCC9F-FE61-4DC0-9EF2-5EF1872C7717">
                            <Category>J2EE Misconfiguration: Missing Error Handling</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Environment</Kingdom>
                            <Abstract>A web application must define default error pages in order to prevent attackers from mining information from the application container's built-in error response.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>web.xml</FileName>
<FilePath>WebContent/WEB-INF/web.xml</FilePath>
<LineStart>6</LineStart>
<Snippet>    "http://java.sun.com/dtd/web-app_2_3.dtd"&gt;

&lt;web-app&gt;

    &lt;!-- General description of your web application --&gt;</Snippet>
<TargetFunction>/web-app()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="88F4D7D5D6180F7BCFE26DFEB49ADCA4" ruleID="749BCC9F-FE61-4DC0-9EF2-5EF1872C7717">
                            <Category>J2EE Misconfiguration: Missing Error Handling</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Environment</Kingdom>
                            <Abstract>A web application must define default error pages in order to prevent attackers from mining information from the application container's built-in error response.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>web-unix.xml</FileName>
<FilePath>WebContent/WEB-INF/web-unix.xml</FilePath>
<LineStart>6</LineStart>
<Snippet>    "http://java.sun.com/dtd/web-app_2_3.dtd"&gt;

&lt;web-app&gt;

    &lt;!-- General description of your web application --&gt;</Snippet>
<TargetFunction>/web-app()</TargetFunction>
                            </Primary>
                        </Issue>
                    </GroupingSection>
                    <GroupingSection count="3">
                        <groupTitle>Privacy Violation: Autocomplete</groupTitle>
                        <MajorAttributeSummary>
                            <MetaInfo>
<Name>Abstract</Name>
<Value>The form in Login.jsp uses autocompletion on line 31, which allows some browsers to retain sensitive information in their history.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Explanation</Name>
<Value>With autocompletion enabled, some browsers retain user input across sessions, which could allow someone using the computer after the initial user to see information previously submitted.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Recommendations</Name>
<Value>Explicitly disable autocompletion on forms or sensitive inputs. By disabling autocompletion, information previously entered will not be presented back to the user as they type. It will also disable the "remember my password" functionality of most major browsers.

Example 1: In an  HTML form, disable autocompletion for all input fields by explicitly setting the value of the autocomplete attribute to off on the form tag.


  &lt;form method="post" autocomplete="off"&gt;
        Address: &lt;input name="address" /&gt;
        Password: &lt;input name="password" type="password" /&gt;
  &lt;/form&gt;


Example 2: Alternatively, disable autocompletion for specific input fields by explicitly setting the value of the autocomplete attribute to off on the corresponding tags.


  &lt;form method="post"&gt;
        Address: &lt;input name="address" /&gt;
        Password: &lt;input name="password" type="password" autocomplete="off"/&gt;
  &lt;/form&gt;


Note that the default value of the autocomplete attributed is on. Therefore do not omit the attribute when dealing with sensitive inputs.</Value>
                            </MetaInfo>
                            <AttributeValue>
<Name>&lt;Unaudited&gt;</Name>
<Count>3</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not an Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Reliability Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Bad Practice</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Suspicious</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Exploitable</Name>
<Count>0</Count>
                            </AttributeValue>
                        </MajorAttributeSummary>
                        <Issue iid="64CBDEF734698ED2CFE22E8F71A0537B" ruleID="2FC7D1FF-11E4-468E-B7AB-F127828F4016">
                            <Category>Privacy Violation: Autocomplete</Category>
                            <Folder>High</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>The form in Login.jsp uses autocompletion on line 31, which allows some browsers to retain sensitive information in their history.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>Login.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/Login.jsp</FilePath>
<LineStart>31</LineStart>
<Snippet>				&lt;br&gt;
			    	&lt;label&gt;Password
			    		&lt;input name="password" type="password" size="10" maxlength="8" /&gt;
			    &lt;/label&gt;
				&lt;br&gt;</Snippet>
                            </Primary>
                        </Issue>
                        <Issue iid="64CBDEF734698ED2CFE22E8F71A0537C" ruleID="2FC7D1FF-11E4-468E-B7AB-F127828F4016">
                            <Category>Privacy Violation: Autocomplete</Category>
                            <Folder>High</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>The form in Login.jsp uses autocompletion on line 31, which allows some browsers to retain sensitive information in their history.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>Login.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/Login.jsp</FilePath>
<LineStart>31</LineStart>
<Snippet>				&lt;br&gt;
			    	&lt;label&gt;Password
			    		&lt;input name="password" type="password" size="10" maxlength="8" /&gt;
			    &lt;/label&gt;
				&lt;br&gt;</Snippet>
                            </Primary>
                        </Issue>
                        <Issue iid="64CBDEF734698ED2CFE22E8F71A0537A" ruleID="2FC7D1FF-11E4-468E-B7AB-F127828F4016">
                            <Category>Privacy Violation: Autocomplete</Category>
                            <Folder>High</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>The form in Login.jsp uses autocompletion on line 31, which allows some browsers to retain sensitive information in their history.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>Login.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/Login.jsp</FilePath>
<LineStart>31</LineStart>
<Snippet>				&lt;br&gt;
			    	&lt;label&gt;Password
			    		&lt;input name="password" type="password" size="10" maxlength="8" /&gt;
			    &lt;/label&gt;
				&lt;br&gt;</Snippet>
                            </Primary>
                        </Issue>
                    </GroupingSection>
                    <GroupingSection count="3">
                        <groupTitle>Redundant Null Check</groupTitle>
                        <MajorAttributeSummary>
                            <MetaInfo>
<Name>Abstract</Name>
<Value>The method createContent() in FailOpenAuthentication.java can crash the program by dereferencing a null-pointer on line 86.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Explanation</Name>
<Value>Null-pointer exceptions usually occur when one or more of the programmer's assumptions is violated. A check-after-dereference error occurs when a program dereferences an object that can be null before checking if the object is null.

Most null-pointer issues result in general software reliability problems, but if attackers can intentionally trigger a null-pointer dereference, they can use the resulting exception to bypass security logic or to cause the application to reveal debugging information that will be valuable in planning subsequent attacks.

Example: In the following code, the programmer assumes that the variable foo is not null and confirms this assumption by dereferencing the object. However, the programmer later contradicts the assumption by checking foo against null. If foo can be null when it is checked in the if statement then it can also be null when it is dereferenced and might cause a null-pointer exception. Either the dereference is unsafe or the subsequent check is unnecessary.


foo.setBar(val);
...
if (foo != null) {
	...
}
</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Recommendations</Name>
<Value>Implement careful checks before dereferencing objects that might be null. When possible, abstract null checks into wrappers around code that manipulates resources to ensure that they are applied in all cases and to minimize the places where mistakes can occur.</Value>
                            </MetaInfo>
                            <AttributeValue>
<Name>&lt;Unaudited&gt;</Name>
<Count>3</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not an Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Reliability Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Bad Practice</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Suspicious</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Exploitable</Name>
<Count>0</Count>
                            </AttributeValue>
                        </MajorAttributeSummary>
                        <Issue iid="987807EAE60CA92A96535EF3C959F28B" ruleID="771E5717-2B4D-64FC-9A63-E16701E24D0D">
                            <Category>Redundant Null Check</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>The method createContent() in FailOpenAuthentication.java can crash the program by dereferencing a null-pointer on line 104.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>FailOpenAuthentication.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/FailOpenAuthentication.java</FilePath>
<LineStart>104</LineStart>
<Snippet>		// username/password was entered when they first enter the lesson via the side menu.
		// This also suppresses the error if they just hit the login and both fields are empty.
		if (username.length() != 0)
		{
		    s.setMessage("Invalid username and password entered.");</Snippet>
<TargetFunction>Dereferenced : username()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="BC8C98608E9EB9F2AAD5C716652F0043" ruleID="03840C20-F22B-B900-B76E-63258B717C77">
                            <Category>Redundant Null Check</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>The method createContent() in FailOpenAuthentication.java can crash the program by dereferencing a null-pointer on line 86.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>FailOpenAuthentication.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/FailOpenAuthentication.java</FilePath>
<LineStart>86</LineStart>
<Snippet>	    {
		// The parameter was omitted. set fail open status complete
		if (username.length() &gt; 0
			&amp;&amp; e.getMessage().indexOf("not found") != -1)
		{</Snippet>
<TargetFunction>Dereferenced : username()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="A26B43E0B8AAAD5F57F50A634528CE5A" ruleID="03840C20-F22B-B900-B76E-63258B717C77">
                            <Category>Redundant Null Check</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>The method createContent() in PathBasedAccessControl.java can crash the program by dereferencing a null-pointer on line 110.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>PathBasedAccessControl.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/PathBasedAccessControl.java</FilePath>
<LineStart>110</LineStart>
<Snippet>		// allow them to look at any file in the webgoat hierachy.  Don't allow them
		// to look about the webgoat root, except to see the LICENSE file
		if (upDirCount(file) == 3 &amp;&amp; !file.endsWith("LICENSE"))
		{
		    s.setMessage("Access denied");</Snippet>
<TargetFunction>Dereferenced : file()</TargetFunction>
                            </Primary>
                        </Issue>
                    </GroupingSection>
                    <GroupingSection count="3">
                        <groupTitle>System Information Leak: HTML Comment in JSP</groupTitle>
                        <MajorAttributeSummary>
                            <MetaInfo>
<Name>Abstract</Name>
<Value>Any information revealed in the HTML comment at ViewProfile.jsp line 1 could help an adversary learn about the system and form a plan of attack.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Explanation</Name>
<Value>HTML comments provide an attacker with an easy source of information about a dynamically generated web page.

Example 1:


&lt;!-- TBD: this needs a security audit --&gt;
&lt;form method="POST" action="recalcOrbit"&gt;
...


Even comments that seem innocuous may be useful to someone trying to understand the way the system is built.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Recommendations</Name>
<Value>Add the following configuration to your web.xml file, which will exclude HTML comments from the content sent to the user:

&lt;web-app&gt;
  ...
  &lt;context-param&gt;
      &lt;param-name&gt;facelets.SKIP_COMMENTS&lt;/param-name&gt;
      &lt;param-value&gt;true&lt;/param-value&gt;
  &lt;/context-param&gt;
  ...
</Value>
                            </MetaInfo>
                            <AttributeValue>
<Name>&lt;Unaudited&gt;</Name>
<Count>3</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not an Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Reliability Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Bad Practice</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Suspicious</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Exploitable</Name>
<Count>0</Count>
                            </AttributeValue>
                        </MajorAttributeSummary>
                        <Issue iid="65D9CF95D4DC5BA1E5FD281D2F5C0650" ruleID="E8885AA6-C967-490A-B4DF-5F4692EF6BF5">
                            <Category>System Information Leak: HTML Comment in JSP</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>Any information revealed in the HTML comment at ViewProfile.jsp line 84 could help an adversary learn about the system and form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/ViewProfile.jsp</FilePath>
<LineStart>84</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;!-- Encode data that might contain HTML content to protect against XSS --&gt;

						&lt;%=webSession.htmlEncode(employee.getPersonalDescription())%&gt;</Snippet>
<TargetFunction>Comment()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="DC2DCA50559A993EAA03A50D4960A30C" ruleID="E8885AA6-C967-490A-B4DF-5F4692EF6BF5">
                            <Category>System Information Leak: HTML Comment in JSP</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>Any information revealed in the HTML comment at ViewProfile.jsp line 31 could help an adversary learn about the system and form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/ViewProfile.jsp</FilePath>
<LineStart>31</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;!-- STAGE 4 - FIX  Note that the description value below gets encoded and address1 here is not --&gt;

						&lt;%=employee.getAddress1()%&gt;</Snippet>
<TargetFunction>Comment()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="F19A3E30D5A2BCE3F3617F4A4FCA45D6" ruleID="E8885AA6-C967-490A-B4DF-5F4692EF6BF5">
                            <Category>System Information Leak: HTML Comment in JSP</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>Any information revealed in the HTML comment at ViewProfile.jsp line 1 could help an adversary learn about the system and form a plan of attack.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/ViewProfile.jsp</FilePath>
<LineStart>1</LineStart>
<Snippet>&lt;!--
STAGE 4 FIXES Look for the &lt;-- STAGE 4 - FIX
--&gt;</Snippet>
<TargetFunction>Comment()</TargetFunction>
                            </Primary>
                        </Issue>
                    </GroupingSection>
                    <GroupingSection count="3">
                        <groupTitle>Unreleased Resource: Sockets</groupTitle>
                        <MajorAttributeSummary>
                            <MetaInfo>
<Name>Abstract</Name>
<Value>The function doFilter() in Interceptor.java sometimes fails to release a socket allocated by Socket() on line 93.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Explanation</Name>
<Value>The program can potentially fail to release a socket.


Resource leaks have at least two common causes:

- Error conditions and other exceptional circumstances.

- Confusion over which part of the program is responsible for releasing the resource.

Most unreleased resource issues result in general software reliability problems. However, if an attacker can intentionally trigger a resource leak, the attacker may be able to launch a denial of service attack by depleting the resource pool.

Example 1: The following method never closes the socket it opens. In a busy environment, this can result in the JVM using up all of its sockets.


private void echoSocket(String host, int port) throws UnknownHostException, SocketException, IOException
{
  Socket sock = new Socket(host, port);
  BufferedReader reader = new BufferedReader(new InputStreamReader(sock.getInputStream()));

  while ((String socketData = reader.readLine()) != null) {
    System.out.println(socketData);
  }
}


Example 2: Under normal conditions, the following fix properly closes the socket and any associated streams. But if an exception occurs while reading the input or writing the data to screen, the socket object will not be closed. If this happens often enough, the system will run out of sockets and not be able to handle any further connections.


private void echoSocket(String host, int port) throws UnknownHostException, SocketException, IOException
{
  Socket sock = new Socket(host, port);
  BufferedReader reader = new BufferedReader(new InputStreamReader(sock.getInputStream()));

  while ((String socketData = reader.readLine()) != null) {
    System.out.println(socketData);
  }
  sock.close();
}
</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Recommendations</Name>
<Value>Release socket resources in a finally block. The code for Example 2 should be rewritten as follows:


private void echoSocket(String host, int port) throws UnknownHostException, SocketException, IOException
{
  Socket sock;
  BufferedReader reader;

  try {
    sock = new Socket(host, port);
    reader = new BufferedReader(new InputStreamReader(sock.getInputStream()));

    while ((String socketData = reader.readLine()) != null) {
        System.out.println(socketData);
    }
  }
  finally {
    safeClose(sock);
  }
}

public static void safeClose(Socket s) {
  if (s != null &amp;&amp; !s.isClosed()) {
    try {
      s.close();
    } catch (IOException e) {
      log(e);
    }
  }
}


This solution uses a helper function to log the exceptions that might occur when trying to close the socket. Presumably this helper function will be reused whenever a socket needs to be closed.

Also, the echoSocket() method does not initialize the sock socket object to null. Instead, it checks to ensure that sock is not null before calling safeClose(). Without the null check, the Java compiler reports that sock might not be initialized. This choice takes advantage of Java's ability to detect uninitialized variables. If sock is initialized to null in a more complex method, cases in which sock is used without being initialized will not be detected by the compiler.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Tips</Name>
<Value>1. Closing a socket also closes any streams obtained via getInputStream and getOutputStream. Conversely, closing any of the socket's streams also closes the entire socket. When in doubt, it is always safer to close both explicitly.</Value>
                            </MetaInfo>
                            <AttributeValue>
<Name>&lt;Unaudited&gt;</Name>
<Count>3</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not an Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Reliability Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Bad Practice</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Suspicious</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Exploitable</Name>
<Count>0</Count>
                            </AttributeValue>
                        </MajorAttributeSummary>
                        <Issue iid="EB30D4E94B9C6BD58217C198111CDFCA" ruleID="6DEAABAF-72E9-4AD6-8903-0EB8E858CB89">
                            <Category>Unreleased Resource: Sockets</Category>
                            <Folder>High</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>The function doFilter() in Interceptor.java sometimes fails to release a socket allocated by Socket() on line 93.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>Interceptor.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/util/Interceptor.java</FilePath>
<LineStart>99</LineStart>
<Snippet>		    out = new PrintWriter(osgSocket.getOutputStream(), true);
		    in = new BufferedReader(new InputStreamReader(osgSocket
			    .getInputStream()));
		    //String message = "HTTPRECEIVEHTTPREQUEST,-,DataValidation_SqlInjection_Basic.aspx";
		    //out.println(message);</Snippet>
<TargetFunction>osgSocket.getInputStream()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="5F6B52CA73980CA342E68452AA7E1180" ruleID="6DEAABAF-72E9-4AD6-8903-0EB8E858CB89">
                            <Category>Unreleased Resource: Sockets</Category>
                            <Folder>High</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>The function doFilter() in Interceptor.java sometimes fails to release a socket allocated by Socket() on line 93.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>Interceptor.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/util/Interceptor.java</FilePath>
<LineStart>93</LineStart>
<Snippet>		    &amp;&amp; osgServerPort != null &amp;&amp; osgServerPort.length() != 0)
	    {
		osgSocket = new Socket(osgServerName, Integer
			.parseInt(osgServerPort));
		if (osgSocket != null)</Snippet>
<TargetFunction>osgSocket = new Socket(...)</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="D13F2AC066D761999902FF5F195C57D7" ruleID="6DEAABAF-72E9-4AD6-8903-0EB8E858CB89">
                            <Category>Unreleased Resource: Sockets</Category>
                            <Folder>High</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>The function doFilter() in Interceptor.java sometimes fails to release a socket allocated by Socket() on line 93.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>Interceptor.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/util/Interceptor.java</FilePath>
<LineStart>97</LineStart>
<Snippet>		if (osgSocket != null)
		{
		    out = new PrintWriter(osgSocket.getOutputStream(), true);
		    in = new BufferedReader(new InputStreamReader(osgSocket
			    .getInputStream()));</Snippet>
<TargetFunction>osgSocket.getOutputStream()</TargetFunction>
                            </Primary>
                        </Issue>
                    </GroupingSection>
                    <GroupingSection count="2">
                        <groupTitle>Code Correctness: Byte Array to String Conversion</groupTitle>
                        <MajorAttributeSummary>
                            <MetaInfo>
<Name>Abstract</Name>
<Value>The call to String() on line 266 of Encoding.java converts a byte array into a String, which may lead to data loss.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Explanation</Name>
<Value>When data from a byte array is converted into a String, it is unspecified what will happen to any data that is outside of the applicable character set. This can lead to data being lost, or a decrease in the level of security when binary data is needed to ensure proper security measures are followed.

Example 1: The following code converts data into a String in order to create a hash.


  ...
  FileInputStream fis = new FileInputStream(myFile);
  byte[] byteArr = byte[BUFSIZE];
  ...
  int count = fis.read(byteArr);
  ...
  String fileString = new String(byteArr);
  String fileSHA256Hex = DigestUtils.sha256Hex(fileString);
  // use fileSHA256Hex to validate file
  ...


Assuming the size of the file is less than BUFSIZE, this works fine as long as the information in myFile is encoded the same as the default character set, however if it's using a different encoding, or is a binary file, it will lose information. This in turn will cause the resulting SHA hash to be less reliable, and could mean it's far easier to cause collisions, especially if any data outside of the default character set is represented by the same value, such as a question mark.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Recommendations</Name>
<Value>Generally speaking, a byte array potentially containing noncharacter data should never be converted into a String object as it may break functionality, but in some cases this can cause much larger security concerns. In a lot of cases there is no need to actually convert a byte array into a String, but if there is a specific reason to be able to create a String object from binary data, it must first be encoded in a way such that it will fit into the default character set.

Example 2: The following uses a different variant of the API in Example 1 to prevent any validation problems.


  ...
  FileInputStream fis = new FileInputStream(myFile);
  byte[] byteArr = byte[BUFSIZE];
  ...
  int count = fis.read(byteArr);
  ...
  byte[] fileSHA256 = DigestUtils.sha256(byteArr);
  // use fileSHA256 to validate file, comparing hash byte-by-byte.
  ...


In this case, it is straightforward to rectify, since this API has overloaded variants including one that accepts a byte array, and this could be simplified even further by using another overloaded variant of DigestUtils.sha256() that accepts a FileInputStream object as its argument. Other scenarios may need careful consideration as to whether it's possible that the byte array could contain data outside of the character set, and further refactoring may be required.</Value>
                            </MetaInfo>
                            <AttributeValue>
<Name>&lt;Unaudited&gt;</Name>
<Count>2</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not an Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Reliability Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Bad Practice</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Suspicious</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Exploitable</Name>
<Count>0</Count>
                            </AttributeValue>
                        </MajorAttributeSummary>
                        <Issue iid="3D0034E039A6E0A13772F4ADD5BD9265" ruleID="993CC475-24A5-4BBD-A008-67045CCA0ACB">
                            <Category>Code Correctness: Byte Array to String Conversion</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>The call to String() on line 911 of Encoding.java converts a byte array into a String, which may lead to data loss.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Encoding.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/Encoding.java</FilePath>
<LineStart>911</LineStart>
<Snippet>			CharsetEncoder encoder = charset.newEncoder();
			ByteBuffer bbuf = encoder.encode( CharBuffer.wrap( str ) );
			return ( new String( bbuf.array() ) );
		}
		catch ( Exception e )</Snippet>
<TargetFunction>String()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="621F63B48D8B4198A5CC0417D7082A53" ruleID="993CC475-24A5-4BBD-A008-67045CCA0ACB">
                            <Category>Code Correctness: Byte Array to String Conversion</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>The call to String() on line 266 of Encoding.java converts a byte array into a String, which may lead to data loss.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Encoding.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/Encoding.java</FilePath>
<LineStart>266</LineStart>
<Snippet>		byte[] b = decoder.decodeBuffer( str );

		return ( new String( b ) );
	}
</Snippet>
<TargetFunction>String()</TargetFunction>
                            </Primary>
                        </Issue>
                    </GroupingSection>
                    <GroupingSection count="2">
                        <groupTitle>Command Injection</groupTitle>
                        <MajorAttributeSummary>
                            <MetaInfo>
<Name>Abstract</Name>
<Value>The method execOptions() in Exec.java calls exec() to execute a command. This call might allow an attacker to inject malicious commands.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Explanation</Name>
<Value>Command injection vulnerabilities take two forms:

- An attacker can change the command that the program executes: the attacker explicitly controls what the command is.

- An attacker can change the environment in which the command executes: the attacker implicitly controls what the command means.

In this case, we are primarily concerned with the second scenario, the possibility that an attacker may be able to change the meaning of the command by changing an environment variable or by putting a malicious executable early in the search path. Command injection vulnerabilities of this type occur when:

1. An attacker modifies an application's environment.

2. The application executes a command without specifying an absolute path or verifying the binary being executed.

3. By executing the command, the application gives an attacker a privilege or capability that the attacker would not otherwise have.

Example: The following code is from a web application that provides an interface through which users can update their password on the system. Part of the process for updating passwords in certain network environments is to run a make command in the /var/yp directory.


...
System.Runtime.getRuntime().exec("make");
...


The problem here is that the program does not specify an absolute path for make and fails to clean its environment prior to executing the call to Runtime.exec(). If an attacker can modify the $PATH variable to point to a malicious binary called make and then execute the application in their environment, the malicious binary will be loaded instead of the one intended. Because of the nature of the application, it runs with the privileges necessary to perform system operations, which means the attacker's make will now be run with these privileges, possibly giving them complete control of the system.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Recommendations</Name>
<Value>An attacker may indirectly control commands executed by a program by modifying the environment in which they are executed. The environment should not be trusted and precautions should be taken to prevent an attacker from using some manipulation of the environment to perform an attack. Whenever possible, commands should be controlled by the application and executed using an absolute path. In cases where the path is not known at compile time, such as for cross-platform applications, an absolute path should be constructed from trusted values during execution. Command values and paths read from configuration files or the environment should be sanity-checked against a set of invariants that define valid values.

Other checks can sometimes be performed to detect if these sources may have been tampered with. For example, if a configuration file is world-writable, the program might refuse to run. In cases where information about the binary to be executed is known in advance, the program may perform checks to verify the identity of the binary. If a binary should always be owned by a particular user or have a particular set of access permissions assigned to it, these properties can be verified programmatically before the binary is executed.

In the end it may be impossible for a program to fully protect itself from an imaginative attacker bent on controlling the commands the program executes. You should strive to identify and protect against every conceivable manipulation of input values and the environment. The goal should be to shut down as many attack vectors as possible.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Tips</Name>
<Value>1. On Windows, the reported issue is not a concern if the command being executed is a Windows internal command. The internal commands do not reside on disk. Instead, they reside in COMMAND.COM, which loads into memory when the computer system is started. A list of internal commands includes: BREAK, CALL, CHCP, CHDIR(CD), CLS, COPY, CTTY, DATE, DEL(ERASE), DIR, ECHO, EXIT, FOR, GOTO, IF, MKDIR(MD), PATH, PAUSE, PROMPT, REM, RENAME(REN), RMDIR(RD), SET, SHIFT, TIME, TYPE, VER, VERIFY, VOL. For an up-to-date list of internal commands specific to your system, consult your system's documentation.</Value>
                            </MetaInfo>
                            <AttributeValue>
<Name>&lt;Unaudited&gt;</Name>
<Count>2</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not an Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Reliability Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Bad Practice</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Suspicious</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Exploitable</Name>
<Count>0</Count>
                            </AttributeValue>
                        </MajorAttributeSummary>
                        <Issue iid="3170C7FA23A3F9D88B924783BB9C313D" ruleID="69777D84-8507-40A7-9C2B-0B18E4A5EB0A">
                            <Category>Command Injection</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method execOptions() in Exec.java calls exec() to execute a command. This call might allow an attacker to inject malicious commands.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Exec.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/util/Exec.java</FilePath>
<LineStart>292</LineStart>
<Snippet>	{
	    // start the command
	    child = Runtime.getRuntime().exec(command);

	    // get the streams in and out of the command</Snippet>
<TargetFunction>exec(0)</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="1A4FC038E22B5BEC66FED90042F3E937" ruleID="4A5DFFFA-B136-47E5-B789-6A56C2CEA3F1">
                            <Category>Command Injection</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method execOptions() in Exec.java calls exec() to execute a command. This call might allow an attacker to inject malicious commands.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Exec.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/util/Exec.java</FilePath>
<LineStart>103</LineStart>
<Snippet>	{
	    // start the command
	    child = Runtime.getRuntime().exec(command);

	    // get the streams in and out of the command</Snippet>
<TargetFunction>exec()</TargetFunction>
                            </Primary>
                        </Issue>
                    </GroupingSection>
                    <GroupingSection count="2">
                        <groupTitle>Dead Code: Unused Method</groupTitle>
                        <MajorAttributeSummary>
                            <MetaInfo>
<Name>Abstract</Name>
<Value>The method dumpSession() in HammerHead.java is not reachable from any method outside the class. It is dead code. Dead code is defined as code that is never directly or indirectly executed by a public method.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Explanation</Name>
<Value>This method is never called or is only called from other dead code.

Example 1: In the following class, the method doWork() can never be called.


public class Dead {
  private void doWork() {
    System.out.println("doing work");
  }
  public static void main(String[] args) {
    System.out.println("running Dead");
  }
}


Example 2: In the following class, two private methods call each other, but since neither one is ever invoked from anywhere else, they are both dead code.


public class DoubleDead {
  private void doTweedledee() {
    doTweedledumb();
  }
  private void doTweedledumb() {
    doTweedledee();
  }
  public static void main(String[] args) {
    System.out.println("running DoubleDead");
  }
}


(In this case it is a good thing that the methods are dead: invoking either one would cause an infinite loop.)</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Recommendations</Name>
<Value>A dead method may indicate a bug in dispatch code.

Example 3: If method is flagged as dead named getWitch() in a class that also contains the following dispatch method, it may be because of a copy-and-paste error. The 'w' case should return getWitch() not getMummy().


public ScaryThing getScaryThing(char st) {
  switch(st) {
    case 'm':
      return getMummy();
    case 'w':
      return getMummy();
    default:
      return getBlob();
  }
}


In general, you should repair or remove dead code. To repair dead code, execute the dead code directly or indirectly through a public method. Dead code causes additional complexity and maintenance burden without contributing to the functionality of the program.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Tips</Name>
<Value>1. This issue may be a false positive if the program uses reflection to access private methods. (This is a non-standard practice. Private methods that are only invoked via reflection should be well documented.)</Value>
                            </MetaInfo>
                            <AttributeValue>
<Name>&lt;Unaudited&gt;</Name>
<Count>2</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not an Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Reliability Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Bad Practice</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Suspicious</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Exploitable</Name>
<Count>0</Count>
                            </AttributeValue>
                        </MajorAttributeSummary>
                        <Issue iid="6B21E97CFCB72AEAF78F934815DA0258" ruleID="6F84D4B0-3B7E-4463-A165-76135931D192">
                            <Category>Dead Code: Unused Method</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>The method exec() in CommandInjection.java is not reachable from any method outside the class. It is dead code. Dead code is defined as code that is never directly or indirectly executed by a public method.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>CommandInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CommandInjection.java</FilePath>
<LineStart>304</LineStart>
<Snippet>     * @return          Description of the Return Value
     */
    private Element exec(WebSession s, String command, String args)
    {
	System.out.println("Executing OS command: '" + command</Snippet>
<TargetFunction>Function: exec()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="B4552B8EC05C3DD4D7DDC18274F6FC22" ruleID="6F84D4B0-3B7E-4463-A165-76135931D192">
                            <Category>Dead Code: Unused Method</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>The method dumpSession() in HammerHead.java is not reachable from any method outside the class. It is dead code. Dead code is defined as code that is never directly or indirectly executed by a public method.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>HammerHead.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/HammerHead.java</FilePath>
<LineStart>237</LineStart>
<Snippet>     *        Description of the Parameter
     */
    private void dumpSession(HttpSession session)
    {
	Enumeration enumerator = session.getAttributeNames();</Snippet>
<TargetFunction>Function: dumpSession()</TargetFunction>
                            </Primary>
                        </Issue>
                    </GroupingSection>
                    <GroupingSection count="2">
                        <groupTitle>J2EE Misconfiguration: Missing Data Transport Constraint</groupTitle>
                        <MajorAttributeSummary>
                            <MetaInfo>
<Name>Abstract</Name>
<Value>A security constraint that does not specify a user data constraint cannot guarantee that restricted resources will be protected at the transport layer.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Explanation</Name>
<Value>web.xml security constraints are typically used for role based access control, but the optional user-data-constraint element specifies a transport guarantee that prevents content from being transmitted insecurely.

Within the &lt;user-data-constraint&gt; tag, the &lt;transport-guarantee&gt; tag defines how communication should be handled. There are three levels of transport guarantee:

1) NONE means that the application does not require any transport guarantees.
2) INTEGRAL means that the application requires that data sent between the client and server be sent in such a way that it cannot be changed in transit.
3) CONFIDENTIAL means that the application requires that data be transmitted in a fashion that prevents other entities from observing the contents of the transmission.



In most circumstances, the use of INTEGRAL or CONFIDENTIAL means that SSL/TLS is required. If the &lt;user-data-constraint&gt; and &lt;transport-guarantee&gt; tags are omitted, the transport guarantee defaults to NONE.

Example 1: The following security constraint does not specify a transport guarantee.

&lt;security-constraint&gt;
    &lt;web-resource-collection&gt;
        &lt;web-resource-name&gt;Storefront&lt;/web-resource-name&gt;
        &lt;description&gt;Allow Customers and Employees access to online store front&lt;/description&gt;
        &lt;url-pattern&gt;/store/shop/*&lt;/url-pattern&gt;
    &lt;/web-resource-collection&gt;
    &lt;auth-constraint&gt;
        &lt;description&gt;Anyone&lt;/description&gt;
        &lt;role-name&gt;anyone&lt;/role-name&gt;
    &lt;/auth-constraint&gt;
&lt;/security-constraint&gt;
&#13;
This category was derived from the Cigital Java Rulepack.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Recommendations</Name>
<Value>Specify a CONFIDENTIAL transport guarantee whenever you define a authorization constraint. Once you decide to encrypt traffic to any part of your application, do not make the mistake of allowing unencrypted traffic to other parts of the application, which could allow session cookies or other sensitive information to be transmitted over insecure channels.

Example 2: The following security constraint specifies a CONFIDENTIAL transport guarantee.

&lt;security-constraint&gt;
    &lt;web-resource-collection&gt;
        &lt;web-resource-name&gt;Storefront&lt;/web-resource-name&gt;
        &lt;description&gt;Allow Customers and Employees access to online store front&lt;/description&gt;
        &lt;url-pattern&gt;/store/shop/*&lt;/url-pattern&gt;
    &lt;/web-resource-collection&gt;
    &lt;auth-constraint&gt;
        &lt;description&gt;Anyone&lt;/description&gt;
        &lt;role-name&gt;anyone&lt;/role-name&gt;
    &lt;/auth-constraint&gt;
    &lt;user-data-constraint&gt;
        &lt;transport-guarantee&gt;CONFIDENTIAL&lt;/transport-guarantee&gt;
    &lt;/user-data-constraint&gt;
&lt;/security-constraint&gt;
</Value>
                            </MetaInfo>
                            <AttributeValue>
<Name>&lt;Unaudited&gt;</Name>
<Count>2</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not an Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Reliability Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Bad Practice</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Suspicious</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Exploitable</Name>
<Count>0</Count>
                            </AttributeValue>
                        </MajorAttributeSummary>
                        <Issue iid="4745492F4C56918DB027E1B7D27069F9" ruleID="AA4DA365-6889-4FC1-B666-1864FC00D921">
                            <Category>J2EE Misconfiguration: Missing Data Transport Constraint</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Environment</Kingdom>
                            <Abstract>A security constraint that does not specify a user data constraint cannot guarantee that restricted resources will be protected at the transport layer.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>web.xml</FileName>
<FilePath>WebContent/WEB-INF/web.xml</FilePath>
<LineStart>286</LineStart>
<Snippet>	&lt;/security-constraint&gt;
	
	&lt;security-constraint&gt;
	    &lt;web-resource-collection&gt;
	      &lt;web-resource-name&gt;WebGoat Application Source&lt;/web-resource-name&gt;</Snippet>
                            </Primary>
                        </Issue>
                        <Issue iid="4745492F4C56918DB027E1B7D27069F8" ruleID="AA4DA365-6889-4FC1-B666-1864FC00D921">
                            <Category>J2EE Misconfiguration: Missing Data Transport Constraint</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Environment</Kingdom>
                            <Abstract>A security constraint that does not specify a user data constraint cannot guarantee that restricted resources will be protected at the transport layer.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>web.xml</FileName>
<FilePath>WebContent/WEB-INF/web.xml</FilePath>
<LineStart>274</LineStart>
<Snippet>
	&lt;!-- Define a Security Constraint on this Application --&gt;
	&lt;security-constraint&gt;
	    &lt;web-resource-collection&gt;
	      &lt;web-resource-name&gt;WebGoat Application&lt;/web-resource-name&gt;</Snippet>
                            </Primary>
                        </Issue>
                    </GroupingSection>
                    <GroupingSection count="2">
                        <groupTitle>Missing Check for Null Parameter</groupTitle>
                        <MajorAttributeSummary>
                            <MetaInfo>
<Name>Abstract</Name>
<Value>The declaration of equals() in AbstractLesson fails to compare its parameter with null, which is a violation of the method's contract.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Explanation</Name>
<Value>The Java standard requires that implementations of Object.equals(), Comparable.compareTo(), and Comparator.compare() must return a specified value if their parameters are null. Failing to follow this contract may result in unexpected behavior.

Example 1: The following implementation of the equals() method does not compare its parameter with null.


public boolean equals(Object object)
{
   return (toString().equals(object.toString()));
}
</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Recommendations</Name>
<Value>Always follow the contract that Object.equals() must return null if it receives a null parameter.

Example 2: The previous example is rewritten to explicitly check for a null argument and return false if one is found.


public boolean equals(Object object)
{
    if (object == null)
        return false;
    return (toString().equals(object.toString()));
}
</Value>
                            </MetaInfo>
                            <AttributeValue>
<Name>&lt;Unaudited&gt;</Name>
<Count>2</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not an Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Reliability Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Bad Practice</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Suspicious</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Exploitable</Name>
<Count>0</Count>
                            </AttributeValue>
                        </MajorAttributeSummary>
                        <Issue iid="F5B20153166B92D817BF3782C29D4980" ruleID="1834C857-2848-41F2-98F7-D5C5F157E729">
                            <Category>Missing Check for Null Parameter</Category>
                            <Folder>Low</Folder>
                            <Kingdom>API Abuse</Kingdom>
                            <Abstract>The declaration of equals() in AbstractLesson fails to compare its parameter with null, which is a violation of the method's contract.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>AbstractLesson.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/AbstractLesson.java</FilePath>
<LineStart>317</LineStart>
<Snippet>     * @return Description of the Return Value
     */
    public boolean equals(Object obj)
    {
	return this.getScreenId() == ((AbstractLesson) obj).getScreenId();</Snippet>
<TargetFunction>obj = #param(0)</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="2DA1FACB1915C00E7C43FF9061771897" ruleID="1834C857-2848-41F2-98F7-D5C5F157E729">
                            <Category>Missing Check for Null Parameter</Category>
                            <Folder>Low</Folder>
                            <Kingdom>API Abuse</Kingdom>
                            <Abstract>The declaration of equals() in Category fails to compare its parameter with null, which is a violation of the method's contract.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Category.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/Category.java</FilePath>
<LineStart>81</LineStart>
<Snippet>

    public boolean equals(Object obj)
    {
	return getName().equals(((Category) obj).getName());</Snippet>
<TargetFunction>obj = #param(0)</TargetFunction>
                            </Primary>
                        </Issue>
                    </GroupingSection>
                    <GroupingSection count="2">
                        <groupTitle>Object Model Violation: Just one of equals() and hashCode() Defined</groupTitle>
                        <MajorAttributeSummary>
                            <MetaInfo>
<Name>Abstract</Name>
<Value>The class AbstractLesson overrides only one of equals() and hashCode().</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Explanation</Name>
<Value>Java objects are expected to obey a number of invariants related to equality. One of these invariants is that equal objects must have equal hashcodes. In other words, if a.equals(b) == true then a.hashCode() == b.hashCode().

Failure to uphold this invariant is likely to cause trouble if objects of this class are stored in a collection. If the objects of the class in question are used as a key in a Hashtable or if they are inserted into a Map or Set, it is critical that equal objects have equal hashcodes.

Example 1: The following class overrides equals() but not hashCode().


public class halfway() {
  public boolean equals(Object obj) {
    ...
  }
}
</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Recommendations</Name>
<Value>The FindBugs documentation recommends the following simple "starter" implementation of hashCode() [1]. It is highly inefficient, but it will produce correct results. If you do not believe that hashCode() is important for your program, consider using this implementation.

Example 2: The code in Example 1 could be rewritten in the following way:


public class halfway() {
  public boolean equals(Object obj) {
    ...
  }

public int hashCode() {
    assert false : "hashCode not designed";
    return 42; // any arbitrary constant will do
  }
}
</Value>
                            </MetaInfo>
                            <AttributeValue>
<Name>&lt;Unaudited&gt;</Name>
<Count>2</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not an Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Reliability Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Bad Practice</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Suspicious</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Exploitable</Name>
<Count>0</Count>
                            </AttributeValue>
                        </MajorAttributeSummary>
                        <Issue iid="B622BC093E6CFFB3E7119C5620832581" ruleID="35DEAC53-264A-472F-A1FD-F17DD14841A7">
                            <Category>Object Model Violation: Just one of equals() and hashCode() Defined</Category>
                            <Folder>Low</Folder>
                            <Kingdom>API Abuse</Kingdom>
                            <Abstract>The class Category overrides only one of equals() and hashCode().</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Category.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/Category.java</FilePath>
<LineStart>81</LineStart>
<Snippet>

    public boolean equals(Object obj)
    {
	return getName().equals(((Category) obj).getName());</Snippet>
<TargetFunction>Function: equals()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="8A93D887707FAF67D0C6134B8419AB66" ruleID="35DEAC53-264A-472F-A1FD-F17DD14841A7">
                            <Category>Object Model Violation: Just one of equals() and hashCode() Defined</Category>
                            <Folder>Low</Folder>
                            <Kingdom>API Abuse</Kingdom>
                            <Abstract>The class AbstractLesson overrides only one of equals() and hashCode().</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>AbstractLesson.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/AbstractLesson.java</FilePath>
<LineStart>317</LineStart>
<Snippet>     * @return Description of the Return Value
     */
    public boolean equals(Object obj)
    {
	return this.getScreenId() == ((AbstractLesson) obj).getScreenId();</Snippet>
<TargetFunction>Function: equals()</TargetFunction>
                            </Primary>
                        </Issue>
                    </GroupingSection>
                    <GroupingSection count="2">
                        <groupTitle>Password Management: Empty Password</groupTitle>
                        <MajorAttributeSummary>
                            <MetaInfo>
<Name>Abstract</Name>
<Value>Empty passwords may compromise system security in a way that cannot be easily remedied.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Explanation</Name>
<Value>It is never a good idea to assign an empty string to a password variable. If the empty password is used to successfully authenticate against another system, then the corresponding account's security is likely compromised because it accepts an empty password. If the empty password is merely a placeholder until a legitimate value can be assigned to the variable, then it can confuse anyone unfamiliar with the code and potentially cause problems on unexpected control flow paths.



Example 1: The following code attempts to connect to a database with an empty password.

    ...
    DriverManager.getConnection(url, "scott", "");
    ...


If the code in Example 1 succeeds, it indicates that the database user account "scott" is configured with an empty password, which an attacker can easily guess. After the program ships, updating the account to use a non-empty password will require a code change.

Example 2: The following code initializes a password variable to an empty string, attempts to read a stored value for the password, and compares it against a user-supplied value.


    ...
    String storedPassword = "";
    String temp;

    if ((temp = readPassword()) != null) {
        storedPassword = temp;
    }

    if(storedPassword.equals(userPassword))
        // Access protected resources
        ...
    }
    ...


If readPassword() fails to retrieve the stored password due to a database error or another problem, then an attacker could trivially bypass the password check by providing an empty string for userPassword.

In the mobile environment, password management is especially important given that there is such a high chance of device loss.
Example 3: The following code initializes username and password variables to empty strings, reads credentials from an Android WebView store if they have not been previously rejected by the server for the current request, and uses them to setup authentication for viewing protected pages.

...
webview.setWebViewClient(new WebViewClient() {
  public void onReceivedHttpAuthRequest(WebView view,
        HttpAuthHandler handler, String host, String realm) {
    String username = "";
    String password = "";

    if (handler.useHttpAuthUsernamePassword()) {
      String[] credentials = view.getHttpAuthUsernamePassword(host, realm);
      username = credentials[0];
      password = credentials[1];
    }
    handler.proceed(username, password);
  }
});
...


Similar to Example 2, if useHttpAuthUsernamePassword() returns false, an attacker will be able to view protected pages by supplying an empty password.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Recommendations</Name>
<Value>Always read stored password values from encrypted, external resources and assign password variables meaningful values. Ensure that sensitive resources are never protected with empty or null passwords.

For Android, as well as any other platform that uses SQLite database, SQLCipher is a good alternative. SQLCipher is an extension to the SQLite database that provides transparent 256-bit AES encryption of database files. Thus, credentials can be stored in an encrypted database.

Example 4: The following code demonstrates how to integrate SQLCipher into an Android application after downloading the necessary binaries, and store credentials into the database file.

import net.sqlcipher.database.SQLiteDatabase;
...
  SQLiteDatabase.loadLibs(this);
  File dbFile = getDatabasePath("credentials.db");
  dbFile.mkdirs();
  dbFile.delete();
  SQLiteDatabase db = SQLiteDatabase.openOrCreateDatabase(dbFile, "credentials", null);
  db.execSQL("create table credentials(u, p)");
  db.execSQL("insert into credentials(u, p) values(?, ?)", new Object[]{username, password});
...


Note that references to android.database.sqlite.SQLiteDatabase are substituted with those of net.sqlcipher.database.SQLiteDatabase.

To enable encryption on the WebView store, you must recompile WebKit with the sqlcipher.so library.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Tips</Name>
<Value>1. You can use the Fortify Java Annotations FortifyPassword and FortifyNotPassword to indicate which fields and variables represent passwords.

2. To identify null, empty, or hardcoded passwords, default rules only consider fields and variables that contain the word password. However, the Fortify Custom Rules Editor provides the Password Management wizard that makes it easy to create rules for detecting password management issues on custom-named fields and variables.</Value>
                            </MetaInfo>
                            <AttributeValue>
<Name>&lt;Unaudited&gt;</Name>
<Count>2</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not an Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Reliability Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Bad Practice</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Suspicious</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Exploitable</Name>
<Count>0</Count>
                            </AttributeValue>
                        </MajorAttributeSummary>
                        <Issue iid="7E4ECFA4ACF6C490AC08433D2C2A861A" ruleID="65d3af30-a769-11de-8a39-0800200c9a66">
                            <Category>Password Management: Empty Password</Category>
                            <Folder>High</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>Empty passwords may compromise system security in a way that cannot be easily remedied.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>FailOpenAuthentication.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/FailOpenAuthentication.java</FilePath>
<LineStart>68</LineStart>
<Snippet>	{
	    String username = "";
	    String password = "";

	    try</Snippet>
<TargetFunction>VariableAccess: password</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="7186EC2F1AF7900BCF7C2A0803FB4AA9" ruleID="65d3af30-a769-11de-8a39-0800200c9a66">
                            <Category>Password Management: Empty Password</Category>
                            <Folder>High</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>Empty passwords may compromise system security in a way that cannot be easily remedied.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>DOS_Login.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/DOS_Login.java</FilePath>
<LineStart>87</LineStart>
<Snippet>	{
	    String username = "";
	    String password = "";
	    username = s.getParser().getRawParameter(USERNAME);
	    password = s.getParser().getRawParameter(PASSWORD);</Snippet>
<TargetFunction>VariableAccess: password</TargetFunction>
                            </Primary>
                        </Issue>
                    </GroupingSection>
                    <GroupingSection count="2">
                        <groupTitle>Race Condition: Static Database Connection</groupTitle>
                        <MajorAttributeSummary>
                            <MetaInfo>
<Name>Abstract</Name>
<Value>The class SoapRequest stores a database connection in a static field, which creates a race condition when the connection is shared between threads.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Explanation</Name>
<Value>A transactional resource object such as database connection can only be associated with one transaction at a time. For this reason, a connection should not be shared between threads and should not be stored in a static field. See Section 4.2.3 of the J2EE Specification for more details.

Example 1:


public class ConnectionManager {

private static Connection conn = initDbConn();
...
}
</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Recommendations</Name>
<Value>Rather than storing the database connection in a static field, use a connection pool to cache connection objects. Most modern J2EE and Servlet containers provide built-in connection pooling facilities.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Tips</Name>
<Value>1. If you are auditing a non-J2EE Java application, this category might not apply to your environment. If this is the case, you can use Audit Guide to suppress these issues.</Value>
                            </MetaInfo>
                            <AttributeValue>
<Name>&lt;Unaudited&gt;</Name>
<Count>2</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not an Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Reliability Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Bad Practice</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Suspicious</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Exploitable</Name>
<Count>0</Count>
                            </AttributeValue>
                        </MajorAttributeSummary>
                        <Issue iid="DCFF36250D3F64C32E667FEFA44D89EB" ruleID="898621C4-B672-43E6-AAB5-317A3D12D274">
                            <Category>Race Condition: Static Database Connection</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Time and State</Kingdom>
                            <Abstract>The class SoapRequest stores a database connection in a static field, which creates a race condition when the connection is shared between threads.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>SoapRequest.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SoapRequest.java</FilePath>
<LineStart>74</LineStart>
<Snippet>
    //static boolean completed;
    public static Connection connection = null;

    public final static String firstName = "getFirstName";</Snippet>
<TargetFunction>Field: connection()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="F442CD3145F2B123E11DAE0F8EC32D15" ruleID="898621C4-B672-43E6-AAB5-317A3D12D274">
                            <Category>Race Condition: Static Database Connection</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Time and State</Kingdom>
                            <Abstract>The class WSDLScanning stores a database connection in a static field, which creates a race condition when the connection is shared between threads.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>WSDLScanning.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/WSDLScanning.java</FilePath>
<LineStart>82</LineStart>
<Snippet>    static boolean beenRestartedYet = false;

    public static Connection connection = null;

    public final static String firstName = "getFirstName";</Snippet>
<TargetFunction>Field: connection()</TargetFunction>
                            </Primary>
                        </Issue>
                    </GroupingSection>
                    <GroupingSection count="2">
                        <groupTitle>Unchecked Return Value</groupTitle>
                        <MajorAttributeSummary>
                            <MetaInfo>
<Name>Abstract</Name>
<Value>The method parseResults() in CommandInjection.java ignores the value returned by replaceAll() on line 220, which could cause the program to overlook unexpected states and conditions.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Explanation</Name>
<Value>It is not uncommon for Java programmers to misunderstand read() and related methods that are part of many java.io classes. Most errors and unusual events in Java result in an exception being thrown. (This is one of the advantages that Java has over languages like C: Exceptions make it easier for programmers to think about what can go wrong.) But the stream and reader classes do not consider it unusual or exceptional if only a small amount of data becomes available. These classes simply add the small amount of data to the return buffer, and set the return value to the number of bytes or characters read. There is no guarantee that the amount of data returned is equal to the amount of data requested.

This behavior makes it important for programmers to examine the return value from read() and other IO methods to ensure that they receive the amount of data they expect.



Example: The following code loops through a set of users, reading a private data file for each user. The programmer assumes that the files are always exactly 1 kilobyte in size and therefore ignores the return value from read(). If an attacker can create a smaller file, the program will recycle the remainder of the data from the previous user and handle it as though it belongs to the attacker.


FileInputStream fis;
byte[] byteArray = new byte[1024];
for (Iterator i=users.iterator(); i.hasNext();) {
    String userName = (String) i.next();
    String pFileName = PFILE_ROOT + "/" + userName;
    FileInputStream fis = new FileInputStream(pFileName);
    fis.read(byteArray); // the file is always 1k bytes
    fis.close();
    processPFile(userName, byteArray);
}
</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Recommendations</Name>
<Value>
  FileInputStream fis;
  byte[] byteArray = new byte[1024];
  for (Iterator i=users.iterator(); i.hasNext();) {
    String userName = (String) i.next();
    String pFileName = PFILE_ROOT + "/" + userName;
    fis = new FileInputStream(pFileName);
    int bRead = 0;
    while (bRead &lt; 1024) {
        int rd = fis.read(byteArray, bRead, 1024 - bRead);
        if (rd == -1) {
          throw new IOException("file is unusually small");
        }
        bRead += rd;
    }
    // could add check to see if file is too large here
    fis.close();
    processPFile(userName, byteArray);
  }


Note: Because the fix for this problem is relatively complicated, you might be tempted to use a simpler approach, such as checking the size of the file before you begin reading. Such an approach would render the application vulnerable to a file system race condition, whereby an attacker could replace a well-formed file with a malicious file between the file size check and the call to read data from the file.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Tips</Name>
<Value>1. Watch out for programmers who want to explain away this type of issue by saying "that can never happen because ...". Chances are good that they have developed their intuition about the way the system works by using their development workstation. If your software will eventually run under different operating systems, operating system versions, hardware configurations, or runtime environments, their intuition might not apply.</Value>
                            </MetaInfo>
                            <AttributeValue>
<Name>&lt;Unaudited&gt;</Name>
<Count>2</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not an Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Reliability Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Bad Practice</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Suspicious</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Exploitable</Name>
<Count>0</Count>
                            </AttributeValue>
                        </MajorAttributeSummary>
                        <Issue iid="30AE8696BEA3CD405C5B06406DC2D875" ruleID="E7C6CAEA-E096-4FCB-81F5-6131E2DE9A45">
                            <Category>Unchecked Return Value</Category>
                            <Folder>Low</Folder>
                            <Kingdom>API Abuse</Kingdom>
                            <Abstract>The method parseResults() in CommandInjection.java ignores the value returned by replaceAll() on line 220, which could cause the program to overlook unexpected states and conditions.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>CommandInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CommandInjection.java</FilePath>
<LineStart>220</LineStart>
<Snippet>    private String parseResults(String results)
    {
    	results.replaceAll("(?s).*Output...\\s", "").replaceAll("(?s)Returncode.*", "");
    	StringTokenizer st = new StringTokenizer(results, "\n");
    	StringBuffer modified = new StringBuffer();</Snippet>
<TargetFunction>replaceAll()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="064C4C93451D67B8E1CE35240CA83095" ruleID="E7C6CAEA-E096-4FCB-81F5-6131E2DE9A45">
                            <Category>Unchecked Return Value</Category>
                            <Folder>Low</Folder>
                            <Kingdom>API Abuse</Kingdom>
                            <Abstract>The method getHints() in SoapRequest.java ignores the value returned by replaceAll() on line 140, which could cause the program to overlook unexpected states and conditions.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>SoapRequest.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SoapRequest.java</FilePath>
<LineStart>140</LineStart>
<Snippet>		+ "&amp;lt;/SOAP-ENV:Envelope&amp;gt; &lt;br&gt;&lt;br&gt;"
		+ "Intercept the HTTP request and try to create a SOAP request.";
	soapEnv.replaceAll("(?s) ", "&amp;nbsp;");
	hints.add(soapEnv);
</Snippet>
<TargetFunction>replaceAll()</TargetFunction>
                            </Primary>
                        </Issue>
                    </GroupingSection>
                    <GroupingSection count="2">
                        <groupTitle>Weak Cryptographic Hash</groupTitle>
                        <MajorAttributeSummary>
                            <MetaInfo>
<Name>Abstract</Name>
<Value>Weak cryptographic hashes cannot guarantee data integrity and should not be used in security-critical contexts.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Explanation</Name>
<Value>MD2, MD4, MD5, RIPEMD-160, and SHA-1 are popular cryptographic hash algorithms often used to verify the integrity of messages and other data. However, as recent cryptanalysis research has revealed fundamental weaknesses in these algorithms, they should no longer be used within security-critical contexts.

Effective techniques for breaking MD and RIPEMD hashes are widely available, so those algorithms should not be relied upon for security. In the case of SHA-1, current techniques still require a significant amount of computational power and are more difficult to implement. However, attackers have found the Achilles' heel for the algorithm, and techniques for breaking it will likely lead to the discovery of even faster attacks.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Recommendations</Name>
<Value>Discontinue the use of MD2, MD4, MD5, RIPEMD-160, and SHA-1 for data-verification in security-critical contexts. Currently, SHA-224, SHA-256, SHA-384, SHA-512, and SHA-3 are good alternatives. However, these variants of the Secure Hash Algorithm have not been scrutinized as closely as SHA-1, so be mindful of future research that might impact the security of these algorithms.</Value>
                            </MetaInfo>
                            <AttributeValue>
<Name>&lt;Unaudited&gt;</Name>
<Count>2</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not an Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Reliability Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Bad Practice</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Suspicious</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Exploitable</Name>
<Count>0</Count>
                            </AttributeValue>
                        </MajorAttributeSummary>
                        <Issue iid="8ADDC1EF809F4DABD2D7DF2B3A069F79" ruleID="FD6C18E2-3AD8-4842-84CD-3E3D638BCCE4">
                            <Category>Weak Cryptographic Hash</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>Weak cryptographic hashes cannot guarantee data integrity and should not be used in security-critical contexts.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Encoding.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/Encoding.java</FilePath>
<LineStart>640</LineStart>
<Snippet>		try
		{
			md = MessageDigest.getInstance( "MD5" );
			md.update( b );
		}</Snippet>
<TargetFunction>getInstance()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="41CC80D06651D0436F9C81A94FE3D68D" ruleID="FD6C18E2-3AD8-4842-84CD-3E3D638BCCE4">
                            <Category>Weak Cryptographic Hash</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>Weak cryptographic hashes cannot guarantee data integrity and should not be used in security-critical contexts.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>HttpOnly.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/HttpOnly.java</FilePath>
<LineStart>175</LineStart>
<Snippet>		
		try {
			md = MessageDigest.getInstance("SHA");
			buffer = new Date().toString().getBytes();
			</Snippet>
<TargetFunction>getInstance()</TargetFunction>
                            </Primary>
                        </Issue>
                    </GroupingSection>
                    <GroupingSection count="2">
                        <groupTitle>Weak Cryptographic Hash: Hardcoded PBE Salt</groupTitle>
                        <MajorAttributeSummary>
                            <MetaInfo>
<Name>Abstract</Name>
<Value>A hardcoded salt can compromise system security in a way that cannot be easily remedied.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Explanation</Name>
<Value>It is never a good idea to hardcode a salt. Not only does a hardcoded salt allow all of the project's developers to view the salt, it also makes fixing the problem extremely difficult. After the code is in production, the salt cannot be easily changed. If attackers know the value of the salt, they can compute "rainbow tables" for the application and more easily determine the hashed values.


Example 1: The following code uses a hardcoded salt:

...
private static final String salt = "2!@$(5#@532@%#$253l5#@$";
...
PBEKeySpec pbeSpec=new PBEKeySpec(password);
SecretKeyFactory keyFact=SecretKeyFactory.getInstance(CIPHER_ALG);
PBEParameterSpec defParams=new PBEParameterSpec(salt,100000);
Cipher cipher=Cipher.getInstance(CIPHER_ALG);
cipher.init(cipherMode,keyFact.generateSecret(pbeSpec),defParams);
...


This code will run successfully, but anyone who has access to it will have access to the salt. After the program ships, there is likely no way to change the salt "2!@$(5#@532@%#$253l5#@$". An employee with access to this information can use it to break into the system.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Recommendations</Name>
<Value>A salt should never be hardcoded and should generally be obfuscated and managed in an external source. Storing a salt in plain text anywhere on the system allows anyone with sufficient permissions to read and potentially misuse the salt.

Example 2: The following code uses a salt variable configured by the system administrator:

...
PBEKeySpec pbeSpec=new PBEKeySpec(password);
SecretKeyFactory keyFact=SecretKeyFactory.getInstance(CIPHER_ALG);
PBEParameterSpec defParams=new PBEParameterSpec(salt,100000);
Cipher cipher=Cipher.getInstance(CIPHER_ALG);
cipher.init(cipherMode,keyFact.generateSecret(pbeSpec),defParams);
...
</Value>
                            </MetaInfo>
                            <AttributeValue>
<Name>&lt;Unaudited&gt;</Name>
<Count>2</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not an Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Reliability Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Bad Practice</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Suspicious</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Exploitable</Name>
<Count>0</Count>
                            </AttributeValue>
                        </MajorAttributeSummary>
                        <Issue iid="92E48BD42982594AB467F3E28F324EA1" ruleID="116373B0-38D5-4932-82BC-3F4BFB082B96">
                            <Category>Weak Cryptographic Hash: Hardcoded PBE Salt</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>A hardcoded salt can compromise system security in a way that cannot be easily remedied.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Encoding.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/Encoding.java</FilePath>
<LineStart>531</LineStart>
<Snippet>		{

			PBEParameterSpec ps = new javax.crypto.spec.PBEParameterSpec( salt, 20 );

			SecretKeyFactory kf = SecretKeyFactory.getInstance( "PBEWithMD5AndDES" );</Snippet>
<TargetFunction>PBEParameterSpec()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="8B13739BB057E3CB77B3D988625266C9" ruleID="116373B0-38D5-4932-82BC-3F4BFB082B96">
                            <Category>Weak Cryptographic Hash: Hardcoded PBE Salt</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>A hardcoded salt can compromise system security in a way that cannot be easily remedied.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Encoding.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/Encoding.java</FilePath>
<LineStart>487</LineStart>
<Snippet>		{

			PBEParameterSpec ps = new javax.crypto.spec.PBEParameterSpec( salt, 20 );

			SecretKeyFactory kf = SecretKeyFactory.getInstance( "PBEWithMD5AndDES" );</Snippet>
<TargetFunction>PBEParameterSpec()</TargetFunction>
                            </Primary>
                        </Issue>
                    </GroupingSection>
                    <GroupingSection count="2">
                        <groupTitle>Weak Encryption: Insecure Mode of Operation</groupTitle>
                        <MajorAttributeSummary>
                            <MetaInfo>
<Name>Abstract</Name>
<Value>The function decryptString() in Encoding.java uses a cryptographic encryption algorithm with an insecure mode of operation on line 491.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Explanation</Name>
<Value>The mode of operation of a block cipher is an algorithm that describes how to repeatedly apply a cipher's single-block operation to securely transform amounts of data larger than a block. Some modes of operation include Electronic Codebook (ECB), Cipher Block Chaining (CBC), Cipher Feedback (CFB), and Counter (CTR).

ECB mode is inherently weak, as it produces the same ciphertext for identical blocks of plain text. CBC mode is vulnerable to padding oracle attacks. CTR mode is the superior choice because it does not have these weaknesses.

Example 1: The following code uses the AES cipher with ECB mode:


...
SecretKeySpec key = new SecretKeySpec(keyBytes, "AES");
Cipher cipher = Cipher.getInstance("AES/ECB/PKCS7Padding", "BC");
cipher.init(Cipher.ENCRYPT_MODE, key);
...
</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Recommendations</Name>
<Value>Avoid using ECB and CBC modes of operation when encrypting data larger than a block. CBC mode is somewhat inefficient and poses a serious risk if used with SSL [1]. Instead, use CCM (Counter with CBC-MAC) mode or, if performance is a concern, GCM (Galois/Counter Mode) mode where they are available.

Example 2: The following code uses the AES cipher with GCM mode:


...
SecretKeySpec key = new SecretKeySpec(keyBytes, "AES");
Cipher cipher = Cipher.getInstance("AES/GCM/PKCS5Padding", "BC");
cipher.init(Cipher.ENCRYPT_MODE, key);
...


In general, the mode of operation has minimal effect on RSA security. However, it is crucial to have secure padding, such as OAEP padding with SHA-2 hashing, for secure encryption, when you employ ECB or any other mode of operation.

Example 3: The following code performs encryption with an RSA public key using ECB with OAEP padding:

  public Cipher getRSACipher() {
    Cipher rsa = null;
    try {
      rsa = javax.crypto.Cipher.getInstance("RSA/ECB/OAEPWithSHA-256AndMGF1Padding");
    }
    catch (java.security.NoSuchAlgorithmException e) {
       handleMissingAlgorithm();
    }
    catch (javax.crypto.NoSuchPaddingException e) {
       handleMissingAlgorithm();
    }
    return rsa;
  }
</Value>
                            </MetaInfo>
                            <AttributeValue>
<Name>&lt;Unaudited&gt;</Name>
<Count>2</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not an Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Reliability Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Bad Practice</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Suspicious</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Exploitable</Name>
<Count>0</Count>
                            </AttributeValue>
                        </MajorAttributeSummary>
                        <Issue iid="3743303A5389ECF1D80BF2FA920372B0" ruleID="BE418AF6-534F-4812-AE94-314B8EFBFAC7">
                            <Category>Weak Encryption: Insecure Mode of Operation</Category>
                            <Folder>High</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>The function decryptString() in Encoding.java uses a cryptographic encryption algorithm with an insecure mode of operation on line 491.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>Encoding.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/Encoding.java</FilePath>
<LineStart>491</LineStart>
<Snippet>			SecretKeyFactory kf = SecretKeyFactory.getInstance( "PBEWithMD5AndDES" );

			Cipher passwordDecryptCipher = Cipher.getInstance( "PBEWithMD5AndDES/CBC/PKCS5Padding" );

			char[] pass = pw.toCharArray();</Snippet>
<TargetFunction>getInstance()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="7925BEA09F38B12AAAF1E201C2146528" ruleID="BE418AF6-534F-4812-AE94-314B8EFBFAC7">
                            <Category>Weak Encryption: Insecure Mode of Operation</Category>
                            <Folder>High</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>The function encryptString() in Encoding.java uses a cryptographic encryption algorithm with an insecure mode of operation on line 535.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>Encoding.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/Encoding.java</FilePath>
<LineStart>535</LineStart>
<Snippet>			SecretKeyFactory kf = SecretKeyFactory.getInstance( "PBEWithMD5AndDES" );

			Cipher passwordEncryptCipher = Cipher.getInstance( "PBEWithMD5AndDES/CBC/PKCS5Padding" );

			char[] pass = pw.toCharArray();</Snippet>
<TargetFunction>getInstance()</TargetFunction>
                            </Primary>
                        </Issue>
                    </GroupingSection>
                    <GroupingSection count="1">
                        <groupTitle>Dead Code: Expression is Always true</groupTitle>
                        <MajorAttributeSummary>
                            <MetaInfo>
<Name>Abstract</Name>
<Value>The expression at Exec.java line 118 will always evaluate to true.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Explanation</Name>
<Value>This expression will always evaluate to true; the program could be rewritten in a simpler form. The nearby code may be present for debugging purposes, or it may not have been maintained along with the rest of the program. The expression may also be indicative of a bug earlier in the method.

Example 1: The following method never sets the variable secondCall after initializing it to true. (The variable firstCall is mistakenly used twice.)  The result is that the expression firstCall || secondCall will always evaluate to true, so setUpForCall() will always be invoked.


public void setUpCalls() {
  boolean firstCall = true;
  boolean secondCall = true;

  if (fCall &lt; 0) {
    cancelFCall();
    firstCall = false;
  }
  if (sCall &lt; 0) {
    cancelSCall();
    firstCall = false;
  }

  if (firstCall || secondCall) {
    setUpForCall();
  }
}


Example 2: The following method tries to check the variables firstCall and secondCall. (The variable firstCall is mistakenly set to true instead of being checked.)  The result is that the first part of the expression firstCall = true &amp;&amp; secondCall == true will always evaluate to true.


public void setUpCalls() {
  boolean firstCall = false;
  boolean secondCall = false;

  if (fCall &gt; 0) {
    setUpFCall();
    firstCall = true;
  }
  if (sCall &gt; 0) {
    setUpSCall();
    secondCall = true;
  }

  if (firstCall = true &amp;&amp; secondCall == true) {
    setUpDualCall();
  }
}
</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Recommendations</Name>
<Value>In general, you should repair or remove unused code. It causes additional complexity and maintenance burden without contributing to the functionality of the program.</Value>
                            </MetaInfo>
                            <AttributeValue>
<Name>&lt;Unaudited&gt;</Name>
<Count>1</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not an Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Reliability Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Bad Practice</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Suspicious</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Exploitable</Name>
<Count>0</Count>
                            </AttributeValue>
                        </MajorAttributeSummary>
                        <Issue iid="35B1A24AE1C99BABD71707D91064696B" ruleID="0C82D0B5-1B23-4D56-B38E-F6263A454766">
                            <Category>Dead Code: Expression is Always true</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>The expression at Exec.java line 118 will always evaluate to true.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Exec.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/util/Exec.java</FilePath>
<LineStart>118</LineStart>
<Snippet>
	    // Write to the child process' input stream
	    if ((input != null) &amp;&amp; !input.equals(""))
	    {
		try</Snippet>
<TargetFunction>IfStatement()</TargetFunction>
                            </Primary>
                        </Issue>
                    </GroupingSection>
                    <GroupingSection count="1">
                        <groupTitle>Dynamic Code Evaluation: Code Injection</groupTitle>
                        <MajorAttributeSummary>
                            <MetaInfo>
<Name>Abstract</Name>
<Value>The file menu_system.js interprets unvalidated user input as source code on line 137. Interpreting user-controlled instructions at run-time can allow attackers to execute malicious code.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Explanation</Name>
<Value>Many modern programming languages allow dynamic interpretation of source instructions. This capability allows programmers to perform dynamic instructions based on input received from the user. Code injection vulnerabilities occur when the programmer incorrectly assumes that instructions supplied directly from the user will perform only innocent operations, such as performing simple calculations on active user objects or otherwise modifying the user's state. However, without proper validation, a user might specify operations the programmer does not intend.


Example: In this classic code injection example, the application implements a basic calculator that allows the user to specify commands for execution.


...
	userOp = form.operation.value;
	calcResult = eval(userOp);
...


The program behaves correctly when the operation parameter is a benign value, such as "8 + 7 * 2", in which case the calcResult variable is assigned a value of 22. However, if an attacker specifies languages operations that are both valid and malicious, those operations would be executed with the full privilege of the parent process. Such attacks are even more dangerous when the underlying language provides access to system resources or allows execution of system commands. In the case of JavaScript, the attacker may utilize this vulnerability to perform a cross-site scripting attack.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Recommendations</Name>
<Value>Avoid dynamic code interpretation whenever possible. If your program's functionality requires code to be interpreted dynamically, the likelihood of attack can be minimized by constraining the code your program will execute dynamically as much as possible, limiting it to an application- and context-specific subset of the base programming language.

If dynamic code execution is required, unvalidated user input should never be directly executed and interpreted by the application. Instead, use a level of indirection: create a list of legitimate operations and data objects that users are allowed to specify, and only allow users to select from the list. With this approach, input provided by users is never executed directly.</Value>
                            </MetaInfo>
                            <AttributeValue>
<Name>&lt;Unaudited&gt;</Name>
<Count>1</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not an Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Reliability Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Bad Practice</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Suspicious</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Exploitable</Name>
<Count>0</Count>
                            </AttributeValue>
                        </MajorAttributeSummary>
                        <Issue iid="B805D6EDA497542E8E1EF523A376630D" ruleID="A1172BFC-2902-4E59-A9C7-C80B132F30CD0">
                            <Category>Dynamic Code Evaluation: Code Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The file menu_system.js interprets unvalidated user input as source code on line 137. Interpreting user-controlled instructions at run-time can allow attackers to execute malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>menu_system.js</FileName>
<FilePath>WebContent/javascript/menu_system.js</FilePath>
<LineStart>137</LineStart>
<Snippet>  if(nv.length&gt;0){if(unescape(nv[0])==param){
  mn="menu"+unescape(nv[1]);
  eval("trigMenuMagic1('"+mn+"',"+opt+")");}}}}
  }
  </Snippet>
<TargetFunction>eval()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>menu_system.js</FileName>
<FilePath>WebContent/javascript/menu_system.js</FilePath>
<LineStart>132</LineStart>
<Snippet>function trigMM1url(param,opt){
  var ur,x,i,nv,mn,pr=new Array();
  ur=document.URL;x=ur.indexOf("?");
  if(x&gt;1){pr=ur.substring(x+1,ur.length).split("&amp;");
  for(i=0;i&lt;pr.length;i++){nv=pr[i].split("=");</Snippet>
<TargetFunction>Read document.URL()</TargetFunction>
                            </Source>
                        </Issue>
                    </GroupingSection>
                    <GroupingSection count="1">
                        <groupTitle>Insecure Randomness</groupTitle>
                        <MajorAttributeSummary>
                            <MetaInfo>
<Name>Abstract</Name>
<Value>The random number generator implemented by random() cannot withstand a cryptographic attack.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Explanation</Name>
<Value>Insecure randomness errors occur when a function that can produce predictable values is used as a source of randomness in a security-sensitive context.

Computers are deterministic machines, and as such are unable to produce true randomness. Pseudorandom Number Generators (PRNGs) approximate randomness algorithmically, starting with a seed from which subsequent values are calculated.

There are two types of PRNGs: statistical and cryptographic. Statistical PRNGs provide useful statistical properties, but their output is highly predictable and form an easy to reproduce numeric stream that is unsuitable for use in cases where security depends on generated values being unpredictable. Cryptographic PRNGs address this problem by generating output that is more difficult to predict. For a value to be cryptographically secure, it must be impossible or highly improbable for an attacker to distinguish between the generated random value and a truly random value. In general, if a PRNG algorithm is not advertised as being cryptographically secure, then it is probably a statistical PRNG and should not be used in security-sensitive contexts, where its use can lead to serious vulnerabilities such as easy-to-guess temporary passwords, predictable cryptographic keys, session hijacking, and DNS spoofing.

Example: The following code uses a statistical PRNG to create a URL for a receipt that remains active for some period of time after a purchase.


String GenerateReceiptURL(String baseUrl) {
    Random ranGen = new Random();
    ranGen.setSeed((new Date()).getTime());
    return (baseUrl + ranGen.nextInt(400000000) + ".html");
}


This code uses the Random.nextInt() function to generate "unique" identifiers for the receipt pages it generates. Since Random.nextInt() is a statistical PRNG, it is easy for an attacker to guess the strings it generates. Although the underlying design of the receipt system is also faulty, it would be more secure if it used a random number generator that did not produce predictable receipt identifiers, such as a cryptographic PRNG.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Recommendations</Name>
<Value>When unpredictability is critical, as is the case with most security-sensitive uses of randomness, use a cryptographic PRNG. Regardless of the PRNG you choose, always use a value with sufficient entropy to seed the algorithm. (Do not use values such as the current time because it offers only negligible entropy.)

The Java language provides a cryptographic PRNG in java.security.SecureRandom. As is the case with other algorithm-based classes in java.security, SecureRandom provides an implementation-independent wrapper around a particular set of algorithms. When you request an instance of a SecureRandom object using SecureRandom.getInstance(), you can request a specific implementation of the algorithm. If the algorithm is available, then it is given as a SecureRandom object. If it is unavailable or if you do not specify a particular implementation, then you are given a SecureRandom implementation selected by the system.

Sun provides a single SecureRandom implementation with the Java distribution named SHA1PRNG, which Sun describes as computing:

"The SHA-1 hash over a true-random seed value concatenated with a 64-bit counter which is incremented by 1 for each operation. From the 160-bit SHA-1 output, only 64 bits are used [1]."

However, the specifics of the Sun implementation of the SHA1PRNG algorithm are poorly documented, and it is unclear what sources of entropy the implementation uses and therefore what amount of true randomness exists in its output. Although there is speculation on the Web about the Sun implementation, there is no evidence to contradict the claim that the algorithm is cryptographically strong and can be used safely in security-sensitive contexts.</Value>
                            </MetaInfo>
                            <AttributeValue>
<Name>&lt;Unaudited&gt;</Name>
<Count>1</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not an Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Reliability Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Bad Practice</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Suspicious</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Exploitable</Name>
<Count>0</Count>
                            </AttributeValue>
                        </MajorAttributeSummary>
                        <Issue iid="478C6A9953C6D2996ECAB34ED911B6A0" ruleID="57E7AB18-082F-4C18-8DE1-4115DB3917A3">
                            <Category>Insecure Randomness</Category>
                            <Folder>High</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>The random number generator implemented by random() cannot withstand a cryptographic attack.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>WeakSessionID.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/WeakSessionID.java</FilePath>
<LineStart>77</LineStart>
<Snippet>    protected static List&lt;String&gt; sessionList = new ArrayList&lt;String&gt;();

    protected static long seq = Math.round(Math.random() * 10240) + 10000;

    protected static long lastTime = System.currentTimeMillis();</Snippet>
<TargetFunction>random()</TargetFunction>
                            </Primary>
                        </Issue>
                    </GroupingSection>
                    <GroupingSection count="1">
                        <groupTitle>J2EE Bad Practices: Sockets</groupTitle>
                        <MajorAttributeSummary>
                            <MetaInfo>
<Name>Abstract</Name>
<Value>The method doFilter() in Interceptor.java calls Socket(). Socket-based communication in web applications is prone to error.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Explanation</Name>
<Value>The J2EE standard permits the use of sockets only for the purpose of communication with legacy systems when no higher-level protocol is available. Authoring your own communication protocol requires wrestling with difficult security issues, including:

- In-band versus out-of-band signaling

- Compatibility between protocol versions

- Channel security

- Error handling

- Network constraints (firewalls)

- Session management

Without significant scrutiny by a security expert, chances are good that a custom communication protocol will suffer from security problems.

Many of the same issues apply to a custom implementation of a standard protocol. While there are usually more resources available that address security concerns related to implementing a standard protocol, these resources are also available to attackers.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Recommendations</Name>
<Value>Replace a custom communication protocol with an industry standard protocol or framework. Consider whether you can use a protocol such as HTTP, FTP, SMTP, CORBA, RMI/IIOP, EJB, or SOAP.

Consider the security track record of the protocol implementation you choose.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Tips</Name>
<Value>1. If you are auditing a non-J2EE Java application, the J2EE Bad Practices categories might not apply to your environment. If this is the case, you can use Audit Guide to suppress these issues.</Value>
                            </MetaInfo>
                            <AttributeValue>
<Name>&lt;Unaudited&gt;</Name>
<Count>1</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not an Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Reliability Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Bad Practice</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Suspicious</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Exploitable</Name>
<Count>0</Count>
                            </AttributeValue>
                        </MajorAttributeSummary>
                        <Issue iid="45A23F71D11BF7CC82AD74A1C9CD62B5" ruleID="73B5DD01-BFBE-4CD5-8759-C432873136FB">
                            <Category>J2EE Bad Practices: Sockets</Category>
                            <Folder>Low</Folder>
                            <Kingdom>API Abuse</Kingdom>
                            <Abstract>The method doFilter() in Interceptor.java calls Socket(). Socket-based communication in web applications is prone to error.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Interceptor.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/util/Interceptor.java</FilePath>
<LineStart>93</LineStart>
<Snippet>		    &amp;&amp; osgServerPort != null &amp;&amp; osgServerPort.length() != 0)
	    {
		osgSocket = new Socket(osgServerName, Integer
			.parseInt(osgServerPort));
		if (osgSocket != null)</Snippet>
<TargetFunction>Socket()</TargetFunction>
                            </Primary>
                        </Issue>
                    </GroupingSection>
                    <GroupingSection count="1">
                        <groupTitle>J2EE Misconfiguration: Excessive Servlet Mappings</groupTitle>
                        <MajorAttributeSummary>
                            <MetaInfo>
<Name>Abstract</Name>
<Value>Multiple URL patterns map to a single Servlet, which often indicates poor a architecture or a lack of standardization.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Explanation</Name>
<Value>Multiple URL patterns that map to a single Servlet could be a sign that the Servlet performs too many functions.



Example 1: The following example maps five URL patterns to a single Servlet.

&lt;servlet&gt;
    &lt;servlet-class&gt;com.class.MyServlet&lt;/servlet-class&gt;
    &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;
&lt;/servlet&gt;

&lt;servlet-mapping&gt;
    &lt;servlet-name&gt;MyServlet&lt;/servlet-name&gt;
    &lt;url-pattern&gt;/myservlet&lt;/url-pattern&gt;
&lt;/servlet-mapping&gt;

&lt;servlet-mapping&gt;
    &lt;servlet-name&gt;MyServlet&lt;/servlet-name&gt;
    &lt;url-pattern&gt;/helloworld*&lt;/url-pattern&gt;
&lt;/servlet-mapping&gt;

&lt;servlet-mapping&gt;
    &lt;servlet-name&gt;MyServlet&lt;/servlet-name&gt;
    &lt;url-pattern&gt;/servlet*&lt;/url-pattern&gt;
&lt;/servlet-mapping&gt;

&lt;servlet-mapping&gt;
    &lt;servlet-name&gt;MyServlet&lt;/servlet-name&gt;
    &lt;url-pattern&gt;/mservlet*&lt;/url-pattern&gt;
&lt;/servlet-mapping&gt;

&lt;servlet-mapping&gt;
    &lt;servlet-name&gt;MyServlet&lt;/servlet-name&gt;
    &lt;url-pattern&gt;/*&lt;/url-pattern&gt;
&lt;/servlet-mapping&gt;
&#13;
This category was derived from the Cigital Java Rulepack.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Recommendations</Name>
<Value>Split up the functionality of any Servlet that performs several functions into separate Servlets, each with its own URL mapping and singular functionality. This is especially important in Servlets that perform privileged or otherwise sensitive operations because it reduces the number of paths of entry to that functionality.

Example 2: The following example maps one URL pattern to a single Servlet.

&lt;servlet&gt;
    &lt;servlet-name&gt;MyServlet&lt;/servlet-name&gt;
    &lt;servlet-class&gt;com.class.MyServlet&lt;/servlet-class&gt;
    &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;
&lt;/servlet&gt;

&lt;servlet-mapping&gt;
    &lt;servlet-name&gt;MyServlet&lt;/servlet-name&gt;
    &lt;url-pattern&gt;/myservlet&lt;/url-pattern&gt;
&lt;/servlet-mapping&gt;
</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Tips</Name>
<Value>1. Fortify Static Code Analyzer will report issues when a Servlet has more than three servlet mappings.</Value>
                            </MetaInfo>
                            <AttributeValue>
<Name>&lt;Unaudited&gt;</Name>
<Count>1</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not an Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Reliability Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Bad Practice</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Suspicious</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Exploitable</Name>
<Count>0</Count>
                            </AttributeValue>
                        </MajorAttributeSummary>
                        <Issue iid="E11F263227031B7EBEBEBA1EA7476158" ruleID="0D9BE329-46FC-420F-A0A1-0B556629300D">
                            <Category>J2EE Misconfiguration: Excessive Servlet Mappings</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Environment</Kingdom>
                            <Abstract>Multiple URL patterns map to a single Servlet, which often indicates poor a architecture or a lack of standardization.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>web.xml</FileName>
<FilePath>WebContent/WEB-INF/web.xml</FilePath>
<LineStart>200</LineStart>
<Snippet>

    &lt;servlet-mapping&gt;
      &lt;servlet-name&gt;AxisServlet&lt;/servlet-name&gt;
      &lt;url-pattern&gt;/servlet/AxisServlet&lt;/url-pattern&gt;</Snippet>
                            </Primary>
                        </Issue>
                    </GroupingSection>
                    <GroupingSection count="1">
                        <groupTitle>J2EE Misconfiguration: Excessive Session Timeout</groupTitle>
                        <MajorAttributeSummary>
                            <MetaInfo>
<Name>Abstract</Name>
<Value>An overly long session timeout gives attackers more time to potentially compromise user accounts.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Explanation</Name>
<Value>The longer a session stays open, the larger the window of opportunity an attacker has to compromise user accounts. While a session remains active, an attacker may be able to brute-force a user's password, crack a user's wireless encryption key, or commandeer a session from an open browser. Longer session timeouts can also prevent memory from being released and eventually result in a denial of service if a sufficiently large number of sessions are created.

Example 1: If the session timeout is zero or less than zero, the session never expires. The following example shows a session timeout set to -1, which will cause the session to remain active indefinitely.

&lt;session-config&gt;
    &lt;session-timeout&gt;-1&lt;/session-timeout&gt;
&lt;/session-config&gt;


The &lt;session-timeout&gt; tag defines the default session timeout interval for all sessions in the web application. If the &lt;session-timeout&gt; tag is missing, it is left to the container to set the default timeout.&#13;
This category was derived from the Cigital Java Rulepack.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Recommendations</Name>
<Value>Set a session timeout that is 30 minutes or less, which both allows users to interact with the application over a period of time and provides a reasonable bound for the window of attack.

Example 2: The following example sets the session timeout to 20 minutes.

&lt;session-config&gt;
  &lt;session-timeout&gt;20&lt;/session-timeout&gt;
&lt;/session-config&gt;
</Value>
                            </MetaInfo>
                            <AttributeValue>
<Name>&lt;Unaudited&gt;</Name>
<Count>1</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not an Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Reliability Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Bad Practice</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Suspicious</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Exploitable</Name>
<Count>0</Count>
                            </AttributeValue>
                        </MajorAttributeSummary>
                        <Issue iid="C2F39B963AB1AFACD8D57325EEAF747F" ruleID="B7ED276F-524D-444B-8930-7D77535BF0D0">
                            <Category>J2EE Misconfiguration: Excessive Session Timeout</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Environment</Kingdom>
                            <Abstract>An overly long session timeout gives attackers more time to potentially compromise user accounts.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>web.xml</FileName>
<FilePath>WebContent/WEB-INF/web.xml</FilePath>
<LineStart>248</LineStart>
<Snippet>         HttpSession.getMaxInactiveInterval(). --&gt;

    &lt;session-config&gt;
    	&lt;!-- 2 days --&gt;
        &lt;session-timeout&gt;2880&lt;/session-timeout&gt;</Snippet>
                            </Primary>
                        </Issue>
                    </GroupingSection>
                    <GroupingSection count="1">
                        <groupTitle>J2EE Misconfiguration: Missing Servlet Mapping</groupTitle>
                        <MajorAttributeSummary>
                            <MetaInfo>
<Name>Abstract</Name>
<Value>A Servlet defined in web.xml cannot be accessed without a corresponding servlet mapping.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Explanation</Name>
<Value>The absence of a valid servlet mapping prevents all access to the unmapped servlet.



Example 1: The following entry from web.xml defines ExampleServlet but fails to define a corresponding servlet mapping.

&lt;web-app xmlns="http://java.sun.com/xml/ns/j2ee"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd"
    version="2.4"&gt;

    &lt;servlet&gt;
      &lt;servlet-name&gt;ExampleServlet&lt;/servlet-name&gt;
      &lt;servlet-class&gt;com.class.ExampleServlet&lt;/servlet-class&gt;
      &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;
    &lt;/servlet&gt;

&lt;/web-app&gt;
&#13;
This category is from the Cigital Java Rulepack.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Recommendations</Name>
<Value>Ensure that every &lt;servlet&gt; has a corresponding &lt;servlet-mapping&gt;.

Example 2:  The following entry from web.xml defines ExampleServlet and a corresponding servlet mapping.

&lt;web-app xmlns="http://java.sun.com/xml/ns/j2ee"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd"
    version="2.4"&gt;
    &lt;servlet&gt;
        &lt;servlet-name&gt;ExampleServlet&lt;/servlet-name&gt;
        &lt;servlet-class&gt;com.class.ExampleServlet&lt;/servlet-class&gt;
        &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;
    &lt;/servlet&gt;
    &lt;servlet-mapping&gt;
        &lt;servlet-name&gt;ExampleServlet&lt;/servlet-name&gt;
        &lt;url-pattern&gt;/exampleservlet&lt;/url-pattern&gt;
    &lt;/servlet-mapping&gt;

    &lt;servlet-mapping&gt;
        &lt;servlet-name&gt;action&lt;/servlet-name&gt;
        &lt;url-pattern&gt;/action&lt;/url-pattern&gt;
    &lt;/servlet-mapping&gt;
&lt;/web-app&gt;
</Value>
                            </MetaInfo>
                            <AttributeValue>
<Name>&lt;Unaudited&gt;</Name>
<Count>1</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not an Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Reliability Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Bad Practice</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Suspicious</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Exploitable</Name>
<Count>0</Count>
                            </AttributeValue>
                        </MajorAttributeSummary>
                        <Issue iid="5E91D4245219FB0BEA8CCB65B50465D4" ruleID="8BA3B029-5DB0-434D-B202-D31FF2B64665">
                            <Category>J2EE Misconfiguration: Missing Servlet Mapping</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Environment</Kingdom>
                            <Abstract>A Servlet defined in web.xml cannot be accessed without a corresponding servlet mapping.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>web.xml</FileName>
<FilePath>WebContent/WEB-INF/web.xml</FilePath>
<LineStart>79</LineStart>
<Snippet>    &lt;/servlet&gt;
 
    &lt;servlet&gt;
      &lt;servlet-name&gt;AdminServlet&lt;/servlet-name&gt;
      &lt;display-name&gt;Axis Admin Servlet&lt;/display-name&gt;</Snippet>
                            </Primary>
                        </Issue>
                    </GroupingSection>
                    <GroupingSection count="1">
                        <groupTitle>Missing Check against Null</groupTitle>
                        <MajorAttributeSummary>
                            <MetaInfo>
<Name>Abstract</Name>
<Value>The method getNetstatResults() in Challenge2Screen.java can dereference a null-pointer on line 646 because it does not check the return value of getProperty(), which might return null.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Explanation</Name>
<Value>Just about every serious attack on a software system begins with the violation of a programmer's assumptions. After the attack, the programmer's assumptions seem flimsy and poorly founded, but before an attack many programmers would defend their assumptions well past the end of their lunch break.

Two dubious assumptions that are easy to spot in code are "this function call can never fail" and "it doesn't matter if this function call fails". When a programmer ignores the return value from a function, they implicitly state that they are operating under one of these assumptions.



Example 1:  The following code does not check to see if the string returned by getParameter() is null before calling the member function compareTo(), potentially causing a null dereference.


String itemName = request.getParameter(ITEM_NAME);
	if (itemName.compareTo(IMPORTANT_ITEM)) {
		...
	}
	...


Example 2:. The following code shows a system property that is set to null and later dereferenced by a programmer who mistakenly assumes it will always be defined.


System.clearProperty("os.name");
...
String os = System.getProperty("os.name");
if (os.equalsIgnoreCase("Windows 95") )
	System.out.println("Not supported");


The traditional defense of this coding error is:

"I know the requested value will always exist because.... If it does not exist, the program cannot perform the desired behavior so it doesn't matter whether I handle the error or simply allow the program to die dereferencing a null value."

But attackers are skilled at finding unexpected paths through programs, particularly when exceptions are involved.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Recommendations</Name>
<Value>If a function can return an error code or any other evidence of its success or failure, always check for the error condition, even if there is no obvious way for it to occur. In addition to preventing security errors, many initially mysterious bugs have eventually led back to a failed method call with an unchecked return value.

Create an easy to use and standard way for dealing with failure in your application. If error handling is straightforward, programmers will be less inclined to omit it. One approach to standardized error handling is to write wrappers around commonly-used functions that check and handle error conditions without additional programmer intervention. When wrappers are implemented and adopted, the use of non-wrapped equivalents can be prohibited and enforced by using custom rules.

Example 3: The following code implements a wrapper around getParameter() that checks the return value of getParameter() against null and uses a default value if the requested parameter is not defined.


String safeGetParameter (HttpRequest request, String name)
{
    String value = request.getParameter(name);
    if (value == null) {
        return getDefaultValue(name)
    }
    return value;
}
</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Tips</Name>
<Value>1. Watch out for programmers who want to explain away this type of issue by saying "that can never happen because ...". Chances are good that they have developed their intuition about the way the system works by using their development workstation. If your software will eventually run under different operating systems, operating system versions, hardware configurations, or runtime environments, their intuition might not apply.</Value>
                            </MetaInfo>
                            <AttributeValue>
<Name>&lt;Unaudited&gt;</Name>
<Count>1</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not an Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Reliability Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Bad Practice</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Suspicious</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Exploitable</Name>
<Count>0</Count>
                            </AttributeValue>
                        </MajorAttributeSummary>
                        <Issue iid="ACDE20A434A7B822AF9A8A04B1FCAB10" ruleID="C3693353-E32E-4B40-964A-94186E0D63B3">
                            <Category>Missing Check against Null</Category>
                            <Folder>Low</Folder>
                            <Kingdom>API Abuse</Kingdom>
                            <Abstract>The method getNetstatResults() in Challenge2Screen.java can dereference a null-pointer on line 646 because it does not check the return value of getProperty(), which might return null.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Challenge2Screen.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/Challenge2Screen.java</FilePath>
<LineStart>644</LineStart>
<Snippet>	String protocol = s.getParser().getRawParameter(PROTOCOL, "tcp");

	String osName = System.getProperty("os.name");
	ExecResults er = null;
	if (osName.indexOf("Windows") != -1)</Snippet>
<TargetFunction>osName = getProperty(?) : System.getProperty may return NULL()</TargetFunction>
                            </Primary>
                        </Issue>
                    </GroupingSection>
                    <GroupingSection count="1">
                        <groupTitle>Poor Error Handling: Throw Inside Finally</groupTitle>
                        <MajorAttributeSummary>
                            <MetaInfo>
<Name>Abstract</Name>
<Value>Using a throw statement inside a finally block breaks the logical progression through the try-catch-finally.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Explanation</Name>
<Value>In Java, finally blocks are always executed after their corresponding try-catch blocks and are often used to free allocated resources, such as file handles or database cursors. Throwing an exception in a finally block can bypass critical cleanup code since normal program execution will be disrupted.

Example 1: In the following code, the call to stmt.close() is bypassed when the FileNotFoundException is thrown.

public void processTransaction(Connection conn) throws FileNotFoundException
{
    FileInputStream fis = null;
    Statement stmt = null;
    try
    {
        stmt = conn.createStatement();
        fis = new FileInputStream("badFile.txt");
        ...
    }
    catch (FileNotFoundException fe)
    {
        log("File not found.");
    }
    catch (SQLException se)
    {
        //handle error
    }
    finally
    {
        if (fis == null)
        {
            throw new FileNotFoundException();
        }

        if (stmt != null)
        {
            try
            {
                stmt.close();
            }
            catch (SQLException e)
            {
                log(e);
            }
        }
    }
}
&#13;
This category is from the Cigital Java Rulepack.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Recommendations</Name>
<Value>Never throw exceptions from within finally blocks. If you must re-throw an exception, do it inside a catch block so as not to interrupt the normal execution of the finally block.
Example 2: The following code re-throws the FileNotFoundException in the catch block.

public void processTransaction(Connection conn) throws FileNotFoundException
{
    FileInputStream fis = null;
    Statement stmt = null;
    try
    {
        stmt = conn.createStatement();
        fis = new FileInputStream("badFile.txt");
        ...
    }
    catch (FileNotFoundException fe)
    {
        log("File not found.");
        throw fe;
    }
    catch (SQLException se)
    {
        //handle error
    }
    finally
    {
        if (fis != null)
        {
            try
            {
                fis.close();
            }
            catch (IOException ie)
            {
                log(ie);
            }
        }

        if (stmt != null)
        {
            try
            {
                stmt.close();
            }
            catch (SQLException e)
            {
                log(e);
            }
        }
    }
}
</Value>
                            </MetaInfo>
                            <AttributeValue>
<Name>&lt;Unaudited&gt;</Name>
<Count>1</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not an Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Reliability Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Bad Practice</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Suspicious</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Exploitable</Name>
<Count>0</Count>
                            </AttributeValue>
                        </MajorAttributeSummary>
                        <Issue iid="E30D52CCAA66CE83C3454BBA93592366" ruleID="1F50410E-C148-415D-94A1-38D911C45919">
                            <Category>Poor Error Handling: Throw Inside Finally</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>Using a throw statement inside a finally block breaks the logical progression through the try-catch-finally.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Interceptor.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/util/Interceptor.java</FilePath>
<LineStart>118</LineStart>
<Snippet>	}
	finally
	{
	    if (out != null)
	    {</Snippet>
<TargetFunction>FinallyBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                    </GroupingSection>
                    <GroupingSection count="1">
                        <groupTitle>Poor Style: Confusing Naming</groupTitle>
                        <MajorAttributeSummary>
                            <MetaInfo>
<Name>Abstract</Name>
<Value>The class UserTracker contains a field and a method both named instance, which is confusing.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Explanation</Name>
<Value>It is confusing to have a member field and a method with the same name. It makes it easy for a programmer to accidentally call the method when attempting to access the field or vice versa.

Example 1:


public class Totaller {
  private int total;
  public int total() {
    ...
  }
}
</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Recommendations</Name>
<Value>Rename either the method or the field. If the method returns the field, consider following the standard getter/setter naming convention.

Example 2: The code in Example 1 could be rewritten in the following way:


public class Totaller {
  private int total;
  public int getTotal() {
    ...
  }
}
</Value>
                            </MetaInfo>
                            <AttributeValue>
<Name>&lt;Unaudited&gt;</Name>
<Count>1</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not an Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Reliability Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Bad Practice</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Suspicious</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Exploitable</Name>
<Count>0</Count>
                            </AttributeValue>
                        </MajorAttributeSummary>
                        <Issue iid="54F30CBCD507B01E1FA9ABBBCFE3B1AD" ruleID="FE7263A8-4A1C-4048-9F53-5B892AC7533A">
                            <Category>Poor Style: Confusing Naming</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>The class UserTracker contains a field and a method both named instance, which is confusing.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>UserTracker.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/UserTracker.java</FilePath>
<LineStart>49</LineStart>
<Snippet>{

    private static UserTracker instance;

    // FIXME: persist this somehow!</Snippet>
<TargetFunction>Field: instance()</TargetFunction>
                            </Primary>
                        </Issue>
                    </GroupingSection>
                    <GroupingSection count="1">
                        <groupTitle>XML Entity Expansion Injection</groupTitle>
                        <MajorAttributeSummary>
                            <MetaInfo>
<Name>Abstract</Name>
<Value>The XML parser configured in WsSAXInjection.java:179 does not prevent nor limit Document Type Definition (DTD) entity resolution. This can expose the parser to an XML Entity Expansion injection.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Explanation</Name>
<Value>XML Entity Expansion injection also known as XML Bombs are Denial Of Service (DoS) attacks that benefit from valid and well-formed XML blocks that expand exponentially until they exhaust the server allocated resources. XML allows to define custom entities which act as string substitution macros. By nesting recurrent entity resolutions, an attacker may easily crash the server resources.

The following XML document shows an example of an XML Bomb.

&lt;?xml version="1.0"?&gt;
&lt;!DOCTYPE lolz [
  &lt;!ENTITY lol "lol"&gt;
  &lt;!ENTITY lol2 "&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;"&gt;
  &lt;!ENTITY lol3 "&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;"&gt;
  &lt;!ENTITY lol4 "&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;"&gt;
  &lt;!ENTITY lol5 "&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;"&gt;
  &lt;!ENTITY lol6 "&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;"&gt;
  &lt;!ENTITY lol7 "&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;"&gt;
  &lt;!ENTITY lol8 "&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;"&gt;
  &lt;!ENTITY lol9 "&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;"&gt;
]&gt;
&lt;lolz&gt;&amp;lol9;&lt;/lolz&gt;


This test could crash the server by expanding the small XML document into more than 3GB in memory.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Recommendations</Name>
<Value>An XML parser should be configured securely so that it does not allow document type definition (DTD) custom entities as part of an incoming XML document.

To avoid XML Entity Expansion injection the "secure-processing" property should be set for an XML factory, parser or reader:

factory.setFeature("http://javax.xml.XMLConstants/feature/secure-processing", true);


In JAXP 1.3 and earlier versions, when the secure processing feature is on, default limitations are set for DOM and SAX parsers. These limits are:

entityExpansionLimit = 64,000
elementAttributeLimit = 10,000

Since JAXP 1.4, the secure processing feature is turned on by default. In addition to the preceding limits, a new maxOccur limit is added to the validating parser. The limit is:

maxOccur = 5,000


If inline DOCTYPE declaration is not needed, it can be completely disabled with the following property:

factory.setFeature("http://apache.org/xml/features/disallow-doctype-decl", true);
</Value>
                            </MetaInfo>
                            <AttributeValue>
<Name>&lt;Unaudited&gt;</Name>
<Count>1</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not an Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Reliability Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Bad Practice</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Suspicious</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Exploitable</Name>
<Count>0</Count>
                            </AttributeValue>
                        </MajorAttributeSummary>
                        <Issue iid="4FE95D19CAE2AEDCFC54CC8F9D510150" ruleID="4C61DD8D-70DA-4444-9DBF-6817387B1ED9">
                            <Category>XML Entity Expansion Injection</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The XML parser configured in WsSAXInjection.java:179 does not prevent nor limit Document Type Definition (DTD) entity resolution. This can expose the parser to an XML Entity Expansion injection.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>WsSAXInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/WsSAXInjection.java</FilePath>
<LineStart>179</LineStart>
<Snippet>	    PasswordChanger changer = new PasswordChanger();
	    reader.setContentHandler(changer);
	    reader.parse(new InputSource(new StringReader(xml)));
	    if (!"101".equals(changer.getId()))
	    {</Snippet>
<TargetFunction>reader.parse(...) : XML document parsed allowing external entity resolution()</TargetFunction>
                            </Primary>
                        </Issue>
                    </GroupingSection>
                    <GroupingSection count="1">
                        <groupTitle>XML External Entity Injection</groupTitle>
                        <MajorAttributeSummary>
                            <MetaInfo>
<Name>Abstract</Name>
<Value>XML parser configured in WsSAXInjection.java:179 does not prevent nor limit external entities resolution. This can expose the parser to an XML External Entities attack.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Explanation</Name>
<Value>XML External Entities attacks benefit from an XML feature to build documents dynamically at the time of processing. An XML entity allows inclusion of data dynamically from a given resource. External entities allow an XML document to include data from an external URI. Unless configured to do otherwise, external entities force the XML parser to access the resource specified by the URI, e.g., a file on the local machine or on a remote system. This behavior exposes the application to XML External Entity (XXE) attacks, which can be used to perform denial of service of the local system, gain unauthorized access to files on the local machine, scan remote machines, and perform denial of service of remote systems.

The following XML document shows an example of an XXE attack.

&lt;?xml version="1.0" encoding="ISO-8859-1"?&gt;
 &lt;!DOCTYPE foo [
  &lt;!ELEMENT foo ANY &gt;
  &lt;!ENTITY xxe SYSTEM "file:///dev/random" &gt;]&gt;&lt;foo&gt;&amp;xxe;&lt;/foo&gt;


This example could crash the server (on a UNIX system), if the XML parser attempts to substitute the entity with the contents of the /dev/random file.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Recommendations</Name>
<Value>An XML parser should be configured securely so that it does not allow external entities as part of an incoming XML document.

To avoid XXE injections the following properties should be set for an XML factory, parser or reader:


factory.setFeature("http://xml.org/sax/features/external-general-entities", false);
factory.setFeature("http://xml.org/sax/features/external-parameter-entities", false);


If inline DOCTYPE declaration is not needed, it can be completely disabled with the following property:

factory.setFeature("http://apache.org/xml/features/disallow-doctype-decl", true);
</Value>
                            </MetaInfo>
                            <AttributeValue>
<Name>&lt;Unaudited&gt;</Name>
<Count>1</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not an Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Reliability Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Bad Practice</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Suspicious</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Exploitable</Name>
<Count>0</Count>
                            </AttributeValue>
                        </MajorAttributeSummary>
                        <Issue iid="B2FAB412E77238053DE8BD10D76E85D8" ruleID="93A88C53-D00C-4A86-9747-D9A0B3176085">
                            <Category>XML External Entity Injection</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>XML parser configured in WsSAXInjection.java:179 does not prevent nor limit external entities resolution. This can expose the parser to an XML External Entities attack.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>WsSAXInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/WsSAXInjection.java</FilePath>
<LineStart>179</LineStart>
<Snippet>	    PasswordChanger changer = new PasswordChanger();
	    reader.setContentHandler(changer);
	    reader.parse(new InputSource(new StringReader(xml)));
	    if (!"101".equals(changer.getId()))
	    {</Snippet>
<TargetFunction>reader.parse(...) : XML document parsed allowing external entity resolution()</TargetFunction>
                            </Primary>
                        </Issue>
                    </GroupingSection>
                </Chart>
            </IssueListing>
        </SubSection>
    </ReportSection>
</ReportDefinition>
